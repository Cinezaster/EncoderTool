
.vsteensy/build/01_HelloEncoder.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`PM......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	6000129c <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	6000133c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	600016b8 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	600016b0 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	600013a0 <usb_init>
	analog_init();
600011e4:	bl	6000148c <analog_init>
	pwm_init();
600011e8:	bl	600016d8 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	600014e4 <tempmon_init>

	startup_late_hook();
600011f0:	bl	600016e8 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	600016e0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	600016f0 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaab
60001210:	.word	0x00200007
60001214:	.word	0x20078000
60001218:	.word	0x00000000
6000121c:	.word	0x60001700
60001220:	.word	0x00002a50
60001224:	.word	0x20000000
60001228:	.word	0x6000415c
6000122c:	.word	0x20000c00
60001230:	.word	0x20000c00
60001234:	.word	0x200032c0
60001238:	.word	0xe000ed88
6000123c:	.word	0x20000ffc
60001240:	.word	0x000007c5
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x000005b5
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x000006b9
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x20000c54
6000127c:	.word	0x23c34600
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20000c5c
60001290:	.word	0x20001000
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <configure_cache>:
#define SIZE_32M	(SCB_MPU_RASR_SIZE(24) | SCB_MPU_RASR_ENABLE)
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
6000129c:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000129e:	ldr	r2, [pc, #100]	; (60001304 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012a2:	ldr	r3, [pc, #100]	; (60001308 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012a4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	ldr	r0, [pc, #96]	; (6000130c <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012aa:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ac:	ldr	r6, [pc, #96]	; (60001310 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ae:	ldr	r5, [pc, #100]	; (60001314 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b0:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012b2:	ldr	r7, [pc, #100]	; (60001318 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012b4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012b8:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ba:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012bc:	ldr	r6, [pc, #92]	; (6000131c <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012be:	ldr	r5, [pc, #96]	; (60001320 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012c0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012c2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012c4:	ldr	r7, [pc, #92]	; (60001324 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012c8:	ldr	r6, [pc, #92]	; (60001328 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012ca:	ldr	r5, [pc, #96]	; (6000132c <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012cc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012ce:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d0:	ldr	r7, [pc, #92]	; (60001330 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012d2:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012d4:	ldr	r6, [pc, #92]	; (60001334 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012d6:	ldr	r5, [pc, #96]	; (60001338 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012da:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012dc:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012de:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600012e0:	dsb	sy
	asm("isb");
600012e4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600012e8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600012ec:	dsb	sy
	asm("isb");
600012f0:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600012f4:	ldr.w	r3, [r2, #-136]
600012f8:	orr.w	r3, r3, #196608	; 0x30000
600012fc:	str.w	r3, [r2, #-136]
60001300:	pop	{r4, r5, r6, r7, pc}
60001302:	nop
60001304:	.word	0xe000ed9c
60001308:	.word	0xe000eda0
6000130c:	.word	0xe000ed94
60001310:	.word	0x03080025
60001314:	.word	0x00200011
60001318:	.word	0x07020021
6000131c:	.word	0x20000012
60001320:	.word	0x13080025
60001324:	.word	0x20200013
60001328:	.word	0x130b0027
6000132c:	.word	0x40000014
60001330:	.word	0x13100033
60001334:	.word	0x60000015
60001338:	.word	0x070b002f

6000133c <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
6000133c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000133e:	ldr	r2, [pc, #92]	; (6000139c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001340:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001342:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001346:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000134a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000134e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001352:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001356:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001358:	tst.w	r3, #2
6000135c:	beq.n	6000136c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000135e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001360:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001362:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001364:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001366:	tst.w	r3, #2
6000136a:	bne.n	6000135e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000136c:	tst.w	r3, #8192	; 0x2000
60001370:	bne.n	60001376 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001372:	str	r5, [r2, #20]
			continue;
60001374:	b.n	60001356 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001376:	tst.w	r3, #4096	; 0x1000
6000137a:	bne.n	60001380 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000137c:	str	r6, [r2, #20]
			continue;
6000137e:	b.n	60001356 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001380:	cmp	r3, #0
60001382:	bge.n	60001356 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001384:	tst.w	r3, #65536	; 0x10000
60001388:	beq.n	6000138e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000138a:	str	r1, [r2, #24]
			continue;
6000138c:	b.n	60001356 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000138e:	lsls	r3, r3, #25
60001390:	bmi.n	60001396 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001392:	str	r7, [r2, #20]
			continue;
60001394:	b.n	60001356 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001396:	pop	{r4, r5, r6, r7}
60001398:	bx	lr
6000139a:	nop
6000139c:	.word	0x400d8000

600013a0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013a0:	ldr	r3, [pc, #192]	; (60001464 <usb_init+0xc4>)
600013a2:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600013a6:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013a8:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013ac:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600013b0:	bl	600016c0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013b4:	ldr	r1, [pc, #176]	; (60001468 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013b6:	ldr	r0, [pc, #180]	; (6000146c <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013b8:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013bc:	ldr	r4, [pc, #176]	; (60001470 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013be:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013c2:	ldr	r3, [pc, #176]	; (60001474 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013c4:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013c8:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013cc:	ldr	r2, [r4, #0]
600013ce:	ands	r3, r2
600013d0:	cbnz	r3, 600013da <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600013d2:	ldr.w	r3, [r0, #424]	; 0x1a8
600013d6:	lsls	r2, r3, #30
600013d8:	beq.n	60001410 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013da:	ldr	r3, [pc, #144]	; (6000146c <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600013dc:	mov.w	r1, #2147483648	; 0x80000000
600013e0:	ldr	r2, [pc, #140]	; (60001470 <usb_init+0xd0>)
600013e2:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600013e4:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013e6:	ldr.w	r1, [r3, #320]	; 0x140
600013ea:	orr.w	r1, r1, #2
600013ee:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600013f2:	ldr.w	r3, [r2, #320]	; 0x140
600013f6:	lsls	r3, r3, #30
600013f8:	bmi.n	600013f2 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600013fa:	mov.w	r0, #131072	; 0x20000
600013fe:	ldr	r1, [pc, #120]	; (60001478 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001400:	ldr	r3, [pc, #108]	; (60001470 <usb_init+0xd0>)
60001402:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001406:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001408:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000140a:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000140c:	bl	600016c8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001410:	ldr	r5, [pc, #104]	; (6000147c <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001412:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001414:	ldr	r3, [pc, #88]	; (60001470 <usb_init+0xd0>)
60001416:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000141a:	ldr	r4, [pc, #80]	; (6000146c <usb_init+0xcc>)
6000141c:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000141e:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001420:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001422:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001424:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001426:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000142a:	mov.w	r2, #640	; 0x280
6000142e:	bl	600016d0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001432:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001436:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000143a:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000143e:	ldr	r2, [pc, #64]	; (60001480 <usb_init+0xe0>)
60001440:	ldr	r1, [pc, #64]	; (60001484 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001442:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001444:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001446:	str.w	r5, [r4, #344]	; 0x158
6000144a:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000144e:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001452:	ldr	r2, [pc, #52]	; (60001488 <usb_init+0xe8>)
60001454:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001458:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000145a:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000145c:	str.w	r3, [r4, #320]	; 0x140
60001460:	pop	{r4, r5, r6, pc}
60001462:	nop
60001464:	.word	0x400d8000
60001468:	.word	0x400fc000
6000146c:	.word	0x402e0000
60001470:	.word	0x400d9000
60001474:	.word	0x001e1c00
60001478:	.word	0xe000e28c
6000147c:	.word	0x20003000
60001480:	.word	0x20001000
60001484:	.word	0x000013dd
60001488:	.word	0xe000e10c

6000148c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000148c:	ldr	r3, [pc, #68]	; (600014d4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000148e:	ldr	r1, [pc, #72]	; (600014d8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001490:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001492:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001494:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001498:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000149a:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000149c:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014a2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a4:	orr.w	r0, r0, #768	; 0x300
600014a8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014aa:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014ac:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ae:	ldr	r3, [r2, #72]	; 0x48
600014b0:	lsls	r3, r3, #24
600014b2:	bmi.n	600014ae <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014b4:	ldr	r3, [pc, #36]	; (600014dc <analog_init+0x50>)
600014b6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014ba:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014bc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014be:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014c0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014c2:	ldr	r3, [r2, #72]	; 0x48
600014c4:	ands.w	r3, r3, #128	; 0x80
600014c8:	bne.n	600014c2 <analog_init+0x36>
	calibrating = 0;
600014ca:	ldr	r2, [pc, #20]	; (600014e0 <analog_init+0x54>)
600014cc:	strb	r3, [r2, #0]
}
600014ce:	pop	{r4, r5}
600014d0:	bx	lr
600014d2:	nop
600014d4:	.word	0x400fc000
600014d8:	.word	0x400c4000
600014dc:	.word	0x400c8000
600014e0:	.word	0x20000e99

600014e4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014e4:	ldr	r2, [pc, #216]	; (600015c0 <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014e6:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014e8:	ldr	r1, [pc, #216]	; (600015c4 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014ea:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ee:	ldr	r3, [r2, #0]
600014f0:	bic.w	r3, r3, #1

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

FLASHMEM void tempmon_init(void)
{
600014f4:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014f6:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014f8:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014fc:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001500:	ldr.w	lr, [pc, #212]	; 600015d8 <tempmon_init+0xf4>
60001504:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001506:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000150a:	ldr	r7, [pc, #188]	; (600015c8 <tempmon_init+0xe4>)
6000150c:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001514:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000151c:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001520:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001524:	vmov	s15, r0
60001528:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000152c:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000152e:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001532:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001536:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000153a:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000153c:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001540:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001544:	ldr	r5, [pc, #132]	; (600015cc <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001546:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000154a:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000154c:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001550:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001554:	ldr	r6, [pc, #120]	; (600015d0 <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001556:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155a:	ldr	r1, [pc, #120]	; (600015d4 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000155c:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155e:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001560:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001564:	vmov	s15, r3
60001568:	vcvt.f32.u32	s15, s15
6000156c:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001570:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001578:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000157c:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001580:	vmov	r3, s11
60001584:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001588:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158c:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001590:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001592:	and.w	r1, r1, r0, lsl #16
60001596:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000159a:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000159e:	orrs	r3, r1
600015a0:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015a4:	vmov	r3, s15
600015a8:	ldr.w	r1, [r2, #272]	; 0x110
600015ac:	ubfx	r3, r3, #0, #12
600015b0:	orrs	r3, r1
600015b2:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015b6:	ldr	r3, [r2, #0]
600015b8:	orr.w	r3, r3, #2
600015bc:	str	r3, [r2, #0]
600015be:	pop	{r4, r5, r6, r7, pc}
600015c0:	.word	0x400d8180
600015c4:	.word	0x401f4400
600015c8:	.word	0x20000ea4
600015cc:	.word	0x20000ea0
600015d0:	.word	0x20000ea8
600015d4:	.word	0x0fff0000
600015d8:	.word	0x20000e9c

600015dc <usb_string_product_name_default>:
600015dc:	..U.S.B. .S.e.r.
600015ec:	i.a.l...

600015f4 <usb_string_manufacturer_name_default>:
600015f4:	..T.e.e.n.s.y.d.
60001604:	u.i.n.o.

6000160c <string0>:
6000160c:	....

60001610 <usb_config_descriptor_12>:
60001610:	..C.....2.......
60001620:	...$....$....$..
60001630:	.$..............
60001640:	.........@......
60001650:	@...

60001654 <usb_config_descriptor_480>:
60001654:	..C.....2.......
60001664:	...$....$....$..
60001674:	.$..............
60001684:	................
60001694:	....

60001698 <qualifier_descriptor>:
60001698:	.......@....

600016a4 <_init>:
600016a4:	push	{r3, r4, r5, r6, r7, lr}
600016a6:	nop
600016a8:	pop	{r3, r4, r5, r6, r7}
600016aa:	pop	{r3}
600016ac:	mov	lr, r3
600016ae:	bx	lr

600016b0 <__startup_early_hook_veneer>:
600016b0:	ldr.w	pc, [pc]	; 600016b4 <__startup_early_hook_veneer+0x4>
600016b4:	.word	0x000007dd

600016b8 <__set_arm_clock_veneer>:
600016b8:	ldr.w	pc, [pc]	; 600016bc <__set_arm_clock_veneer+0x4>
600016bc:	.word	0x00000fe1

600016c0 <__usb_init_serialnumber_veneer>:
600016c0:	ldr.w	pc, [pc]	; 600016c4 <__usb_init_serialnumber_veneer+0x4>
600016c4:	.word	0x00001e79

600016c8 <__delay_veneer>:
600016c8:	ldr.w	pc, [pc]	; 600016cc <__delay_veneer+0x4>
600016cc:	.word	0x000002d9

600016d0 <__memset_veneer>:
600016d0:	ldr.w	pc, [pc]	; 600016d4 <__memset_veneer+0x4>
600016d4:	.word	0x00002671

600016d8 <__pwm_init_veneer>:
600016d8:	ldr.w	pc, [pc]	; 600016dc <__pwm_init_veneer+0x4>
600016dc:	.word	0x00001bc1

600016e0 <____libc_init_array_veneer>:
600016e0:	ldr.w	pc, [pc]	; 600016e4 <____libc_init_array_veneer+0x4>
600016e4:	.word	0x000020a1

600016e8 <__startup_late_hook_veneer>:
600016e8:	ldr.w	pc, [pc]	; 600016ec <__startup_late_hook_veneer+0x4>
600016ec:	.word	0x000007e1

600016f0 <__main_veneer>:
600016f0:	ldr.w	pc, [pc]	; 600016f4 <__main_veneer+0x4>
600016f4:	.word	0x00000425

600016f8 <__init_array_start>:
600016f8:	.word	0x00000045
600016fc:	.word	0x00000155

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	.short	0xb933
	}
	__enable_irq();
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	lsrs	r0, r0, #16
      3a:	movs	r0, #0
      3c:	.word	0x00000000
}
      40:	cmp	r2, #84	; 0x54
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	cbnz	r3, 5a <frame_dummy+0x16>
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	.word	0xbf004718
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	lsrs	r4, r0, #16
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	.word	0x00002a54
  ADC2_CFG = mode1;
  
  if(num >= 4){
      74:	lsrs	r0, r0, #16
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <EncoderTool::Encoder::~Encoder()>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
      7c:	ldr	r3, [r0, #32]
#include "core_pins.h"

namespace EncoderTool
{
    // Simple encoder implementation which reads phase A and B from two digital pins
    class Encoder : public EncoderBase
      7e:	.short	0xb510
      80:	mov	r4, r0
      82:	.short	0xb123
	_M_manager(_M_functor, _M_functor, __destroy_functor);
      84:	add.w	r1, r0, #24
      88:	movs	r2, #3
      8a:	.short	0x4608
      8c:	blx	r3
      8e:	.short	0x4620
      90:	pop	{r4, pc}
      92:	.short	0xbf00

00000094 <setup>:
using namespace EncoderTool;

Encoder encoder;

void setup()
{
      94:	push	{r3, r4, r5, lr}
        attachCallback(cb);
    }

    void Encoder::begin(int pinA, int pinB, CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
      96:	movs	r5, #0
      98:	.word	0x21014c10
    pinMode(LED_BUILTIN, OUTPUT);
      9c:	movs	r0, #13
      9e:	.short	0xf000
      a0:	vst3.16	{d4[0],d6[0],d8[0]}, [r1], r8
        pinMode(pinA, inputMode);
      a4:	.word	0x62e52102
      a8:	bl	3a4 <pinMode>

        this->pinB = pinB;
      ac:	.word	0x21022301
        pinMode(pinB, inputMode);
      b0:	mov	r0, r3
    void Encoder::begin(int pinA, int pinB, CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
        pinMode(pinA, inputMode);

        this->pinB = pinB;
      b2:	.short	0x6323
        pinMode(pinB, inputMode);
      b4:	bl	3a4 <pinMode>

        setCountMode(countMode);
      b8:	.word	0x46204629
      bc:	bl	1a0 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)>
static inline uint8_t digitalReadFast(uint8_t pin) __attribute__((always_inline, unused));
static inline uint8_t digitalReadFast(uint8_t pin)
{
	if (__builtin_constant_p(pin)) {
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
      c0:	mov.w	r3, #1107296256	; 0x42000000
        EncoderBase::begin(digitalReadFast(pinA), digitalReadFast(pinB)); // set start state
      c4:	.word	0x68994620
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
      c8:	ldr	r2, [r3, #8]
      ca:	.short	0xf3c1
      cc:	lsls	r0, r0, #7
      ce:	.short	0xf3c2
      d0:	lsls	r0, r0, #10
    encoder.begin(0, 1);
}
      d2:	.short	0xe8bd
      d4:	ands	r0, r7
      d6:	.short	0xf000
      d8:			; <UNDEFINED> instruction: 0xb889
      da:	nop
      dc:	.word	0x20000c1c

000000e0 <loop>:

elapsedMillis stopwatch;

void loop()
{
      e0:	push	{r3, r4, r5, r6, r7, lr}

    // Inline implementation ===============================================

    void Encoder::tick()
    {
        update(digitalReadFast(pinA), digitalReadFast(pinB));
      e2:	.short	0x4c17
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
      e4:	ldr	r1, [pc, #92]	; (144 <loop+0x64>)
      e6:	.short	0xf894
      e8:	adds	r0, #44	; 0x2c
      ea:	.short	0x4620
      ec:	ldrb.w	r2, [r4, #48]	; 0x30
      f0:	.word	0x4d15011b
      f4:	lsls	r2, r2, #4
      f6:	.short	0xf851
      f8:	b.n	102 <loop+0x22>
      fa:	add	r3, r1
      fc:	ldr	r6, [r1, r2]
      fe:	adds	r7, r1, r2
     100:	ldr.w	r1, [lr, #8]
     104:	ldr	r2, [r7, #12]
     106:	.short	0x68b6
     108:	ldr	r3, [r3, #12]
     10a:	.short	0x4216
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
     10c:	ldr	r6, [pc, #60]	; (14c <loop+0x6c>)
     10e:	ite	ne
     110:	movne	r2, #1
     112:	moveq	r2, #0
     114:	tst	r1, r3
     116:	ite	ne
     118:	movne	r1, #1
     11a:	moveq	r1, #0
     11c:	bl	1f8 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     120:	.word	0x6832682b
    encoder.tick();

    if (stopwatch > 50)
     124:	subs	r3, r3, r2
     126:	.short	0x2b32
     128:	bls.n	13c <loop+0x5c>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
     12a:	.short	0x6821
     12c:	ldr	r0, [pc, #32]	; (150 <loop+0x70>)
     12e:	bl	7ac <Print::print(long)>
     132:	.short	0x4807
     134:	bl	70c <Print::println()>
     138:	ldr	r3, [r5, #0]
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
     13a:	.short	0x6033
     13c:	pop	{r3, r4, r5, r6, r7, pc}
     13e:	.short	0xbf00
     140:	lsrs	r4, r3, #16
     142:	movs	r0, #0
     144:	.word	0x20000054
     148:	lsrs	r4, r3, #17
     14a:	.short	0x2000
     14c:	lsrs	r0, r2, #17
     14e:	movs	r0, #0
     150:	lsls	r0, r7, #13
     152:	.short	0x2000

00000154 <_GLOBAL__sub_I_encoder>:
    {
        Serial.println(encoder.getValue());
        stopwatch = 0;
    }
     154:	push	{r3, r4, r5, r6, r7, lr}
    };

    class EncoderBase
    {
     public:
        EncoderBase() = default;
     156:	.short	0x4b0c
     158:	movs	r4, #0
     15a:	.short	0xf04f
     15c:	bx	r0
     15e:	mvn.w	r6, #2147483648	; 0x80000000
     162:	ldr	r5, [pc, #40]	; (18c <_GLOBAL__sub_I_encoder+0x38>)
#include "EncoderTool.h"
using namespace EncoderTool;

Encoder encoder;
     164:	mov	r0, r3
     166:	ldr	r2, [pc, #40]	; (190 <_GLOBAL__sub_I_encoder+0x3c>)
     168:	str	r7, [r3, #4]
     16a:	str	r6, [r3, #8]
     16c:	str	r5, [r3, #40]	; 0x28
     16e:	str	r4, [r3, #0]
     170:	strb	r4, [r3, #12]
     172:	str	r4, [r3, #16]
     174:	strb	r4, [r3, #20]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     176:	str	r4, [r3, #32]
     178:	ldr	r1, [pc, #24]	; (194 <_GLOBAL__sub_I_encoder+0x40>)
     17a:	bl	207c <__aeabi_atexit>
     17e:	ldr	r2, [pc, #24]	; (198 <_GLOBAL__sub_I_encoder+0x44>)
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
     180:	ldr	r3, [pc, #24]	; (19c <_GLOBAL__sub_I_encoder+0x48>)
     182:	ldr	r2, [r2, #0]
     184:	str	r2, [r3, #0]
     186:	pop	{r3, r4, r5, r6, r7, pc}
     188:	.word	0x20000c1c
     18c:	.word	0x20000038
     190:	.word	0x20000370
     194:	.word	0x0000007d
     198:	.word	0x20000c5c
     19c:	.word	0x20000c50

000001a0 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)>:

namespace EncoderTool
{
    EncoderBase& EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
     1a0:	cmp	r1, #3
     1a2:	bhi.n	1d4 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x34>
     1a4:	tbb	[pc, r1]
     1a8:	.word	0x02070c11
            case CountMode::half:
                stateMachine = &stateMachineHalf;
                invert = 0b00;
                break;
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
     1ac:	ldr	r2, [pc, #48]	; (1e0 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x40>)
                invert = 0b01;
     1ae:	movs	r3, #1
            case CountMode::half:
                stateMachine = &stateMachineHalf;
                invert = 0b00;
                break;
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
     1b0:	str	r2, [r0, #40]	; 0x28
                invert = 0b01;
     1b2:	str	r3, [r0, #16]
                break;
     1b4:	bx	lr
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
                invert = 0b00;
                break;
            case CountMode::half:
                stateMachine = &stateMachineHalf;
     1b6:	ldr	r2, [pc, #40]	; (1e0 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x40>)
                invert = 0b00;
     1b8:	movs	r3, #0
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
                invert = 0b00;
                break;
            case CountMode::half:
                stateMachine = &stateMachineHalf;
     1ba:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     1bc:	str	r3, [r0, #16]
                break;
     1be:	bx	lr
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
                invert = 0b11;
                break;
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
     1c0:	ldr	r2, [pc, #32]	; (1e4 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x44>)
                invert = 0b00;
     1c2:	movs	r3, #0
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
                invert = 0b11;
                break;
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
     1c4:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     1c6:	str	r3, [r0, #16]
                break;
     1c8:	bx	lr
    EncoderBase& EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
        {
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
     1ca:	ldr	r2, [pc, #24]	; (1e4 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x44>)
                invert = 0b11;
     1cc:	movs	r3, #3
    EncoderBase& EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
        {
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
     1ce:	str	r2, [r0, #40]	; 0x28
                invert = 0b11;
     1d0:	str	r3, [r0, #16]
                break;
     1d2:	bx	lr
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
                invert = 0b01;
                break;
            default:
                stateMachine = &stateMachineFull;
     1d4:	ldr	r2, [pc, #16]	; (1e8 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x48>)
                invert = 0b00;
     1d6:	movs	r3, #0
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
                invert = 0b01;
                break;
            default:
                stateMachine = &stateMachineFull;
     1d8:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     1da:	str	r3, [r0, #16]
        }
        return *this;
    }
     1dc:	bx	lr
     1de:	nop
     1e0:	.word	0x2000001c
     1e4:	.word	0x20000000
     1e8:	.word	0x20000038

000001ec <EncoderTool::EncoderBase::begin(unsigned long, unsigned long)>:
    };


    void EncoderBase::begin(uint32_t phaseA, uint32_t phaseB)
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
     1ec:	orr.w	r1, r2, r1, lsl #1
     1f0:	ldr	r3, [r0, #16]
     1f2:	eors	r3, r1
     1f4:	strb	r3, [r0, #20]
     1f6:	bx	lr

000001f8 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)>:
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     1f8:	mov	r3, r0
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     1fa:	orr.w	r1, r2, r1, lsl #1
     1fe:	ldr	r0, [r0, #16]
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     200:	push	{r4, r5, lr}
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     202:	ldr	r4, [r3, #40]	; 0x28
     204:	eors	r0, r1
     206:	ldrb	r5, [r3, #20]
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     208:	sub	sp, #36	; 0x24
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     20a:	add.w	r4, r4, r5, lsl #2
     20e:	ldrb	r2, [r4, r0]
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state
     210:	and.w	r1, r2, #15
    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
     214:	and.w	r2, r2, #240	; 0xf0
        curState &=  0x0F;                                  // remove the direction info from state

        if(direction == UP)
     218:	cmp	r2, #16
    {
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state
     21a:	strb	r1, [r3, #20]

        if(direction == UP)
     21c:	beq.n	258 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x60>
            }
            value = maxVal;
            return false;
        }

        if (direction == DOWN)
     21e:	cmp	r2, #32
     220:	beq.n	22a <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x32>
        if (direction == ERR)
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
     222:	movs	r4, #0
    }
     224:	mov	r0, r4
     226:	add	sp, #36	; 0x24
     228:	pop	{r4, r5, pc}
            return false;
        }

        if (direction == DOWN)
        {
            if (value > minVal)  // minVal = INT_MIN if no limits set
     22a:	ldr	r2, [r3, #0]
     22c:	ldr	r1, [r3, #4]
     22e:	cmp	r2, r1
     230:	ble.n	2aa <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0xb2>
            {
                value--;
     232:	subs	r1, r2, #1
                if (callback != nullptr) callback(value, -1);
     234:	ldr	r2, [r3, #32]

        if (direction == DOWN)
        {
            if (value > minVal)  // minVal = INT_MIN if no limits set
            {
                value--;
     236:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, -1);
     238:	cbz	r2, 250 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     23a:	mov.w	r4, #4294967295
     23e:	add	r2, sp, #32
     240:	str	r1, [sp, #16]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
     242:	add.w	r0, r3, #24
     246:	str.w	r4, [r2, #-12]!
     24a:	add	r1, sp, #16
     24c:	ldr	r3, [r3, #36]	; 0x24
     24e:	blx	r3
                return true;
     250:	movs	r4, #1
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     252:	mov	r0, r4
     254:	add	sp, #36	; 0x24
     256:	pop	{r4, r5, pc}
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
     258:	ldr	r2, [r3, #0]
     25a:	ldr	r1, [r3, #8]
     25c:	cmp	r2, r1
     25e:	blt.n	286 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x8e>
            {
                value++;
                if (callback != nullptr) callback(value, +1);
                return true;
            }
            if (periodic)       // if periodic, wrap to minVal, else stop counting
     260:	ldrb	r4, [r3, #12]
     262:	cmp	r4, #0
     264:	beq.n	2d0 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0xd8>
            {
                value = minVal;
     266:	ldr	r1, [r3, #4]
                if (callback != nullptr) callback(value, +1);
     268:	ldr	r2, [r3, #32]
                if (callback != nullptr) callback(value, +1);
                return true;
            }
            if (periodic)       // if periodic, wrap to minVal, else stop counting
            {
                value = minVal;
     26a:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, +1);
     26c:	cmp	r2, #0
     26e:	beq.n	250 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     270:	movs	r5, #1
     272:	add	r2, sp, #32
     274:	str	r1, [sp, #8]
     276:	add.w	r0, r3, #24
     27a:	str.w	r5, [r2, #-20]!
     27e:	add	r1, sp, #8
     280:	ldr	r3, [r3, #36]	; 0x24
     282:	blx	r3
     284:	b.n	224 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x2c>

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
            {
                value++;
     286:	adds	r1, r2, #1
                if (callback != nullptr) callback(value, +1);
     288:	ldr	r2, [r3, #32]

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
            {
                value++;
     28a:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, +1);
     28c:	cmp	r2, #0
     28e:	beq.n	250 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     290:	movs	r4, #1
     292:	add	r2, sp, #32
     294:	str	r1, [sp, #0]
     296:	add.w	r0, r3, #24
     29a:	str.w	r4, [r2, #-28]!
     29e:	mov	r1, sp
     2a0:	ldr	r3, [r3, #36]	; 0x24
     2a2:	blx	r3
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     2a4:	mov	r0, r4
     2a6:	add	sp, #36	; 0x24
     2a8:	pop	{r4, r5, pc}
            {
                value--;
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            if (periodic)        // if periodic, wrap to maxVal, else stop counting
     2aa:	ldrb	r4, [r3, #12]
     2ac:	cbz	r4, 2d0 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0xd8>
            {
                value = maxVal;
     2ae:	ldr	r1, [r3, #8]
                if (callback != nullptr) callback(value, -1);
     2b0:	ldr	r2, [r3, #32]
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            if (periodic)        // if periodic, wrap to maxVal, else stop counting
            {
                value = maxVal;
     2b2:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, -1);
     2b4:	cmp	r2, #0
     2b6:	beq.n	250 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     2b8:	mov.w	r5, #4294967295
     2bc:	add	r2, sp, #32
     2be:	str	r1, [sp, #24]
     2c0:	add.w	r0, r3, #24
     2c4:	str.w	r5, [r2, #-4]!
     2c8:	add	r1, sp, #24
     2ca:	ldr	r3, [r3, #36]	; 0x24
     2cc:	blx	r3
     2ce:	b.n	224 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x2c>
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     2d0:	mov	r0, r4
            {
                value = maxVal;
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            value = minVal;
     2d2:	str	r1, [r3, #0]
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     2d4:	add	sp, #36	; 0x24
     2d6:	pop	{r4, r5, pc}

000002d8 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     2d8:	cmp	r0, #0
     2da:	beq.n	38c <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     2dc:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
     2de:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2e2:	sub	sp, #20
     2e4:	mov	fp, r0
     2e6:	ldr	r4, [pc, #168]	; (390 <delay+0xb8>)
     2e8:	ldr	r5, [pc, #168]	; (394 <delay+0xbc>)
     2ea:	ldr	r6, [pc, #172]	; (398 <delay+0xc0>)
     2ec:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2f0:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     2f4:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     2f6:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     2f8:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     2fc:	cmp	r1, #0
     2fe:	bne.n	2f0 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     300:	ldr	r7, [pc, #152]	; (39c <delay+0xc4>)
     302:	strd	r8, r9, [sp, #8]
     306:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     308:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     30a:	ldr	r2, [pc, #148]	; (3a0 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     30c:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     310:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     312:	ldr	r2, [r2, #0]
     314:	movs	r7, #1
     316:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
     31a:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     31e:	mov	r8, r3
	if (frac > 1000) frac = 1000;
     320:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     322:	cmp	r3, r1
     324:	it	eq
     326:	cmpeq	r2, r8
     328:	ite	cs
     32a:	movcs	sl, r8
     32c:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     32e:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     332:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     336:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     338:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     33a:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     33e:	cmp	r3, #0
     340:	bne.n	332 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     342:	ldr	r0, [sp, #4]
     344:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     346:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     348:	ldr	r0, [pc, #84]	; (3a0 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     34a:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     34e:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     350:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     354:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
     358:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     35c:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     360:	mov	r8, r1
	if (frac > 1000) frac = 1000;
     362:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     364:	cmp	r1, r3
     366:	it	eq
     368:	cmpeq	r0, r8
     36a:	ite	cs
     36c:	movcs	r3, r8
     36e:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     370:	add	r2, r3
     372:	cmp	r2, lr
     374:	bcc.n	386 <delay+0xae>
			if (--msec == 0) return;
     376:	subs.w	fp, fp, #1
			start += 1000;
     37a:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     37e:	bne.n	332 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     380:	add	sp, #20
     382:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     386:	bl	434 <yield>
	}
     38a:	b.n	332 <delay+0x5a>
     38c:	bx	lr
     38e:	nop
     390:	.word	0x20000f00
     394:	.word	0x20000c5c
     398:	.word	0x20000c54
     39c:	.word	0xe0001004
     3a0:	.word	0x20000c58

000003a4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     3a4:	cmp	r0, #39	; 0x27
     3a6:	bhi.n	3e2 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
     3a8:	lsls	r0, r0, #4
     3aa:	ldr	r2, [pc, #104]	; (414 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     3ac:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     3ae:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     3b2:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
     3b4:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     3b6:	beq.n	3e4 <pinMode+0x40>
     3b8:	cmp	r1, #4
     3ba:	beq.n	3e4 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     3bc:	ldr	r4, [r3, #12]
     3be:	ldr	r2, [r0, #4]
     3c0:	bic.w	r2, r2, r4
     3c4:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     3c6:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
     3c8:	cbz	r1, 406 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
     3ca:	cmp	r1, #2
     3cc:	beq.n	40c <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     3ce:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     3d0:	ldr	r3, [r3, #4]
}
     3d2:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     3d6:	ite	eq
     3d8:	ldreq	r1, [pc, #60]	; (418 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     3da:	ldrne	r1, [pc, #64]	; (41c <pinMode+0x78>)
     3dc:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     3de:	movs	r2, #21
     3e0:	str	r2, [r3, #0]
}
     3e2:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     3e4:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
     3e6:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     3e8:	ldr	r4, [r0, #4]
     3ea:	orr.w	r2, r2, r4
     3ee:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     3f0:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
     3f2:	beq.n	406 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     3f4:	movw	r1, #2104	; 0x838
     3f8:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     3fa:	ldr	r3, [r3, #4]
     3fc:	movs	r2, #21
}
     3fe:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     402:	str	r2, [r3, #0]
}
     404:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     406:	movs	r1, #56	; 0x38
     408:	str	r1, [r2, #0]
     40a:	b.n	3fa <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     40c:	ldr	r1, [pc, #16]	; (420 <pinMode+0x7c>)
     40e:	str	r1, [r2, #0]
     410:	b.n	3fa <pinMode+0x56>
     412:	nop
     414:	.word	0x20000054
     418:	.word	0x00013038
     41c:	.word	0x00010038
     420:	.word	0x0001f038

00000424 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     424:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     426:	bl	94 <setup>
	while (1) {
		loop();
     42a:	bl	e0 <loop>
		yield();
     42e:	bl	434 <yield>
     432:	b.n	42a <main+0x6>

00000434 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
     434:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
     436:	ldr	r4, [pc, #132]	; (4bc <yield+0x88>)
     438:	ldrb	r3, [r4, #0]
     43a:	cbnz	r3, 45e <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     43c:	ldr	r3, [pc, #128]	; (4c0 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
     43e:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     440:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
     442:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     444:	cbnz	r3, 48e <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
     446:	ldr	r3, [pc, #124]	; (4c4 <yield+0x90>)
     448:	ldrb	r3, [r3, #0]
     44a:	cmp	r3, #0
     44c:	bne.n	4a2 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
     44e:	ldr	r3, [pc, #120]	; (4c8 <yield+0x94>)

	running = 0;
     450:	movs	r1, #0
     452:	ldr	r2, [r3, #0]
     454:	strb	r1, [r4, #0]
     456:	cbz	r2, 45e <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
     458:	mrs	r2, IPSR
		if (ipsr != 0) return;
     45c:	cbz	r2, 460 <yield+0x2c>
     45e:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     460:	mrs	r0, PRIMASK
		__disable_irq();
     464:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
     466:	ldr	r2, [r3, #0]
		if (first == nullptr) {
     468:	cbz	r2, 4a8 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
     46a:	ldr	r4, [pc, #96]	; (4cc <yield+0x98>)
     46c:	ldrb	r1, [r4, #0]
     46e:	cbnz	r1, 4a8 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
     470:	movs	r6, #1
		firstYield = first->_next;
     472:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
     474:	strb	r6, [r4, #0]
		firstYield = first->_next;
     476:	str	r5, [r3, #0]
		if (firstYield) {
     478:	cbz	r5, 4b0 <yield+0x7c>
			firstYield->_prev = nullptr;
     47a:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     47c:	cbnz	r0, 480 <yield+0x4c>
     47e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
     480:	movs	r5, #0
		(*(first->_function))(*first);
     482:	ldr	r3, [r2, #8]
     484:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
     486:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
     488:	blx	r3
		runningFromYield = false;
     48a:	strb	r5, [r4, #0]
     48c:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     48e:	bl	e10 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     492:	cmp	r0, #0
     494:	beq.n	446 <yield+0x12>
     496:	bl	700 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
     49a:	ldr	r3, [pc, #40]	; (4c4 <yield+0x90>)
     49c:	ldrb	r3, [r3, #0]
     49e:	cmp	r3, #0
     4a0:	beq.n	44e <yield+0x1a>
     4a2:	bl	1ed0 <HardwareSerial::processSerialEvents()>
     4a6:	b.n	44e <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     4a8:	cmp	r0, #0
     4aa:	bne.n	45e <yield+0x2a>
     4ac:	cpsie	i
     4ae:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
     4b0:	ldr	r3, [pc, #28]	; (4d0 <yield+0x9c>)
     4b2:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     4b4:	cmp	r0, #0
     4b6:	bne.n	480 <yield+0x4c>
     4b8:	b.n	47e <yield+0x4a>
     4ba:	nop
     4bc:	.word	0x20000c60
     4c0:	.word	0x20000374
     4c4:	.word	0x20000ec8
     4c8:	.word	0x20000c74
     4cc:	.word	0x20000c78
     4d0:	.word	0x20000c70

000004d4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
     4d4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     4d6:	mrs	r2, PRIMASK
		__disable_irq();
     4da:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
     4dc:	ldrb	r3, [r0, #29]
     4de:	cbnz	r3, 4ee <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
     4e0:	ldrb	r1, [r0, #28]
     4e2:	cmp	r1, #1
     4e4:	beq.n	4f8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
     4e6:	cmp	r1, #3
     4e8:	beq.n	50c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
     4ea:	movs	r3, #1
     4ec:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     4ee:	cbnz	r2, 4f2 <EventResponder::triggerEventNotImmediate()+0x1e>
     4f0:	cpsie	i
	}
	enableInterrupts(irq);
}
     4f2:	ldr.w	r4, [sp], #4
     4f6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
     4f8:	ldr	r4, [pc, #68]	; (540 <EventResponder::triggerEventNotImmediate()+0x6c>)
     4fa:	ldr	r1, [r4, #0]
     4fc:	cbz	r1, 528 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
     4fe:	ldr	r1, [pc, #68]	; (544 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
     500:	str	r3, [r0, #20]
				_prev = lastYield;
     502:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
     504:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
     506:	str	r3, [r0, #24]
				_prev->_next = this;
     508:	str	r0, [r3, #20]
     50a:	b.n	4ea <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
     50c:	ldr	r4, [pc, #56]	; (548 <EventResponder::triggerEventNotImmediate()+0x74>)
     50e:	ldr	r1, [r4, #0]
     510:	cbz	r1, 534 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
     512:	ldr	r1, [pc, #56]	; (54c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
     514:	str	r3, [r0, #20]
				_prev = lastInterrupt;
     516:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
     518:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
     51a:	str	r3, [r0, #24]
				_prev->_next = this;
     51c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
     51e:	ldr	r3, [pc, #48]	; (550 <EventResponder::triggerEventNotImmediate()+0x7c>)
     520:	mov.w	r1, #268435456	; 0x10000000
     524:	str	r1, [r3, #0]
     526:	b.n	4ea <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
     528:	ldr	r3, [pc, #24]	; (544 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
     52a:	str	r1, [r0, #20]
				_prev = nullptr;
     52c:	str	r1, [r0, #24]
				firstYield = this;
     52e:	str	r0, [r4, #0]
				lastYield = this;
     530:	str	r0, [r3, #0]
     532:	b.n	4ea <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
     534:	ldr	r3, [pc, #20]	; (54c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
     536:	str	r1, [r0, #20]
				_prev = nullptr;
     538:	str	r1, [r0, #24]
				firstInterrupt = this;
     53a:	str	r0, [r4, #0]
				lastInterrupt = this;
     53c:	str	r0, [r3, #0]
     53e:	b.n	51e <EventResponder::triggerEventNotImmediate()+0x4a>
     540:	.word	0x20000c74
     544:	.word	0x20000c70
     548:	.word	0x20000c64
     54c:	.word	0x20000c68
     550:	.word	0xe000ed04

00000554 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
     554:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     556:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     558:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     55a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     55c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
     55e:	beq.n	568 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
     560:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     564:	b.w	4d4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     568:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
     56a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     56e:	bx	r3

00000570 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
     570:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     572:	mrs	r1, PRIMASK
		__disable_irq();
     576:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
     578:	ldr	r4, [pc, #48]	; (5ac <EventResponder::runFromInterrupt()+0x3c>)
     57a:	ldr	r3, [r4, #0]
		if (first) {
     57c:	cbz	r3, 5a2 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
     57e:	ldr	r6, [pc, #48]	; (5b0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
     580:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
     582:	ldr	r2, [r3, #20]
     584:	str	r2, [r4, #0]
			if (firstInterrupt) {
     586:	cbz	r2, 5a8 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
     588:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     58a:	cbnz	r1, 58e <EventResponder::runFromInterrupt()+0x1e>
     58c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
     58e:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
     590:	mov	r0, r3
     592:	ldr	r3, [r3, #8]
     594:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     596:	mrs	r1, PRIMASK
		__disable_irq();
     59a:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
     59c:	ldr	r3, [r4, #0]
		if (first) {
     59e:	cmp	r3, #0
     5a0:	bne.n	582 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     5a2:	cbnz	r1, 5a6 <EventResponder::runFromInterrupt()+0x36>
     5a4:	cpsie	i
     5a6:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
     5a8:	str	r2, [r6, #0]
     5aa:	b.n	58a <EventResponder::runFromInterrupt()+0x1a>
     5ac:	.word	0x20000c64
     5b0:	.word	0x20000c68

000005b4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
     5b4:	b.w	570 <EventResponder::runFromInterrupt()>

000005b8 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
     5b8:	ldr	r2, [pc, #96]	; (61c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
     5ba:	push	{r4, r5}
	if (listActive == nullptr) {
     5bc:	ldr	r4, [r2, #0]
     5be:	cmp	r4, #0
     5c0:	beq.n	614 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
     5c2:	ldr	r3, [r0, #0]
     5c4:	ldr	r1, [r4, #0]
     5c6:	cmp	r3, r1
     5c8:	bcs.n	5ea <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
     5ca:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
     5cc:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
     5ce:	str	r4, [r0, #8]
		_prev = nullptr;
     5d0:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
     5d2:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
     5d4:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
     5d6:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
     5d8:	movs	r3, #2
}
     5da:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
     5dc:	strb	r3, [r0, #20]
}
     5de:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
     5e0:	str	r3, [r0, #0]
     5e2:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
     5e4:	ldr	r1, [r2, #0]
     5e6:	cmp	r3, r1
     5e8:	bcc.n	5fc <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
     5ea:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
     5ec:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
     5ee:	cmp	r2, #0
     5f0:	bne.n	5e0 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
     5f2:	str	r2, [r0, #8]
		_prev = timer;
     5f4:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
     5f6:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
     5f8:	str	r0, [r4, #8]
     5fa:	b.n	5d8 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
     5fc:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
     5fe:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
     600:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
     602:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
     604:	str	r5, [r0, #12]
				timer->_prev = this;
     606:	str	r0, [r4, #12]
				_prev->_next = this;
     608:	ldr	r1, [r0, #12]
     60a:	str	r0, [r1, #8]
				timer->_ms -= _ms;
     60c:	str	r3, [r4, #0]
				_state = TimerActive;
     60e:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
     610:	pop	{r4, r5}
     612:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
     614:	str	r4, [r0, #8]
		_prev = nullptr;
     616:	str	r4, [r0, #12]
		listActive = this;
     618:	str	r0, [r2, #0]
     61a:	b.n	5d8 <MillisTimer::addToActiveList()+0x20>
     61c:	.word	0x20000c6c

00000620 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
     620:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
     622:	ldr	r6, [pc, #136]	; (6ac <MillisTimer::runFromTimer()+0x8c>)
     624:	ldr	r4, [r6, #0]
	while (timer) {
     626:	cbz	r4, 674 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
     628:	ldr	r3, [r4, #0]
     62a:	cmp	r3, #0
     62c:	bne.n	6a4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
     62e:	mov	r5, r3
     630:	ldr	r7, [pc, #124]	; (6b0 <MillisTimer::runFromTimer()+0x90>)
     632:	b.n	63e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
     634:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
     636:	cbz	r4, 674 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
     638:	ldr	r3, [r4, #0]
     63a:	cmp	r3, #0
     63c:	bne.n	6a4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
     63e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
     640:	cbz	r3, 644 <MillisTimer::runFromTimer()+0x24>
     642:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
     644:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
     646:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     648:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
     64a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     64c:	ldr	r3, [r3, #0]
     64e:	cmp	r3, r7
     650:	bne.n	696 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     652:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     654:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     656:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     658:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
     65a:	beq.n	69e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     65c:	bl	4d4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
     660:	ldr	r3, [r4, #4]
     662:	cmp	r3, #0
     664:	beq.n	634 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
     666:	str	r3, [r4, #0]
				timer->addToActiveList();
     668:	mov	r0, r4
     66a:	bl	5b8 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
     66e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
     670:	cmp	r4, #0
     672:	bne.n	638 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     674:	mrs	r3, PRIMASK
		__disable_irq();
     678:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
     67a:	ldr	r2, [pc, #56]	; (6b4 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
     67c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
     67e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
     680:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
     682:	cbnz	r3, 686 <MillisTimer::runFromTimer()+0x66>
     684:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
     686:	cbz	r0, 694 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
     688:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
     68a:	bl	5b8 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
     68e:	mov	r0, r4
     690:	cmp	r0, #0
     692:	bne.n	688 <MillisTimer::runFromTimer()+0x68>
     694:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     696:	mov	r2, r4
     698:	movs	r1, #0
     69a:	blx	r3
     69c:	b.n	660 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     69e:	ldr	r3, [r0, #8]
     6a0:	blx	r3
     6a2:	b.n	660 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
     6a4:	subs	r3, #1
     6a6:	str	r3, [r4, #0]
			break;
     6a8:	b.n	674 <MillisTimer::runFromTimer()+0x54>
     6aa:	nop
     6ac:	.word	0x20000c6c
     6b0:	.word	0x00000555
     6b4:	.word	0x20000c7c

000006b8 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     6b8:	ldr	r2, [pc, #16]	; (6cc <systick_isr+0x14>)
     6ba:	ldr	r3, [pc, #20]	; (6d0 <systick_isr+0x18>)
     6bc:	ldr	r1, [r2, #0]
	systick_millis_count++;
     6be:	ldr	r2, [pc, #20]	; (6d4 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     6c0:	str	r1, [r3, #0]
	systick_millis_count++;
     6c2:	ldr	r3, [r2, #0]
     6c4:	adds	r3, #1
     6c6:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
     6c8:	b.w	620 <MillisTimer::runFromTimer()>
     6cc:	.word	0xe0001004
     6d0:	.word	0x20000c54
     6d4:	.word	0x20000c5c

000006d8 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
     6d8:	b.w	e1c <usb_serial_flush_input>

000006dc <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
     6dc:	b.w	dcc <usb_serial_peekchar>

000006e0 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     6e0:	b.w	e90 <usb_serial_getchar>

000006e4 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     6e4:	b.w	e10 <usb_serial_available>

000006e8 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     6e8:	b.w	f40 <usb_serial_flush_output>

000006ec <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
     6ec:	b.w	ef4 <usb_serial_write_buffer_free>

000006f0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     6f0:	mov	r0, r1
     6f2:	mov	r1, r2
     6f4:	b.w	edc <usb_serial_write>

000006f8 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     6f8:	mov	r0, r1
     6fa:	b.w	eb0 <usb_serial_putchar>
     6fe:	nop

00000700 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
     700:	ldr	r3, [pc, #4]	; (708 <serialEvent()+0x8>)
     702:	movs	r2, #0
     704:	strb	r2, [r3, #0]
     706:	bx	lr
     708:	.word	0x20000374

0000070c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
     70c:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
     70e:	ldr	r4, [pc, #24]	; (728 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
     710:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
     712:	ldr	r3, [r0, #0]
     714:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
     716:	ldrh	r4, [r4, #0]
	return write(buf, 2);
     718:	add	r1, sp, #4
     71a:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
     71c:	strh.w	r4, [sp, #4]
	return write(buf, 2);
     720:	blx	r3
}
     722:	add	sp, #8
     724:	pop	{r4, pc}
     726:	nop
     728:	.word	0x200002fc

0000072c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
     72c:	push	{r4, r5, r6, r7, lr}
     72e:	mov	r6, r0
     730:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
     732:	cmp	r2, #0
     734:	beq.n	79e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
     736:	cmp	r2, #1
     738:	it	eq
     73a:	moveq	r2, #10
	}


	if (n == 0) {
     73c:	cbz	r1, 794 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
     73e:	movs	r5, #33	; 0x21
     740:	b.n	744 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
     742:	uxtb	r5, r7
     744:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
     746:	udiv	r4, r1, r2
     74a:	mls	r1, r2, r4, r1
     74e:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     750:	cmp	r1, #9
     752:	add.w	r1, r0, #55	; 0x37
     756:	add.w	r0, r0, #48	; 0x30
     75a:	it	hi
     75c:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
     75e:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     760:	add	r4, sp, #40	; 0x28
     762:	it	ls
     764:	uxtbls	r0, r0
     766:	add	r4, r5
     768:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
     76c:	cmp	r1, #0
     76e:	bne.n	742 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
     770:	cbz	r3, 780 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
     772:	subs	r5, #1
		buf[i] = '-';
     774:	add	r3, sp, #40	; 0x28
     776:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
     778:	uxtb	r5, r5
		buf[i] = '-';
     77a:	add	r3, r5
     77c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
     780:	ldr	r3, [r6, #0]
     782:	add	r1, sp, #4
     784:	rsb	r2, r5, #34	; 0x22
     788:	mov	r0, r6
     78a:	add	r1, r5
     78c:	ldr	r3, [r3, #4]
     78e:	blx	r3
}
     790:	add	sp, #44	; 0x2c
     792:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
     794:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
     796:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
     798:	strb.w	r2, [sp, #37]	; 0x25
     79c:	b.n	770 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
     79e:	ldr	r3, [r0, #0]
     7a0:	uxtb	r1, r1
     7a2:	ldr	r3, [r3, #0]
     7a4:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
     7a6:	add	sp, #44	; 0x2c
     7a8:	pop	{r4, r5, r6, r7, pc}
     7aa:	nop

000007ac <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
     7ac:	cmp	r1, #0
     7ae:	blt.n	7b8 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
     7b0:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
     7b2:	movs	r2, #10
     7b4:	b.w	72c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
     7b8:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
     7ba:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
     7bc:	movs	r2, #10
     7be:	b.w	72c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     7c2:	nop

000007c4 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
     7c4:	movs	r0, #4
     7c6:	mov	r1, lr
     7c8:	tst	r0, r1
     7ca:	beq.n	7d4 <_MSP>
     7cc:	mrs	r0, PSP
     7d0:	b.w	7e4 <HardFault_HandlerC>

000007d4 <_MSP>:
     7d4:	mrs	r0, MSP
     7d8:	b.w	7e4 <HardFault_HandlerC>

000007dc <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
     7dc:	bx	lr
     7de:	nop

000007e0 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
     7e0:	bx	lr
     7e2:	nop

000007e4 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     7e4:	ldr	r3, [pc, #108]	; (854 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     7e6:	movs	r1, #5
     7e8:	ldr	r2, [pc, #108]	; (858 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     7ea:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     7ec:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     7ee:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
     7f2:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     7f4:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     7f8:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     7fa:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     7fc:	ldr	r4, [pc, #92]	; (85c <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     7fe:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     800:	ldr	r0, [pc, #92]	; (860 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     802:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
     804:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     808:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
     80c:	ldr	r3, [r4, #0]
     80e:	cmp	r3, r0
     810:	bls.n	818 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
     812:	ldr	r0, [pc, #80]	; (864 <HardFault_HandlerC+0x80>)
     814:	bl	fe0 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     818:	ldr	r5, [pc, #56]	; (854 <HardFault_HandlerC+0x70>)
     81a:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     81c:	movs	r0, #0
     81e:	ldr	r2, [pc, #72]	; (868 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     820:	ldr	r1, [pc, #72]	; (86c <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     822:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     826:	str	r0, [sp, #4]
     828:	ldr	r3, [sp, #4]
     82a:	cmp	r3, r2
     82c:	bhi.n	83a <HardFault_HandlerC+0x56>
     82e:	ldr	r3, [sp, #4]
     830:	adds	r3, #1
     832:	str	r3, [sp, #4]
     834:	ldr	r3, [sp, #4]
     836:	cmp	r3, r2
     838:	bls.n	82e <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     83a:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     83e:	str	r0, [sp, #4]
     840:	ldr	r3, [sp, #4]
     842:	cmp	r3, r1
     844:	bhi.n	822 <HardFault_HandlerC+0x3e>
     846:	ldr	r3, [sp, #4]
     848:	adds	r3, #1
     84a:	str	r3, [sp, #4]
     84c:	ldr	r3, [sp, #4]
     84e:	cmp	r3, r1
     850:	bls.n	846 <HardFault_HandlerC+0x62>
     852:	b.n	822 <HardFault_HandlerC+0x3e>
     854:	.word	0x401bc000
     858:	.word	0x401f8000
     85c:	.word	0x20000390
     860:	.word	0x23c345ff
     864:	.word	0x11e1a300
     868:	.word	0x000f423f
     86c:	.word	0x0089543f

00000870 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
     870:	ldr	r2, [pc, #36]	; (898 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
     872:	push	{r3, lr}
        char *prev = __brkval;
     874:	ldr	r3, [r2, #0]
        if (incr != 0) {
     876:	cbz	r0, 882 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
     878:	add	r0, r3
     87a:	ldr	r1, [pc, #32]	; (89c <_sbrk+0x2c>)
     87c:	cmp	r0, r1
     87e:	bhi.n	886 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
     880:	str	r0, [r2, #0]
        }
        return prev;
}
     882:	mov	r0, r3
     884:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     886:	bl	2094 <__errno>
     88a:	movs	r2, #12
                        return (void *)-1;
     88c:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     890:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
     892:	mov	r0, r3
     894:	pop	{r3, pc}
     896:	nop
     898:	.word	0x20000388
     89c:	.word	0x20280000

000008a0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     8a0:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     8a2:	ldr	r1, [pc, #80]	; (8f4 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     8a4:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     8a8:	ldr	r5, [pc, #76]	; (8f8 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     8aa:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     8ac:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     8b0:	ldr	r6, [pc, #72]	; (8fc <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     8b2:	ldr	r2, [pc, #76]	; (900 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     8b4:	add.w	r5, r5, r0, lsl #5
     8b8:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     8ba:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     8bc:	mov	r0, r5
     8be:	ldrh	r2, [r6, #0]
     8c0:	bl	1b40 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     8c4:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     8c6:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     8ca:	add	r1, r4
	asm("dsb");
     8cc:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     8d0:	ldr	r2, [pc, #48]	; (904 <rx_queue_transfer+0x64>)
     8d2:	str	r3, [r2, #0]
		location += 32;
     8d4:	adds	r3, #32
	} while (location < end_addr);
     8d6:	cmp	r1, r3
     8d8:	bhi.n	8d2 <rx_queue_transfer+0x32>
	asm("dsb");
     8da:	dsb	sy
	asm("isb");
     8de:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     8e2:	movs	r0, #3
     8e4:	mov	r1, r5
     8e6:	bl	1b98 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     8ea:	ldr	r3, [pc, #28]	; (908 <rx_queue_transfer+0x68>)
     8ec:	mov.w	r2, #131072	; 0x20000
     8f0:	str	r2, [r3, #0]
     8f2:	pop	{r3, r4, r5, r6, r7, pc}
     8f4:	.word	0x20200000
     8f8:	.word	0x20000ca0
     8fc:	.word	0x20000dae
     900:	.word	0xe000e18c
     904:	.word	0xe000ef5c
     908:	.word	0xe000e10c

0000090c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     90c:	ldr	r2, [pc, #144]	; (9a0 <rx_event+0x94>)
     90e:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
     910:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     914:	ubfx	r3, r3, #16, #15
     918:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
     91a:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     91c:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     91e:	cmp	r4, #0
     920:	ble.n	994 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
     922:	ldr	r1, [pc, #128]	; (9a4 <rx_event+0x98>)
		if (head != rx_tail) {
     924:	ldr	r2, [pc, #128]	; (9a8 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     926:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
     928:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     92a:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     92c:	ldr	r0, [pc, #124]	; (9ac <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
     92e:	ldr	r6, [pc, #128]	; (9b0 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
     930:	cmp	r3, r2
     932:	beq.n	944 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     934:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     938:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     93c:	rsb	r2, r7, #512	; 0x200
     940:	cmp	r4, r2
     942:	bls.n	96a <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     944:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
     946:	movs	r2, #0
     948:	ldr	r7, [pc, #104]	; (9b4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     94a:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
     94c:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
     950:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
     954:	ldr	r6, [pc, #96]	; (9b8 <rx_event+0xac>)
     956:	ite	ls
     958:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     95a:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
     95c:	strb	r2, [r1, #0]
		rx_available += len;
     95e:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
     960:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
     962:	add	r4, r2
     964:	str	r4, [r6, #0]
     966:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     96a:	ldr	r3, [pc, #80]	; (9bc <rx_event+0xb0>)
     96c:	add.w	r0, r7, r8, lsl #9
     970:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     972:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     974:	add.w	r1, r3, r5, lsl #9
     978:	add	r0, r3
     97a:	bl	1ef8 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
     97e:	ldr	r2, [pc, #56]	; (9b8 <rx_event+0xac>)
				rx_queue_transfer(i);
     980:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     982:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     986:	ldr	r3, [r2, #0]
     988:	add	r4, r3
     98a:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     98c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
     990:	b.w	8a0 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     994:	mov	r0, r5
	}
}
     996:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     99a:	b.w	8a0 <rx_queue_transfer>
     99e:	nop
     9a0:	.word	0x20000dae
     9a4:	.word	0x20000dc4
     9a8:	.word	0x20000da0
     9ac:	.word	0x20000da4
     9b0:	.word	0x20000db0
     9b4:	.word	0x20000c80
     9b8:	.word	0x20000dc0
     9bc:	.word	0x20200000

000009c0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     9c0:	ldr	r3, [pc, #120]	; (a3c <usb_serial_flush_callback+0x7c>)
     9c2:	ldrb	r2, [r3, #0]
     9c4:	cbnz	r2, 9de <usb_serial_flush_callback+0x1e>
     9c6:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
     9ca:	ldr	r2, [pc, #116]	; (a40 <usb_serial_flush_callback+0x80>)
     9cc:	ldrb	r2, [r2, #0]
     9ce:	cbz	r2, 9de <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
     9d0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
     9d4:	ldr	r5, [pc, #108]	; (a44 <usb_serial_flush_callback+0x84>)
     9d6:	ldrh	r2, [r5, #0]
     9d8:	cbnz	r2, 9e0 <usb_serial_flush_callback+0x20>
     9da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     9de:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     9e0:	ldr	r6, [pc, #100]	; (a48 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     9e2:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     9e6:	ldr	r7, [pc, #100]	; (a4c <usb_serial_flush_callback+0x8c>)
     9e8:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     9ea:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     9ec:	ldr	r4, [pc, #96]	; (a50 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     9ee:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     9f2:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     9f6:	mov	r0, r7
     9f8:	mov	r1, r4
     9fa:	bl	1b40 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     9fe:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     a02:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     a06:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     a0a:	ldr	r3, [pc, #72]	; (a54 <usb_serial_flush_callback+0x94>)
     a0c:	str	r1, [r3, #0]
		location += 32;
     a0e:	adds	r1, #32
	} while (location < end_addr);
     a10:	cmp	r2, r1
     a12:	bhi.n	a0c <usb_serial_flush_callback+0x4c>
	asm("dsb");
     a14:	dsb	sy
	asm("isb");
     a18:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     a1c:	movs	r0, #4
     a1e:	mov	r1, r7
     a20:	bl	1b70 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     a24:	ldrb	r3, [r6, #0]
     a26:	ldr	r2, [pc, #32]	; (a48 <usb_serial_flush_callback+0x88>)
     a28:	adds	r3, #1
     a2a:	uxtb	r3, r3
     a2c:	cmp	r3, #3
     a2e:	it	hi
     a30:	movhi	r3, #0
     a32:	strb	r3, [r2, #0]
	tx_available = 0;
     a34:	movs	r3, #0
     a36:	strh	r3, [r5, #0]
     a38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a3c:	.word	0x20000c92
     a40:	.word	0x20000e98
     a44:	.word	0x20000dc6
     a48:	.word	0x20000c93
     a4c:	.word	0x20000de0
     a50:	.word	0x20201000
     a54:	.word	0xe000ef70

00000a58 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
     a58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a5c:	sub	sp, #20
     a5e:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     a60:	str	r1, [sp, #4]
     a62:	cmp	r1, #0
     a64:	beq.w	bac <usb_serial_write.part.1+0x154>
     a68:	movs	r3, #0
     a6a:	ldr.w	r8, [pc, #348]	; bc8 <usb_serial_write.part.1+0x170>
     a6e:	ldr.w	r9, [pc, #332]	; bbc <usb_serial_write.part.1+0x164>
     a72:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
     a74:	ldr	r6, [pc, #312]	; (bb0 <usb_serial_write.part.1+0x158>)
     a76:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     a7a:	ldr.w	sl, [pc, #336]	; bcc <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
     a7e:	ldr.w	fp, [pc, #336]	; bd0 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
     a82:	ldr	r2, [pc, #304]	; (bb4 <usb_serial_write.part.1+0x15c>)
     a84:	ldrb	r4, [r2, #0]
     a86:	ldr	r2, [pc, #304]	; (bb8 <usb_serial_write.part.1+0x160>)
     a88:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     a8c:	cmp	r3, #0
     a8e:	bne.n	b6e <usb_serial_write.part.1+0x116>
     a90:	mov	r5, r3
     a92:	mov	r4, r3
     a94:	b.n	ac0 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     a96:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
     a9a:	cbnz	r4, a9e <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
     a9c:	ldr	r5, [r6, #0]
     a9e:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     aa0:	cmp	r3, #0
     aa2:	bne.n	b62 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
     aa4:	ldr	r3, [r6, #0]
     aa6:	subs	r3, r3, r5
     aa8:	cmp	r3, #120	; 0x78
     aaa:	bhi.n	ba0 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     aac:	ldrb.w	r3, [sl]
     ab0:	cmp	r3, #0
     ab2:	beq.n	b62 <usb_serial_write.part.1+0x10a>
			yield();
     ab4:	bl	434 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     ab8:	ldrh.w	r3, [r8]
     abc:	cmp	r3, #0
     abe:	bne.n	b6a <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
     ac0:	mov	r0, r7
     ac2:	bl	1bbc <usb_transfer_status>
			if (!(status & 0x80)) {
     ac6:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     aca:	ldr	r2, [pc, #240]	; (bbc <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
     acc:	bne.n	a96 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     ace:	mov.w	r3, #2048	; 0x800
     ad2:	ldr	r2, [pc, #224]	; (bb4 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
     ad4:	strb.w	r0, [r9]
     ad8:	ldrb	r4, [r2, #0]
     ada:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     adc:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     ae0:	lsls	r4, r4, #11
		if (size >= tx_available) {
     ae2:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     ae4:	ldr	r1, [pc, #216]	; (bc0 <usb_serial_write.part.1+0x168>)
     ae6:	add	r0, r4
		if (size >= tx_available) {
     ae8:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     aea:	add	r0, r1
		if (size >= tx_available) {
     aec:	bcc.n	b76 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     aee:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
     af0:	ldr	r1, [sp, #8]
     af2:	bl	1ef8 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
     af6:	movs	r3, #0
     af8:	mov	r1, r4
     afa:	mov.w	r2, #2048	; 0x800
     afe:	mov	r0, r7
     b00:	bl	1b40 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     b04:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     b08:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
     b0c:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     b10:	str.w	r3, [fp]
		location += 32;
     b14:	adds	r3, #32
	} while (location < end_addr);
     b16:	cmp	r4, r3
     b18:	bhi.n	b10 <usb_serial_write.part.1+0xb8>
	asm("dsb");
     b1a:	dsb	sy
	asm("isb");
     b1e:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
     b22:	movs	r0, #4
     b24:	mov	r1, r7
     b26:	bl	1b70 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
     b2a:	ldr	r3, [pc, #136]	; (bb4 <usb_serial_write.part.1+0x15c>)
     b2c:	ldr	r2, [pc, #132]	; (bb4 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
     b2e:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     b30:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     b32:	ldr	r0, [pc, #144]	; (bc4 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     b34:	adds	r3, #1
     b36:	uxtb	r3, r3
     b38:	cmp	r3, #3
     b3a:	it	hi
     b3c:	movhi	r3, #0
     b3e:	strb	r3, [r2, #0]
			size -= tx_available;
     b40:	ldrh.w	r2, [r8]
			sent += tx_available;
     b44:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
     b46:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
     b4a:	add	r3, r2
     b4c:	str	r3, [sp, #0]
			data += tx_available;
     b4e:	ldr	r3, [sp, #8]
     b50:	add	r3, r2
     b52:	str	r3, [sp, #8]
     b54:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     b56:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     b5a:	ldr	r1, [sp, #4]
     b5c:	subs	r2, r1, r2
     b5e:	str	r2, [sp, #4]
     b60:	bne.n	a82 <usb_serial_write.part.1+0x2a>
     b62:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     b64:	add	sp, #20
     b66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b6a:	ldr	r2, [pc, #72]	; (bb4 <usb_serial_write.part.1+0x15c>)
     b6c:	ldrb	r4, [r2, #0]
     b6e:	mov	r2, r3
     b70:	rsb	r0, r3, #2048	; 0x800
     b74:	b.n	ae0 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
     b76:	ldr	r4, [sp, #4]
     b78:	ldr	r1, [sp, #8]
     b7a:	mov	r2, r4
     b7c:	str	r3, [sp, #12]
     b7e:	bl	1ef8 <memcpy>
			tx_available -= size;
     b82:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     b84:	ldr	r2, [pc, #60]	; (bc4 <usb_serial_write.part.1+0x16c>)
     b86:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
     b8a:	subs	r3, r3, r4
     b8c:	strh.w	r3, [r8]
     b90:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     b92:	str.w	r1, [r2, #132]	; 0x84
     b96:	mov	r0, r3
     b98:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     b9a:	add	sp, #20
     b9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     ba0:	movs	r3, #1
				return sent;
     ba2:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     ba4:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     ba6:	add	sp, #20
     ba8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     bac:	ldr	r0, [sp, #4]
     bae:	b.n	b64 <usb_serial_write.part.1+0x10c>
     bb0:	.word	0x20000c5c
     bb4:	.word	0x20000c93
     bb8:	.word	0x20000de0
     bbc:	.word	0x20000dc5
     bc0:	.word	0x20201000
     bc4:	.word	0x402e0000
     bc8:	.word	0x20000dc6
     bcc:	.word	0x20000e98
     bd0:	.word	0xe000ef70

00000bd4 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
     bd4:	bx	lr
     bd6:	nop

00000bd8 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     bd8:	ldr	r3, [pc, #196]	; (ca0 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
     bda:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     bde:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
     be0:	ldr	r7, [pc, #192]	; (ca4 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     be2:	cmp	r3, #0
     be4:	beq.n	c90 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
     be6:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
     bea:	ldr.w	r8, [pc, #236]	; cd8 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
     bee:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
     bf0:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     bf4:	movs	r1, #0
     bf6:	movs	r2, #128	; 0x80
     bf8:	ldr	r0, [pc, #172]	; (ca8 <usb_serial_configure+0xd0>)
	tx_head = 0;
     bfa:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     bfc:	ldr	r6, [pc, #172]	; (cac <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     bfe:	bl	2670 <memset>
	tx_head = 0;
     c02:	ldr	r4, [pc, #172]	; (cb0 <usb_serial_configure+0xd8>)
	tx_available = 0;
     c04:	ldr	r3, [pc, #172]	; (cb4 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
     c06:	mov	r1, r5
     c08:	mov.w	r2, #256	; 0x100
     c0c:	ldr	r0, [pc, #168]	; (cb8 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
     c0e:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     c10:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
     c12:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     c14:	bl	2670 <memset>
	memset(rx_count, 0, sizeof(rx_count));
     c18:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     c1a:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     c1c:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     c1e:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     c20:	str	r5, [r6, #8]
     c22:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     c24:	ldr	r1, [pc, #148]	; (cbc <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     c26:	ldr	r6, [pc, #152]	; (cc0 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
     c28:	ldr	r0, [pc, #152]	; (cc4 <usb_serial_configure+0xec>)
	rx_available = 0;
     c2a:	ldr.w	lr, [pc, #176]	; cdc <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     c2e:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     c30:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
     c32:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     c34:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     c36:	str	r5, [r6, #0]
     c38:	str	r5, [r6, #4]
     c3a:	str	r5, [r6, #8]
     c3c:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
     c3e:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     c42:	bl	1ad8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
     c46:	ldrh.w	r1, [r8]
     c4a:	mov	r2, r5
     c4c:	ldr	r3, [pc, #120]	; (cc8 <usb_serial_configure+0xf0>)
     c4e:	movs	r0, #3
     c50:	bl	1a74 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
     c54:	mov	r3, r5
     c56:	ldrh	r1, [r7, #0]
     c58:	movs	r2, #1
     c5a:	movs	r0, #4
     c5c:	bl	1ad8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     c60:	mov	r0, r4
     c62:	adds	r4, #1
     c64:	bl	8a0 <rx_queue_transfer>
     c68:	cmp	r4, #8
     c6a:	bne.n	c60 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
     c6c:	ldr	r3, [pc, #92]	; (ccc <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
     c6e:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     c70:	ldr	r0, [pc, #92]	; (cd0 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
     c72:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     c74:	ldr	r4, [pc, #92]	; (cd4 <usb_serial_configure+0xfc>)
     c76:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
     c78:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
     c7c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
     c80:	ldr.w	r2, [r3, #328]	; 0x148
     c84:	orr.w	r2, r2, #16777216	; 0x1000000
     c88:	str.w	r2, [r3, #328]	; 0x148
     c8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     c90:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
     c92:	ldr.w	r8, [pc, #68]	; cd8 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     c96:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
     c98:	strh.w	r3, [r8]
     c9c:	b.n	bf4 <usb_serial_configure+0x1c>
     c9e:	nop
     ca0:	.word	0x20000e70
     ca4:	.word	0x20000c90
     ca8:	.word	0x20000de0
     cac:	.word	0x20000db0
     cb0:	.word	0x20000c93
     cb4:	.word	0x20000dc6
     cb8:	.word	0x20000ca0
     cbc:	.word	0x20000dc4
     cc0:	.word	0x20000c80
     cc4:	.word	0x20000da0
     cc8:	.word	0x0000090d
     ccc:	.word	0x402e0000
     cd0:	.word	0x20000e60
     cd4:	.word	0x000009c1
     cd8:	.word	0x20000dae
     cdc:	.word	0x20000dc0

00000ce0 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     ce0:	ldr	r3, [pc, #196]	; (da8 <usb_serial_read+0xc8>)
     ce2:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     ce6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     cea:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     cec:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     cee:	ldr	r3, [pc, #188]	; (dac <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     cf0:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     cf2:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     cf4:	cmp	r1, #0
     cf6:	beq.n	da0 <usb_serial_read+0xc0>
     cf8:	ldr	r3, [pc, #180]	; (db0 <usb_serial_read+0xd0>)
     cfa:	uxtb	r4, r4
     cfc:	ldrb	r3, [r3, #0]
     cfe:	cmp	r4, r3
     d00:	beq.n	da4 <usb_serial_read+0xc4>
     d02:	mov	sl, r0
     d04:	movs	r7, #0
     d06:	ldr.w	fp, [pc, #192]	; dc8 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
     d0a:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     d0c:	ldr	r3, [pc, #164]	; (db4 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
     d0e:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     d12:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     d14:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     d16:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
     d18:	ldr	r3, [pc, #156]	; (db8 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     d1a:	it	cs
     d1c:	movcs	r4, #0
		uint32_t i = rx_list[tail];
     d1e:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     d20:	ldr	r3, [pc, #144]	; (db4 <usb_serial_read+0xd4>)
     d22:	ldrh.w	lr, [r3, r5, lsl #1]
     d26:	ldr	r3, [pc, #148]	; (dbc <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     d28:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     d2c:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     d30:	ldr	r3, [pc, #140]	; (dc0 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     d32:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     d36:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     d38:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     d3a:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
     d3c:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     d3e:	bcs.n	d74 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
     d40:	add.w	r1, lr, r5, lsl #9
     d44:	mov	r2, r8
     d46:	add	r1, r3
     d48:	bl	1ef8 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
     d4c:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     d4e:	ldr.w	r1, [fp]
     d52:	mov	r0, r9
			rx_index[i] += len;
     d54:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     d58:	rsb	r1, r8, r1
			rx_index[i] += len;
     d5c:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     d5e:	str.w	r1, [fp]
			rx_index[i] += len;
     d62:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
     d66:	ldr	r3, [pc, #92]	; (dc4 <usb_serial_read+0xe4>)
     d68:	mov.w	r2, #131072	; 0x20000
     d6c:	str	r2, [r3, #0]
	return count;
}
     d6e:	add	sp, #12
     d70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     d74:	bl	1ef8 <memcpy>
			p += avail;
			rx_available -= avail;
     d78:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     d7c:	uxtb	r3, r4
			rx_queue_transfer(i);
     d7e:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
     d80:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
     d82:	add	sl, r6
			rx_available -= avail;
     d84:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     d88:	ldr	r2, [pc, #32]	; (dac <usb_serial_read+0xcc>)
     d8a:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
     d8c:	bl	8a0 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     d90:	cmp	r9, r7
     d92:	bls.n	d9c <usb_serial_read+0xbc>
     d94:	ldr	r3, [pc, #24]	; (db0 <usb_serial_read+0xd0>)
     d96:	ldrb	r3, [r3, #0]
     d98:	cmp	r4, r3
     d9a:	bne.n	d0a <usb_serial_read+0x2a>
     d9c:	mov	r0, r7
     d9e:	b.n	d66 <usb_serial_read+0x86>
     da0:	mov	r0, r1
     da2:	b.n	d66 <usb_serial_read+0x86>
     da4:	movs	r0, #0
     da6:	b.n	d66 <usb_serial_read+0x86>
     da8:	.word	0xe000e18c
     dac:	.word	0x20000da0
     db0:	.word	0x20000dc4
     db4:	.word	0x20000c80
     db8:	.word	0x20000da4
     dbc:	.word	0x20000db0
     dc0:	.word	0x20200000
     dc4:	.word	0xe000e10c
     dc8:	.word	0x20000dc0

00000dcc <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     dcc:	ldr	r3, [pc, #44]	; (dfc <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
     dce:	ldr	r2, [pc, #48]	; (e00 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     dd0:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
     dd2:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     dd4:	uxtb	r3, r3
	if (tail == rx_head) return -1;
     dd6:	cmp	r3, r2
     dd8:	beq.n	df6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
     dda:	adds	r3, #1
	uint32_t i = rx_list[tail];
     ddc:	ldr	r0, [pc, #36]	; (e04 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     dde:	ldr	r2, [pc, #40]	; (e08 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     de0:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     de2:	ldr	r1, [pc, #40]	; (e0c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     de4:	it	cs
     de6:	movcs	r3, #0
	uint32_t i = rx_list[tail];
     de8:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     dea:	ldrh.w	r1, [r1, r3, lsl #1]
     dee:	add.w	r3, r2, r3, lsl #9
     df2:	ldrb	r0, [r3, r1]
     df4:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
     df6:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
     dfa:	bx	lr
     dfc:	.word	0x20000da0
     e00:	.word	0x20000dc4
     e04:	.word	0x20000da4
     e08:	.word	0x20200000
     e0c:	.word	0x20000c80

00000e10 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
     e10:	ldr	r3, [pc, #4]	; (e18 <usb_serial_available+0x8>)
     e12:	ldr	r0, [r3, #0]
}
     e14:	bx	lr
     e16:	nop
     e18:	.word	0x20000dc0

00000e1c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
     e1c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
     e20:	ldr	r6, [pc, #84]	; (e78 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
     e22:	ldr	r5, [pc, #88]	; (e7c <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     e24:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
     e26:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     e28:	uxtb	r4, r4
	while (tail != rx_head) {
     e2a:	cmp	r4, r3
     e2c:	beq.n	e72 <usb_serial_flush_input+0x56>
     e2e:	ldr.w	r9, [pc, #84]	; e84 <usb_serial_flush_input+0x68>
     e32:	ldr.w	fp, [pc, #84]	; e88 <usb_serial_flush_input+0x6c>
     e36:	ldr.w	r8, [pc, #84]	; e8c <usb_serial_flush_input+0x70>
     e3a:	ldr	r7, [pc, #68]	; (e80 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
     e3c:	adds	r4, #1
     e3e:	cmp	r4, #8
     e40:	uxtb.w	sl, r4
     e44:	bls.n	e4a <usb_serial_flush_input+0x2e>
     e46:	movs	r4, #0
     e48:	mov	sl, r4
		uint32_t i = rx_list[tail];
     e4a:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
     e4e:	ldr.w	r2, [fp]
     e52:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
     e56:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
     e58:	ldrh.w	r1, [r7, r1, lsl #1]
     e5c:	subs	r3, r3, r1
     e5e:	subs	r3, r2, r3
     e60:	str.w	r3, [fp]
		rx_queue_transfer(i);
     e64:	bl	8a0 <rx_queue_transfer>
		rx_tail = tail;
     e68:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
     e6c:	ldrb	r3, [r5, #0]
     e6e:	cmp	r4, r3
     e70:	bne.n	e3c <usb_serial_flush_input+0x20>
     e72:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e76:	nop
     e78:	.word	0x20000da0
     e7c:	.word	0x20000dc4
     e80:	.word	0x20000c80
     e84:	.word	0x20000da4
     e88:	.word	0x20000dc0
     e8c:	.word	0x20000db0

00000e90 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     e90:	push	{lr}
     e92:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
     e94:	movs	r1, #1
     e96:	add.w	r0, sp, #7
     e9a:	bl	ce0 <usb_serial_read>
     e9e:	cbz	r0, eaa <usb_serial_getchar+0x1a>
     ea0:	ldrb.w	r0, [sp, #7]
	return -1;
}
     ea4:	add	sp, #12
     ea6:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
     eaa:	mov.w	r0, #4294967295
     eae:	b.n	ea4 <usb_serial_getchar+0x14>

00000eb0 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     eb0:	ldr	r3, [pc, #36]	; (ed8 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     eb2:	push	{lr}
     eb4:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     eb6:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     eb8:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     ebc:	cbnz	r3, ec8 <usb_serial_putchar+0x18>
     ebe:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
     ec2:	add	sp, #12
     ec4:	ldr.w	pc, [sp], #4
     ec8:	movs	r1, #1
     eca:	add.w	r0, sp, #7
     ece:	bl	a58 <usb_serial_write.part.1>
     ed2:	add	sp, #12
     ed4:	ldr.w	pc, [sp], #4
     ed8:	.word	0x20000e98

00000edc <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     edc:	ldr	r3, [pc, #16]	; (ef0 <usb_serial_write+0x14>)
     ede:	ldrb	r3, [r3, #0]
     ee0:	and.w	r2, r3, #255	; 0xff
     ee4:	cbz	r3, eea <usb_serial_write+0xe>
     ee6:	b.w	a58 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     eea:	mov	r0, r2
     eec:	bx	lr
     eee:	nop
     ef0:	.word	0x20000e98

00000ef4 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
     ef4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     ef8:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
     efa:	ldr.w	r8, [pc, #64]	; f3c <usb_serial_write_buffer_free+0x48>
     efe:	movs	r3, #1
     f00:	ldr	r5, [pc, #48]	; (f34 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
     f02:	mov	r7, r4
     f04:	ldr	r6, [pc, #48]	; (f38 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
     f06:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     f0a:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     f0c:	mov	r0, r5
     f0e:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     f10:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     f12:	add.w	r4, r4, #1
		if (i == tx_head) continue;
     f16:	beq.n	f24 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     f18:	bl	1bbc <usb_transfer_status>
     f1c:	lsls	r3, r0, #24
     f1e:	it	pl
     f20:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     f24:	cmp	r4, #4
     f26:	bne.n	f0a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     f28:	movs	r3, #0
	return sum;
}
     f2a:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     f2c:	strb.w	r3, [r8]
	return sum;
}
     f30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f34:	.word	0x20000de0
     f38:	.word	0x20000c93
     f3c:	.word	0x20000c92

00000f40 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
     f40:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
     f44:	ldr	r3, [pc, #124]	; (fc4 <usb_serial_flush_output+0x84>)
     f46:	ldrb	r3, [r3, #0]
     f48:	cbz	r3, f50 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
     f4a:	ldr	r5, [pc, #124]	; (fc8 <usb_serial_flush_output+0x88>)
     f4c:	ldrh	r2, [r5, #0]
     f4e:	cbnz	r2, f54 <usb_serial_flush_output+0x14>
     f50:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     f54:	ldr.w	r8, [pc, #132]	; fdc <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     f58:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     f5c:	ldr	r6, [pc, #108]	; (fcc <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     f5e:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
     f62:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     f66:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     f68:	ldr	r4, [pc, #100]	; (fd0 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     f6a:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     f6c:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     f70:	ldr	r7, [pc, #96]	; (fd4 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     f72:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     f76:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     f78:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     f7c:	mov	r1, r4
     f7e:	bl	1b40 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     f82:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     f86:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     f8a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     f8e:	ldr	r3, [pc, #72]	; (fd8 <usb_serial_flush_output+0x98>)
     f90:	str	r1, [r3, #0]
		location += 32;
     f92:	adds	r1, #32
	} while (location < end_addr);
     f94:	cmp	r2, r1
     f96:	bhi.n	f90 <usb_serial_flush_output+0x50>
	asm("dsb");
     f98:	dsb	sy
	asm("isb");
     f9c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     fa0:	movs	r0, #4
     fa2:	mov	r1, r6
     fa4:	bl	1b70 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     fa8:	ldrb.w	r3, [r8]
     fac:	ldr	r2, [pc, #44]	; (fdc <usb_serial_flush_output+0x9c>)
     fae:	adds	r3, #1
     fb0:	uxtb	r3, r3
     fb2:	cmp	r3, #3
     fb4:	it	hi
     fb6:	movhi	r3, #0
     fb8:	strb	r3, [r2, #0]
	tx_available = 0;
     fba:	movs	r3, #0
     fbc:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
     fbe:	strb	r3, [r7, #0]
     fc0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     fc4:	.word	0x20000e98
     fc8:	.word	0x20000dc6
     fcc:	.word	0x20000de0
     fd0:	.word	0x20201000
     fd4:	.word	0x20000c92
     fd8:	.word	0xe000ef70
     fdc:	.word	0x20000c93

00000fe0 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     fe0:	ldr	r2, [pc, #600]	; (123c <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     fe2:	ldr	r3, [pc, #604]	; (1240 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     fe4:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     fe6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     fea:	ldr	r4, [pc, #600]	; (1244 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     fec:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     ff0:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     ff2:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     ff4:	bls.n	1030 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     ff6:	ldr	r3, [pc, #592]	; (1248 <set_arm_clock+0x268>)
     ff8:	cmp	r0, r3
     ffa:	bls.w	1228 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     ffe:	ldr	r3, [pc, #588]	; (124c <set_arm_clock+0x26c>)
    1000:	movw	r5, #1575	; 0x627
    1004:	ldr	r7, [pc, #584]	; (1250 <set_arm_clock+0x270>)
    1006:	add	r3, r0
    1008:	ldr	r4, [pc, #584]	; (1254 <set_arm_clock+0x274>)
    100a:	lsrs	r2, r3, #8
    100c:	umull	r3, r2, r7, r2
    1010:	lsrs	r3, r2, #7
    1012:	add.w	r3, r3, r3, lsl #2
    1016:	add.w	r2, r3, r3, lsl #2
    101a:	addw	r3, r2, #1250	; 0x4e2
    101e:	cmp	r3, r5
    1020:	it	cs
    1022:	movcs	r3, r5
    1024:	sub.w	r3, r3, #800	; 0x320
    1028:	umull	r3, r5, r4, r3
    102c:	lsrs	r5, r5, #3
    102e:	b.n	103a <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    1030:	ldr	r5, [pc, #548]	; (1258 <set_arm_clock+0x278>)
    1032:	cmp	r0, r5
    1034:	ite	ls
    1036:	movls	r5, #6
    1038:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    103a:	ldr	r2, [pc, #516]	; (1240 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    103c:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1040:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1044:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1046:	orr.w	r3, r3, #192	; 0xc0
    104a:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    104e:	bcs.n	1066 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1050:	ldr	r3, [pc, #496]	; (1244 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1052:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1056:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1058:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    105a:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    105c:	ldr	r3, [r2, #0]
    105e:	cmp	r3, #0
    1060:	bge.n	105c <set_arm_clock+0x7c>
    1062:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    1066:	ands.w	r3, lr, #33554432	; 0x2000000
    106a:	bne.n	10d0 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    106c:	ldr	r4, [pc, #492]	; (125c <set_arm_clock+0x27c>)
    106e:	ldr	r2, [pc, #496]	; (1260 <set_arm_clock+0x280>)
    1070:	ldr.w	ip, [r4, #16]
    1074:	mov	r4, r2
    1076:	and.w	r2, ip, r2
    107a:	cmp	r2, r4
    107c:	itet	eq
    107e:	moveq.w	r3, #402653184	; 0x18000000
    1082:	movne.w	r2, #4096	; 0x1000
    1086:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1088:	eor.w	r4, lr, r3
    108c:	tst.w	r4, #939524096	; 0x38000000
    1090:	beq.n	10a4 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    1092:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1096:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    109a:	ldr	r4, [pc, #420]	; (1240 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    109c:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    10a0:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    10a4:	eor.w	r3, r1, r2
    10a8:	tst.w	r3, #12288	; 0x3000
    10ac:	beq.n	10c0 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    10ae:	ldr	r3, [pc, #400]	; (1240 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    10b0:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    10b4:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    10b6:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    10b8:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    10ba:	ldr	r3, [r2, #72]	; 0x48
    10bc:	lsls	r4, r3, #28
    10be:	bmi.n	10ba <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    10c0:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    10c4:	ldr	r2, [pc, #376]	; (1240 <set_arm_clock+0x260>)
    10c6:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    10ca:	ldr	r3, [r2, #72]	; 0x48
    10cc:	lsls	r1, r3, #26
    10ce:	bmi.n	10ca <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    10d0:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    10d2:	ldr	r4, [pc, #400]	; (1264 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    10d4:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    10d6:	mul.w	r3, r1, r2
    10da:	mul.w	r3, r0, r3
    10de:	cmp	r3, r4
    10e0:	bhi.n	10f6 <set_arm_clock+0x116>
		if (div_arm < 8) {
    10e2:	cmp	r2, #7
    10e4:	bhi.w	1212 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    10e8:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    10ea:	mul.w	r3, r1, r2
    10ee:	mul.w	r3, r0, r3
    10f2:	cmp	r3, r4
    10f4:	bls.n	10e2 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    10f6:	ldr	r0, [pc, #368]	; (1268 <set_arm_clock+0x288>)
    10f8:	ldr	r4, [pc, #368]	; (126c <set_arm_clock+0x28c>)
    10fa:	add	r0, r3
    10fc:	umull	r0, r3, r4, r0
    1100:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    1102:	cmp	r3, #108	; 0x6c
    1104:	bhi.w	121e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    1108:	cmp	r3, #53	; 0x35
    110a:	bhi.w	122c <set_arm_clock+0x24c>
    110e:	ldr.w	r8, [pc, #392]	; 1298 <set_arm_clock+0x2b8>
    1112:	movs	r3, #54	; 0x36
    1114:	ldr	r0, [pc, #344]	; (1270 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1116:	ldr.w	ip, [pc, #324]	; 125c <set_arm_clock+0x27c>
    111a:	ldr	r4, [pc, #344]	; (1274 <set_arm_clock+0x294>)
    111c:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1120:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1124:	and.w	r4, r9, r4
    1128:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    112a:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    112e:	beq.n	1148 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    1130:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1134:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1138:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    113a:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    113e:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1142:	ldr	r3, [r4, #0]
    1144:	cmp	r3, #0
    1146:	bge.n	1142 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    1148:	ldr.w	ip, [pc, #244]	; 1240 <set_arm_clock+0x260>
    114c:	subs	r2, #1
    114e:	ldr.w	r3, [ip, #16]
    1152:	and.w	r3, r3, #7
    1156:	cmp	r3, r2
    1158:	beq.n	116a <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    115a:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    115e:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1160:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1164:	ldr	r3, [r4, #72]	; 0x48
    1166:	lsls	r3, r3, #15
    1168:	bmi.n	1164 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    116a:	subs	r1, #1
    116c:	lsls	r1, r1, #10
    116e:	eor.w	r3, lr, r1
    1172:	tst.w	r3, #7168	; 0x1c00
    1176:	beq.n	1192 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    1178:	ldr	r3, [pc, #196]	; (1240 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    117a:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    117e:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1182:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1184:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    1188:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    118c:	ldr	r3, [r2, #72]	; 0x48
    118e:	lsls	r1, r3, #30
    1190:	bmi.n	118c <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1192:	ldr	r3, [pc, #228]	; (1278 <set_arm_clock+0x298>)
    1194:	ldr	r1, [pc, #228]	; (127c <set_arm_clock+0x29c>)
    1196:	add	r3, r0
    1198:	lsrs	r3, r3, #7
    119a:	umull	r3, r1, r1, r3
    119e:	lsrs	r1, r1, #12
    11a0:	cmp	r1, #4
    11a2:	it	cs
    11a4:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    11a6:	subs	r3, r1, #1
    11a8:	lsls	r3, r3, #8
    11aa:	eor.w	r2, lr, r3
    11ae:	tst.w	r2, #768	; 0x300
    11b2:	beq.n	11c4 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    11b4:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    11b8:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    11bc:	ldr	r2, [pc, #128]	; (1240 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    11be:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    11c2:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    11c4:	ldr	r3, [pc, #120]	; (1240 <set_arm_clock+0x260>)
    11c6:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    11c8:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    11ca:	bic.w	r4, r4, #33554432	; 0x2000000
    11ce:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    11d0:	ldr	r3, [r2, #72]	; 0x48
    11d2:	lsls	r3, r3, #26
    11d4:	bmi.n	11d0 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    11d6:	ldr	r3, [pc, #168]	; (1280 <set_arm_clock+0x2a0>)
    11d8:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    11dc:	ldr	r4, [pc, #164]	; (1284 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    11de:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    11e0:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    11e4:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    11e6:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    11ea:	ldr	r4, [pc, #156]	; (1288 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    11ec:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    11f0:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    11f4:	ldr	r2, [pc, #148]	; (128c <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    11f6:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    11f8:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    11fa:	bcs.n	120e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    11fc:	ldr	r3, [pc, #68]	; (1244 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    11fe:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1202:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1204:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1206:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1208:	ldr	r3, [r2, #0]
    120a:	cmp	r3, #0
    120c:	bge.n	1208 <set_arm_clock+0x228>
	}

	return frequency;
}
    120e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    1212:	cmp	r1, #4
    1214:	bhi.w	10f6 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    1218:	adds	r1, #1
				div_arm = 1;
    121a:	movs	r2, #1
    121c:	b.n	10d6 <set_arm_clock+0xf6>
    121e:	ldr.w	r8, [pc, #124]	; 129c <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    1222:	movs	r3, #108	; 0x6c
    1224:	ldr	r0, [pc, #104]	; (1290 <set_arm_clock+0x2b0>)
    1226:	b.n	1116 <set_arm_clock+0x136>
    1228:	movs	r5, #18
    122a:	b.n	103a <set_arm_clock+0x5a>
    122c:	ldr	r0, [pc, #100]	; (1294 <set_arm_clock+0x2b4>)
    122e:	ldr.w	r8, [pc, #112]	; 12a0 <set_arm_clock+0x2c0>
    1232:	mul.w	r0, r0, r3
    1236:	orr.w	r8, r3, r8
    123a:	b.n	1116 <set_arm_clock+0x136>
    123c:	.word	0x1f78a400
    1240:	.word	0x400fc000
    1244:	.word	0x40080000
    1248:	.word	0x23c34600
    124c:	.word	0xdc3cba00
    1250:	.word	0x004cb223
    1254:	.word	0x51eb851f
    1258:	.word	0x016e3600
    125c:	.word	0x400d8000
    1260:	.word	0x80003040
    1264:	.word	0x269fb1ff
    1268:	.word	0x005b8d80
    126c:	.word	0x165e9f81
    1270:	.word	0x269fb200
    1274:	.word	0x8001307f
    1278:	.word	0x08f0d17f
    127c:	.word	0x00e5109f
    1280:	.word	0x431bde83
    1284:	.word	0x20000390
    1288:	.word	0x2000038c
    128c:	.word	0x20000c58
    1290:	.word	0x4d3f6400
    1294:	.word	0x00b71b00
    1298:	.word	0x80002036
    129c:	.word	0x8000206c
    12a0:	.word	0x80002000

000012a4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    12a4:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    12a6:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    12a8:	cbz	r3, 12b2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    12aa:	ldr	r3, [r2, #4]
    12ac:	orr.w	r3, r3, #32768	; 0x8000
    12b0:	str	r3, [r2, #4]
	}
	__disable_irq();
    12b2:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    12b4:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    12b6:	cbz	r4, 12e0 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    12b8:	ldr	r3, [pc, #64]	; (12fc <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    12ba:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    12bc:	ldr.w	r4, [r3, #432]	; 0x1b0
    12c0:	tst	r4, r1
    12c2:	bne.n	12f4 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    12c4:	ldr.w	r4, [r3, #320]	; 0x140
    12c8:	orr.w	r4, r4, #16384	; 0x4000
    12cc:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    12d0:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    12d4:	ldr.w	r4, [r3, #320]	; 0x140
    12d8:	lsls	r4, r4, #17
    12da:	bpl.n	12c4 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    12dc:	tst	r1, r5
    12de:	bne.n	12f4 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    12e0:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    12e2:	ldr	r4, [pc, #24]	; (12fc <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    12e4:	str	r2, [r0, #8]
	endpoint->status = 0;
    12e6:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    12e8:	ldr.w	r3, [r4, #432]	; 0x1b0
    12ec:	orrs	r1, r3
    12ee:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    12f2:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    12f4:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    12f6:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    12f8:	pop	{r4, r5}
    12fa:	bx	lr
    12fc:	.word	0x402e0000

00001300 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1300:	push	{r4, r5, r6, lr}
    1302:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1304:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    1306:	cbz	r0, 132e <run_callbacks+0x2e>
    1308:	mov	r2, r0
    130a:	movs	r4, #0
    130c:	b.n	1316 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    130e:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    1310:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    1312:	cmp	r2, #1
    1314:	beq.n	1330 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    1316:	ldr	r3, [r2, #4]
    1318:	ands.w	r3, r3, #128	; 0x80
    131c:	beq.n	130e <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    131e:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1320:	cbz	r4, 132e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    1322:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    1324:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    1326:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1328:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    132a:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    132c:	bne.n	1322 <run_callbacks+0x22>
    132e:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    1330:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    1332:	str	r3, [r6, #52]	; 0x34
			break;
    1334:	b.n	1320 <run_callbacks+0x20>
    1336:	nop

00001338 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1338:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    133a:	cbnz	r1, 137a <endpoint0_transmit.constprop.1+0x42>
    133c:	ldr	r4, [pc, #136]	; (13c8 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    133e:	ldr	r1, [pc, #140]	; (13cc <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1340:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1342:	ldr	r3, [pc, #140]	; (13d0 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1344:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1346:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    1348:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    134a:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    134c:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    134e:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    1350:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1352:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1356:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1358:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    135c:	ldr	r5, [pc, #116]	; (13d4 <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    135e:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1362:	ldr.w	r1, [r3, #432]	; 0x1b0
    1366:	orr.w	r1, r1, #1
    136a:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    136e:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    1370:	ldr.w	r3, [r2, #432]	; 0x1b0
    1374:	cmp	r3, #0
    1376:	bne.n	1370 <endpoint0_transmit.constprop.1+0x38>
}
    1378:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    137a:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    137c:	ldr	r3, [pc, #88]	; (13d8 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    137e:	ldr	r5, [pc, #80]	; (13d0 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1380:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1382:	ldr	r4, [pc, #68]	; (13c8 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1384:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1388:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    138a:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    138c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    138e:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1392:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1394:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1398:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    139a:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    139e:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    13a2:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    13a6:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    13a8:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    13aa:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    13ae:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    13b2:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    13b6:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    13b8:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    13ba:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    13be:	ldr.w	r3, [r2, #432]	; 0x1b0
    13c2:	cmp	r3, #0
    13c4:	bne.n	13be <endpoint0_transmit.constprop.1+0x86>
    13c6:	b.n	133e <endpoint0_transmit.constprop.1+0x6>
    13c8:	.word	0x20003000
    13cc:	.word	0x20002020
    13d0:	.word	0x402e0000
    13d4:	.word	0x20000e74
    13d8:	.word	0x20002000

000013dc <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    13dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    13e0:	ldr	r4, [pc, #752]	; (16d4 <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    13e2:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    13e4:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    13e8:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    13ec:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    13f0:	beq.n	14b0 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    13f2:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    13f6:	cmp	r3, #0
    13f8:	beq.n	14a6 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    13fa:	mov.w	fp, #65537	; 0x10001
    13fe:	ldr.w	r9, [pc, #764]	; 16fc <isr+0x320>
    1402:	ldr	r6, [pc, #724]	; (16d8 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1404:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1406:	mov	sl, fp
    1408:	ldr	r0, [r6, #40]	; 0x28
    140a:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    140c:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1410:	ldr.w	r3, [r4, #320]	; 0x140
    1414:	orr.w	r3, r3, #8192	; 0x2000
    1418:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    141c:	ldr.w	r3, [r4, #320]	; 0x140
    1420:	lsls	r7, r3, #18
    1422:	bpl.n	1410 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    1424:	ldr.w	r3, [r5, #320]	; 0x140
    1428:	bic.w	r3, r3, #8192	; 0x2000
    142c:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1430:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    1434:	ldr.w	r3, [r4, #436]	; 0x1b4
    1438:	ands.w	r3, r3, #65537	; 0x10001
    143c:	bne.n	1434 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    143e:	uxth	r1, r0
    1440:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    1444:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1448:	cmp	r1, r7
    144a:	bhi.w	1598 <isr+0x1bc>
    144e:	cmp.w	r1, #1664	; 0x680
    1452:	bcs.w	182c <isr+0x450>
    1456:	cmp.w	r1, #258	; 0x102
    145a:	beq.w	1732 <isr+0x356>
    145e:	bhi.w	162a <isr+0x24e>
    1462:	cmp	r1, #128	; 0x80
    1464:	beq.w	1718 <isr+0x33c>
    1468:	cmp	r1, #130	; 0x82
    146a:	bne.w	161a <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    146e:	uxth	r2, r2
    1470:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1474:	cmp	r1, #7
    1476:	bhi.w	161a <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    147a:	lsls	r1, r1, #2
    147c:	ldr	r0, [pc, #604]	; (16dc <isr+0x300>)
		reply_buffer[0] = 0;
    147e:	ldr	r7, [pc, #608]	; (16e0 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1480:	add	r0, r1
    1482:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1484:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    1486:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    1488:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    148a:	bpl.w	18aa <isr+0x4ce>
    148e:	lsls	r2, r1, #15
    1490:	bpl.n	1496 <isr+0xba>
			reply_buffer[0] = 1;
    1492:	movs	r3, #1
    1494:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    1496:	movs	r1, #2
    1498:	ldr	r0, [pc, #580]	; (16e0 <isr+0x304>)
    149a:	bl	1338 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    149e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    14a2:	cmp	r3, #0
    14a4:	bne.n	1408 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    14a6:	ldr	r2, [pc, #556]	; (16d4 <isr+0x2f8>)
    14a8:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    14ac:	cmp	r3, #0
    14ae:	bne.n	1552 <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    14b0:	tst.w	r8, #64	; 0x40
    14b4:	beq.n	14e8 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    14b6:	ldr	r3, [pc, #540]	; (16d4 <isr+0x2f8>)
    14b8:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    14bc:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    14be:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    14c2:	ldr.w	r1, [r3, #444]	; 0x1bc
    14c6:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    14ca:	ldr.w	r4, [r2, #432]	; 0x1b0
    14ce:	ldr	r3, [pc, #516]	; (16d4 <isr+0x2f8>)
    14d0:	cmp	r4, #0
    14d2:	bne.n	14ca <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    14d4:	mov.w	r2, #4294967295
    14d8:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    14dc:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    14e0:	bl	bd4 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    14e4:	ldr	r3, [pc, #508]	; (16e4 <isr+0x308>)
    14e6:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    14e8:	tst.w	r8, #16777216	; 0x1000000
    14ec:	beq.n	14f6 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    14ee:	ldr	r3, [pc, #504]	; (16e8 <isr+0x30c>)
    14f0:	ldr	r3, [r3, #0]
    14f2:	cbz	r3, 14f6 <isr+0x11a>
    14f4:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    14f6:	tst.w	r8, #33554432	; 0x2000000
    14fa:	beq.n	1504 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    14fc:	ldr	r3, [pc, #492]	; (16ec <isr+0x310>)
    14fe:	ldr	r3, [r3, #0]
    1500:	cbz	r3, 1504 <isr+0x128>
    1502:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    1504:	tst.w	r8, #4
    1508:	beq.n	151c <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    150a:	ldr	r3, [pc, #456]	; (16d4 <isr+0x2f8>)
    150c:	ldr.w	r3, [r3, #388]	; 0x184
    1510:	ands.w	r3, r3, #512	; 0x200
    1514:	beq.n	1592 <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    1516:	ldr	r3, [pc, #472]	; (16f0 <isr+0x314>)
    1518:	movs	r2, #1
    151a:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    151c:	ldr	r3, [pc, #436]	; (16d4 <isr+0x2f8>)
    151e:	ldr.w	r2, [r3, #328]	; 0x148
    1522:	lsls	r2, r2, #24
    1524:	bpl.n	154c <isr+0x170>
    1526:	tst.w	r8, #128	; 0x80
    152a:	beq.n	154c <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    152c:	ldr	r1, [pc, #452]	; (16f4 <isr+0x318>)
    152e:	ldrb	r2, [r1, #0]
    1530:	cbz	r2, 154c <isr+0x170>
			if (--usb_reboot_timer == 0) {
    1532:	subs	r2, #1
    1534:	uxtb	r2, r2
    1536:	strb	r2, [r1, #0]
    1538:	cbnz	r2, 154c <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    153a:	ldr	r1, [pc, #444]	; (16f8 <isr+0x31c>)
    153c:	ldrb	r2, [r1, #0]
    153e:	and.w	r2, r2, #251	; 0xfb
    1542:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    1544:	cmp	r2, #0
    1546:	beq.w	19ae <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    154a:	bkpt	0x00fb
		#endif
		#ifdef MULTITOUCH_INTERFACE
		usb_touchscreen_update_callback();
		#endif
	}
}
    154c:	add	sp, #12
    154e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1552:	ldr	r1, [pc, #424]	; (16fc <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    1554:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1558:	ldr	r0, [r1, #0]
    155a:	tst	r3, r0
    155c:	bne.w	1936 <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    1560:	ldr	r2, [pc, #384]	; (16e4 <isr+0x308>)
    1562:	ldr	r4, [r2, #0]
			if (completestatus) {
    1564:	ands	r4, r3
    1566:	beq.n	14b0 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1568:	lsls	r3, r4, #29
    156a:	bmi.w	19cc <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    156e:	lsls	r7, r4, #13
    1570:	bmi.w	19c4 <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1574:	lsls	r6, r4, #28
    1576:	bmi.w	19dc <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    157a:	lsls	r5, r4, #12
    157c:	bmi.w	19d4 <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1580:	lsls	r0, r4, #27
    1582:	bmi.w	19bc <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    1586:	lsls	r1, r4, #11
    1588:	bpl.n	14b0 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    158a:	ldr	r0, [pc, #372]	; (1700 <isr+0x324>)
    158c:	bl	1300 <run_callbacks>
    1590:	b.n	14b0 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    1592:	ldr	r2, [pc, #348]	; (16f0 <isr+0x314>)
    1594:	strb	r3, [r2, #0]
    1596:	b.n	151c <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1598:	movw	r7, #8225	; 0x2021
    159c:	cmp	r1, r7
    159e:	beq.n	1612 <isr+0x236>
    15a0:	bhi.n	1682 <isr+0x2a6>
    15a2:	cmp.w	r1, #2176	; 0x880
    15a6:	beq.w	1810 <isr+0x434>
    15aa:	cmp.w	r1, #2304	; 0x900
    15ae:	bne.n	161a <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    15b0:	ubfx	r0, r0, #16, #8
    15b4:	ldr	r2, [pc, #332]	; (1704 <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    15b6:	ldr	r1, [pc, #336]	; (1708 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    15b8:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    15ba:	ldr	r7, [pc, #336]	; (170c <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    15bc:	ldr	r2, [pc, #336]	; (1710 <isr+0x334>)
    15be:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    15c0:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    15c4:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    15c8:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    15cc:	bl	bd8 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15d0:	ldr	r2, [pc, #320]	; (1714 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    15d2:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15d4:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15d6:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    15d8:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15da:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15dc:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    15de:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    15e2:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    15e4:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    15e8:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    15ea:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    15ee:	ldr.w	r2, [r5, #432]	; 0x1b0
    15f2:	orr.w	r2, r2, #65536	; 0x10000
    15f6:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    15fa:	ldr	r2, [pc, #256]	; (16fc <isr+0x320>)
    15fc:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    15fe:	ldr.w	r3, [r4, #432]	; 0x1b0
    1602:	cmp	r3, #0
    1604:	bne.n	15fe <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1606:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    160a:	cmp	r3, #0
    160c:	bne.w	1408 <isr+0x2c>
    1610:	b.n	14a6 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    1612:	lsrs	r1, r2, #16
    1614:	cmp	r1, #7
    1616:	beq.w	18b2 <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    161a:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    161e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1622:	cmp	r3, #0
    1624:	bne.w	1408 <isr+0x2c>
    1628:	b.n	14a6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    162a:	movw	r7, #770	; 0x302
    162e:	cmp	r1, r7
    1630:	beq.w	17aa <isr+0x3ce>
    1634:	cmp.w	r1, #1280	; 0x500
    1638:	bne.n	161a <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    163a:	ldr	r2, [pc, #216]	; (1714 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    163c:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    163e:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1640:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1642:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1644:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1646:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    164a:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    164c:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1650:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1652:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1656:	ldr.w	r3, [r5, #432]	; 0x1b0
    165a:	orr.w	r3, r3, #65536	; 0x10000
    165e:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1662:	ldr.w	r3, [r4, #432]	; 0x1b0
    1666:	cmp	r3, #0
    1668:	bne.n	1662 <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    166a:	lsrs	r3, r0, #16
    166c:	lsls	r3, r3, #25
    166e:	orr.w	r3, r3, #16777216	; 0x1000000
    1672:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1676:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    167a:	cmp	r3, #0
    167c:	bne.w	1408 <isr+0x2c>
    1680:	b.n	14a6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1682:	movw	r3, #8737	; 0x2221
    1686:	cmp	r1, r3
    1688:	beq.w	1798 <isr+0x3bc>
    168c:	movw	r3, #8993	; 0x2321
    1690:	cmp	r1, r3
    1692:	bne.n	161a <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1694:	ldr	r3, [pc, #124]	; (1714 <isr+0x338>)
    1696:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1698:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    169a:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    169c:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    169e:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    16a0:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    16a4:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    16a6:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    16aa:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    16ac:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    16ae:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    16b2:	ldr.w	r3, [r4, #432]	; 0x1b0
    16b6:	orr.w	r3, r3, #65536	; 0x10000
    16ba:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    16be:	ldr.w	r3, [r4, #432]	; 0x1b0
    16c2:	cmp	r3, #0
    16c4:	bne.n	16be <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    16c6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    16ca:	cmp	r3, #0
    16cc:	bne.w	1408 <isr+0x2c>
    16d0:	b.n	14a6 <isr+0xca>
    16d2:	nop
    16d4:	.word	0x402e0000
    16d8:	.word	0x20003000
    16dc:	.word	0x402e01c0
    16e0:	.word	0x20000e88
    16e4:	.word	0x20000e64
    16e8:	.word	0x20000e60
    16ec:	.word	0x20000e6c
    16f0:	.word	0x20000e70
    16f4:	.word	0x20000e78
    16f8:	.word	0x20000e68
    16fc:	.word	0x20000e74
    1700:	.word	0x20003240
    1704:	.word	0x20000e98
    1708:	.word	0x000200c8
    170c:	.word	0x00cc0002
    1710:	.word	0x00c80002
    1714:	.word	0x20002020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1718:	ldr	r2, [pc, #744]	; (1a04 <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    171a:	movs	r1, #2
    171c:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    171e:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    1720:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    1722:	bl	1338 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1726:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    172a:	cmp	r3, #0
    172c:	bne.w	1408 <isr+0x2c>
    1730:	b.n	14a6 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1732:	uxth	r2, r2
    1734:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1738:	cmp	r3, #7
    173a:	bhi.w	161a <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    173e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1742:	mov.w	r3, r3, lsl #2
    1746:	ldr	r2, [pc, #704]	; (1a08 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1748:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    174c:	add	r2, r3
    174e:	ldr	r3, [r2, #0]
    1750:	ite	ne
    1752:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1756:	biceq.w	r3, r3, #1
    175a:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    175c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    175e:	ldr	r3, [pc, #684]	; (1a0c <isr+0x630>)
    1760:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1762:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1764:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1766:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    176a:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    176c:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1770:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1772:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1774:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1778:	ldr.w	r3, [r4, #432]	; 0x1b0
    177c:	orr.w	r3, r3, #65536	; 0x10000
    1780:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1784:	ldr.w	r3, [r4, #432]	; 0x1b0
    1788:	cmp	r3, #0
    178a:	bne.n	1784 <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    178c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1790:	cmp	r3, #0
    1792:	bne.w	1408 <isr+0x2c>
    1796:	b.n	14a6 <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1798:	ldr	r3, [pc, #628]	; (1a10 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    179a:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    179e:	ldr	r2, [pc, #628]	; (1a14 <isr+0x638>)
    17a0:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    17a2:	ldr	r3, [pc, #628]	; (1a18 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    17a4:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    17a6:	strb	r0, [r3, #0]
    17a8:	b.n	1694 <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    17aa:	uxth	r2, r2
    17ac:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    17b0:	cmp	r3, #7
    17b2:	bhi.w	161a <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    17b6:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    17ba:	mov.w	r3, r3, lsl #2
    17be:	ldr	r2, [pc, #584]	; (1a08 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    17c0:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    17c4:	add	r2, r3
    17c6:	ldr	r3, [r2, #0]
    17c8:	ite	ne
    17ca:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    17ce:	orreq.w	r3, r3, #1
    17d2:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17d4:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    17d6:	ldr	r3, [pc, #564]	; (1a0c <isr+0x630>)
    17d8:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    17da:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17dc:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    17de:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    17e2:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    17e4:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    17e8:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    17ea:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    17ec:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    17f0:	ldr.w	r3, [r4, #432]	; 0x1b0
    17f4:	orr.w	r3, r3, #65536	; 0x10000
    17f8:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    17fc:	ldr.w	r3, [r4, #432]	; 0x1b0
    1800:	cmp	r3, #0
    1802:	bne.n	17fc <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1804:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1808:	cmp	r3, #0
    180a:	bne.w	1408 <isr+0x2c>
    180e:	b.n	14a6 <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1810:	ldr	r2, [pc, #520]	; (1a1c <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1812:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1814:	ldr	r3, [pc, #492]	; (1a04 <isr+0x628>)
    1816:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1818:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    181a:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    181c:	bl	1338 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1820:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1824:	cmp	r3, #0
    1826:	bne.w	1408 <isr+0x2c>
    182a:	b.n	14a6 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    182c:	ldr	r3, [pc, #496]	; (1a20 <isr+0x644>)
    182e:	ldr	r1, [r3, #4]
    1830:	cmp	r1, #0
    1832:	beq.w	161a <isr+0x23e>
    1836:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1838:	uxth.w	lr, r2
    183c:	b.n	1848 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    183e:	adds	r3, #12
    1840:	ldr	r1, [r3, #4]
    1842:	cmp	r1, #0
    1844:	beq.w	161a <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1848:	ldrh	r7, [r3, #0]
    184a:	cmp	r7, r0
    184c:	bne.n	183e <isr+0x462>
    184e:	ldrh	r7, [r3, #2]
    1850:	cmp	r7, lr
    1852:	bne.n	183e <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    1854:	lsrs	r7, r0, #8
    1856:	cmp	r7, #3
    1858:	beq.w	1a68 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    185c:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    185e:	lsrs	r2, r2, #16
    1860:	cmp	r3, r2
    1862:	it	cs
    1864:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    1866:	cmp.w	r0, #512	; 0x200
    186a:	beq.w	19e4 <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    186e:	cmp.w	r0, #1792	; 0x700
    1872:	beq.w	1988 <isr+0x5ac>
    1876:	ldr	r7, [pc, #428]	; (1a24 <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1878:	mov	r2, r3
    187a:	str	r3, [sp, #4]
    187c:	mov	r0, r7
    187e:	bl	1ef8 <memcpy>
    1882:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1884:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1888:	add	r7, r3
	asm("dsb");
    188a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    188e:	ldr	r1, [pc, #408]	; (1a28 <isr+0x64c>)
    1890:	str	r2, [r1, #0]
		location += 32;
    1892:	adds	r2, #32
	} while (location < end_addr);
    1894:	cmp	r7, r2
    1896:	bhi.n	188e <isr+0x4b2>
	asm("dsb");
    1898:	dsb	sy
	asm("isb");
    189c:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    18a0:	ldr	r0, [pc, #384]	; (1a24 <isr+0x648>)
    18a2:	mov	r1, r3
    18a4:	bl	1338 <endpoint0_transmit.constprop.1>
    18a8:	b.n	149e <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    18aa:	lsls	r3, r1, #31
    18ac:	bpl.w	1496 <isr+0xba>
    18b0:	b.n	1492 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    18b2:	ldr	r7, [pc, #376]	; (1a2c <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    18b4:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    18b8:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    18ba:	ldr	r1, [pc, #372]	; (1a30 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    18bc:	ldr	r3, [pc, #372]	; (1a34 <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    18be:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    18c0:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    18c4:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    18c6:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    18ca:	ldr	r1, [pc, #364]	; (1a38 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    18cc:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    18ce:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    18d2:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    18d6:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    18da:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    18dc:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    18e0:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    18e4:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    18e8:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    18ea:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    18ec:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    18f0:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    18f2:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    18f4:	ldr.w	r3, [r4, #432]	; 0x1b0
    18f8:	cmp	r3, #0
    18fa:	bne.n	18f4 <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    18fc:	ldr	r2, [pc, #268]	; (1a0c <isr+0x630>)
    18fe:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1900:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1904:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1906:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1908:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    190c:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    190e:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1912:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1914:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1918:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    191a:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    191e:	ldr.w	r3, [r5, #432]	; 0x1b0
    1922:	orrs	r3, r0
    1924:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1928:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    192c:	ldr.w	r3, [r4, #432]	; 0x1b0
    1930:	cmp	r3, #0
    1932:	bne.n	192c <isr+0x550>
    1934:	b.n	149e <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1936:	ldr	r4, [pc, #244]	; (1a2c <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    1938:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    193c:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    193e:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1940:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    1942:	cmp	r4, r0
    1944:	bne.w	1560 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1948:	ldr	r1, [pc, #236]	; (1a38 <isr+0x65c>)
    194a:	ldr	r4, [pc, #240]	; (1a3c <isr+0x660>)
    194c:	ldmia	r1, {r0, r1}
    194e:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1950:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1952:	str	r0, [r4, #0]
    1954:	strh	r1, [r4, #4]
    1956:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1958:	bne.w	1560 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    195c:	cpsid	i
	sof_usage |= (1 << interface);
    195e:	ldr	r0, [pc, #224]	; (1a40 <isr+0x664>)
    1960:	ldrb	r1, [r0, #0]
    1962:	orr.w	r1, r1, #4
    1966:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1968:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    196c:	lsls	r0, r1, #24
    196e:	bmi.n	197e <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1970:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1974:	movs	r0, #128	; 0x80
    1976:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    197a:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    197e:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1980:	ldr	r2, [pc, #192]	; (1a44 <isr+0x668>)
    1982:	movs	r1, #80	; 0x50
    1984:	strb	r1, [r2, #0]
    1986:	b.n	1560 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1988:	ldr	r0, [pc, #188]	; (1a48 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    198a:	mov	r2, r3
    198c:	ldr	r7, [pc, #148]	; (1a24 <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    198e:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    1992:	ldr	r1, [pc, #184]	; (1a4c <isr+0x670>)
    1994:	ldr	r0, [pc, #184]	; (1a50 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    1996:	str	r3, [sp, #4]
    1998:	cmp.w	lr, #0
    199c:	it	eq
    199e:	moveq	r1, r0
    19a0:	mov	r0, r7
    19a2:	bl	1ef8 <memcpy>
					usb_descriptor_buffer[1] = 7;
    19a6:	movs	r2, #7
    19a8:	ldr	r3, [sp, #4]
    19aa:	strb	r2, [r7, #1]
    19ac:	b.n	1884 <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    19ae:	ldr.w	r2, [r3, #328]	; 0x148
    19b2:	bic.w	r2, r2, #128	; 0x80
    19b6:	str.w	r2, [r3, #328]	; 0x148
    19ba:	b.n	154a <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    19bc:	ldr	r0, [pc, #148]	; (1a54 <isr+0x678>)
    19be:	bl	1300 <run_callbacks>
    19c2:	b.n	1586 <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    19c4:	ldr	r0, [pc, #144]	; (1a58 <isr+0x67c>)
    19c6:	bl	1300 <run_callbacks>
    19ca:	b.n	1574 <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    19cc:	ldr	r0, [pc, #140]	; (1a5c <isr+0x680>)
    19ce:	bl	1300 <run_callbacks>
    19d2:	b.n	156e <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    19d4:	ldr	r0, [pc, #136]	; (1a60 <isr+0x684>)
    19d6:	bl	1300 <run_callbacks>
    19da:	b.n	1580 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    19dc:	ldr	r0, [pc, #132]	; (1a64 <isr+0x688>)
    19de:	bl	1300 <run_callbacks>
    19e2:	b.n	157a <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    19e4:	ldr	r0, [pc, #96]	; (1a48 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    19e6:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    19e8:	ldr	r1, [pc, #100]	; (1a50 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    19ea:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    19ec:	ldr	r0, [pc, #92]	; (1a4c <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    19ee:	str	r3, [sp, #4]
    19f0:	cmp	r7, #0
    19f2:	it	eq
    19f4:	moveq	r1, r0
    19f6:	ldr	r0, [pc, #44]	; (1a24 <isr+0x648>)
    19f8:	bl	1ef8 <memcpy>
    19fc:	ldr	r7, [pc, #36]	; (1a24 <isr+0x648>)
    19fe:	ldr	r3, [sp, #4]
    1a00:	b.n	1884 <isr+0x4a8>
    1a02:	nop
    1a04:	.word	0x20000e88
    1a08:	.word	0x402e01c0
    1a0c:	.word	0x20002020
    1a10:	.word	0x20000c5c
    1a14:	.word	0x200012c8
    1a18:	.word	0x20000dc8
    1a1c:	.word	0x20000e98
    1a20:	.word	0x20000300
    1a24:	.word	0x20203000
    1a28:	.word	0xe000ef70
    1a2c:	.word	0x20000e80
    1a30:	.word	0x00070080
    1a34:	.word	0x20002000
    1a38:	.word	0x20000e90
    1a3c:	.word	0x200012c0
    1a40:	.word	0x20000e68
    1a44:	.word	0x20000e78
    1a48:	.word	0x20000e70
    1a4c:	.word	0x60001610
    1a50:	.word	0x60001654
    1a54:	.word	0x20003200
    1a58:	.word	0x20003140
    1a5c:	.word	0x20003100
    1a60:	.word	0x200031c0
    1a64:	.word	0x20003180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1a68:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    1a6a:	ldrb	r3, [r1, #0]
    1a6c:	cmp	r3, r2
    1a6e:	it	cs
    1a70:	movcs	r3, r2
    1a72:	b.n	186e <isr+0x492>

00001a74 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1a74:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1a76:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1a7a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1a7e:	ite	ne
    1a80:	movne	r7, #0
    1a82:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1a86:	cmp	r2, #2
    1a88:	bls.n	1a8e <usb_config_rx+0x1a>
    1a8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1a8e:	mov.w	sl, r0, lsl #7
    1a92:	ldr.w	r9, [pc, #64]	; 1ad4 <usb_config_rx+0x60>
    1a96:	mov	r5, r1
    1a98:	mov	r4, r0
    1a9a:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1a9e:	movs	r1, #0
    1aa0:	movs	r2, #64	; 0x40
    1aa2:	mov	r8, r3
    1aa4:	mov	r0, r6
    1aa6:	bl	2670 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1aaa:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1aac:	orr.w	r1, r7, r5, lsl #16
    1ab0:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1ab4:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1ab8:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1aba:	cmp.w	r8, #0
    1abe:	beq.n	1a8a <usb_config_rx+0x16>
    1ac0:	ldr	r3, [pc, #12]	; (1ad0 <usb_config_rx+0x5c>)
    1ac2:	lsls	r0, r4
    1ac4:	ldr	r4, [r3, #0]
    1ac6:	orrs	r0, r4
    1ac8:	str	r0, [r3, #0]
    1aca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ace:	nop
    1ad0:	.word	0x20000e64
    1ad4:	.word	0x20003000

00001ad8 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1ad8:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1ada:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1ade:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1ae2:	ite	ne
    1ae4:	movne	r7, #0
    1ae6:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1aea:	cmp	r2, #2
    1aec:	bls.n	1af2 <usb_config_tx+0x1a>
    1aee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1af2:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1af4:	lsls	r5, r0, #7
    1af6:	ldr.w	r9, [pc, #68]	; 1b3c <usb_config_tx+0x64>
    1afa:	mov	r8, r1
    1afc:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1afe:	movs	r1, #0
    1b00:	mov	r4, r0
    1b02:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1b04:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1b08:	mov	r0, sl
    1b0a:	bl	2670 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1b0e:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1b10:	orr.w	r1, r7, r8, lsl #16
    1b14:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1b18:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1b1c:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1b20:	cmp	r6, #0
    1b22:	beq.n	1aee <usb_config_tx+0x16>
    1b24:	add.w	r0, r4, #16
    1b28:	ldr	r3, [pc, #12]	; (1b38 <usb_config_tx+0x60>)
    1b2a:	lsls	r2, r0
    1b2c:	ldr	r0, [r3, #0]
    1b2e:	orrs	r2, r0
    1b30:	str	r2, [r3, #0]
    1b32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1b36:	nop
    1b38:	.word	0x20000e64
    1b3c:	.word	0x20003000

00001b40 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1b40:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1b42:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1b44:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1b46:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    1b4a:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1b4c:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1b4e:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1b50:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1b54:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    1b58:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1b5c:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1b60:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1b62:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1b64:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    1b66:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1b68:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    1b6a:	pop	{r4, r5, r6, r7}
    1b6c:	bx	lr
    1b6e:	nop

00001b70 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1b70:	subs	r3, r0, #2
    1b72:	cmp	r3, #2
    1b74:	bls.n	1b78 <usb_transmit+0x8>
    1b76:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1b78:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1b7a:	ldr	r3, [pc, #24]	; (1b94 <usb_transmit+0x24>)
    1b7c:	add.w	r4, r0, #16
    1b80:	movs	r5, #1
    1b82:	mov	r2, r1
    1b84:	add.w	r0, r3, r0, lsl #7
    1b88:	lsl.w	r1, r5, r4
}
    1b8c:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1b8e:	b.w	12a4 <schedule_transfer>
    1b92:	nop
    1b94:	.word	0x20003040

00001b98 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1b98:	subs	r3, r0, #2
    1b9a:	cmp	r3, #2
    1b9c:	bls.n	1ba0 <usb_receive+0x8>
    1b9e:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1ba0:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1ba2:	ldr	r3, [pc, #20]	; (1bb8 <usb_receive+0x20>)
    1ba4:	movs	r4, #1
    1ba6:	mov	r2, r1
    1ba8:	lsl.w	r1, r4, r0
    1bac:	add.w	r0, r3, r0, lsl #7
}
    1bb0:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1bb4:	b.w	12a4 <schedule_transfer>
    1bb8:	.word	0x20003000

00001bbc <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1bbc:	ldr	r0, [r0, #4]
#endif
}
    1bbe:	bx	lr

00001bc0 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1bc0:	ldr	r0, [pc, #656]	; (1e54 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1bc2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1bc6:	ldr	r3, [pc, #656]	; (1e58 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1bc8:	ldr	r2, [r0, #120]	; 0x78
    1bca:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    1bce:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1bd0:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1bd2:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1bd4:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1bd8:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1bdc:	ldr	r4, [pc, #636]	; (1e5c <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1bde:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1be2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1be4:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1be8:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1bea:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1bec:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1bf0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1bf4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1bf8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1bfc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1c00:	ldrh.w	r0, [r3, #392]	; 0x188
    1c04:	uxth	r0, r0
    1c06:	orr.w	r0, r0, #240	; 0xf0
    1c0a:	strh.w	r0, [r3, #392]	; 0x188
    1c0e:	add.w	r0, r1, r1, lsl #1
    1c12:	ldr	r3, [pc, #580]	; (1e58 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    1c14:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1c16:	movs	r5, #0
    1c18:	lsls	r0, r0, #5
    1c1a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1c1c:	cmp	r1, #4
    1c1e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1c20:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1c24:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    1c26:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1c28:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1c2a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1c2c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1c2e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1c30:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1c32:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1c34:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1c36:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1c38:	bne.n	1c0e <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1c3a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1c3e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1c42:	ldr	r3, [pc, #540]	; (1e60 <pwm_init+0x2a0>)
    1c44:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1c48:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1c4a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1c4c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1c50:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1c52:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1c56:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1c5a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1c5e:	ldrh.w	r0, [r4, #392]	; 0x188
    1c62:	uxth	r0, r0
    1c64:	orr.w	r0, r0, #3840	; 0xf00
    1c68:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1c6c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1c70:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1c74:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1c78:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1c7c:	ldrh.w	r0, [r3, #392]	; 0x188
    1c80:	uxth	r0, r0
    1c82:	orr.w	r0, r0, #240	; 0xf0
    1c86:	strh.w	r0, [r3, #392]	; 0x188
    1c8a:	add.w	r0, r1, r1, lsl #1
    1c8e:	ldr	r3, [pc, #464]	; (1e60 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    1c90:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1c92:	movs	r5, #0
    1c94:	lsls	r0, r0, #5
    1c96:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1c98:	cmp	r1, #4
    1c9a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1c9c:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1c9e:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1ca2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1ca4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1ca6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1ca8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1caa:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1cac:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1cae:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1cb0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1cb2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1cb4:	bne.n	1c8a <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cb6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1cba:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1cbe:	ldr	r3, [pc, #420]	; (1e64 <pwm_init+0x2a4>)
    1cc0:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cc4:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1cc6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1cc8:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1ccc:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cce:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1cd2:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cd6:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1cda:	ldrh.w	r0, [r4, #392]	; 0x188
    1cde:	uxth	r0, r0
    1ce0:	orr.w	r0, r0, #3840	; 0xf00
    1ce4:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1ce8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1cec:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1cf0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1cf4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1cf8:	ldrh.w	r0, [r3, #392]	; 0x188
    1cfc:	uxth	r0, r0
    1cfe:	orr.w	r0, r0, #240	; 0xf0
    1d02:	strh.w	r0, [r3, #392]	; 0x188
    1d06:	add.w	r0, r1, r1, lsl #1
    1d0a:	ldr	r3, [pc, #344]	; (1e64 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    1d0c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d0e:	movs	r5, #0
    1d10:	lsls	r0, r0, #5
    1d12:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d14:	cmp	r1, #4
    1d16:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d18:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d1a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1d1e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1d20:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1d22:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1d24:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1d26:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1d28:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1d2a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1d2c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1d2e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d30:	bne.n	1d06 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d32:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1d36:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d3a:	ldr	r3, [pc, #300]	; (1e68 <pwm_init+0x2a8>)
    1d3c:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d40:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d42:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d44:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d48:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d4a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d4e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d52:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1d56:	ldrh.w	r0, [r4, #392]	; 0x188
    1d5a:	uxth	r0, r0
    1d5c:	orr.w	r0, r0, #3840	; 0xf00
    1d60:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d64:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1d68:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1d6c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1d70:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1d74:	ldrh.w	r0, [r3, #392]	; 0x188
    1d78:	uxth	r0, r0
    1d7a:	orr.w	r0, r0, #240	; 0xf0
    1d7e:	strh.w	r0, [r3, #392]	; 0x188
    1d82:	add.w	r0, r1, r1, lsl #1
    1d86:	ldr	r3, [pc, #224]	; (1e68 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    1d88:	adds	r1, #1
    1d8a:	lsls	r0, r0, #5
    1d8c:	mov	r4, r3
    1d8e:	cmp	r1, #4
    1d90:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d92:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d94:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1d98:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1d9a:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1d9c:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1d9e:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1da0:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    1da2:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1da4:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1da6:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1da8:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1daa:	bne.n	1d82 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dac:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1db0:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1db2:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1db4:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1db8:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1dba:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1dbe:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1dc0:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dc4:	orrs	r3, r7
    1dc6:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1dca:	ldrh.w	r3, [r4, #392]	; 0x188
    1dce:	uxth	r3, r3
    1dd0:	orr.w	r3, r3, #3840	; 0xf00
    1dd4:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1dd8:	lsls	r0, r2, #5
    1dda:	ldr	r3, [pc, #144]	; (1e6c <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1ddc:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1dde:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1de0:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1de2:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1de4:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1de6:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1de8:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1dea:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1dee:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1df0:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1df2:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1df4:	bne.n	1dd8 <pwm_init+0x218>
    1df6:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1df8:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1dfa:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1dfe:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e02:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e04:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e08:	lsls	r0, r2, #5
    1e0a:	ldr	r3, [pc, #100]	; (1e70 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e0c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1e0e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e10:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1e12:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1e14:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e16:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e18:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e1a:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1e1c:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1e1e:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e20:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e22:	bne.n	1e08 <pwm_init+0x248>
    1e24:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e26:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e28:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e2c:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e30:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e32:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e36:	lsls	r0, r2, #5
    1e38:	ldr	r3, [pc, #56]	; (1e74 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e3a:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1e3c:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e3e:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1e40:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1e42:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e44:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e46:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e48:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1e4a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1e4c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e4e:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e50:	bne.n	1e36 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    1e52:	pop	{r4, r5, r6, r7, pc}
    1e54:	.word	0x400fc000
    1e58:	.word	0x403dc000
    1e5c:	.word	0xfc030000
    1e60:	.word	0x403e0000
    1e64:	.word	0x403e4000
    1e68:	.word	0x403e8000
    1e6c:	.word	0x401dc000
    1e70:	.word	0x401e0000
    1e74:	.word	0x401e4000

00001e78 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1e78:	ldr	r2, [pc, #72]	; (1ec4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1e7a:	ldr	r3, [pc, #76]	; (1ec8 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1e7c:	ldr.w	r0, [r2, #544]	; 0x220
    1e80:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1e84:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    1e86:	push	{r4, lr}
    1e88:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1e8a:	bhi.n	1e92 <usb_init_serialnumber+0x1a>
    1e8c:	add.w	r0, r0, r0, lsl #2
    1e90:	lsls	r0, r0, #1
    1e92:	ldr	r4, [pc, #56]	; (1ecc <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    1e94:	add	r1, sp, #4
    1e96:	movs	r2, #10
    1e98:	bl	202c <ultoa>
    1e9c:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    1e9e:	movs	r3, #0
    1ea0:	mov	r0, r4
		char c = buf[i];
    1ea2:	ldrb.w	r2, [r1], #1
    1ea6:	adds	r3, #1
		if (!c) break;
    1ea8:	cbz	r2, 1eba <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1eaa:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1eac:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1eb0:	bne.n	1ea2 <usb_init_serialnumber+0x2a>
    1eb2:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1eb4:	strb	r3, [r4, #0]
}
    1eb6:	add	sp, #16
    1eb8:	pop	{r4, pc}
    1eba:	lsls	r3, r3, #1
    1ebc:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1ebe:	strb	r3, [r4, #0]
}
    1ec0:	add	sp, #16
    1ec2:	pop	{r4, pc}
    1ec4:	.word	0x401f4400
    1ec8:	.word	0x0098967f
    1ecc:	.word	0x200003a8

00001ed0 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    1ed0:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    1ed2:	ldr	r3, [pc, #28]	; (1ef0 <HardwareSerial::processSerialEvents()+0x20>)
    1ed4:	ldrb	r4, [r3, #0]
    1ed6:	cbz	r4, 1eec <HardwareSerial::processSerialEvents()+0x1c>
    1ed8:	ldr	r5, [pc, #24]	; (1ef4 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    1eda:	ldr.w	r3, [r5, #4]!
    1ede:	cmp	r3, #0
    1ee0:	beq.n	1eda <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    1ee2:	blx	r3
			if (--handlers_still_to_process == 0) return;
    1ee4:	subs	r3, r4, #1
    1ee6:	ands.w	r4, r3, #255	; 0xff
    1eea:	bne.n	1eda <HardwareSerial::processSerialEvents()+0xa>
    1eec:	pop	{r3, r4, r5, pc}
    1eee:	nop
    1ef0:	.word	0x20000ec8
    1ef4:	.word	0x20000ea8

00001ef8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1ef8:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1efa:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1efe:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1f02:	bne.n	1fe0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1f04:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1f06:	bcc.n	1f8c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1f08:	ldr.w	r3, [r1], #4
    1f0c:	str.w	r3, [r0], #4
    1f10:	ldr.w	r3, [r1], #4
    1f14:	str.w	r3, [r0], #4
    1f18:	ldr.w	r3, [r1], #4
    1f1c:	str.w	r3, [r0], #4
    1f20:	ldr.w	r3, [r1], #4
    1f24:	str.w	r3, [r0], #4
    1f28:	ldr.w	r3, [r1], #4
    1f2c:	str.w	r3, [r0], #4
    1f30:	ldr.w	r3, [r1], #4
    1f34:	str.w	r3, [r0], #4
    1f38:	ldr.w	r3, [r1], #4
    1f3c:	str.w	r3, [r0], #4
    1f40:	ldr.w	r3, [r1], #4
    1f44:	str.w	r3, [r0], #4
    1f48:	ldr.w	r3, [r1], #4
    1f4c:	str.w	r3, [r0], #4
    1f50:	ldr.w	r3, [r1], #4
    1f54:	str.w	r3, [r0], #4
    1f58:	ldr.w	r3, [r1], #4
    1f5c:	str.w	r3, [r0], #4
    1f60:	ldr.w	r3, [r1], #4
    1f64:	str.w	r3, [r0], #4
    1f68:	ldr.w	r3, [r1], #4
    1f6c:	str.w	r3, [r0], #4
    1f70:	ldr.w	r3, [r1], #4
    1f74:	str.w	r3, [r0], #4
    1f78:	ldr.w	r3, [r1], #4
    1f7c:	str.w	r3, [r0], #4
    1f80:	ldr.w	r3, [r1], #4
    1f84:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1f88:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1f8a:	bcs.n	1f08 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1f8c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1f8e:	bcc.n	1fb4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1f90:	ldr.w	r3, [r1], #4
    1f94:	str.w	r3, [r0], #4
    1f98:	ldr.w	r3, [r1], #4
    1f9c:	str.w	r3, [r0], #4
    1fa0:	ldr.w	r3, [r1], #4
    1fa4:	str.w	r3, [r0], #4
    1fa8:	ldr.w	r3, [r1], #4
    1fac:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1fb0:	subs	r2, #16
	bhs	.Lmid_block_loop
    1fb2:	bcs.n	1f90 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1fb4:	adds	r2, #12
	blo	.Lcopy_less_than_4
    1fb6:	bcc.n	1fc4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1fb8:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1fbc:	str.w	r3, [r0], #4
	subs	r2, #4
    1fc0:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1fc2:	bcs.n	1fb8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1fc4:	adds	r2, #4
	beq	.Ldone
    1fc6:	beq.n	1fda <memcpy+0xe2>

	lsls	r2, r2, #31
    1fc8:	lsls	r2, r2, #31
	itt ne
    1fca:	itt	ne
	ldrbne  r3, [r1], #1
    1fcc:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1fd0:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1fd4:	bcc.n	1fda <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1fd6:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1fd8:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1fda:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1fdc:	bx	lr
    1fde:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1fe0:	cmp	r2, #8
	blo	.Lbyte_copy
    1fe2:	bcc.n	200c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1fe4:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1fe6:	beq.n	1f04 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1fe8:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1fec:	beq.n	1f04 <memcpy+0xc>

	rsb	r3, #4
    1fee:	rsb	r3, r3, #4
	subs	r2, r3
    1ff2:	subs	r2, r2, r3

	lsls    r3, r3, #31
    1ff4:	lsls	r3, r3, #31
	itt ne
    1ff6:	itt	ne
	ldrbne  r3, [r1], #1
    1ff8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1ffc:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2000:	bcc.n	1f04 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2002:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2006:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    200a:	b.n	1f04 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    200c:	subs	r2, #4
	blo	.Lcopy_less_than_4
    200e:	bcc.n	1fc4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2010:	subs	r2, #1
	ldrb    r3, [r1], #1
    2012:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2016:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    201a:	bcs.n	2010 <memcpy+0x118>

	ldrb	r3, [r1]
    201c:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    201e:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2020:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2022:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2024:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    2026:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2028:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    202a:	bx	lr

0000202c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    202c:	push	{r4, r5, r6, r7}
    202e:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    2030:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    2032:	mov	r7, r6
    2034:	b.n	2038 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    2036:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    2038:	udiv	r3, r0, r2
    203c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2040:	add.w	r4, r0, #55	; 0x37
    2044:	cmp	r0, #9
    2046:	add.w	r0, r0, #48	; 0x30
    204a:	uxtb	r4, r4
    204c:	it	ls
    204e:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    2050:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2052:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    2056:	cmp	r3, #0
    2058:	bne.n	2036 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    205a:	adds	r2, r1, r5
    205c:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    205e:	cbz	r5, 2074 <ultoa+0x48>
    2060:	adds	r3, #1
		t = buf[j];
    2062:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    2066:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2068:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    206a:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    206c:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    206e:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2072:	blt.n	2060 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    2074:	mov	r0, r1
    2076:	pop	{r4, r5, r6, r7}
    2078:	bx	lr
    207a:	nop

0000207c <__aeabi_atexit>:
    207c:	mov	r3, r1
    207e:	mov	r1, r0
    2080:	mov	r0, r3
    2082:	b.w	2088 <__cxa_atexit>
    2086:	nop

00002088 <__cxa_atexit>:
    2088:	mov	r3, r2
    208a:	mov	r2, r1
    208c:	mov	r1, r0
    208e:	movs	r0, #2
    2090:	b.w	2738 <__register_exitproc>

00002094 <__errno>:
    2094:	ldr	r3, [pc, #4]	; (209c <__errno+0x8>)
    2096:	ldr	r0, [r3, #0]
    2098:	bx	lr
    209a:	nop
    209c:	.word	0x200007e8

000020a0 <__libc_init_array>:
    20a0:	push	{r4, r5, r6, lr}
    20a2:	ldr	r6, [pc, #60]	; (20e0 <__libc_init_array+0x40>)
    20a4:	ldr	r5, [pc, #60]	; (20e4 <__libc_init_array+0x44>)
    20a6:	subs	r6, r6, r5
    20a8:	asrs	r6, r6, #2
    20aa:	it	ne
    20ac:	movne	r4, #0
    20ae:	beq.n	20bc <__libc_init_array+0x1c>
    20b0:	adds	r4, #1
    20b2:	ldr.w	r3, [r5], #4
    20b6:	blx	r3
    20b8:	cmp	r6, r4
    20ba:	bne.n	20b0 <__libc_init_array+0x10>
    20bc:	ldr	r6, [pc, #40]	; (20e8 <__libc_init_array+0x48>)
    20be:	ldr	r5, [pc, #44]	; (20ec <__libc_init_array+0x4c>)
    20c0:	subs	r6, r6, r5
    20c2:	bl	2a48 <___init_veneer>
    20c6:	asrs	r6, r6, #2
    20c8:	it	ne
    20ca:	movne	r4, #0
    20cc:	beq.n	20dc <__libc_init_array+0x3c>
    20ce:	adds	r4, #1
    20d0:	ldr.w	r3, [r5], #4
    20d4:	blx	r3
    20d6:	cmp	r6, r4
    20d8:	bne.n	20ce <__libc_init_array+0x2e>
    20da:	pop	{r4, r5, r6, pc}
    20dc:	pop	{r4, r5, r6, pc}
    20de:	nop
    20e0:	.word	0x600016f8
    20e4:	.word	0x600016f8
    20e8:	.word	0x60001700
    20ec:	.word	0x600016f8

000020f0 <malloc>:
    20f0:	ldr	r3, [pc, #8]	; (20fc <malloc+0xc>)
    20f2:	mov	r1, r0
    20f4:	ldr	r0, [r3, #0]
    20f6:	b.w	2100 <_malloc_r>
    20fa:	nop
    20fc:	.word	0x200007e8

00002100 <_malloc_r>:
    2100:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2104:	add.w	r5, r1, #11
    2108:	cmp	r5, #22
    210a:	sub	sp, #12
    210c:	mov	r6, r0
    210e:	bls.w	2250 <_malloc_r+0x150>
    2112:	bics.w	r5, r5, #7
    2116:	bmi.w	2298 <_malloc_r+0x198>
    211a:	cmp	r1, r5
    211c:	bhi.w	2298 <_malloc_r+0x198>
    2120:	bl	270c <__malloc_lock>
    2124:	cmp.w	r5, #504	; 0x1f8
    2128:	bcc.w	2664 <_malloc_r+0x564>
    212c:	lsrs	r3, r5, #9
    212e:	beq.w	22a6 <_malloc_r+0x1a6>
    2132:	cmp	r3, #4
    2134:	bhi.w	243e <_malloc_r+0x33e>
    2138:	lsrs	r0, r5, #6
    213a:	add.w	lr, r0, #57	; 0x39
    213e:	mov.w	r3, lr, lsl #1
    2142:	adds	r0, #56	; 0x38
    2144:	ldr	r7, [pc, #784]	; (2458 <_malloc_r+0x358>)
    2146:	add.w	r3, r7, r3, lsl #2
    214a:	sub.w	r1, r3, #8
    214e:	ldr	r4, [r3, #4]
    2150:	cmp	r1, r4
    2152:	bne.n	2164 <_malloc_r+0x64>
    2154:	b.n	22b0 <_malloc_r+0x1b0>
    2156:	cmp	r2, #0
    2158:	bge.w	22b4 <_malloc_r+0x1b4>
    215c:	ldr	r4, [r4, #12]
    215e:	cmp	r1, r4
    2160:	beq.w	22b0 <_malloc_r+0x1b0>
    2164:	ldr	r3, [r4, #4]
    2166:	bic.w	r3, r3, #3
    216a:	subs	r2, r3, r5
    216c:	cmp	r2, #15
    216e:	ble.n	2156 <_malloc_r+0x56>
    2170:	ldr	r1, [pc, #740]	; (2458 <_malloc_r+0x358>)
    2172:	ldr	r4, [r7, #16]
    2174:	add.w	lr, r1, #8
    2178:	cmp	r4, lr
    217a:	beq.w	24e4 <_malloc_r+0x3e4>
    217e:	ldr	r3, [r4, #4]
    2180:	bic.w	r3, r3, #3
    2184:	subs	r2, r3, r5
    2186:	cmp	r2, #15
    2188:	bgt.w	24be <_malloc_r+0x3be>
    218c:	cmp	r2, #0
    218e:	str.w	lr, [r1, #20]
    2192:	str.w	lr, [r1, #16]
    2196:	bge.w	22d6 <_malloc_r+0x1d6>
    219a:	cmp.w	r3, #512	; 0x200
    219e:	bcs.w	2470 <_malloc_r+0x370>
    21a2:	lsrs	r3, r3, #3
    21a4:	add.w	ip, r3, #1
    21a8:	movs	r2, #1
    21aa:	asrs	r3, r3, #2
    21ac:	lsl.w	r3, r2, r3
    21b0:	ldr	r2, [r1, #4]
    21b2:	ldr.w	r8, [r1, ip, lsl #3]
    21b6:	str.w	r8, [r4, #8]
    21ba:	add.w	r9, r1, ip, lsl #3
    21be:	orrs	r2, r3
    21c0:	sub.w	r3, r9, #8
    21c4:	str	r3, [r4, #12]
    21c6:	str	r2, [r1, #4]
    21c8:	str.w	r4, [r1, ip, lsl #3]
    21cc:	str.w	r4, [r8, #12]
    21d0:	asrs	r3, r0, #2
    21d2:	movs	r4, #1
    21d4:	lsls	r4, r3
    21d6:	cmp	r4, r2
    21d8:	bhi.w	22f0 <_malloc_r+0x1f0>
    21dc:	tst	r4, r2
    21de:	bne.n	21ee <_malloc_r+0xee>
    21e0:	bic.w	r0, r0, #3
    21e4:	lsls	r4, r4, #1
    21e6:	tst	r4, r2
    21e8:	add.w	r0, r0, #4
    21ec:	beq.n	21e4 <_malloc_r+0xe4>
    21ee:	add.w	r9, r7, r0, lsl #3
    21f2:	mov	ip, r9
    21f4:	mov	r8, r0
    21f6:	ldr.w	r1, [ip, #12]
    21fa:	cmp	ip, r1
    21fc:	bne.n	220e <_malloc_r+0x10e>
    21fe:	b.n	24e8 <_malloc_r+0x3e8>
    2200:	cmp	r2, #0
    2202:	bge.w	2508 <_malloc_r+0x408>
    2206:	ldr	r1, [r1, #12]
    2208:	cmp	ip, r1
    220a:	beq.w	24e8 <_malloc_r+0x3e8>
    220e:	ldr	r3, [r1, #4]
    2210:	bic.w	r3, r3, #3
    2214:	subs	r2, r3, r5
    2216:	cmp	r2, #15
    2218:	ble.n	2200 <_malloc_r+0x100>
    221a:	mov	r4, r1
    221c:	ldr.w	ip, [r1, #12]
    2220:	ldr.w	r8, [r4, #8]!
    2224:	adds	r3, r1, r5
    2226:	orr.w	r5, r5, #1
    222a:	str	r5, [r1, #4]
    222c:	orr.w	r1, r2, #1
    2230:	str.w	ip, [r8, #12]
    2234:	mov	r0, r6
    2236:	str.w	r8, [ip, #8]
    223a:	str	r3, [r7, #20]
    223c:	str	r3, [r7, #16]
    223e:	str.w	lr, [r3, #12]
    2242:	str.w	lr, [r3, #8]
    2246:	str	r1, [r3, #4]
    2248:	str	r2, [r3, r2]
    224a:	bl	2710 <__malloc_unlock>
    224e:	b.n	2290 <_malloc_r+0x190>
    2250:	cmp	r1, #16
    2252:	bhi.n	2298 <_malloc_r+0x198>
    2254:	bl	270c <__malloc_lock>
    2258:	movs	r5, #16
    225a:	movs	r3, #6
    225c:	movs	r0, #2
    225e:	ldr	r7, [pc, #504]	; (2458 <_malloc_r+0x358>)
    2260:	add.w	r3, r7, r3, lsl #2
    2264:	sub.w	r2, r3, #8
    2268:	ldr	r4, [r3, #4]
    226a:	cmp	r4, r2
    226c:	beq.w	24fa <_malloc_r+0x3fa>
    2270:	ldr	r3, [r4, #4]
    2272:	ldr	r1, [r4, #12]
    2274:	ldr	r5, [r4, #8]
    2276:	bic.w	r3, r3, #3
    227a:	add	r3, r4
    227c:	mov	r0, r6
    227e:	ldr	r2, [r3, #4]
    2280:	str	r1, [r5, #12]
    2282:	orr.w	r2, r2, #1
    2286:	str	r5, [r1, #8]
    2288:	str	r2, [r3, #4]
    228a:	bl	2710 <__malloc_unlock>
    228e:	adds	r4, #8
    2290:	mov	r0, r4
    2292:	add	sp, #12
    2294:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2298:	movs	r4, #0
    229a:	movs	r3, #12
    229c:	mov	r0, r4
    229e:	str	r3, [r6, #0]
    22a0:	add	sp, #12
    22a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22a6:	movs	r3, #128	; 0x80
    22a8:	mov.w	lr, #64	; 0x40
    22ac:	movs	r0, #63	; 0x3f
    22ae:	b.n	2144 <_malloc_r+0x44>
    22b0:	mov	r0, lr
    22b2:	b.n	2170 <_malloc_r+0x70>
    22b4:	add	r3, r4
    22b6:	ldr	r1, [r4, #12]
    22b8:	ldr	r2, [r3, #4]
    22ba:	ldr	r5, [r4, #8]
    22bc:	orr.w	r2, r2, #1
    22c0:	str	r1, [r5, #12]
    22c2:	mov	r0, r6
    22c4:	str	r5, [r1, #8]
    22c6:	str	r2, [r3, #4]
    22c8:	bl	2710 <__malloc_unlock>
    22cc:	adds	r4, #8
    22ce:	mov	r0, r4
    22d0:	add	sp, #12
    22d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22d6:	add	r3, r4
    22d8:	mov	r0, r6
    22da:	ldr	r2, [r3, #4]
    22dc:	orr.w	r2, r2, #1
    22e0:	str	r2, [r3, #4]
    22e2:	bl	2710 <__malloc_unlock>
    22e6:	adds	r4, #8
    22e8:	mov	r0, r4
    22ea:	add	sp, #12
    22ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22f0:	ldr	r4, [r7, #8]
    22f2:	ldr	r3, [r4, #4]
    22f4:	bic.w	r8, r3, #3
    22f8:	cmp	r8, r5
    22fa:	bcc.n	2306 <_malloc_r+0x206>
    22fc:	rsb	r3, r5, r8
    2300:	cmp	r3, #15
    2302:	bgt.w	241e <_malloc_r+0x31e>
    2306:	ldr	r3, [pc, #340]	; (245c <_malloc_r+0x35c>)
    2308:	ldr.w	r9, [pc, #352]	; 246c <_malloc_r+0x36c>
    230c:	ldr	r2, [r3, #0]
    230e:	ldr.w	r3, [r9]
    2312:	adds	r3, #1
    2314:	add	r2, r5
    2316:	add.w	sl, r4, r8
    231a:	beq.w	25de <_malloc_r+0x4de>
    231e:	add.w	r2, r2, #4096	; 0x1000
    2322:	adds	r2, #15
    2324:	bic.w	r2, r2, #4080	; 0xff0
    2328:	bic.w	r2, r2, #15
    232c:	mov	r1, r2
    232e:	mov	r0, r6
    2330:	str	r2, [sp, #4]
    2332:	bl	2714 <_sbrk_r>
    2336:	cmp.w	r0, #4294967295
    233a:	mov	fp, r0
    233c:	ldr	r2, [sp, #4]
    233e:	beq.w	25f2 <_malloc_r+0x4f2>
    2342:	cmp	sl, r0
    2344:	bhi.w	2540 <_malloc_r+0x440>
    2348:	ldr	r3, [pc, #276]	; (2460 <_malloc_r+0x360>)
    234a:	ldr	r1, [r3, #0]
    234c:	cmp	sl, fp
    234e:	add	r1, r2
    2350:	str	r1, [r3, #0]
    2352:	beq.w	25fc <_malloc_r+0x4fc>
    2356:	ldr.w	r0, [r9]
    235a:	ldr.w	lr, [pc, #272]	; 246c <_malloc_r+0x36c>
    235e:	adds	r0, #1
    2360:	ittet	ne
    2362:	rsbne	sl, sl, fp
    2366:	addne	r1, sl
    2368:	streq.w	fp, [lr]
    236c:	strne	r1, [r3, #0]
    236e:	ands.w	r1, fp, #7
    2372:	beq.w	25a4 <_malloc_r+0x4a4>
    2376:	rsb	r0, r1, #8
    237a:	rsb	r1, r1, #4096	; 0x1000
    237e:	add	fp, r0
    2380:	adds	r1, #8
    2382:	add	r2, fp
    2384:	ubfx	r2, r2, #0, #12
    2388:	rsb	r9, r2, r1
    238c:	mov	r1, r9
    238e:	mov	r0, r6
    2390:	str	r3, [sp, #4]
    2392:	bl	2714 <_sbrk_r>
    2396:	adds	r3, r0, #1
    2398:	ldr	r3, [sp, #4]
    239a:	beq.w	261c <_malloc_r+0x51c>
    239e:	rsb	r2, fp, r0
    23a2:	add	r2, r9
    23a4:	orr.w	r2, r2, #1
    23a8:	ldr	r1, [r3, #0]
    23aa:	str.w	fp, [r7, #8]
    23ae:	add	r1, r9
    23b0:	cmp	r4, r7
    23b2:	str.w	r2, [fp, #4]
    23b6:	str	r1, [r3, #0]
    23b8:	ldr.w	r9, [pc, #164]	; 2460 <_malloc_r+0x360>
    23bc:	beq.n	23ec <_malloc_r+0x2ec>
    23be:	cmp.w	r8, #15
    23c2:	bls.w	25c0 <_malloc_r+0x4c0>
    23c6:	ldr	r2, [r4, #4]
    23c8:	sub.w	r3, r8, #12
    23cc:	bic.w	r3, r3, #7
    23d0:	adds	r0, r4, r3
    23d2:	and.w	r2, r2, #1
    23d6:	mov.w	lr, #5
    23da:	orrs	r2, r3
    23dc:	cmp	r3, #15
    23de:	str	r2, [r4, #4]
    23e0:	str.w	lr, [r0, #4]
    23e4:	str.w	lr, [r0, #8]
    23e8:	bhi.w	2624 <_malloc_r+0x524>
    23ec:	ldr	r3, [pc, #116]	; (2464 <_malloc_r+0x364>)
    23ee:	ldr	r4, [r7, #8]
    23f0:	ldr	r2, [r3, #0]
    23f2:	cmp	r1, r2
    23f4:	it	hi
    23f6:	strhi	r1, [r3, #0]
    23f8:	ldr	r3, [pc, #108]	; (2468 <_malloc_r+0x368>)
    23fa:	ldr	r2, [r3, #0]
    23fc:	cmp	r1, r2
    23fe:	ldr	r2, [r4, #4]
    2400:	it	hi
    2402:	strhi	r1, [r3, #0]
    2404:	bic.w	r2, r2, #3
    2408:	cmp	r5, r2
    240a:	sub.w	r3, r2, r5
    240e:	bhi.n	2414 <_malloc_r+0x314>
    2410:	cmp	r3, #15
    2412:	bgt.n	241e <_malloc_r+0x31e>
    2414:	mov	r0, r6
    2416:	bl	2710 <__malloc_unlock>
    241a:	movs	r4, #0
    241c:	b.n	2290 <_malloc_r+0x190>
    241e:	adds	r2, r4, r5
    2420:	orr.w	r3, r3, #1
    2424:	orr.w	r5, r5, #1
    2428:	str	r5, [r4, #4]
    242a:	mov	r0, r6
    242c:	str	r2, [r7, #8]
    242e:	str	r3, [r2, #4]
    2430:	bl	2710 <__malloc_unlock>
    2434:	adds	r4, #8
    2436:	mov	r0, r4
    2438:	add	sp, #12
    243a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    243e:	cmp	r3, #20
    2440:	bls.n	2526 <_malloc_r+0x426>
    2442:	cmp	r3, #84	; 0x54
    2444:	bhi.w	2590 <_malloc_r+0x490>
    2448:	lsrs	r0, r5, #12
    244a:	add.w	lr, r0, #111	; 0x6f
    244e:	mov.w	r3, lr, lsl #1
    2452:	adds	r0, #110	; 0x6e
    2454:	b.n	2144 <_malloc_r+0x44>
    2456:	nop
    2458:	.word	0x200007ec
    245c:	.word	0x20000ed4
    2460:	.word	0x20000ed8
    2464:	.word	0x20000ed0
    2468:	.word	0x20000ecc
    246c:	.word	0x20000bf8
    2470:	lsrs	r2, r3, #9
    2472:	cmp	r2, #4
    2474:	bls.n	2534 <_malloc_r+0x434>
    2476:	cmp	r2, #20
    2478:	bhi.w	25e2 <_malloc_r+0x4e2>
    247c:	add.w	r1, r2, #92	; 0x5c
    2480:	lsls	r1, r1, #1
    2482:	adds	r2, #91	; 0x5b
    2484:	add.w	ip, r7, r1, lsl #2
    2488:	ldr.w	r1, [r7, r1, lsl #2]
    248c:	ldr.w	r8, [pc, #476]	; 266c <_malloc_r+0x56c>
    2490:	sub.w	ip, ip, #8
    2494:	cmp	ip, r1
    2496:	beq.w	25aa <_malloc_r+0x4aa>
    249a:	ldr	r2, [r1, #4]
    249c:	bic.w	r2, r2, #3
    24a0:	cmp	r3, r2
    24a2:	bcs.n	24aa <_malloc_r+0x3aa>
    24a4:	ldr	r1, [r1, #8]
    24a6:	cmp	ip, r1
    24a8:	bne.n	249a <_malloc_r+0x39a>
    24aa:	ldr.w	ip, [r1, #12]
    24ae:	ldr	r2, [r7, #4]
    24b0:	str.w	ip, [r4, #12]
    24b4:	str	r1, [r4, #8]
    24b6:	str.w	r4, [ip, #8]
    24ba:	str	r4, [r1, #12]
    24bc:	b.n	21d0 <_malloc_r+0xd0>
    24be:	adds	r3, r4, r5
    24c0:	orr.w	r7, r2, #1
    24c4:	orr.w	r5, r5, #1
    24c8:	str	r5, [r4, #4]
    24ca:	mov	r0, r6
    24cc:	str	r3, [r1, #20]
    24ce:	str	r3, [r1, #16]
    24d0:	str.w	lr, [r3, #12]
    24d4:	str.w	lr, [r3, #8]
    24d8:	str	r7, [r3, #4]
    24da:	str	r2, [r3, r2]
    24dc:	adds	r4, #8
    24de:	bl	2710 <__malloc_unlock>
    24e2:	b.n	2290 <_malloc_r+0x190>
    24e4:	ldr	r2, [r1, #4]
    24e6:	b.n	21d0 <_malloc_r+0xd0>
    24e8:	add.w	r8, r8, #1
    24ec:	tst.w	r8, #3
    24f0:	add.w	ip, ip, #8
    24f4:	bne.w	21f6 <_malloc_r+0xf6>
    24f8:	b.n	255c <_malloc_r+0x45c>
    24fa:	ldr	r4, [r3, #12]
    24fc:	cmp	r3, r4
    24fe:	it	eq
    2500:	addeq	r0, #2
    2502:	beq.w	2170 <_malloc_r+0x70>
    2506:	b.n	2270 <_malloc_r+0x170>
    2508:	add	r3, r1
    250a:	mov	r4, r1
    250c:	ldr	r2, [r3, #4]
    250e:	ldr	r1, [r1, #12]
    2510:	ldr.w	r5, [r4, #8]!
    2514:	orr.w	r2, r2, #1
    2518:	str	r2, [r3, #4]
    251a:	mov	r0, r6
    251c:	str	r1, [r5, #12]
    251e:	str	r5, [r1, #8]
    2520:	bl	2710 <__malloc_unlock>
    2524:	b.n	2290 <_malloc_r+0x190>
    2526:	add.w	lr, r3, #92	; 0x5c
    252a:	add.w	r0, r3, #91	; 0x5b
    252e:	mov.w	r3, lr, lsl #1
    2532:	b.n	2144 <_malloc_r+0x44>
    2534:	lsrs	r2, r3, #6
    2536:	add.w	r1, r2, #57	; 0x39
    253a:	lsls	r1, r1, #1
    253c:	adds	r2, #56	; 0x38
    253e:	b.n	2484 <_malloc_r+0x384>
    2540:	cmp	r4, r7
    2542:	ldr	r3, [pc, #296]	; (266c <_malloc_r+0x56c>)
    2544:	beq.w	2348 <_malloc_r+0x248>
    2548:	ldr	r4, [r3, #8]
    254a:	ldr	r2, [r4, #4]
    254c:	bic.w	r2, r2, #3
    2550:	b.n	2408 <_malloc_r+0x308>
    2552:	ldr.w	r3, [r9], #-8
    2556:	cmp	r9, r3
    2558:	bne.w	2660 <_malloc_r+0x560>
    255c:	tst.w	r0, #3
    2560:	add.w	r0, r0, #4294967295
    2564:	bne.n	2552 <_malloc_r+0x452>
    2566:	ldr	r3, [r7, #4]
    2568:	bic.w	r3, r3, r4
    256c:	str	r3, [r7, #4]
    256e:	lsls	r4, r4, #1
    2570:	cmp	r4, r3
    2572:	bhi.w	22f0 <_malloc_r+0x1f0>
    2576:	cmp	r4, #0
    2578:	beq.w	22f0 <_malloc_r+0x1f0>
    257c:	tst	r4, r3
    257e:	mov	r0, r8
    2580:	bne.w	21ee <_malloc_r+0xee>
    2584:	lsls	r4, r4, #1
    2586:	tst	r4, r3
    2588:	add.w	r0, r0, #4
    258c:	beq.n	2584 <_malloc_r+0x484>
    258e:	b.n	21ee <_malloc_r+0xee>
    2590:	cmp.w	r3, #340	; 0x154
    2594:	bhi.n	25c8 <_malloc_r+0x4c8>
    2596:	lsrs	r0, r5, #15
    2598:	add.w	lr, r0, #120	; 0x78
    259c:	mov.w	r3, lr, lsl #1
    25a0:	adds	r0, #119	; 0x77
    25a2:	b.n	2144 <_malloc_r+0x44>
    25a4:	mov.w	r1, #4096	; 0x1000
    25a8:	b.n	2382 <_malloc_r+0x282>
    25aa:	movs	r1, #1
    25ac:	ldr.w	r3, [r8, #4]
    25b0:	asrs	r2, r2, #2
    25b2:	lsl.w	r2, r1, r2
    25b6:	orrs	r2, r3
    25b8:	str.w	r2, [r8, #4]
    25bc:	mov	r1, ip
    25be:	b.n	24b0 <_malloc_r+0x3b0>
    25c0:	movs	r3, #1
    25c2:	str.w	r3, [fp, #4]
    25c6:	b.n	2414 <_malloc_r+0x314>
    25c8:	movw	r2, #1364	; 0x554
    25cc:	cmp	r3, r2
    25ce:	bhi.n	2612 <_malloc_r+0x512>
    25d0:	lsrs	r0, r5, #18
    25d2:	add.w	lr, r0, #125	; 0x7d
    25d6:	mov.w	r3, lr, lsl #1
    25da:	adds	r0, #124	; 0x7c
    25dc:	b.n	2144 <_malloc_r+0x44>
    25de:	adds	r2, #16
    25e0:	b.n	232c <_malloc_r+0x22c>
    25e2:	cmp	r2, #84	; 0x54
    25e4:	bhi.n	2634 <_malloc_r+0x534>
    25e6:	lsrs	r2, r3, #12
    25e8:	add.w	r1, r2, #111	; 0x6f
    25ec:	lsls	r1, r1, #1
    25ee:	adds	r2, #110	; 0x6e
    25f0:	b.n	2484 <_malloc_r+0x384>
    25f2:	ldr	r4, [r7, #8]
    25f4:	ldr	r2, [r4, #4]
    25f6:	bic.w	r2, r2, #3
    25fa:	b.n	2408 <_malloc_r+0x308>
    25fc:	ubfx	r0, sl, #0, #12
    2600:	cmp	r0, #0
    2602:	bne.w	2356 <_malloc_r+0x256>
    2606:	add	r2, r8
    2608:	ldr	r3, [r7, #8]
    260a:	orr.w	r2, r2, #1
    260e:	str	r2, [r3, #4]
    2610:	b.n	23ec <_malloc_r+0x2ec>
    2612:	movs	r3, #254	; 0xfe
    2614:	mov.w	lr, #127	; 0x7f
    2618:	movs	r0, #126	; 0x7e
    261a:	b.n	2144 <_malloc_r+0x44>
    261c:	movs	r2, #1
    261e:	mov.w	r9, #0
    2622:	b.n	23a8 <_malloc_r+0x2a8>
    2624:	add.w	r1, r4, #8
    2628:	mov	r0, r6
    262a:	bl	2878 <_free_r>
    262e:	ldr.w	r1, [r9]
    2632:	b.n	23ec <_malloc_r+0x2ec>
    2634:	cmp.w	r2, #340	; 0x154
    2638:	bhi.n	2646 <_malloc_r+0x546>
    263a:	lsrs	r2, r3, #15
    263c:	add.w	r1, r2, #120	; 0x78
    2640:	lsls	r1, r1, #1
    2642:	adds	r2, #119	; 0x77
    2644:	b.n	2484 <_malloc_r+0x384>
    2646:	movw	r1, #1364	; 0x554
    264a:	cmp	r2, r1
    264c:	bhi.n	265a <_malloc_r+0x55a>
    264e:	lsrs	r2, r3, #18
    2650:	add.w	r1, r2, #125	; 0x7d
    2654:	lsls	r1, r1, #1
    2656:	adds	r2, #124	; 0x7c
    2658:	b.n	2484 <_malloc_r+0x384>
    265a:	movs	r1, #254	; 0xfe
    265c:	movs	r2, #126	; 0x7e
    265e:	b.n	2484 <_malloc_r+0x384>
    2660:	ldr	r3, [r7, #4]
    2662:	b.n	256e <_malloc_r+0x46e>
    2664:	lsrs	r0, r5, #3
    2666:	adds	r3, r0, #1
    2668:	lsls	r3, r3, #1
    266a:	b.n	225e <_malloc_r+0x15e>
    266c:	.word	0x200007ec

00002670 <memset>:
    2670:	push	{r4, r5, r6}
    2672:	lsls	r4, r0, #30
    2674:	beq.n	2704 <memset+0x94>
    2676:	subs	r4, r2, #1
    2678:	cmp	r2, #0
    267a:	beq.n	2700 <memset+0x90>
    267c:	uxtb	r5, r1
    267e:	mov	r3, r0
    2680:	b.n	2688 <memset+0x18>
    2682:	subs	r2, r4, #1
    2684:	cbz	r4, 2700 <memset+0x90>
    2686:	mov	r4, r2
    2688:	strb.w	r5, [r3], #1
    268c:	lsls	r2, r3, #30
    268e:	bne.n	2682 <memset+0x12>
    2690:	cmp	r4, #3
    2692:	bls.n	26f2 <memset+0x82>
    2694:	uxtb	r5, r1
    2696:	orr.w	r5, r5, r5, lsl #8
    269a:	cmp	r4, #15
    269c:	orr.w	r5, r5, r5, lsl #16
    26a0:	bls.n	26d6 <memset+0x66>
    26a2:	add.w	r2, r3, #16
    26a6:	mov	r6, r4
    26a8:	subs	r6, #16
    26aa:	cmp	r6, #15
    26ac:	str.w	r5, [r2, #-16]
    26b0:	str.w	r5, [r2, #-12]
    26b4:	str.w	r5, [r2, #-8]
    26b8:	str.w	r5, [r2, #-4]
    26bc:	add.w	r2, r2, #16
    26c0:	bhi.n	26a8 <memset+0x38>
    26c2:	sub.w	r2, r4, #16
    26c6:	bic.w	r2, r2, #15
    26ca:	and.w	r4, r4, #15
    26ce:	adds	r2, #16
    26d0:	cmp	r4, #3
    26d2:	add	r3, r2
    26d4:	bls.n	26f2 <memset+0x82>
    26d6:	mov	r6, r3
    26d8:	mov	r2, r4
    26da:	subs	r2, #4
    26dc:	cmp	r2, #3
    26de:	str.w	r5, [r6], #4
    26e2:	bhi.n	26da <memset+0x6a>
    26e4:	subs	r2, r4, #4
    26e6:	bic.w	r2, r2, #3
    26ea:	adds	r2, #4
    26ec:	add	r3, r2
    26ee:	and.w	r4, r4, #3
    26f2:	cbz	r4, 2700 <memset+0x90>
    26f4:	uxtb	r1, r1
    26f6:	add	r4, r3
    26f8:	strb.w	r1, [r3], #1
    26fc:	cmp	r3, r4
    26fe:	bne.n	26f8 <memset+0x88>
    2700:	pop	{r4, r5, r6}
    2702:	bx	lr
    2704:	mov	r4, r2
    2706:	mov	r3, r0
    2708:	b.n	2690 <memset+0x20>
    270a:	nop

0000270c <__malloc_lock>:
    270c:	bx	lr
    270e:	nop

00002710 <__malloc_unlock>:
    2710:	bx	lr
    2712:	nop

00002714 <_sbrk_r>:
    2714:	push	{r3, r4, r5, lr}
    2716:	ldr	r4, [pc, #28]	; (2734 <_sbrk_r+0x20>)
    2718:	movs	r3, #0
    271a:	mov	r5, r0
    271c:	mov	r0, r1
    271e:	str	r3, [r4, #0]
    2720:	bl	870 <_sbrk>
    2724:	adds	r3, r0, #1
    2726:	beq.n	272a <_sbrk_r+0x16>
    2728:	pop	{r3, r4, r5, pc}
    272a:	ldr	r3, [r4, #0]
    272c:	cmp	r3, #0
    272e:	beq.n	2728 <_sbrk_r+0x14>
    2730:	str	r3, [r5, #0]
    2732:	pop	{r3, r4, r5, pc}
    2734:	.word	0x20003280

00002738 <__register_exitproc>:
    2738:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    273c:	ldr	r4, [pc, #148]	; (27d4 <__register_exitproc+0x9c>)
    273e:	ldr	r5, [r4, #0]
    2740:	ldr.w	r4, [r5, #328]	; 0x148
    2744:	mov	r6, r0
    2746:	mov	r8, r1
    2748:	mov	sl, r2
    274a:	mov	r9, r3
    274c:	cbz	r4, 27c0 <__register_exitproc+0x88>
    274e:	ldr	r0, [r4, #4]
    2750:	cmp	r0, #31
    2752:	bgt.n	2784 <__register_exitproc+0x4c>
    2754:	adds	r3, r0, #1
    2756:	cbz	r6, 2776 <__register_exitproc+0x3e>
    2758:	add.w	r5, r4, r0, lsl #2
    275c:	movs	r2, #1
    275e:	str.w	sl, [r5, #136]	; 0x88
    2762:	ldr.w	r1, [r4, #392]	; 0x188
    2766:	lsls	r2, r0
    2768:	orrs	r1, r2
    276a:	cmp	r6, #2
    276c:	str.w	r1, [r4, #392]	; 0x188
    2770:	str.w	r9, [r5, #264]	; 0x108
    2774:	beq.n	27b4 <__register_exitproc+0x7c>
    2776:	adds	r0, #2
    2778:	str	r3, [r4, #4]
    277a:	str.w	r8, [r4, r0, lsl #2]
    277e:	movs	r0, #0
    2780:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2784:	ldr	r3, [pc, #80]	; (27d8 <__register_exitproc+0xa0>)
    2786:	cbz	r3, 27ca <__register_exitproc+0x92>
    2788:	mov.w	r0, #400	; 0x190
    278c:	bl	20f0 <malloc>
    2790:	mov	r4, r0
    2792:	cbz	r0, 27ca <__register_exitproc+0x92>
    2794:	ldr.w	r3, [r5, #328]	; 0x148
    2798:	movs	r7, #0
    279a:	stmia.w	r0, {r3, r7}
    279e:	str.w	r4, [r5, #328]	; 0x148
    27a2:	mov	r0, r7
    27a4:	movs	r3, #1
    27a6:	str.w	r7, [r4, #392]	; 0x188
    27aa:	str.w	r7, [r4, #396]	; 0x18c
    27ae:	cmp	r6, #0
    27b0:	beq.n	2776 <__register_exitproc+0x3e>
    27b2:	b.n	2758 <__register_exitproc+0x20>
    27b4:	ldr.w	r1, [r4, #396]	; 0x18c
    27b8:	orrs	r2, r1
    27ba:	str.w	r2, [r4, #396]	; 0x18c
    27be:	b.n	2776 <__register_exitproc+0x3e>
    27c0:	add.w	r4, r5, #332	; 0x14c
    27c4:	str.w	r4, [r5, #328]	; 0x148
    27c8:	b.n	274e <__register_exitproc+0x16>
    27ca:	mov.w	r0, #4294967295
    27ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    27d2:	nop
    27d4:	.word	0x2000036c
    27d8:	.word	0x000020f1

000027dc <_malloc_trim_r>:
    27dc:	push	{r3, r4, r5, r6, r7, lr}
    27de:	ldr	r7, [pc, #140]	; (286c <_malloc_trim_r+0x90>)
    27e0:	mov	r4, r1
    27e2:	mov	r6, r0
    27e4:	bl	270c <__malloc_lock>
    27e8:	ldr	r3, [r7, #8]
    27ea:	ldr	r5, [r3, #4]
    27ec:	bic.w	r5, r5, #3
    27f0:	subs	r1, r5, r4
    27f2:	addw	r1, r1, #4079	; 0xfef
    27f6:	bic.w	r1, r1, #4080	; 0xff0
    27fa:	bic.w	r1, r1, #15
    27fe:	sub.w	r4, r1, #4096	; 0x1000
    2802:	cmp.w	r4, #4096	; 0x1000
    2806:	blt.n	2818 <_malloc_trim_r+0x3c>
    2808:	movs	r1, #0
    280a:	mov	r0, r6
    280c:	bl	2714 <_sbrk_r>
    2810:	ldr	r3, [r7, #8]
    2812:	add	r3, r5
    2814:	cmp	r0, r3
    2816:	beq.n	2822 <_malloc_trim_r+0x46>
    2818:	mov	r0, r6
    281a:	bl	2710 <__malloc_unlock>
    281e:	movs	r0, #0
    2820:	pop	{r3, r4, r5, r6, r7, pc}
    2822:	negs	r1, r4
    2824:	mov	r0, r6
    2826:	bl	2714 <_sbrk_r>
    282a:	adds	r0, #1
    282c:	beq.n	284a <_malloc_trim_r+0x6e>
    282e:	ldr	r3, [pc, #64]	; (2870 <_malloc_trim_r+0x94>)
    2830:	ldr	r2, [r7, #8]
    2832:	ldr	r1, [r3, #0]
    2834:	subs	r5, r5, r4
    2836:	orr.w	r5, r5, #1
    283a:	mov	r0, r6
    283c:	subs	r1, r1, r4
    283e:	str	r5, [r2, #4]
    2840:	str	r1, [r3, #0]
    2842:	bl	2710 <__malloc_unlock>
    2846:	movs	r0, #1
    2848:	pop	{r3, r4, r5, r6, r7, pc}
    284a:	movs	r1, #0
    284c:	mov	r0, r6
    284e:	bl	2714 <_sbrk_r>
    2852:	ldr	r2, [r7, #8]
    2854:	subs	r3, r0, r2
    2856:	cmp	r3, #15
    2858:	ble.n	2818 <_malloc_trim_r+0x3c>
    285a:	ldr	r4, [pc, #24]	; (2874 <_malloc_trim_r+0x98>)
    285c:	ldr	r1, [pc, #16]	; (2870 <_malloc_trim_r+0x94>)
    285e:	ldr	r4, [r4, #0]
    2860:	orr.w	r3, r3, #1
    2864:	subs	r0, r0, r4
    2866:	str	r3, [r2, #4]
    2868:	str	r0, [r1, #0]
    286a:	b.n	2818 <_malloc_trim_r+0x3c>
    286c:	.word	0x200007ec
    2870:	.word	0x20000ed8
    2874:	.word	0x20000bf8

00002878 <_free_r>:
    2878:	cmp	r1, #0
    287a:	beq.n	2908 <_free_r+0x90>
    287c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2880:	mov	r5, r1
    2882:	mov	r8, r0
    2884:	bl	270c <__malloc_lock>
    2888:	ldr.w	r7, [r5, #-4]
    288c:	ldr	r1, [pc, #424]	; (2a38 <_free_r+0x1c0>)
    288e:	bic.w	r3, r7, #1
    2892:	sub.w	r4, r5, #8
    2896:	adds	r2, r4, r3
    2898:	ldr	r6, [r1, #8]
    289a:	ldr	r0, [r2, #4]
    289c:	cmp	r2, r6
    289e:	bic.w	r0, r0, #3
    28a2:	beq.n	296a <_free_r+0xf2>
    28a4:	lsls	r6, r7, #31
    28a6:	str	r0, [r2, #4]
    28a8:	bmi.n	28c2 <_free_r+0x4a>
    28aa:	ldr.w	r7, [r5, #-8]
    28ae:	subs	r4, r4, r7
    28b0:	add.w	lr, r1, #8
    28b4:	ldr	r5, [r4, #8]
    28b6:	cmp	r5, lr
    28b8:	add	r3, r7
    28ba:	beq.n	299c <_free_r+0x124>
    28bc:	ldr	r7, [r4, #12]
    28be:	str	r7, [r5, #12]
    28c0:	str	r5, [r7, #8]
    28c2:	adds	r5, r2, r0
    28c4:	ldr	r5, [r5, #4]
    28c6:	lsls	r5, r5, #31
    28c8:	bpl.n	2950 <_free_r+0xd8>
    28ca:	orr.w	r2, r3, #1
    28ce:	str	r2, [r4, #4]
    28d0:	str	r3, [r4, r3]
    28d2:	cmp.w	r3, #512	; 0x200
    28d6:	bcs.n	290a <_free_r+0x92>
    28d8:	lsrs	r3, r3, #3
    28da:	adds	r2, r3, #1
    28dc:	ldr	r5, [r1, #4]
    28de:	ldr.w	r7, [r1, r2, lsl #3]
    28e2:	str	r7, [r4, #8]
    28e4:	movs	r0, #1
    28e6:	asrs	r3, r3, #2
    28e8:	lsl.w	r3, r0, r3
    28ec:	add.w	r0, r1, r2, lsl #3
    28f0:	orrs	r5, r3
    28f2:	subs	r0, #8
    28f4:	str	r0, [r4, #12]
    28f6:	str	r5, [r1, #4]
    28f8:	str.w	r4, [r1, r2, lsl #3]
    28fc:	str	r4, [r7, #12]
    28fe:	mov	r0, r8
    2900:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2904:	b.w	2710 <__malloc_unlock>
    2908:	bx	lr
    290a:	lsrs	r2, r3, #9
    290c:	cmp	r2, #4
    290e:	bhi.n	29b8 <_free_r+0x140>
    2910:	lsrs	r2, r3, #6
    2912:	add.w	r7, r2, #57	; 0x39
    2916:	lsls	r7, r7, #1
    2918:	add.w	r5, r2, #56	; 0x38
    291c:	add.w	r0, r1, r7, lsl #2
    2920:	ldr.w	r2, [r1, r7, lsl #2]
    2924:	ldr	r1, [pc, #272]	; (2a38 <_free_r+0x1c0>)
    2926:	subs	r0, #8
    2928:	cmp	r0, r2
    292a:	beq.n	29c8 <_free_r+0x150>
    292c:	ldr	r1, [r2, #4]
    292e:	bic.w	r1, r1, #3
    2932:	cmp	r3, r1
    2934:	bcs.n	293c <_free_r+0xc4>
    2936:	ldr	r2, [r2, #8]
    2938:	cmp	r0, r2
    293a:	bne.n	292c <_free_r+0xb4>
    293c:	ldr	r0, [r2, #12]
    293e:	str	r0, [r4, #12]
    2940:	str	r2, [r4, #8]
    2942:	str	r4, [r0, #8]
    2944:	str	r4, [r2, #12]
    2946:	mov	r0, r8
    2948:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    294c:	b.w	2710 <__malloc_unlock>
    2950:	ldr	r5, [r2, #8]
    2952:	ldr	r7, [pc, #232]	; (2a3c <_free_r+0x1c4>)
    2954:	cmp	r5, r7
    2956:	add	r3, r0
    2958:	beq.n	29da <_free_r+0x162>
    295a:	ldr	r0, [r2, #12]
    295c:	str	r0, [r5, #12]
    295e:	orr.w	r2, r3, #1
    2962:	str	r5, [r0, #8]
    2964:	str	r2, [r4, #4]
    2966:	str	r3, [r4, r3]
    2968:	b.n	28d2 <_free_r+0x5a>
    296a:	lsls	r7, r7, #31
    296c:	add	r3, r0
    296e:	bmi.n	2980 <_free_r+0x108>
    2970:	ldr.w	r2, [r5, #-8]
    2974:	subs	r4, r4, r2
    2976:	add	r3, r2
    2978:	ldr	r0, [r4, #8]
    297a:	ldr	r2, [r4, #12]
    297c:	str	r2, [r0, #12]
    297e:	str	r0, [r2, #8]
    2980:	ldr	r2, [pc, #188]	; (2a40 <_free_r+0x1c8>)
    2982:	ldr	r2, [r2, #0]
    2984:	orr.w	r0, r3, #1
    2988:	cmp	r3, r2
    298a:	str	r0, [r4, #4]
    298c:	str	r4, [r1, #8]
    298e:	bcc.n	28fe <_free_r+0x86>
    2990:	ldr	r3, [pc, #176]	; (2a44 <_free_r+0x1cc>)
    2992:	mov	r0, r8
    2994:	ldr	r1, [r3, #0]
    2996:	bl	27dc <_malloc_trim_r>
    299a:	b.n	28fe <_free_r+0x86>
    299c:	adds	r1, r2, r0
    299e:	ldr	r1, [r1, #4]
    29a0:	lsls	r1, r1, #31
    29a2:	bmi.n	2a2e <_free_r+0x1b6>
    29a4:	ldr	r1, [r2, #8]
    29a6:	ldr	r2, [r2, #12]
    29a8:	str	r2, [r1, #12]
    29aa:	add	r3, r0
    29ac:	orr.w	r0, r3, #1
    29b0:	str	r1, [r2, #8]
    29b2:	str	r0, [r4, #4]
    29b4:	str	r3, [r4, r3]
    29b6:	b.n	28fe <_free_r+0x86>
    29b8:	cmp	r2, #20
    29ba:	bhi.n	29ec <_free_r+0x174>
    29bc:	add.w	r7, r2, #92	; 0x5c
    29c0:	lsls	r7, r7, #1
    29c2:	add.w	r5, r2, #91	; 0x5b
    29c6:	b.n	291c <_free_r+0xa4>
    29c8:	asrs	r2, r5, #2
    29ca:	ldr	r3, [r1, #4]
    29cc:	movs	r5, #1
    29ce:	lsl.w	r2, r5, r2
    29d2:	orrs	r3, r2
    29d4:	str	r3, [r1, #4]
    29d6:	mov	r2, r0
    29d8:	b.n	293e <_free_r+0xc6>
    29da:	orr.w	r2, r3, #1
    29de:	str	r4, [r1, #20]
    29e0:	str	r4, [r1, #16]
    29e2:	str	r5, [r4, #12]
    29e4:	str	r5, [r4, #8]
    29e6:	str	r2, [r4, #4]
    29e8:	str	r3, [r4, r3]
    29ea:	b.n	28fe <_free_r+0x86>
    29ec:	cmp	r2, #84	; 0x54
    29ee:	bhi.n	29fe <_free_r+0x186>
    29f0:	lsrs	r2, r3, #12
    29f2:	add.w	r7, r2, #111	; 0x6f
    29f6:	lsls	r7, r7, #1
    29f8:	add.w	r5, r2, #110	; 0x6e
    29fc:	b.n	291c <_free_r+0xa4>
    29fe:	cmp.w	r2, #340	; 0x154
    2a02:	bhi.n	2a12 <_free_r+0x19a>
    2a04:	lsrs	r2, r3, #15
    2a06:	add.w	r7, r2, #120	; 0x78
    2a0a:	lsls	r7, r7, #1
    2a0c:	add.w	r5, r2, #119	; 0x77
    2a10:	b.n	291c <_free_r+0xa4>
    2a12:	movw	r0, #1364	; 0x554
    2a16:	cmp	r2, r0
    2a18:	bhi.n	2a28 <_free_r+0x1b0>
    2a1a:	lsrs	r2, r3, #18
    2a1c:	add.w	r7, r2, #125	; 0x7d
    2a20:	lsls	r7, r7, #1
    2a22:	add.w	r5, r2, #124	; 0x7c
    2a26:	b.n	291c <_free_r+0xa4>
    2a28:	movs	r7, #254	; 0xfe
    2a2a:	movs	r5, #126	; 0x7e
    2a2c:	b.n	291c <_free_r+0xa4>
    2a2e:	orr.w	r2, r3, #1
    2a32:	str	r2, [r4, #4]
    2a34:	str	r3, [r4, r3]
    2a36:	b.n	28fe <_free_r+0x86>
    2a38:	.word	0x200007ec
    2a3c:	.word	0x200007f4
    2a40:	.word	0x20000bf4
    2a44:	.word	0x20000ed4

00002a48 <___init_veneer>:
    2a48:	ldr.w	pc, [pc]	; 2a4c <___init_veneer+0x4>
    2a4c:	.word	0x600016a5

Disassembly of section .fini:

00002a50 <_fini>:
    2a50:	push	{r3, r4, r5, r6, r7, lr}
    2a52:	nop
