
.vsteensy/build/04_Callbacks.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	cmp	r2, r3
6000105e:	bcs.n	6000107a <ResetHandler+0x46>
60001060:	mvns	r4, r2
60001062:	mov	r0, r1
60001064:	add	r3, r4
60001066:	bic.w	r3, r3, #3
6000106a:	adds	r3, #4
6000106c:	add	r3, r1
		*dest++ = *src++;
6000106e:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	cmp	r0, r3
		*dest++ = *src++;
60001074:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	cmp	r2, r1
60001080:	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	cmp	r2, r3
60001086:	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	mvns	r4, r2
6000108a:	mov	r0, r1
6000108c:	add	r3, r4
6000108e:	bic.w	r3, r3, #3
60001092:	adds	r3, #4
60001094:	add	r3, r1
		*dest++ = *src++;
60001096:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	cmp	r0, r3
		*dest++ = *src++;
6000109c:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	cmp	r2, r3
600010a8:	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	mvns	r0, r2
600010ac:	mov	r1, r2
		*dest++ = 0;
600010ae:	movs	r4, #0
600010b0:	add	r3, r0
600010b2:	bic.w	r3, r3, #3
600010b6:	adds	r3, #4
600010b8:	add	r3, r2
600010ba:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	cmp	r3, r1
600010c0:	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	mov.w	r1, #15728640	; 0xf00000
600010c8:	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	str	r1, [r2, #0]
600010cc:	add.w	r1, r3, #704	; 0x2c0
600010d0:	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	str.w	r2, [r3, #4]!
600010d6:	cmp	r1, r3
600010d8:	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	movs	r1, #128	; 0x80
600010de:	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	strb.w	r1, [r3], #1
600010e4:	cmp	r3, r2
600010e6:	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	ldr	r3, [r6, #28]
6000111c:	bic.w	r3, r3, #127	; 0x7f
60001120:	orr.w	r3, r3, #64	; 0x40
60001124:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	ldr	r3, [r6, #36]	; 0x24
60001128:	bic.w	r3, r3, #127	; 0x7f
6000112c:	orr.w	r3, r3, #64	; 0x40
60001130:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	bl	60001390 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	orr.w	r3, r3, #1
60001176:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	ldr	r3, [r0, #0]
6000117a:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	bl	60001488 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	bl	60001750 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	nop
60001198:	nop
6000119a:	nop
6000119c:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	ldr	r2, [r3, #56]	; 0x38
600011be:	lsls	r2, r2, #31
600011c0:	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	ldr	r2, [r3, #56]	; 0x38
600011ce:	orr.w	r2, r2, #1
600011d2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	ldr	r3, [r2, #8]
600011da:	orr.w	r3, r3, #65537	; 0x10001
600011de:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	bl	60001748 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	cmp	r3, #19
600011e8:	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	bl	600012a4 <usb_init>
	analog_init();
600011ee:	bl	60001608 <analog_init>
	pwm_init();
600011f2:	bl	60001778 <__pwm_init_veneer>
	tempmon_init();
600011f6:	bl	600014ec <tempmon_init>

	startup_late_hook();
600011fa:	bl	60001740 <__startup_late_hook_veneer>
600011fe:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	cmp.w	r3, #300	; 0x12c
60001204:	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	bl	60001738 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	bl	60001768 <__main_veneer>
6000120e:	b.n	6000120e <ResetHandler+0x1da>
60001210:	.word	0x400ac000
60001214:	.word	0xaaaaaaab
60001218:	.word	0x00200007
6000121c:	.word	0x20078000
60001220:	.word	0x00000000
60001224:	.word	0x60001790
60001228:	.word	0x00006418
6000122c:	.word	0x20000000
60001230:	.word	0x60007bac
60001234:	.word	0x20001020
60001238:	.word	0x20001020
6000123c:	.word	0x20003700
60001240:	.word	0xe000ed88
60001244:	.word	0x200033fc
60001248:	.word	0x000020c1
6000124c:	.word	0xe000e400
60001250:	.word	0xe000e4a0
60001254:	.word	0x400d8000
60001258:	.word	0x400fc000
6000125c:	.word	0xe000ed08
60001260:	.word	0xe000e014
60001264:	.word	0xe000e018
60001268:	.word	0x00000e5d
6000126c:	.word	0xe000edfc
60001270:	.word	0x20200000
60001274:	.word	0x00000e61
60001278:	.word	0xe0001000
6000127c:	.word	0xe0001004
60001280:	.word	0x20001068
60001284:	.word	0x23c34600
60001288:	.word	0x40084000
6000128c:	.word	0x400d4000
60001290:	.word	0x56c00000
60001294:	.word	0x20001070
60001298:	.word	0x20003400
6000129c:	.word	0x2018101b
600012a0:	.word	0x13110d0c

600012a4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a4:	ldr	r3, [pc, #192]	; (60001368 <usb_init+0xc4>)
600012a6:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600012aa:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012ac:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b0:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012b4:	bl	60001758 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b8:	ldr	r1, [pc, #176]	; (6000136c <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012ba:	ldr	r0, [pc, #180]	; (60001370 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012bc:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c0:	ldr	r4, [pc, #176]	; (60001374 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c2:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c6:	ldr	r3, [pc, #176]	; (60001378 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c8:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012cc:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012d0:	ldr	r2, [r4, #0]
600012d2:	ands	r3, r2
600012d4:	cbnz	r3, 600012de <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012d6:	ldr.w	r3, [r0, #424]	; 0x1a8
600012da:	lsls	r2, r3, #30
600012dc:	beq.n	60001314 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012de:	ldr	r3, [pc, #144]	; (60001370 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012e0:	mov.w	r1, #2147483648	; 0x80000000
600012e4:	ldr	r2, [pc, #140]	; (60001374 <usb_init+0xd0>)
600012e6:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012e8:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ea:	ldr.w	r1, [r3, #320]	; 0x140
600012ee:	orr.w	r1, r1, #2
600012f2:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012f6:	ldr.w	r3, [r2, #320]	; 0x140
600012fa:	lsls	r3, r3, #30
600012fc:	bmi.n	600012f6 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012fe:	mov.w	r0, #131072	; 0x20000
60001302:	ldr	r1, [pc, #120]	; (6000137c <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001304:	ldr	r3, [pc, #108]	; (60001374 <usb_init+0xd0>)
60001306:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000130a:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000130c:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000130e:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001310:	bl	60001760 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001314:	ldr	r5, [pc, #104]	; (60001380 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001316:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001318:	ldr	r3, [pc, #88]	; (60001374 <usb_init+0xd0>)
6000131a:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000131e:	ldr	r4, [pc, #80]	; (60001370 <usb_init+0xcc>)
60001320:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001322:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001324:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001326:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001328:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000132a:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000132e:	mov.w	r2, #640	; 0x280
60001332:	bl	60001770 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001336:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000133a:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000133e:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001342:	ldr	r2, [pc, #64]	; (60001384 <usb_init+0xe0>)
60001344:	ldr	r1, [pc, #64]	; (60001388 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001346:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001348:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000134a:	str.w	r5, [r4, #344]	; 0x158
6000134e:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001352:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001356:	ldr	r2, [pc, #52]	; (6000138c <usb_init+0xe8>)
60001358:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000135c:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000135e:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001360:	str.w	r3, [r4, #320]	; 0x140
60001364:	pop	{r4, r5, r6, pc}
60001366:	nop
60001368:	.word	0x400d8000
6000136c:	.word	0x400fc000
60001370:	.word	0x402e0000
60001374:	.word	0x400d9000
60001378:	.word	0x001e1c00
6000137c:	.word	0xe000e28c
60001380:	.word	0x20003000
60001384:	.word	0x20003400
60001388:	.word	0x000018b1
6000138c:	.word	0xe000e10c

60001390 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001390:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001392:	ldr	r2, [pc, #160]	; (60001434 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001394:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001396:	ldr	r3, [pc, #160]	; (60001438 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001398:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000139c:	ldr	r4, [pc, #156]	; (6000143c <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000139e:	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013a0:	ldr.w	lr, [pc, #216]	; 6000147c <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600013a4:	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013a6:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013a8:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600013aa:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013ae:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600013b2:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013b4:	ldr.w	lr, [pc, #200]	; 60001480 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013b8:	ldr	r7, [pc, #132]	; (60001440 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013ba:	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600013be:	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013c0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013c2:	ldr	r6, [pc, #128]	; (60001444 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013c4:	ldr	r7, [pc, #128]	; (60001448 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013c6:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013c8:	ldr	r1, [pc, #128]	; (6000144c <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013ca:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013cc:	ldr	r6, [pc, #128]	; (60001450 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013ce:	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013d2:	ldr	r7, [pc, #128]	; (60001454 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013d4:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013d6:	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d8:	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013dc:	ldr	r6, [pc, #120]	; (60001458 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013de:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013e0:	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013e2:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013e4:	ldr.w	lr, [pc, #156]	; 60001484 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013e8:	ldr	r6, [pc, #112]	; (6000145c <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013ea:	ldr	r1, [pc, #116]	; (60001460 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013ec:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013f0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013f2:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013f4:	ldr	r7, [pc, #108]	; (60001464 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013f6:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013f8:	ldr	r6, [pc, #108]	; (60001468 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013fa:	ldr	r1, [pc, #112]	; (6000146c <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013fc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013fe:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001400:	ldr	r7, [pc, #108]	; (60001470 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001402:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001404:	ldr	r6, [pc, #108]	; (60001474 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001406:	ldr	r1, [pc, #112]	; (60001478 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001408:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000140a:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000140c:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000140e:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001410:	dsb	sy
	asm("isb");
60001414:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001418:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
6000141c:	dsb	sy
	asm("isb");
60001420:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001424:	ldr.w	r3, [r2, #-136]
60001428:	orr.w	r3, r3, #196608	; 0x30000
6000142c:	str.w	r3, [r2, #-136]
60001430:	pop	{r4, r5, r6, r7, pc}
60001432:	nop
60001434:	.word	0xe000ed9c
60001438:	.word	0xe000eda0
6000143c:	.word	0xe000ed94
60001440:	.word	0x00100009
60001444:	.word	0x00200013
60001448:	.word	0x07020021
6000144c:	.word	0x20003700
60001450:	.word	0x20000014
60001454:	.word	0x13080025
60001458:	.word	0x10000009
6000145c:	.word	0x40000017
60001460:	.word	0x13100033
60001464:	.word	0x60000018
60001468:	.word	0x070b002f
6000146c:	.word	0x70000019
60001470:	.word	0x170b0037
60001474:	.word	0x7000001a
60001478:	.word	0x130b002f
6000147c:	.word	0x1000003f
60001480:	.word	0x03080025
60001484:	.word	0x20200016

60001488 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001488:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000148a:	ldr	r2, [pc, #92]	; (600014e8 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000148c:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000148e:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001492:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001496:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000149a:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000149e:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600014a2:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600014a4:	tst.w	r3, #2
600014a8:	beq.n	600014b8 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600014aa:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600014ac:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600014ae:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600014b0:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600014b2:	tst.w	r3, #2
600014b6:	bne.n	600014aa <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600014b8:	tst.w	r3, #8192	; 0x2000
600014bc:	bne.n	600014c2 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600014be:	str	r5, [r2, #20]
			continue;
600014c0:	b.n	600014a2 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600014c2:	tst.w	r3, #4096	; 0x1000
600014c6:	bne.n	600014cc <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600014c8:	str	r6, [r2, #20]
			continue;
600014ca:	b.n	600014a2 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600014cc:	cmp	r3, #0
600014ce:	bge.n	600014a2 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600014d0:	tst.w	r3, #65536	; 0x10000
600014d4:	beq.n	600014da <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600014d6:	str	r1, [r2, #24]
			continue;
600014d8:	b.n	600014a2 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600014da:	lsls	r3, r3, #25
600014dc:	bmi.n	600014e2 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600014de:	str	r7, [r2, #20]
			continue;
600014e0:	b.n	600014a2 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600014e2:	pop	{r4, r5, r6, r7}
600014e4:	bx	lr
600014e6:	nop
600014e8:	.word	0x400d8000

600014ec <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ec:	ldr	r2, [pc, #236]	; (600015dc <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014ee:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014f2:	ldr	r1, [pc, #236]	; (600015e0 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014f4:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014f6:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
600014f8:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014fa:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014fe:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001500:	ldr.w	lr, [pc, #256]	; 60001604 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001504:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001506:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000150a:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000150e:	ldr	r7, [pc, #212]	; (600015e4 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001510:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001512:	ubfx	r4, r3, #8, #12
60001516:	ldr	r6, [pc, #208]	; (600015e8 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001518:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000151c:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001520:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001524:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001528:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000152c:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001530:	vmov	s15, r4
60001534:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001538:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000153a:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000153e:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001542:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001546:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001548:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000154c:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001550:	ldr	r5, [pc, #152]	; (600015ec <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001552:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001556:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001558:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155c:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001560:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001562:	vdiv.f32	s11, s14, s13
60001566:	ldr	r6, [pc, #136]	; (600015f0 <tempmon_init+0x104>)
60001568:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	ldr	r1, [pc, #136]	; (600015f4 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000156c:	ldr	r4, [pc, #136]	; (600015f8 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156e:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001572:	vmov	s15, r3
60001576:	ldr	r3, [pc, #132]	; (600015fc <tempmon_init+0x110>)
60001578:	str.w	r3, [r6, #320]	; 0x140
6000157c:	vcvt.f32.u32	s15, s15
60001580:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001584:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001588:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000158c:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001590:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001594:	vmov	r3, s11
60001598:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000159c:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015a0:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015a4:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a6:	and.w	r1, r1, r5, lsl #16
600015aa:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015ae:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015b2:	orrs	r3, r1
600015b4:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015b8:	vmov	r3, s15
600015bc:	ldr.w	r1, [r2, #272]	; 0x110
600015c0:	ubfx	r3, r3, #0, #12
600015c4:	orrs	r3, r1
600015c6:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015ca:	ldr	r3, [r2, #0]
600015cc:	orr.w	r3, r3, #2
600015d0:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600015d2:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600015d4:	ldr	r3, [pc, #40]	; (60001600 <tempmon_init+0x114>)
600015d6:	movs	r2, #1
600015d8:	str	r2, [r3, #0]
600015da:	pop	{r4, r5, r6, r7, pc}
600015dc:	.word	0x400d8180
600015e0:	.word	0x401f4400
600015e4:	.word	0x200012c4
600015e8:	.word	0x200012c8
600015ec:	.word	0x200012c0
600015f0:	.word	0x20003400
600015f4:	.word	0x0fff0000
600015f8:	.word	0xe000e440
600015fc:	.word	0x000021ed
60001600:	.word	0xe000e108
60001604:	.word	0x200012bc

60001608 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001608:	ldr	r3, [pc, #68]	; (60001650 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000160a:	ldr	r1, [pc, #72]	; (60001654 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000160c:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000160e:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001610:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001614:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001616:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001618:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000161c:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000161e:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001620:	orr.w	r0, r0, #768	; 0x300
60001624:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001626:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001628:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000162a:	ldr	r3, [r2, #72]	; 0x48
6000162c:	lsls	r3, r3, #24
6000162e:	bmi.n	6000162a <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001630:	ldr	r3, [pc, #36]	; (60001658 <analog_init+0x50>)
60001632:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001636:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001638:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000163a:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000163c:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000163e:	ldr	r3, [r2, #72]	; 0x48
60001640:	ands.w	r3, r3, #128	; 0x80
60001644:	bne.n	6000163e <analog_init+0x36>
	calibrating = 0;
60001646:	ldr	r2, [pc, #20]	; (6000165c <analog_init+0x54>)
60001648:	strb	r3, [r2, #0]
}
6000164a:	pop	{r4, r5}
6000164c:	bx	lr
6000164e:	nop
60001650:	.word	0x400fc000
60001654:	.word	0x400c4000
60001658:	.word	0x400c8000
6000165c:	.word	0x200012cc

60001660 <_serialEvent_default>:
60001660:	....

60001664 <usb_string_product_name_default>:
60001664:	..U.S.B. .S.e.r.
60001674:	i.a.l...

6000167c <usb_string_manufacturer_name_default>:
6000167c:	..T.e.e.n.s.y.d.
6000168c:	u.i.n.o.

60001694 <string0>:
60001694:	....

60001698 <usb_config_descriptor_12>:
60001698:	..C.....2.......
600016a8:	...$....$....$..
600016b8:	.$..............
600016c8:	.........@......
600016d8:	@...

600016dc <usb_config_descriptor_480>:
600016dc:	..C.....2.......
600016ec:	...$....$....$..
600016fc:	.$..............
6000170c:	................
6000171c:	....

60001720 <qualifier_descriptor>:
60001720:	.......@....

6000172c <_init>:
6000172c:	push	{r3, r4, r5, r6, r7, lr}
6000172e:	nop
60001730:	pop	{r3, r4, r5, r6, r7}
60001732:	pop	{r3}
60001734:	mov	lr, r3
60001736:	bx	lr

60001738 <____libc_init_array_veneer>:
60001738:	ldr.w	pc, [pc]	; 6000173c <____libc_init_array_veneer+0x4>
6000173c:	.word	0x000024ed

60001740 <__startup_late_hook_veneer>:
60001740:	ldr.w	pc, [pc]	; 60001744 <__startup_late_hook_veneer+0x4>
60001744:	.word	0x000020dd

60001748 <__startup_early_hook_veneer>:
60001748:	ldr.w	pc, [pc]	; 6000174c <__startup_early_hook_veneer+0x4>
6000174c:	.word	0x000020d9

60001750 <__set_arm_clock_veneer>:
60001750:	ldr.w	pc, [pc]	; 60001754 <__set_arm_clock_veneer+0x4>
60001754:	.word	0x00000919

60001758 <__usb_init_serialnumber_veneer>:
60001758:	ldr.w	pc, [pc]	; 6000175c <__usb_init_serialnumber_veneer+0x4>
6000175c:	.word	0x00002069

60001760 <__delay_veneer>:
60001760:	ldr.w	pc, [pc]	; 60001764 <__delay_veneer+0x4>
60001764:	.word	0x00000bdd

60001768 <__main_veneer>:
60001768:	ldr.w	pc, [pc]	; 6000176c <__main_veneer+0x4>
6000176c:	.word	0x00000ed9

60001770 <__memset_veneer>:
60001770:	ldr.w	pc, [pc]	; 60001774 <__memset_veneer+0x4>
60001774:	.word	0x00002bc1

60001778 <__pwm_init_veneer>:
60001778:	ldr.w	pc, [pc]	; 6000177c <__pwm_init_veneer+0x4>
6000177c:	.word	0x00002211

60001780 <__init_array_start>:
60001780:	.word	0x00000045
60001784:	.word	0x00000671

60001788 <__init_array_end>:
60001788:	.word	0xffffffff
6000178c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	asrs	r0, r4, #32
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	str	r4, [r2, #64]	; 0x40
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	cmp	r3, #0
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	nop
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	asrs	r4, r4, #32
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	str	r4, [r2, #64]	; 0x40
  ADC2_CFG = mode1;
      72:	movs	r0, r0
  
  if(num >= 4){
      74:	asrs	r0, r4, #32
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	movs	r0, r0
	...

0000007c <std::_Function_handler<void (long, long), void (*)(int, int)>::_M_invoke(std::_Any_data const&, long&&, long&&)>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      7c:	push	{r4}
      {
	(*_Base::_M_get_pointer(__functor))(
      7e:	ldr	r4, [r1, #0]
      80:	ldr	r3, [r0, #0]
      82:	ldr	r1, [r2, #0]
      84:	.word	0xf85d4620
	    std::forward<_ArgTypes>(__args)...);
      }
      88:	ldr	r3, [pc, #16]	; (9c <std::_Function_base::_Base_manager<void (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x10>)

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
      8a:	.short	0x4718

0000008c <std::_Function_base::_Base_manager<void (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
      8c:	cmp	r2, #1
      8e:	.short	0xd006
      90:	cmp	r2, #2
      92:	.short	0xd102
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
      94:	ldr	r3, [r1, #0]
      96:	.short	0xb100
      98:	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
      9a:	movs	r0, #0
      9c:	.word	0x60014770
      a0:	movs	r0, #0
      a2:	bx	lr

000000a4 <std::_Function_handler<void (long, long), setup::{lambda(int, int)#1}>::_M_invoke(std::_Any_data const&, long&&, std::_Any_data const&)>:
		} else if (pin == 11) {
			CORE_PIN11_PORTTOGGLE = CORE_PIN11_BITMASK;
		} else if (pin == 12) {
			CORE_PIN12_PORTTOGGLE = CORE_PIN12_BITMASK;
		} else if (pin == 13) {
			CORE_PIN13_PORTTOGGLE = CORE_PIN13_BITMASK;
      a4:	ldr	r3, [pc, #8]	; (b0 <std::_Function_handler<void (long, long), setup::{lambda(int, int)#1}>::_M_invoke(std::_Any_data const&, long&&, std::_Any_data const&)+0xc>)
      a6:	.short	0x2208
      a8:	str.w	r2, [r3, #140]	; 0x8c
      ac:	bx	lr
      ae:	.short	0xbf00
      b0:	ands	r0, r0
      b2:	tst	r0, r0

000000b4 <std::_Function_base::_Base_manager<setup::{lambda(int, int)#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda(int, int)#2}> const&, std::_Manager_operation)>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
      b4:	cmp	r2, #1
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
      b6:	it	eq
      b8:	streq	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
      ba:	movs	r0, #0
      bc:	.word	0xbf004770

000000c0 <myCallback(int, int)>:

EncPlex74165 encoders(encoderCount, pinLD, pinCLK, QH_A, QH_B, CountMode::quarterInv);

void myCallback(int value, int delta)
{
    Serial.printf("Current value: %d, delta = %d\n", value, delta);
      c0:	mov	r3, r1
      c2:	.short	0x4602
      c4:	ldr	r1, [pc, #4]	; (cc <myCallback(int, int)+0xc>)
      c6:	.short	0x4802
      c8:	b.w	eb8 <Print::printf(char const*, ...)>
      cc:	.word	0x20000000
      d0:	lsls	r0, r7, #24
      d2:	.short	0x2000

000000d4 <std::_Function_handler<void (long, long), setup::{lambda(int, int)#2}>::_M_invoke(std::_Any_data const&, long&&, std::_Any_data const&)>:
    pinMode(13, OUTPUT);
    encoders.begin();

    encoders[0].attachCallback(myCallback); // standard callback
    encoders[1].attachCallback([](int v, int d) { digitalToggleFast(13); }); // a simple lambda expression to toggle the LED on every change
    encoders[2].attachCallback([](int v, int d) { Serial.printf("enc 2: %s\n", d > 0 ? "UP" : "DOWN"); });
      d4:	ldr	r0, [r2, #0]
      d6:	.short	0x4b04
      d8:	ldr	r2, [pc, #16]	; (ec <std::_Function_handler<void (long, long), setup::{lambda(int, int)#2}>::_M_invoke(std::_Any_data const&, long&&, std::_Any_data const&)+0x18>)
      da:	ldr	r1, [pc, #20]	; (f0 <std::_Function_handler<void (long, long), setup::{lambda(int, int)#2}>::_M_invoke(std::_Any_data const&, long&&, std::_Any_data const&)+0x1c>)
      dc:	cmp	r0, #0
      de:	.short	0xbfd8
      e0:	movle	r2, r3
      e2:	.short	0x4804
      e4:	b.w	eb8 <Print::printf(char const*, ...)>
      e8:	movs	r4, r4
      ea:	.short	0x2000
      ec:	movs	r0, r4
      ee:	.short	0x2000
      f0:	movs	r4, r5
      f2:	movs	r0, #0
      f4:	lsls	r0, r7, #24
      f6:	movs	r0, #0

000000f8 <EncoderTool::EncPlex74165::~EncPlex74165()>:
        : EncPlexBase(nrOfEncoders, mode), A(pinA), B(pinB), LD(pinLD), CLK(pinCLK)
    {
        begin(); // usually calling begin from the constructor works... if not you can always call it in setup()
    }

    EncPlex74165::~EncPlex74165()
      f8:	.word	0x4604b510
    {
        pinMode(A, INPUT_DISABLE);
      fc:	movs	r1, #5
      fe:	ldrb	r0, [r0, #24]
     100:	.word	0xfdd2f000
        pinMode(B, INPUT_DISABLE);
     104:	ldrb	r0, [r4, #28]
     106:	.short	0x2105
     108:	bl	ca8 <pinMode>
        pinMode(LD, INPUT_DISABLE);
     10c:	ldrb.w	r0, [r4, #32]
     110:	.word	0xf0002105
     114:	stc2l	8, cr15, [r9, #592]	; 0x250
        pinMode(CLK, INPUT_DISABLE);
     118:	.word	0x21050024
     11c:	bl	ca8 <pinMode>
        : EncPlexBase(nrOfEncoders, mode), A(pinA), B(pinB), LD(pinLD), CLK(pinCLK)
    {
        begin(); // usually calling begin from the constructor works... if not you can always call it in setup()
    }

    EncPlex74165::~EncPlex74165()
     120:	.word	0xf0004620
     124:	smlatb	r6, sp, r0, r4
    {
        pinMode(A, INPUT_DISABLE);
        pinMode(B, INPUT_DISABLE);
        pinMode(LD, INPUT_DISABLE);
        pinMode(CLK, INPUT_DISABLE);
    }
     128:	.word	0xbf00bd10

0000012c <std::_Function_base::_Base_manager<setup::{lambda(int, int)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda(int, int)#1}> const&, std::_Manager_operation)>:
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
     12c:	cmp	r2, #1
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
     12e:	.short	0xbf08
     130:	streq	r1, [r0, #0]
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     132:	.short	0x2000
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     134:	bx	lr
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
     136:	nop

00000138 <EncoderTool::EncPlex74165::begin()>:

    void EncPlex74165::begin()
    {
     138:	.word	0x4ff8e92d
     13c:	mov	r6, r0
        pinMode(A, INPUT);
     13e:	.short	0x2100
     140:	ldrb	r0, [r0, #24]
     142:	.short	0xf000
     144:	ldc2	15, cr7, [r1, #192]!	; 0xc0
        pinMode(B, INPUT);
     148:	.word	0x4d712100
     14c:	bl	ca8 <pinMode>
        pinMode(LD, OUTPUT);
     150:	.word	0x0020f896
     154:	movs	r1, #1

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     156:	ldr.w	r8, [pc, #456]	; 320 <EncoderTool::EncPlex74165::begin()+0x1e8>
     15a:	.short	0xf000
     15c:	stc2	8, cr15, [r5, #600]!	; 0x258
        pinMode(CLK, OUTPUT);
     160:	.word	0x21010024
     164:	bl	ca8 <pinMode>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     168:	.word	0x0020f896
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     16c:	ldr	r3, [pc, #420]	; (314 <EncoderTool::EncPlex74165::begin()+0x1dc>)
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     16e:	.short	0x0100

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     170:	ldr	r2, [pc, #420]	; (318 <EncoderTool::EncPlex74165::begin()+0x1e0>)
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     172:	.short	0x469e
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     174:	adds	r4, r5, r0
     176:	ldr	r1, [r5, r0]
     178:	.word	0xf8c168e4
     17c:	lsls	r4, r0
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     17e:	.short	0x681c
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     180:	ldr.w	r3, [r8]
     184:	.word	0x3203fba2
     188:	lsrs	r2, r2, #18
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     18a:	.short	0xf8de
     18c:	adds	r0, #0
     18e:	ldr	r7, [pc, #388]	; (314 <EncoderTool::EncPlex74165::begin()+0x1dc>)
     190:	subs	r3, r3, r4
     192:	cmp	r2, r3
     194:	bhi.n	18a <EncoderTool::EncPlex74165::begin()+0x52>
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     196:	adds	r2, r5, r0
static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     198:	mov	lr, r7

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     19a:	movs	r3, #50	; 0x32
     19c:	ldr	r4, [pc, #380]	; (31c <EncoderTool::EncPlex74165::begin()+0x1e4>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     19e:	ldr	r2, [r2, #12]
     1a0:	str.w	r2, [r1, #136]	; 0x88
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     1a4:	ldr	r7, [r7, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     1a6:	ldr.w	r2, [r8]
     1aa:	lsrs	r2, r2, #16
     1ac:	mul.w	r3, r3, r2
     1b0:	lsrs	r3, r3, #1
     1b2:	.short	0xfba4
     1b4:	adds	r4, #3
     1b6:	lsrs	r4, r4, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     1b8:	.word	0x3000f8de
     1bc:	ldr	r2, [pc, #340]	; (314 <EncoderTool::EncPlex74165::begin()+0x1dc>)
     1be:	.short	0x1bdb
     1c0:	cmp	r4, r3
     1c2:	.short	0xd8f9
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     1c4:	ldr	r7, [r2, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     1c6:	.short	0x2332
     1c8:	ldr.w	r4, [r8]
     1cc:	.word	0xc14cf8df
     1d0:	mov.w	lr, r4, lsr #16
     1d4:	mul.w	r3, r3, lr
     1d8:	lsrs	r3, r3, #1
     1da:	.short	0xfbac
     1dc:	adds	r4, #3
     1de:	.short	0x0a24
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     1e0:	ldr	r3, [r2, #0]
     1e2:	ldr.w	lr, [pc, #304]	; 314 <EncoderTool::EncPlex74165::begin()+0x1dc>
     1e6:	subs	r3, r3, r7
     1e8:	.word	0xd8f9429c
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     1ec:	ldr.w	r4, [lr]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     1f0:	.word	0xf8d82332
     1f4:	strb	r0, [r0, #0]
     1f6:	.short	0x4a49
     1f8:	lsrs	r7, r7, #16
     1fa:	.short	0xfb03
     1fc:	ssat	r8, #28, r7, lsl #1
     200:	.word	0x3203fba2
     204:	lsrs	r2, r2, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     206:	.short	0xf8de
     208:	adds	r0, #0
     20a:	subs	r3, r3, r4
     20c:	cmp	r2, r3
     20e:	bhi.n	206 <EncoderTool::EncPlex74165::begin()+0xce>
#endif
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     210:	ldrb	r2, [r6, #24]
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     212:	add	r0, r5
#endif
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     214:	ldrb	r3, [r6, #28]
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     216:	ldr	r4, [r0, #12]
#endif
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     218:	lsls	r2, r2, #4
     21a:	lsls	r3, r3, #4
        delay50ns();
        delay50ns();
        digitalWriteFast(LD, HIGH);

        // first values are available directly after loading
        encoders[0].begin(digitalReadFast(A), digitalReadFast(B));
     21c:	ldr	r0, [r6, #4]
     21e:	adds	r7, r5, r2
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     220:	str.w	r4, [r1, #132]	; 0x84
#endif
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     224:	ldr	r1, [r5, r2]
     226:	adds	r2, r5, r3
     228:	ldr	r3, [r5, r3]
     22a:	ldr	r1, [r1, #8]
     22c:	ldr	r2, [r2, #12]
     22e:	ldr	r4, [r3, #8]
     230:	ldr	r3, [r7, #12]
     232:	tst	r4, r2
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     234:	ldr.w	fp, [pc, #216]	; 310 <EncoderTool::EncPlex74165::begin()+0x1d8>
     238:	ite	ne
     23a:	movne	r2, #1
     23c:	moveq	r2, #0
     23e:	tst	r1, r3
     240:	ite	ne
     242:	movne	r1, #1
     244:	moveq	r1, #0
     246:	bl	82c <EncoderTool::EncoderBase::begin(unsigned long, unsigned long)>

        for (unsigned i = 1; i < encoderCount; i++) // shift in the the rest of the encoders
     24a:	ldr	r3, [r6, #0]
     24c:	cmp	r3, #1
     24e:	bls.n	30c <EncoderTool::EncPlex74165::begin()+0x1d4>
     250:	ldrb.w	r0, [r6, #36]	; 0x24
     254:	movs	r7, #1
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     256:	ldr	r4, [pc, #188]	; (314 <EncoderTool::EncPlex74165::begin()+0x1dc>)
     258:	lsls	r3, r0, #4
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     25a:	ldr.w	sl, [pc, #192]	; 31c <EncoderTool::EncPlex74165::begin()+0x1e4>
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     25e:	mov	r9, r4
     260:	ldr.w	r1, [fp, r3]
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     264:	add.w	r0, r5, r0, lsl #4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     268:	movs	r3, #50	; 0x32
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     26a:	ldr	r2, [r0, #12]
     26c:	str.w	r2, [r1, #132]	; 0x84
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     270:	ldr	r1, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     272:	ldr.w	r2, [r8]
     276:	lsrs	r2, r2, #16
     278:	mul.w	r2, r3, r2
     27c:	lsrs	r2, r2, #1
     27e:	umull	r3, r2, sl, r2
     282:	lsrs	r2, r2, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     284:	ldr	r3, [r4, #0]
     286:	subs	r3, r3, r1
     288:	cmp	r2, r3
     28a:	bhi.n	284 <EncoderTool::EncPlex74165::begin()+0x14c>
#endif
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     28c:	ldrb	r1, [r6, #24]
        {
            digitalWriteFast(CLK, HIGH);
            delay50ns();
            encoders[i].begin(digitalReadFast(A), digitalReadFast(B));
     28e:	movs	r0, #44	; 0x2c
     290:	ldrb	r3, [r6, #28]
     292:	lsls	r1, r1, #4
     294:	lsls	r3, r3, #4
     296:	ldr	r2, [r5, r1]
     298:	add	r1, r5
     29a:	add.w	lr, r5, r3
     29e:	ldr	r3, [r5, r3]
     2a0:	ldr.w	ip, [r2, #8]
     2a4:	ldr	r2, [r6, #4]
     2a6:	mla	r0, r0, r7, r2
     2aa:	ldr.w	r2, [lr, #12]
     2ae:	ldr.w	lr, [r3, #8]
     2b2:	ldr	r3, [r1, #12]
     2b4:	tst.w	lr, r2
     2b8:	ite	ne
     2ba:	movne	r2, #1
     2bc:	moveq	r2, #0
     2be:	tst.w	ip, r3
     2c2:	ite	ne
     2c4:	movne	r1, #1
     2c6:	moveq	r1, #0
     2c8:	bl	82c <EncoderTool::EncoderBase::begin(unsigned long, unsigned long)>
            digitalWriteFast(CLK, LOW);
     2cc:	ldr	r0, [r6, #36]	; 0x24

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     2ce:	movs	r3, #50	; 0x32
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     2d0:	uxtb	r2, r0
     2d2:	lsls	r2, r2, #4
     2d4:	adds	r1, r5, r2
     2d6:	ldr.w	lr, [r5, r2]
     2da:	ldr	r2, [r1, #12]
     2dc:	str.w	r2, [lr, #136]	; 0x88
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     2e0:	ldr.w	r1, [r9]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     2e4:	ldr.w	r2, [r8]
     2e8:	lsrs	r2, r2, #16
     2ea:	mul.w	r2, r3, r2
     2ee:	lsrs	r2, r2, #1
     2f0:	umull	r3, r2, sl, r2
     2f4:	lsrs	r2, r2, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     2f6:	ldr	r3, [r4, #0]
     2f8:	subs	r3, r3, r1
     2fa:	cmp	r2, r3
     2fc:	bhi.n	2f6 <EncoderTool::EncPlex74165::begin()+0x1be>
        digitalWriteFast(LD, HIGH);

        // first values are available directly after loading
        encoders[0].begin(digitalReadFast(A), digitalReadFast(B));

        for (unsigned i = 1; i < encoderCount; i++) // shift in the the rest of the encoders
     2fe:	adds	r7, #1
     300:	ldr	r3, [r6, #0]
     302:	cmp	r3, r7
     304:	bls.n	30c <EncoderTool::EncPlex74165::begin()+0x1d4>
     306:	mov	r1, lr
     308:	uxtb	r0, r0
     30a:	b.n	264 <EncoderTool::EncPlex74165::begin()+0x12c>
     30c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     310:	.word	0x2000008c
     314:	.word	0xe0001004
     318:	.word	0x431bde83
     31c:	.word	0x08972311
     320:	.word	0x20000630

00000324 <EncoderTool::EncPlex74165::tick()>:
    }



    void EncPlex74165::tick()
    {
     324:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     328:	mov	r6, r0
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     32a:	ldrb.w	r0, [r0, #32]
     32e:	ldr	r5, [pc, #432]	; (4e0 <EncoderTool::EncPlex74165::tick()+0x1bc>)

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     330:	movs	r3, #50	; 0x32
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     332:	lsls	r0, r0, #4
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     334:	ldr	r2, [pc, #428]	; (4e4 <EncoderTool::EncPlex74165::tick()+0x1c0>)
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     336:	ldr.w	r8, [pc, #436]	; 4ec <EncoderTool::EncPlex74165::tick()+0x1c8>
     33a:	sub	sp, #16
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     33c:	adds	r7, r5, r0
     33e:	ldr	r1, [r5, r0]
static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     340:	mov	lr, r2

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     342:	ldr	r4, [pc, #420]	; (4e8 <EncoderTool::EncPlex74165::tick()+0x1c4>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     344:	ldr	r7, [r7, #12]
     346:	str.w	r7, [r1, #136]	; 0x88
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     34a:	ldr	r7, [r2, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     34c:	ldr.w	r2, [r8]
     350:	lsrs	r2, r2, #16
     352:	mul.w	r3, r3, r2
     356:	lsrs	r3, r3, #1
     358:	umull	r3, r4, r4, r3
     35c:	lsrs	r4, r4, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     35e:	ldr.w	r3, [lr]
     362:	ldr	r2, [pc, #384]	; (4e4 <EncoderTool::EncPlex74165::tick()+0x1c0>)
     364:	subs	r3, r3, r7
     366:	cmp	r4, r3
     368:	bhi.n	35e <EncoderTool::EncPlex74165::tick()+0x3a>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     36a:	ldr	r7, [r2, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     36c:	movs	r3, #50	; 0x32
     36e:	ldr.w	r4, [r8]
     372:	ldr.w	ip, [pc, #372]	; 4e8 <EncoderTool::EncPlex74165::tick()+0x1c4>
     376:	mov.w	lr, r4, lsr #16
     37a:	mul.w	r3, r3, lr
     37e:	lsrs	r3, r3, #1
     380:	umull	r3, r4, ip, r3
     384:	lsrs	r4, r4, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     386:	ldr	r3, [r2, #0]
     388:	ldr.w	lr, [pc, #344]	; 4e4 <EncoderTool::EncPlex74165::tick()+0x1c0>
     38c:	subs	r3, r3, r7
     38e:	cmp	r4, r3
     390:	bhi.n	386 <EncoderTool::EncPlex74165::tick()+0x62>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     392:	ldr.w	r4, [lr]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     396:	movs	r3, #50	; 0x32
     398:	ldr.w	r7, [r8]
     39c:	ldr	r2, [pc, #328]	; (4e8 <EncoderTool::EncPlex74165::tick()+0x1c4>)
     39e:	lsrs	r7, r7, #16
     3a0:	mul.w	r3, r3, r7
     3a4:	lsrs	r3, r3, #1
     3a6:	umull	r3, r2, r2, r3
     3aa:	lsrs	r2, r2, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     3ac:	ldr.w	r3, [lr]
     3b0:	subs	r3, r3, r4
     3b2:	cmp	r2, r3
     3b4:	bhi.n	3ac <EncoderTool::EncPlex74165::tick()+0x88>
#endif
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     3b6:	ldrb	r2, [r6, #24]
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     3b8:	add	r0, r5
#endif
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     3ba:	ldrb	r3, [r6, #28]
     3bc:	lsls	r2, r2, #4
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     3be:	ldr	r4, [r0, #12]
#endif
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     3c0:	lsls	r3, r3, #4
        delay50ns();
        delay50ns();
        digitalWriteFast(LD, HIGH);

        // first values are available directly after loading
        if (encoders[0].update(digitalReadFast(A), digitalReadFast(B)) && callback != nullptr)
     3c2:	ldr	r0, [r6, #4]
     3c4:	adds	r7, r5, r2
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     3c6:	str.w	r4, [r1, #132]	; 0x84
#endif
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     3ca:	ldr	r1, [r5, r2]
     3cc:	adds	r2, r5, r3
     3ce:	ldr	r3, [r5, r3]
     3d0:	ldr	r1, [r1, #8]
     3d2:	ldr	r2, [r2, #12]
     3d4:	ldr	r4, [r3, #8]
     3d6:	ldr	r3, [r7, #12]
     3d8:	tst	r4, r2
     3da:	ite	ne
     3dc:	movne	r2, #1
     3de:	moveq	r2, #0
     3e0:	tst	r1, r3
     3e2:	ite	ne
     3e4:	movne	r1, #1
     3e6:	moveq	r1, #0
     3e8:	bl	838 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)>
     3ec:	cbz	r0, 40a <EncoderTool::EncPlex74165::tick()+0xe6>
     3ee:	ldr	r3, [r6, #16]
     3f0:	cbz	r3, 40a <EncoderTool::EncPlex74165::tick()+0xe6>
     3f2:	ldr	r1, [r6, #4]
     3f4:	movs	r0, #0
     3f6:	add	r2, sp, #16
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
     3f8:	ldr	r3, [r6, #20]
     3fa:	ldr	r4, [r1, #0]
     3fc:	mov	r1, sp
     3fe:	str	r0, [sp, #0]
     400:	add.w	r0, r6, #8
     404:	str.w	r4, [r2, #-12]!
     408:	blx	r3
        {
            callback(0, encoders[0].getValue());
        }
        for (unsigned i = 1; i < encoderCount; i++) // shift in the the rest of the encoders
     40a:	ldr	r3, [r6, #0]
     40c:	cmp	r3, #1
     40e:	bls.n	4da <EncoderTool::EncPlex74165::tick()+0x1b6>
     410:	mov.w	sl, #44	; 0x2c
     414:	movs	r7, #1
     416:	ldr	r0, [r6, #36]	; 0x24
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     418:	ldr	r4, [pc, #200]	; (4e4 <EncoderTool::EncPlex74165::tick()+0x1c0>)
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     41a:	ldr.w	r9, [pc, #204]	; 4e8 <EncoderTool::EncPlex74165::tick()+0x1c4>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     41e:	uxtb	r0, r0

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     420:	movs	r3, #50	; 0x32
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     422:	lsls	r0, r0, #4
     424:	adds	r1, r5, r0
     426:	ldr	r2, [r5, r0]
     428:	ldr	r1, [r1, #12]
     42a:	str.w	r1, [r2, #132]	; 0x84
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     42e:	ldr	r1, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     430:	ldr.w	r2, [r8]
     434:	lsrs	r2, r2, #16
     436:	mul.w	r2, r3, r2
     43a:	lsrs	r2, r2, #1
     43c:	umull	r3, r2, r9, r2
     440:	lsrs	r2, r2, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     442:	ldr	r3, [r4, #0]
     444:	subs	r3, r3, r1
     446:	cmp	r2, r3
     448:	bhi.n	442 <EncoderTool::EncPlex74165::tick()+0x11e>
#endif
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     44a:	ldrb	r2, [r6, #24]
     44c:	ldrb	r3, [r6, #28]
     44e:	lsls	r2, r2, #4
        {
            digitalWriteFast(CLK, HIGH);
            delay50ns();
            if (encoders[i].update(digitalReadFast(A), digitalReadFast(B)) && callback != nullptr)
     450:	ldr	r0, [r6, #4]
     452:	lsls	r3, r3, #4
     454:	ldr	r1, [r5, r2]
     456:	add	r2, r5
     458:	add.w	lr, r5, r3
     45c:	ldr	r3, [r5, r3]
     45e:	ldr	r1, [r1, #8]
     460:	add	r0, sl
     462:	ldr.w	ip, [r3, #8]
     466:	ldr.w	lr, [lr, #12]
     46a:	ldr	r3, [r2, #12]
     46c:	tst.w	ip, lr
     470:	ite	ne
     472:	movne	r2, #1
     474:	moveq	r2, #0
     476:	tst	r1, r3
     478:	ite	ne
     47a:	movne	r1, #1
     47c:	moveq	r1, #0
     47e:	bl	838 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)>
     482:	cbz	r0, 4a0 <EncoderTool::EncPlex74165::tick()+0x17c>
     484:	ldr	r3, [r6, #16]
     486:	cbz	r3, 4a0 <EncoderTool::EncPlex74165::tick()+0x17c>
     488:	ldr	r0, [r6, #4]
     48a:	add	r2, sp, #16
     48c:	add	r1, sp, #8
     48e:	ldr.w	r3, [r0, sl]
     492:	add.w	r0, r6, #8
     496:	str	r7, [sp, #8]
     498:	str.w	r3, [r2, #-4]!
     49c:	ldr	r3, [r6, #20]
     49e:	blx	r3
            {
                callback(i, encoders[i].getValue());
            }
            digitalWriteFast(CLK, LOW);
     4a0:	ldr	r0, [r6, #36]	; 0x24

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     4a2:	movs	r3, #50	; 0x32
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     4a4:	uxtb	r2, r0
     4a6:	lsls	r2, r2, #4
     4a8:	adds	r1, r5, r2
     4aa:	ldr	r2, [r5, r2]
     4ac:	ldr	r1, [r1, #12]
     4ae:	str.w	r1, [r2, #136]	; 0x88
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     4b2:	ldr	r1, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     4b4:	ldr.w	r2, [r8]
     4b8:	lsrs	r2, r2, #16
     4ba:	mul.w	r2, r3, r2
     4be:	lsrs	r2, r2, #1
     4c0:	umull	r3, r2, r9, r2
     4c4:	lsrs	r2, r2, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     4c6:	ldr	r3, [r4, #0]
     4c8:	subs	r3, r3, r1
     4ca:	cmp	r2, r3
     4cc:	bhi.n	4c6 <EncoderTool::EncPlex74165::tick()+0x1a2>
        // first values are available directly after loading
        if (encoders[0].update(digitalReadFast(A), digitalReadFast(B)) && callback != nullptr)
        {
            callback(0, encoders[0].getValue());
        }
        for (unsigned i = 1; i < encoderCount; i++) // shift in the the rest of the encoders
     4ce:	adds	r7, #1
     4d0:	ldr	r3, [r6, #0]
     4d2:	add.w	sl, sl, #44	; 0x2c
     4d6:	cmp	r3, r7
     4d8:	bhi.n	41e <EncoderTool::EncPlex74165::tick()+0xfa>
                callback(i, encoders[i].getValue());
            }
            digitalWriteFast(CLK, LOW);
            delay50ns();
        }
    }
     4da:	add	sp, #16
     4dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4e0:	.word	0x2000008c
     4e4:	.word	0xe0001004
     4e8:	.word	0x08972311
     4ec:	.word	0x20000630

000004f0 <setup>:
{
    Serial.printf("Current value: %d, delta = %d\n", value, delta);
}

void setup()
{
     4f0:	push	{r4, r5, r6, r7, lr}
    pinMode(13, OUTPUT);
     4f2:	movs	r1, #1
{
    Serial.printf("Current value: %d, delta = %d\n", value, delta);
}

void setup()
{
     4f4:	sub	sp, #44	; 0x2c
    pinMode(13, OUTPUT);
     4f6:	movs	r0, #13
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     4f8:	ldr	r5, [pc, #324]	; (640 <setup+0x150>)
     4fa:	bl	ca8 <pinMode>
    encoders.begin();
     4fe:	ldr	r0, [pc, #324]	; (644 <setup+0x154>)
     500:	bl	138 <EncoderTool::EncPlex74165::begin()>
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     504:	add	r4, sp, #24

    encoders[0].attachCallback(myCallback); // standard callback
     506:	movs	r1, #0
     508:	ldr	r0, [pc, #312]	; (644 <setup+0x154>)
     50a:	bl	7c0 <EncoderTool::EncPlexBase::operator[](unsigned int)>

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
     50e:	ldr	r7, [pc, #312]	; (648 <setup+0x158>)
     510:	mov	r6, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     512:	movs	r3, #0
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     514:	ldr.w	lr, [pc, #320]	; 658 <setup+0x168>
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     518:	add	r1, sp, #8
     51a:	movs	r2, #2
     51c:	mov	r0, r4
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     51e:	str	r5, [sp, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     520:	mov	r5, sp
	    _M_manager = &_My_handler::_M_manager;
     522:	str	r7, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     524:	str	r3, [sp, #32]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     526:	str.w	lr, [sp, #8]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     52a:	bl	8c <std::_Function_base::_Base_manager<void (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
      __a = _GLIBCXX_MOVE(__b);
     52e:	add.w	r3, r6, #24
	  _M_invoker = __x._M_invoker;
     532:	ldr	r2, [sp, #20]
	  _M_manager = __x._M_manager;
     534:	ldr	r7, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     536:	ldmia.w	r4, {r0, r1}
     53a:	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
     53e:	ldmia.w	r3, {r0, r1}
     542:	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
     546:	ldmia.w	sp, {r0, r1}
     54a:	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     54e:	ldr	r3, [r6, #32]
     550:	str	r3, [sp, #32]
     552:	ldr	r1, [r6, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
     554:	str	r7, [r6, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     556:	str	r1, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
     558:	str	r2, [r6, #36]	; 0x24

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     55a:	cbz	r3, 566 <setup+0x76>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     55c:	movs	r2, #3
     55e:	mov	r1, r4
     560:	mov	r0, r4
     562:	blx	r3
     564:	ldr	r7, [sp, #16]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     566:	cbz	r7, 570 <setup+0x80>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     568:	add	r1, sp, #8
     56a:	movs	r2, #3
     56c:	mov	r0, r1
     56e:	blx	r7
    encoders[1].attachCallback([](int v, int d) { digitalToggleFast(13); }); // a simple lambda expression to toggle the LED on every change
     570:	movs	r1, #1
     572:	ldr	r0, [pc, #208]	; (644 <setup+0x154>)
     574:	bl	7c0 <EncoderTool::EncPlexBase::operator[](unsigned int)>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     578:	movs	r6, #0
     57a:	mov	r3, r0
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     57c:	ldr.w	lr, [pc, #220]	; 65c <setup+0x16c>
	    _M_manager = &_My_handler::_M_manager;
     580:	ldr	r7, [pc, #200]	; (64c <setup+0x15c>)
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     582:	movs	r2, #2
     584:	add	r1, sp, #8
     586:	mov	r0, r4
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     588:	str.w	lr, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
     58c:	str	r7, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     58e:	str	r6, [sp, #32]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     590:	bl	12c <std::_Function_base::_Base_manager<setup::{lambda(int, int)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda(int, int)#1}> const&, std::_Manager_operation)>
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     594:	add.w	r2, r3, #24
	  _M_invoker = __x._M_invoker;
     598:	ldr.w	lr, [sp, #20]
	  _M_manager = __x._M_manager;
     59c:	ldr	r6, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     59e:	ldmia.w	r4, {r0, r1}
     5a2:	stmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
     5a6:	ldmia.w	r2, {r0, r1}
     5aa:	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
     5ae:	ldmia.w	r5, {r0, r1}
     5b2:	stmia.w	r2, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     5b6:	ldr	r7, [r3, #32]
     5b8:	str	r7, [sp, #32]
     5ba:	ldr	r2, [r3, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
     5bc:	str	r6, [r3, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     5be:	str	r2, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
     5c0:	str.w	lr, [r3, #36]	; 0x24

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     5c4:	cbz	r7, 5d0 <setup+0xe0>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     5c6:	movs	r2, #3
     5c8:	mov	r1, r4
     5ca:	mov	r0, r4
     5cc:	blx	r7
     5ce:	ldr	r6, [sp, #16]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     5d0:	cbz	r6, 5da <setup+0xea>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     5d2:	add	r1, sp, #8
     5d4:	movs	r2, #3
     5d6:	mov	r0, r1
     5d8:	blx	r6
    encoders[2].attachCallback([](int v, int d) { Serial.printf("enc 2: %s\n", d > 0 ? "UP" : "DOWN"); });
     5da:	movs	r1, #2
     5dc:	ldr	r0, [pc, #100]	; (644 <setup+0x154>)
     5de:	bl	7c0 <EncoderTool::EncPlexBase::operator[](unsigned int)>
     5e2:	mov	r3, r0
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     5e4:	ldr	r0, [pc, #104]	; (650 <setup+0x160>)
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     5e6:	movs	r6, #0

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
     5e8:	ldr	r7, [pc, #104]	; (654 <setup+0x164>)
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     5ea:	movs	r2, #2
     5ec:	add	r1, sp, #8
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     5ee:	str	r0, [sp, #20]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     5f0:	mov	r0, r4

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
     5f2:	str	r7, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     5f4:	str	r6, [sp, #32]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     5f6:	bl	b4 <std::_Function_base::_Base_manager<setup::{lambda(int, int)#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<setup::{lambda(int, int)#2}> const&, std::_Manager_operation)>
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     5fa:	add.w	r2, r3, #24
	  _M_invoker = __x._M_invoker;
     5fe:	ldr	r7, [sp, #20]
	  _M_manager = __x._M_manager;
     600:	ldr	r6, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     602:	ldmia.w	r4, {r0, r1}
     606:	stmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
     60a:	ldmia.w	r2, {r0, r1}
     60e:	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
     612:	ldmia.w	r5, {r0, r1}
     616:	stmia.w	r2, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     61a:	ldr	r5, [r3, #32]
     61c:	str	r5, [sp, #32]
     61e:	ldr	r2, [r3, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
     620:	str	r6, [r3, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     622:	str	r2, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
     624:	str	r7, [r3, #36]	; 0x24

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     626:	cbz	r5, 632 <setup+0x142>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     628:	movs	r2, #3
     62a:	mov	r1, r4
     62c:	mov	r0, r4
     62e:	blx	r5
     630:	ldr	r6, [sp, #16]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     632:	cbz	r6, 63c <setup+0x14c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     634:	add	r1, sp, #8
     636:	movs	r2, #3
     638:	mov	r0, r1
     63a:	blx	r6
}
     63c:	add	sp, #44	; 0x2c
     63e:	pop	{r4, r5, r6, r7, pc}
     640:	.word	0x0000007d
     644:	.word	0x2000103c
     648:	.word	0x0000008d
     64c:	.word	0x0000012d
     650:	.word	0x000000d5
     654:	.word	0x000000b5
     658:	.word	0x000000c1
     65c:	.word	0x000000a5

00000660 <loop>:

elapsedMillis stopwatch = 0;

void loop()
{
     660:	push	{r3, lr}
    encoders.tick();
     662:	ldr	r0, [pc, #8]	; (66c <loop+0xc>)
     664:	bl	324 <EncoderTool::EncPlex74165::tick()>
     668:	pop	{r3, pc}
     66a:	nop
     66c:	.word	0x2000103c

00000670 <_GLOBAL__sub_I_encoders>:
}
     670:	push	{r3, r4, r5, lr}


    // IMPLEMENTATION ============================================

    EncPlex74165::EncPlex74165(unsigned nrOfEncoders, unsigned pinLD, unsigned pinCLK, unsigned pinA, unsigned pinB, CountMode mode)
        : EncPlexBase(nrOfEncoders, mode), A(pinA), B(pinB), LD(pinLD), CLK(pinCLK)
     672:	ldr	r4, [pc, #52]	; (6a8 <_GLOBAL__sub_I_encoders+0x38>)
     674:	movs	r2, #1
     676:	movs	r1, #8
     678:	movs	r5, #0
     67a:	mov	r0, r4
     67c:	bl	6bc <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)>
     680:	movs	r3, #4
     682:	movs	r1, #1
     684:	movs	r2, #3
    {
        begin(); // usually calling begin from the constructor works... if not you can always call it in setup()
     686:	mov	r0, r4


    // IMPLEMENTATION ============================================

    EncPlex74165::EncPlex74165(unsigned nrOfEncoders, unsigned pinLD, unsigned pinCLK, unsigned pinA, unsigned pinB, CountMode mode)
        : EncPlexBase(nrOfEncoders, mode), A(pinA), B(pinB), LD(pinLD), CLK(pinCLK)
     688:	str	r3, [r4, #36]	; 0x24
     68a:	str	r1, [r4, #28]
     68c:	str	r2, [r4, #32]
     68e:	str	r5, [r4, #24]
    {
        begin(); // usually calling begin from the constructor works... if not you can always call it in setup()
     690:	bl	138 <EncoderTool::EncPlex74165::begin()>
constexpr unsigned QH_B = 1;   //output pin QH of shift register A
constexpr unsigned pinLD = 3;  //load pin for all shift registers)
constexpr unsigned pinCLK = 4; //clock pin for all shift registers
                               //74165 datasheet: http://www.ti.com/product/SN74HC165

EncPlex74165 encoders(encoderCount, pinLD, pinCLK, QH_A, QH_B, CountMode::quarterInv);
     694:	ldr	r2, [pc, #20]	; (6ac <_GLOBAL__sub_I_encoders+0x3c>)
     696:	mov	r0, r4
     698:	ldr	r1, [pc, #20]	; (6b0 <_GLOBAL__sub_I_encoders+0x40>)
     69a:	bl	24c8 <__aeabi_atexit>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     69e:	ldr	r2, [pc, #20]	; (6b4 <_GLOBAL__sub_I_encoders+0x44>)
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     6a0:	ldr	r3, [pc, #20]	; (6b8 <_GLOBAL__sub_I_encoders+0x48>)
     6a2:	ldr	r2, [r2, #0]
     6a4:	str	r2, [r3, #0]
     6a6:	pop	{r3, r4, r5, pc}
     6a8:	.word	0x2000103c
     6ac:	.word	0x20000628
     6b0:	.word	0x000000f9
     6b4:	.word	0x20001070
     6b8:	.word	0x20001064

000006bc <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     6bc:	movs	r3, #0
namespace EncoderTool
{
    EncPlexBase::EncPlexBase(unsigned eCnt, CountMode mode)
        : encoderCount(eCnt)
    {
        encoders = new EncoderBase[eCnt];
     6be:	cmp.w	r1, #48758784	; 0x2e80000
#include "EncPlexBase.h"

namespace EncoderTool
{
    EncPlexBase::EncPlexBase(unsigned eCnt, CountMode mode)
     6c2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6c6:	mov	r6, r0
     6c8:	mov	r8, r1
     6ca:	mov	r7, r2
        : encoderCount(eCnt)
     6cc:	str	r1, [r0, #0]
     6ce:	str	r3, [r0, #16]
    {
        encoders = new EncoderBase[eCnt];
     6d0:	bhi.n	756 <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x9a>
     6d2:	movs	r0, #44	; 0x2c
     6d4:	mul.w	r0, r0, r1
     6d8:	adds	r0, #8
     6da:	bl	eec <operator new[](unsigned int)>
     6de:	movs	r3, #44	; 0x2c
     6e0:	str.w	r8, [r0, #4]
     6e4:	add.w	lr, r0, #8
     6e8:	str	r3, [r0, #0]
     6ea:	cmp.w	r8, #0
     6ee:	beq.n	72a <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x6e>
     6f0:	movs	r1, #0
     6f2:	add.w	r3, r0, #52	; 0x34
     6f6:	ldr	r5, [pc, #100]	; (75c <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0xa0>)
    };

    class EncoderBase
    {
     public:
        EncoderBase() = default;
     6f8:	mov.w	r4, #2147483648	; 0x80000000
     6fc:	mov	r2, r1
     6fe:	mvn.w	r0, #2147483648	; 0x80000000
     702:	adds	r1, #1
     704:	str.w	r2, [r3, #-44]
     708:	str.w	r4, [r3, #-40]
     70c:	adds	r3, #44	; 0x2c
     70e:	cmp	r8, r1
     710:	str.w	r0, [r3, #-80]
     714:	strb.w	r2, [r3, #-76]
     718:	str.w	r2, [r3, #-72]
     71c:	strb.w	r2, [r3, #-68]
     720:	str.w	r2, [r3, #-56]
     724:	str.w	r5, [r3, #-48]
     728:	bne.n	702 <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x46>
     72a:	str.w	lr, [r6, #4]
        for (unsigned i = 0; i < eCnt; i++)
     72e:	cmp.w	r8, #0
     732:	beq.n	750 <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x94>
     734:	movs	r4, #0
     736:	mov	r5, r4
     738:	b.n	73e <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x82>
     73a:	ldr.w	lr, [r6, #4]
     73e:	adds	r5, #1
        {
            encoders[i].setCountMode(mode);
     740:	add.w	r0, lr, r4
     744:	mov	r1, r7
     746:	adds	r4, #44	; 0x2c
     748:	bl	7e0 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)>
{
    EncPlexBase::EncPlexBase(unsigned eCnt, CountMode mode)
        : encoderCount(eCnt)
    {
        encoders = new EncoderBase[eCnt];
        for (unsigned i = 0; i < eCnt; i++)
     74c:	cmp	r8, r5
     74e:	bne.n	73a <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x7e>
        {
            encoders[i].setCountMode(mode);
        }
    }
     750:	mov	r0, r6
     752:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
namespace EncoderTool
{
    EncPlexBase::EncPlexBase(unsigned eCnt, CountMode mode)
        : encoderCount(eCnt)
    {
        encoders = new EncoderBase[eCnt];
     756:	mov.w	r0, #4294967295
     75a:	b.n	6da <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x1e>
     75c:	.word	0x20000070

00000760 <EncoderTool::EncPlexBase::~EncPlexBase()>:
        {
            encoders[i].setCountMode(mode);
        }
    }

    EncPlexBase::~EncPlexBase()
     760:	push	{r3, r4, r5, r6, r7, lr}
    {
        delete[] encoders;
     762:	ldr	r6, [r0, #4]
        {
            encoders[i].setCountMode(mode);
        }
    }

    EncPlexBase::~EncPlexBase()
     764:	mov	r7, r0
    {
        delete[] encoders;
     766:	cbz	r6, 7a8 <EncoderTool::EncPlexBase::~EncPlexBase()+0x48>
     768:	ldr.w	r1, [r6, #-4]
     76c:	movs	r3, #44	; 0x2c
     76e:	mul.w	r1, r3, r1
     772:	adds	r5, r6, r1
     774:	cmp	r6, r5
     776:	bne.n	77c <EncoderTool::EncPlexBase::~EncPlexBase()+0x1c>
     778:	b.n	7ba <EncoderTool::EncPlexBase::~EncPlexBase()+0x5a>
     77a:	mov	r5, r4
     77c:	sub.w	r4, r5, #44	; 0x2c
     780:	sub.w	r1, r5, #20

    ~_Function_base()
    {
      if (_M_manager)
     784:	ldr	r3, [r4, #32]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     786:	movs	r2, #3
     788:	mov	r0, r1

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     78a:	cbz	r3, 790 <EncoderTool::EncPlexBase::~EncPlexBase()+0x30>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     78c:	blx	r3
     78e:	ldr	r6, [r7, #4]
     790:	cmp	r6, r4
     792:	bne.n	77a <EncoderTool::EncPlexBase::~EncPlexBase()+0x1a>
     794:	ldr.w	r1, [r5, #-48]
     798:	movs	r3, #44	; 0x2c
     79a:	mul.w	r1, r3, r1
     79e:	adds	r1, #8
     7a0:	sub.w	r0, r4, #8
     7a4:	bl	ef0 <operator delete[](void*, unsigned int)>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     7a8:	ldr	r3, [r7, #16]
     7aa:	cbz	r3, 7b6 <EncoderTool::EncPlexBase::~EncPlexBase()+0x56>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     7ac:	add.w	r1, r7, #8
     7b0:	movs	r2, #3
     7b2:	mov	r0, r1
     7b4:	blx	r3
    }
     7b6:	mov	r0, r7
     7b8:	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    EncPlexBase::~EncPlexBase()
    {
        delete[] encoders;
     7ba:	mov	r4, r6
     7bc:	b.n	79e <EncoderTool::EncPlexBase::~EncPlexBase()+0x3e>
     7be:	nop

000007c0 <EncoderTool::EncPlexBase::operator[](unsigned int)>:
    }

    EncoderBase &EncPlexBase::operator[](std::size_t idx)
    {
        return idx < encoderCount ? encoders[idx] : encoders[encoderCount - 1];
     7c0:	ldr	r2, [r0, #0]
     7c2:	cmp	r2, r1
     7c4:	bhi.n	7d4 <EncoderTool::EncPlexBase::operator[](unsigned int)+0x14>
     7c6:	movs	r3, #44	; 0x2c
     7c8:	ldr	r1, [r0, #4]
     7ca:	mul.w	r3, r3, r2
     7ce:	subs	r3, #44	; 0x2c
     7d0:	adds	r0, r1, r3
    }
     7d2:	bx	lr
        delete[] encoders;
    }

    EncoderBase &EncPlexBase::operator[](std::size_t idx)
    {
        return idx < encoderCount ? encoders[idx] : encoders[encoderCount - 1];
     7d4:	ldr	r3, [r0, #4]
     7d6:	movs	r0, #44	; 0x2c
     7d8:	mla	r0, r0, r1, r3
     7dc:	bx	lr
     7de:	nop

000007e0 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)>:

namespace EncoderTool
{
    EncoderBase& EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
     7e0:	cmp	r1, #3
     7e2:	bhi.n	814 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x34>
     7e4:	tbb	[pc, r1]
     7e8:	.word	0x02070c11
            case CountMode::half:
                stateMachine = &stateMachineHalf;
                invert = 0b00;
                break;
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
     7ec:	ldr	r2, [pc, #48]	; (820 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x40>)
                invert = 0b01;
     7ee:	movs	r3, #1
            case CountMode::half:
                stateMachine = &stateMachineHalf;
                invert = 0b00;
                break;
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
     7f0:	str	r2, [r0, #40]	; 0x28
                invert = 0b01;
     7f2:	str	r3, [r0, #16]
                break;
     7f4:	bx	lr
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
                invert = 0b00;
                break;
            case CountMode::half:
                stateMachine = &stateMachineHalf;
     7f6:	ldr	r2, [pc, #40]	; (820 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x40>)
                invert = 0b00;
     7f8:	movs	r3, #0
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
                invert = 0b00;
                break;
            case CountMode::half:
                stateMachine = &stateMachineHalf;
     7fa:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     7fc:	str	r3, [r0, #16]
                break;
     7fe:	bx	lr
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
                invert = 0b11;
                break;
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
     800:	ldr	r2, [pc, #32]	; (824 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x44>)
                invert = 0b00;
     802:	movs	r3, #0
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
                invert = 0b11;
                break;
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
     804:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     806:	str	r3, [r0, #16]
                break;
     808:	bx	lr
    EncoderBase& EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
        {
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
     80a:	ldr	r2, [pc, #24]	; (824 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x44>)
                invert = 0b11;
     80c:	movs	r3, #3
    EncoderBase& EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
        {
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
     80e:	str	r2, [r0, #40]	; 0x28
                invert = 0b11;
     810:	str	r3, [r0, #16]
                break;
     812:	bx	lr
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
                invert = 0b01;
                break;
            default:
                stateMachine = &stateMachineFull;
     814:	ldr	r2, [pc, #16]	; (828 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x48>)
                invert = 0b00;
     816:	movs	r3, #0
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
                invert = 0b01;
                break;
            default:
                stateMachine = &stateMachineFull;
     818:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     81a:	str	r3, [r0, #16]
        }
        return *this;
    }
     81c:	bx	lr
     81e:	nop
     820:	.word	0x20000054
     824:	.word	0x20000038
     828:	.word	0x20000070

0000082c <EncoderTool::EncoderBase::begin(unsigned long, unsigned long)>:
    };


    void EncoderBase::begin(uint32_t phaseA, uint32_t phaseB)
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
     82c:	orr.w	r1, r2, r1, lsl #1
     830:	ldr	r3, [r0, #16]
     832:	eors	r3, r1
     834:	strb	r3, [r0, #20]
     836:	bx	lr

00000838 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)>:
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     838:	mov	r3, r0
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     83a:	orr.w	r1, r2, r1, lsl #1
     83e:	ldr	r0, [r0, #16]
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     840:	push	{r4, r5, lr}
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     842:	ldr	r4, [r3, #40]	; 0x28
     844:	eors	r0, r1
     846:	ldrb	r5, [r3, #20]
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     848:	sub	sp, #36	; 0x24
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     84a:	add.w	r4, r4, r5, lsl #2
     84e:	ldrb	r2, [r4, r0]
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state
     850:	and.w	r1, r2, #15
    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
     854:	and.w	r2, r2, #240	; 0xf0
        curState &=  0x0F;                                  // remove the direction info from state

        if(direction == UP)
     858:	cmp	r2, #16
    {
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state
     85a:	strb	r1, [r3, #20]

        if(direction == UP)
     85c:	beq.n	898 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x60>
            }
            value = maxVal;
            return false;
        }

        if (direction == DOWN)
     85e:	cmp	r2, #32
     860:	beq.n	86a <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x32>
        if (direction == ERR)
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
     862:	movs	r4, #0
    }
     864:	mov	r0, r4
     866:	add	sp, #36	; 0x24
     868:	pop	{r4, r5, pc}
            return false;
        }

        if (direction == DOWN)
        {
            if (value > minVal)  // minVal = INT_MIN if no limits set
     86a:	ldr	r2, [r3, #0]
     86c:	ldr	r1, [r3, #4]
     86e:	cmp	r2, r1
     870:	ble.n	8ea <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0xb2>
            {
                value--;
     872:	subs	r1, r2, #1
                if (callback != nullptr) callback(value, -1);
     874:	ldr	r2, [r3, #32]

        if (direction == DOWN)
        {
            if (value > minVal)  // minVal = INT_MIN if no limits set
            {
                value--;
     876:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, -1);
     878:	cbz	r2, 890 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     87a:	mov.w	r4, #4294967295
     87e:	add	r2, sp, #32
     880:	str	r1, [sp, #16]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
     882:	add.w	r0, r3, #24
     886:	str.w	r4, [r2, #-12]!
     88a:	add	r1, sp, #16
     88c:	ldr	r3, [r3, #36]	; 0x24
     88e:	blx	r3
                return true;
     890:	movs	r4, #1
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     892:	mov	r0, r4
     894:	add	sp, #36	; 0x24
     896:	pop	{r4, r5, pc}
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
     898:	ldr	r2, [r3, #0]
     89a:	ldr	r1, [r3, #8]
     89c:	cmp	r2, r1
     89e:	blt.n	8c6 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x8e>
            {
                value++;
                if (callback != nullptr) callback(value, +1);
                return true;
            }
            if (periodic)       // if periodic, wrap to minVal, else stop counting
     8a0:	ldrb	r4, [r3, #12]
     8a2:	cmp	r4, #0
     8a4:	beq.n	910 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0xd8>
            {
                value = minVal;
     8a6:	ldr	r1, [r3, #4]
                if (callback != nullptr) callback(value, +1);
     8a8:	ldr	r2, [r3, #32]
                if (callback != nullptr) callback(value, +1);
                return true;
            }
            if (periodic)       // if periodic, wrap to minVal, else stop counting
            {
                value = minVal;
     8aa:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, +1);
     8ac:	cmp	r2, #0
     8ae:	beq.n	890 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     8b0:	movs	r5, #1
     8b2:	add	r2, sp, #32
     8b4:	str	r1, [sp, #8]
     8b6:	add.w	r0, r3, #24
     8ba:	str.w	r5, [r2, #-20]!
     8be:	add	r1, sp, #8
     8c0:	ldr	r3, [r3, #36]	; 0x24
     8c2:	blx	r3
     8c4:	b.n	864 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x2c>

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
            {
                value++;
     8c6:	adds	r1, r2, #1
                if (callback != nullptr) callback(value, +1);
     8c8:	ldr	r2, [r3, #32]

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
            {
                value++;
     8ca:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, +1);
     8cc:	cmp	r2, #0
     8ce:	beq.n	890 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     8d0:	movs	r4, #1
     8d2:	add	r2, sp, #32
     8d4:	str	r1, [sp, #0]
     8d6:	add.w	r0, r3, #24
     8da:	str.w	r4, [r2, #-28]!
     8de:	mov	r1, sp
     8e0:	ldr	r3, [r3, #36]	; 0x24
     8e2:	blx	r3
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     8e4:	mov	r0, r4
     8e6:	add	sp, #36	; 0x24
     8e8:	pop	{r4, r5, pc}
            {
                value--;
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            if (periodic)        // if periodic, wrap to maxVal, else stop counting
     8ea:	ldrb	r4, [r3, #12]
     8ec:	cbz	r4, 910 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0xd8>
            {
                value = maxVal;
     8ee:	ldr	r1, [r3, #8]
                if (callback != nullptr) callback(value, -1);
     8f0:	ldr	r2, [r3, #32]
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            if (periodic)        // if periodic, wrap to maxVal, else stop counting
            {
                value = maxVal;
     8f2:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, -1);
     8f4:	cmp	r2, #0
     8f6:	beq.n	890 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     8f8:	mov.w	r5, #4294967295
     8fc:	add	r2, sp, #32
     8fe:	str	r1, [sp, #24]
     900:	add.w	r0, r3, #24
     904:	str.w	r5, [r2, #-4]!
     908:	add	r1, sp, #24
     90a:	ldr	r3, [r3, #36]	; 0x24
     90c:	blx	r3
     90e:	b.n	864 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x2c>
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     910:	mov	r0, r4
            {
                value = maxVal;
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            value = minVal;
     912:	str	r1, [r3, #0]
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     914:	add	sp, #36	; 0x24
     916:	pop	{r4, r5, pc}

00000918 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     918:	ldr	r2, [pc, #600]	; (b74 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     91a:	ldr	r3, [pc, #604]	; (b78 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     91c:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     91e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     922:	ldr	r4, [pc, #600]	; (b7c <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     924:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     928:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     92a:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     92c:	bls.n	968 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     92e:	ldr	r3, [pc, #592]	; (b80 <set_arm_clock+0x268>)
     930:	cmp	r0, r3
     932:	bls.w	b60 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     936:	ldr	r3, [pc, #588]	; (b84 <set_arm_clock+0x26c>)
     938:	movw	r5, #1575	; 0x627
     93c:	ldr	r7, [pc, #584]	; (b88 <set_arm_clock+0x270>)
     93e:	add	r3, r0
     940:	ldr	r4, [pc, #584]	; (b8c <set_arm_clock+0x274>)
     942:	lsrs	r2, r3, #8
     944:	umull	r3, r2, r7, r2
     948:	lsrs	r3, r2, #7
     94a:	add.w	r3, r3, r3, lsl #2
     94e:	add.w	r2, r3, r3, lsl #2
     952:	addw	r3, r2, #1250	; 0x4e2
     956:	cmp	r3, r5
     958:	it	cs
     95a:	movcs	r3, r5
     95c:	sub.w	r3, r3, #800	; 0x320
     960:	umull	r3, r5, r4, r3
     964:	lsrs	r5, r5, #3
     966:	b.n	972 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     968:	ldr	r5, [pc, #548]	; (b90 <set_arm_clock+0x278>)
     96a:	cmp	r0, r5
     96c:	ite	ls
     96e:	movls	r5, #6
     970:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     972:	ldr	r2, [pc, #516]	; (b78 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     974:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     978:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     97c:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     97e:	orr.w	r3, r3, #192	; 0xc0
     982:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     986:	bcs.n	99e <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     988:	ldr	r3, [pc, #496]	; (b7c <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     98a:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     98e:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     990:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     992:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     994:	ldr	r3, [r2, #0]
     996:	cmp	r3, #0
     998:	bge.n	994 <set_arm_clock+0x7c>
     99a:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     99e:	ands.w	r3, lr, #33554432	; 0x2000000
     9a2:	bne.n	a08 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     9a4:	ldr	r4, [pc, #492]	; (b94 <set_arm_clock+0x27c>)
     9a6:	ldr	r2, [pc, #496]	; (b98 <set_arm_clock+0x280>)
     9a8:	ldr.w	ip, [r4, #16]
     9ac:	mov	r4, r2
     9ae:	and.w	r2, ip, r2
     9b2:	cmp	r2, r4
     9b4:	itet	eq
     9b6:	moveq.w	r3, #402653184	; 0x18000000
     9ba:	movne.w	r2, #4096	; 0x1000
     9be:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     9c0:	eor.w	r4, lr, r3
     9c4:	tst.w	r4, #939524096	; 0x38000000
     9c8:	beq.n	9dc <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     9ca:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     9ce:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
     9d2:	ldr	r4, [pc, #420]	; (b78 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     9d4:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
     9d8:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     9dc:	eor.w	r3, r1, r2
     9e0:	tst.w	r3, #12288	; 0x3000
     9e4:	beq.n	9f8 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     9e6:	ldr	r3, [pc, #400]	; (b78 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     9e8:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     9ec:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     9ee:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     9f0:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     9f2:	ldr	r3, [r2, #72]	; 0x48
     9f4:	lsls	r4, r3, #28
     9f6:	bmi.n	9f2 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     9f8:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     9fc:	ldr	r2, [pc, #376]	; (b78 <set_arm_clock+0x260>)
     9fe:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     a02:	ldr	r3, [r2, #72]	; 0x48
     a04:	lsls	r1, r3, #26
     a06:	bmi.n	a02 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
     a08:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     a0a:	ldr	r4, [pc, #400]	; (b9c <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
     a0c:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     a0e:	mul.w	r3, r1, r2
     a12:	mul.w	r3, r0, r3
     a16:	cmp	r3, r4
     a18:	bhi.n	a2e <set_arm_clock+0x116>
		if (div_arm < 8) {
     a1a:	cmp	r2, #7
     a1c:	bhi.w	b4a <set_arm_clock+0x232>
			div_arm = div_arm + 1;
     a20:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     a22:	mul.w	r3, r1, r2
     a26:	mul.w	r3, r0, r3
     a2a:	cmp	r3, r4
     a2c:	bls.n	a1a <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     a2e:	ldr	r0, [pc, #368]	; (ba0 <set_arm_clock+0x288>)
     a30:	ldr	r4, [pc, #368]	; (ba4 <set_arm_clock+0x28c>)
     a32:	add	r0, r3
     a34:	umull	r0, r3, r4, r0
     a38:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
     a3a:	cmp	r3, #108	; 0x6c
     a3c:	bhi.w	b56 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
     a40:	cmp	r3, #53	; 0x35
     a42:	bhi.w	b64 <set_arm_clock+0x24c>
     a46:	ldr.w	r8, [pc, #392]	; bd0 <set_arm_clock+0x2b8>
     a4a:	movs	r3, #54	; 0x36
     a4c:	ldr	r0, [pc, #344]	; (ba8 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     a4e:	ldr.w	ip, [pc, #324]	; b94 <set_arm_clock+0x27c>
     a52:	ldr	r4, [pc, #344]	; (bac <set_arm_clock+0x294>)
     a54:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     a58:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     a5c:	and.w	r4, r9, r4
     a60:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     a62:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     a66:	beq.n	a80 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     a68:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     a6c:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     a70:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     a72:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     a76:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     a7a:	ldr	r3, [r4, #0]
     a7c:	cmp	r3, #0
     a7e:	bge.n	a7a <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     a80:	ldr.w	ip, [pc, #244]	; b78 <set_arm_clock+0x260>
     a84:	subs	r2, #1
     a86:	ldr.w	r3, [ip, #16]
     a8a:	and.w	r3, r3, #7
     a8e:	cmp	r3, r2
     a90:	beq.n	aa2 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     a92:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     a96:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     a98:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     a9c:	ldr	r3, [r4, #72]	; 0x48
     a9e:	lsls	r3, r3, #15
     aa0:	bmi.n	a9c <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     aa2:	subs	r1, #1
     aa4:	lsls	r1, r1, #10
     aa6:	eor.w	r3, lr, r1
     aaa:	tst.w	r3, #7168	; 0x1c00
     aae:	beq.n	aca <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
     ab0:	ldr	r3, [pc, #196]	; (b78 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     ab2:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     ab6:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     aba:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     abc:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
     ac0:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     ac4:	ldr	r3, [r2, #72]	; 0x48
     ac6:	lsls	r1, r3, #30
     ac8:	bmi.n	ac4 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     aca:	ldr	r3, [pc, #228]	; (bb0 <set_arm_clock+0x298>)
     acc:	ldr	r1, [pc, #228]	; (bb4 <set_arm_clock+0x29c>)
     ace:	add	r3, r0
     ad0:	lsrs	r3, r3, #7
     ad2:	umull	r3, r1, r1, r3
     ad6:	lsrs	r1, r1, #12
     ad8:	cmp	r1, #4
     ada:	it	cs
     adc:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     ade:	subs	r3, r1, #1
     ae0:	lsls	r3, r3, #8
     ae2:	eor.w	r2, lr, r3
     ae6:	tst.w	r2, #768	; 0x300
     aea:	beq.n	afc <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     aec:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     af0:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     af4:	ldr	r2, [pc, #128]	; (b78 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     af6:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     afa:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     afc:	ldr	r3, [pc, #120]	; (b78 <set_arm_clock+0x260>)
     afe:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     b00:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     b02:	bic.w	r4, r4, #33554432	; 0x2000000
     b06:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     b08:	ldr	r3, [r2, #72]	; 0x48
     b0a:	lsls	r3, r3, #26
     b0c:	bmi.n	b08 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b0e:	ldr	r3, [pc, #168]	; (bb8 <set_arm_clock+0x2a0>)
     b10:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     b14:	ldr	r4, [pc, #164]	; (bbc <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     b16:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b18:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     b1c:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b1e:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     b22:	ldr	r4, [pc, #156]	; (bc0 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b24:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     b28:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b2c:	ldr	r2, [pc, #148]	; (bc4 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     b2e:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b30:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     b32:	bcs.n	b46 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     b34:	ldr	r3, [pc, #68]	; (b7c <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     b36:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     b3a:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     b3c:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     b3e:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     b40:	ldr	r3, [r2, #0]
     b42:	cmp	r3, #0
     b44:	bge.n	b40 <set_arm_clock+0x228>
	}

	return frequency;
}
     b46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
     b4a:	cmp	r1, #4
     b4c:	bhi.w	a2e <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
     b50:	adds	r1, #1
				div_arm = 1;
     b52:	movs	r2, #1
     b54:	b.n	a0e <set_arm_clock+0xf6>
     b56:	ldr.w	r8, [pc, #124]	; bd4 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
     b5a:	movs	r3, #108	; 0x6c
     b5c:	ldr	r0, [pc, #104]	; (bc8 <set_arm_clock+0x2b0>)
     b5e:	b.n	a4e <set_arm_clock+0x136>
     b60:	movs	r5, #18
     b62:	b.n	972 <set_arm_clock+0x5a>
     b64:	ldr	r0, [pc, #100]	; (bcc <set_arm_clock+0x2b4>)
     b66:	ldr.w	r8, [pc, #112]	; bd8 <set_arm_clock+0x2c0>
     b6a:	mul.w	r0, r0, r3
     b6e:	orr.w	r8, r3, r8
     b72:	b.n	a4e <set_arm_clock+0x136>
     b74:	.word	0x1f78a400
     b78:	.word	0x400fc000
     b7c:	.word	0x40080000
     b80:	.word	0x23c34600
     b84:	.word	0xdc3cba00
     b88:	.word	0x004cb223
     b8c:	.word	0x51eb851f
     b90:	.word	0x016e3600
     b94:	.word	0x400d8000
     b98:	.word	0x80003040
     b9c:	.word	0x269fb1ff
     ba0:	.word	0x005b8d80
     ba4:	.word	0x165e9f81
     ba8:	.word	0x269fb200
     bac:	.word	0x8001307f
     bb0:	.word	0x08f0d17f
     bb4:	.word	0x00e5109f
     bb8:	.word	0x431bde83
     bbc:	.word	0x20000630
     bc0:	.word	0x2000062c
     bc4:	.word	0x2000106c
     bc8:	.word	0x4d3f6400
     bcc:	.word	0x00b71b00
     bd0:	.word	0x80002036
     bd4:	.word	0x8000206c
     bd8:	.word	0x80002000

00000bdc <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     bdc:	cmp	r0, #0
     bde:	beq.n	c90 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     be0:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
     be2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     be6:	sub	sp, #20
     be8:	mov	fp, r0
     bea:	ldr	r4, [pc, #168]	; (c94 <delay+0xb8>)
     bec:	ldr	r5, [pc, #168]	; (c98 <delay+0xbc>)
     bee:	ldr	r6, [pc, #172]	; (c9c <delay+0xc0>)
     bf0:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     bf4:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     bf8:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     bfa:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     bfc:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     c00:	cmp	r1, #0
     c02:	bne.n	bf4 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     c04:	ldr	r7, [pc, #152]	; (ca0 <delay+0xc4>)
     c06:	strd	r8, r9, [sp, #8]
     c0a:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     c0c:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c0e:	ldr	r2, [pc, #148]	; (ca4 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     c10:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     c14:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c16:	ldr	r2, [r2, #0]
     c18:	movs	r7, #1
     c1a:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
     c1e:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c22:	mov	r8, r3
	if (frac > 1000) frac = 1000;
     c24:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c26:	cmp	r3, r1
     c28:	it	eq
     c2a:	cmpeq	r2, r8
     c2c:	ite	cs
     c2e:	movcs	sl, r8
     c30:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     c32:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     c36:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     c3a:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     c3c:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     c3e:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     c42:	cmp	r3, #0
     c44:	bne.n	c36 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     c46:	ldr	r0, [sp, #4]
     c48:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     c4a:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c4c:	ldr	r0, [pc, #84]	; (ca4 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     c4e:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c52:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     c54:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c58:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
     c5c:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     c60:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c64:	mov	r8, r1
	if (frac > 1000) frac = 1000;
     c66:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c68:	cmp	r1, r3
     c6a:	it	eq
     c6c:	cmpeq	r0, r8
     c6e:	ite	cs
     c70:	movcs	r3, r8
     c72:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     c74:	add	r2, r3
     c76:	cmp	r2, lr
     c78:	bcc.n	c8a <delay+0xae>
			if (--msec == 0) return;
     c7a:	subs.w	fp, fp, #1
			start += 1000;
     c7e:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     c82:	bne.n	c36 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     c84:	add	sp, #20
     c86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     c8a:	bl	d28 <yield>
	}
     c8e:	b.n	c36 <delay+0x5a>
     c90:	bx	lr
     c92:	nop
     c94:	.word	0x20001304
     c98:	.word	0x20001070
     c9c:	.word	0x20001068
     ca0:	.word	0xe0001004
     ca4:	.word	0x2000106c

00000ca8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     ca8:	cmp	r0, #39	; 0x27
     caa:	bhi.n	ce6 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
     cac:	lsls	r0, r0, #4
     cae:	ldr	r2, [pc, #104]	; (d18 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     cb0:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     cb2:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     cb6:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
     cb8:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     cba:	beq.n	ce8 <pinMode+0x40>
     cbc:	cmp	r1, #4
     cbe:	beq.n	ce8 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     cc0:	ldr	r4, [r3, #12]
     cc2:	ldr	r2, [r0, #4]
     cc4:	bic.w	r2, r2, r4
     cc8:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     cca:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
     ccc:	cbz	r1, d0a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
     cce:	cmp	r1, #2
     cd0:	beq.n	d10 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     cd2:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     cd4:	ldr	r3, [r3, #4]
}
     cd6:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     cda:	ite	eq
     cdc:	ldreq	r1, [pc, #60]	; (d1c <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     cde:	ldrne	r1, [pc, #64]	; (d20 <pinMode+0x78>)
     ce0:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     ce2:	movs	r2, #21
     ce4:	str	r2, [r3, #0]
}
     ce6:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     ce8:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
     cea:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     cec:	ldr	r4, [r0, #4]
     cee:	orr.w	r2, r2, r4
     cf2:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     cf4:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
     cf6:	beq.n	d0a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     cf8:	movw	r1, #2104	; 0x838
     cfc:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     cfe:	ldr	r3, [r3, #4]
     d00:	movs	r2, #21
}
     d02:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     d06:	str	r2, [r3, #0]
}
     d08:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     d0a:	movs	r1, #56	; 0x38
     d0c:	str	r1, [r2, #0]
     d0e:	b.n	cfe <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     d10:	ldr	r1, [pc, #16]	; (d24 <pinMode+0x7c>)
     d12:	str	r1, [r2, #0]
     d14:	b.n	cfe <pinMode+0x56>
     d16:	nop
     d18:	.word	0x2000008c
     d1c:	.word	0x00013038
     d20:	.word	0x00010038
     d24:	.word	0x0001f038

00000d28 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
     d28:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
     d2c:	ldr	r6, [pc, #200]	; (df8 <yield+0xd0>)
     d2e:	ldrb	r3, [r6, #0]
     d30:	cbz	r3, d58 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
     d32:	ldr	r7, [pc, #200]	; (dfc <yield+0xd4>)
     d34:	ldrb	r2, [r7, #0]
     d36:	cbnz	r2, d58 <yield+0x30>
	running = 1;
     d38:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
     d3a:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
     d3c:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
     d3e:	bmi.n	db0 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
     d40:	lsls	r2, r3, #30
     d42:	bmi.n	d78 <yield+0x50>

	running = 0;
     d44:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
     d46:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
     d48:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
     d4a:	bpl.n	d58 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
     d4c:	ldr	r3, [pc, #176]	; (e00 <yield+0xd8>)
     d4e:	ldr	r2, [r3, #0]
     d50:	cbz	r2, d58 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
     d52:	mrs	r2, IPSR
		if (ipsr != 0) return;
     d56:	cbz	r2, d5c <yield+0x34>
     d58:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     d5c:	mrs	r0, PRIMASK
		__disable_irq();
     d60:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
     d62:	ldr	r2, [r3, #0]
		if (first == nullptr) {
     d64:	cbz	r2, d6e <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
     d66:	ldr	r4, [pc, #156]	; (e04 <yield+0xdc>)
     d68:	ldrb	r1, [r4, #0]
     d6a:	cmp	r1, #0
     d6c:	beq.n	dce <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     d6e:	cmp	r0, #0
     d70:	bne.n	d58 <yield+0x30>
     d72:	cpsie	i
     d74:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     d78:	ldr.w	r8, [pc, #148]	; e10 <yield+0xe8>
     d7c:	ldrb.w	r2, [r8]
     d80:	cmp	r2, #0
     d82:	beq.n	d44 <yield+0x1c>
     d84:	movs	r4, #0
     d86:	ldr.w	r9, [pc, #140]	; e14 <yield+0xec>
     d8a:	b.n	d98 <yield+0x70>
     d8c:	adds	r4, #1
     d8e:	ldrb.w	r3, [r8]
     d92:	uxtb	r4, r4
     d94:	cmp	r3, r4
     d96:	bls.n	dc0 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
     d98:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
     d9c:	ldr	r3, [r5, #0]
     d9e:	mov	r0, r5
     da0:	ldr	r3, [r3, #16]
     da2:	blx	r3
     da4:	cmp	r0, #0
     da6:	beq.n	d8c <yield+0x64>
     da8:	ldr	r3, [r5, #20]
     daa:	ldr	r3, [r3, #8]
     dac:	blx	r3
     dae:	b.n	d8c <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     db0:	bl	1598 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
     db4:	cbnz	r0, dec <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
     db6:	ldr	r3, [pc, #80]	; (e08 <yield+0xe0>)
     db8:	ldrb	r3, [r3, #0]
     dba:	cbnz	r3, dc4 <yield+0x9c>
     dbc:	ldrb	r3, [r6, #0]
     dbe:	b.n	d40 <yield+0x18>
     dc0:	ldrb	r3, [r6, #0]
     dc2:	b.n	d44 <yield+0x1c>
     dc4:	ldrb	r3, [r6, #0]
     dc6:	and.w	r3, r3, #254	; 0xfe
     dca:	strb	r3, [r6, #0]
     dcc:	b.n	d40 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
     dce:	movs	r6, #1
		firstYield = first->_next;
     dd0:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
     dd2:	strb	r6, [r4, #0]
		firstYield = first->_next;
     dd4:	str	r5, [r3, #0]
		if (firstYield) {
     dd6:	cbz	r5, df2 <yield+0xca>
			firstYield->_prev = nullptr;
     dd8:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     dda:	cbnz	r0, dde <yield+0xb6>
     ddc:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
     dde:	movs	r5, #0
		(*(first->_function))(*first);
     de0:	ldr	r3, [r2, #8]
     de2:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
     de4:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
     de6:	blx	r3
		runningFromYield = false;
     de8:	strb	r5, [r4, #0]
     dea:	b.n	d58 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
     dec:	bl	ee8 <serialEvent()>
     df0:	b.n	db6 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
     df2:	ldr	r3, [pc, #24]	; (e0c <yield+0xe4>)
     df4:	str	r5, [r3, #0]
     df6:	b.n	dda <yield+0xb2>
     df8:	.word	0x20000634
     dfc:	.word	0x20001074
     e00:	.word	0x20001084
     e04:	.word	0x20001088
     e08:	.word	0x60001660
     e0c:	.word	0x20001080
     e10:	.word	0x200010a8
     e14:	.word	0x2000108c

00000e18 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
     e18:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     e1a:	mrs	r1, PRIMASK
		__disable_irq();
     e1e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
     e20:	ldr	r4, [pc, #48]	; (e54 <EventResponder::runFromInterrupt()+0x3c>)
     e22:	ldr	r3, [r4, #0]
		if (first) {
     e24:	cbz	r3, e4a <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
     e26:	ldr	r6, [pc, #48]	; (e58 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
     e28:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
     e2a:	ldr	r2, [r3, #20]
     e2c:	str	r2, [r4, #0]
			if (firstInterrupt) {
     e2e:	cbz	r2, e50 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
     e30:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     e32:	cbnz	r1, e36 <EventResponder::runFromInterrupt()+0x1e>
     e34:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
     e36:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
     e38:	mov	r0, r3
     e3a:	ldr	r3, [r3, #8]
     e3c:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     e3e:	mrs	r1, PRIMASK
		__disable_irq();
     e42:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
     e44:	ldr	r3, [r4, #0]
		if (first) {
     e46:	cmp	r3, #0
     e48:	bne.n	e2a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     e4a:	cbnz	r1, e4e <EventResponder::runFromInterrupt()+0x36>
     e4c:	cpsie	i
     e4e:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
     e50:	str	r2, [r6, #0]
     e52:	b.n	e32 <EventResponder::runFromInterrupt()+0x1a>
     e54:	.word	0x20001078
     e58:	.word	0x2000107c

00000e5c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
     e5c:	b.w	e18 <EventResponder::runFromInterrupt()>

00000e60 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     e60:	ldr	r2, [pc, #16]	; (e74 <systick_isr+0x14>)
     e62:	ldr	r3, [pc, #20]	; (e78 <systick_isr+0x18>)
     e64:	ldr	r1, [r2, #0]
	systick_millis_count++;
     e66:	ldr	r2, [pc, #20]	; (e7c <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     e68:	str	r1, [r3, #0]
	systick_millis_count++;
     e6a:	ldr	r3, [r2, #0]
     e6c:	adds	r3, #1
     e6e:	str	r3, [r2, #0]
     e70:	bx	lr
     e72:	nop
     e74:	.word	0xe0001004
     e78:	.word	0x20001068
     e7c:	.word	0x20001070

00000e80 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
     e80:	b.w	15a4 <usb_serial_flush_input>

00000e84 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
     e84:	b.w	1554 <usb_serial_peekchar>

00000e88 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     e88:	b.w	1618 <usb_serial_getchar>

00000e8c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     e8c:	b.w	1598 <usb_serial_available>

00000e90 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     e90:	b.w	16c8 <usb_serial_flush_output>

00000e94 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
     e94:	b.w	167c <usb_serial_write_buffer_free>

00000e98 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     e98:	mov	r0, r1
     e9a:	mov	r1, r2
     e9c:	b.w	1664 <usb_serial_write>

00000ea0 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     ea0:	mov	r0, r1
     ea2:	b.w	1638 <usb_serial_putchar>
     ea6:	nop

00000ea8 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
     ea8:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
     eaa:	push	{r4, lr}
     eac:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
     eae:	ldr	r3, [r3, #4]
     eb0:	blx	r3
	return len;
}
     eb2:	mov	r0, r4
     eb4:	pop	{r4, pc}
     eb6:	nop

00000eb8 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
     eb8:	push	{r1, r2, r3}
     eba:	push	{lr}
     ebc:	sub	sp, #8
     ebe:	add	r3, sp, #12
     ec0:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
     ec4:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
     ec6:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
     ec8:	bl	31a8 <vdprintf>
#endif
}
     ecc:	add	sp, #8
     ece:	ldr.w	lr, [sp], #4
     ed2:	add	sp, #12
     ed4:	bx	lr
     ed6:	nop

00000ed8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     ed8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     eda:	bl	4f0 <setup>
	while (1) {
		loop();
     ede:	bl	660 <loop>
		yield();
     ee2:	bl	d28 <yield>
     ee6:	b.n	ede <main+0x6>

00000ee8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
     ee8:	bx	lr
     eea:	nop

00000eec <operator new[](unsigned int)>:
	return malloc(size);
}

void * operator new[](size_t size)
{
	return malloc(size);
     eec:	b.w	253c <malloc>

00000ef0 <operator delete[](void*, unsigned int)>:
	free(ptr);
}

void operator delete[](void * ptr, size_t size)
{
	free(ptr);
     ef0:	b.w	254c <free>

00000ef4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
     ef4:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
     ef6:	orr.w	r3, r1, r0
	ands	r3, r3, #3
     efa:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
     efe:	bne.n	fdc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
     f00:	subs	r2, #64	; 0x40
	blo	.Lmid_block
     f02:	bcc.n	f88 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
     f04:	ldr.w	r3, [r1], #4
     f08:	str.w	r3, [r0], #4
     f0c:	ldr.w	r3, [r1], #4
     f10:	str.w	r3, [r0], #4
     f14:	ldr.w	r3, [r1], #4
     f18:	str.w	r3, [r0], #4
     f1c:	ldr.w	r3, [r1], #4
     f20:	str.w	r3, [r0], #4
     f24:	ldr.w	r3, [r1], #4
     f28:	str.w	r3, [r0], #4
     f2c:	ldr.w	r3, [r1], #4
     f30:	str.w	r3, [r0], #4
     f34:	ldr.w	r3, [r1], #4
     f38:	str.w	r3, [r0], #4
     f3c:	ldr.w	r3, [r1], #4
     f40:	str.w	r3, [r0], #4
     f44:	ldr.w	r3, [r1], #4
     f48:	str.w	r3, [r0], #4
     f4c:	ldr.w	r3, [r1], #4
     f50:	str.w	r3, [r0], #4
     f54:	ldr.w	r3, [r1], #4
     f58:	str.w	r3, [r0], #4
     f5c:	ldr.w	r3, [r1], #4
     f60:	str.w	r3, [r0], #4
     f64:	ldr.w	r3, [r1], #4
     f68:	str.w	r3, [r0], #4
     f6c:	ldr.w	r3, [r1], #4
     f70:	str.w	r3, [r0], #4
     f74:	ldr.w	r3, [r1], #4
     f78:	str.w	r3, [r0], #4
     f7c:	ldr.w	r3, [r1], #4
     f80:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
     f84:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
     f86:	bcs.n	f04 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
     f88:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
     f8a:	bcc.n	fb0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
     f8c:	ldr.w	r3, [r1], #4
     f90:	str.w	r3, [r0], #4
     f94:	ldr.w	r3, [r1], #4
     f98:	str.w	r3, [r0], #4
     f9c:	ldr.w	r3, [r1], #4
     fa0:	str.w	r3, [r0], #4
     fa4:	ldr.w	r3, [r1], #4
     fa8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
     fac:	subs	r2, #16
	bhs	.Lmid_block_loop
     fae:	bcs.n	f8c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
     fb0:	adds	r2, #12
	blo	.Lcopy_less_than_4
     fb2:	bcc.n	fc0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
     fb4:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
     fb8:	str.w	r3, [r0], #4
	subs	r2, #4
     fbc:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
     fbe:	bcs.n	fb4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
     fc0:	adds	r2, #4
	beq	.Ldone
     fc2:	beq.n	fd6 <memcpy+0xe2>

	lsls	r2, r2, #31
     fc4:	lsls	r2, r2, #31
	itt ne
     fc6:	itt	ne
	ldrbne  r3, [r1], #1
     fc8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
     fcc:	strbne.w	r3, [r0], #1

	bcc	.Ldone
     fd0:	bcc.n	fd6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
     fd2:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
     fd4:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
     fd6:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
     fd8:	bx	lr
     fda:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
     fdc:	cmp	r2, #8
	blo	.Lbyte_copy
     fde:	bcc.n	1008 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
     fe0:	lsls	r3, r1, #30
	beq	.Ldst_aligned
     fe2:	beq.n	f00 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
     fe4:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
     fe8:	beq.n	f00 <memcpy+0xc>

	rsb	r3, #4
     fea:	rsb	r3, r3, #4
	subs	r2, r3
     fee:	subs	r2, r2, r3

	lsls    r3, r3, #31
     ff0:	lsls	r3, r3, #31
	itt ne
     ff2:	itt	ne
	ldrbne  r3, [r1], #1
     ff4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
     ff8:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
     ffc:	bcc.n	f00 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
     ffe:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1002:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1006:	b.n	f00 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1008:	subs	r2, #4
	blo	.Lcopy_less_than_4
    100a:	bcc.n	fc0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    100c:	subs	r2, #1
	ldrb    r3, [r1], #1
    100e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1012:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1016:	bcs.n	100c <memcpy+0x118>

	ldrb	r3, [r1]
    1018:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    101a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    101c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    101e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1020:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1022:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1024:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1026:	bx	lr

00001028 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1028:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    102a:	ldr	r1, [pc, #80]	; (107c <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    102c:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1030:	ldr	r5, [pc, #76]	; (1080 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1032:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1034:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1038:	ldr	r6, [pc, #72]	; (1084 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    103a:	ldr	r2, [pc, #76]	; (1088 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    103c:	add.w	r5, r5, r0, lsl #5
    1040:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1042:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1044:	mov	r0, r5
    1046:	ldrh	r2, [r6, #0]
    1048:	bl	1fe8 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    104c:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    104e:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1052:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    1054:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    1058:	ldr	r2, [pc, #48]	; (108c <rx_queue_transfer+0x64>)
    105a:	str	r3, [r2, #0]
		location += 32;
    105c:	adds	r3, #32
	} while (location < end_addr);
    105e:	cmp	r1, r3
    1060:	bhi.n	105a <rx_queue_transfer+0x32>
	asm("dsb");
    1062:	dsb	sy
	asm("isb");
    1066:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    106a:	movs	r0, #3
    106c:	mov	r1, r5
    106e:	bl	2040 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1072:	ldr	r3, [pc, #28]	; (1090 <rx_queue_transfer+0x68>)
    1074:	mov.w	r2, #131072	; 0x20000
    1078:	str	r2, [r3, #0]
    107a:	pop	{r3, r4, r5, r6, r7, pc}
    107c:	.word	0x20200000
    1080:	.word	0x200010c0
    1084:	.word	0x200011ce
    1088:	.word	0xe000e18c
    108c:	.word	0xe000ef5c
    1090:	.word	0xe000e10c

00001094 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1094:	ldr	r2, [pc, #144]	; (1128 <rx_event+0x94>)
    1096:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    1098:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    109c:	ubfx	r3, r3, #16, #15
    10a0:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    10a2:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    10a4:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    10a6:	cmp	r4, #0
    10a8:	ble.n	111c <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    10aa:	ldr	r1, [pc, #128]	; (112c <rx_event+0x98>)
		if (head != rx_tail) {
    10ac:	ldr	r2, [pc, #128]	; (1130 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    10ae:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    10b0:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    10b2:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    10b4:	ldr	r0, [pc, #124]	; (1134 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    10b6:	ldr	r6, [pc, #128]	; (1138 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    10b8:	cmp	r3, r2
    10ba:	beq.n	10cc <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    10bc:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    10c0:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    10c4:	rsb	r2, r7, #512	; 0x200
    10c8:	cmp	r4, r2
    10ca:	bls.n	10f2 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    10cc:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    10ce:	movs	r2, #0
    10d0:	ldr	r7, [pc, #104]	; (113c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    10d2:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    10d4:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    10d8:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    10dc:	ldr	r6, [pc, #96]	; (1140 <rx_event+0xac>)
    10de:	ite	ls
    10e0:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    10e2:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    10e4:	strb	r2, [r1, #0]
		rx_available += len;
    10e6:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    10e8:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    10ea:	add	r4, r2
    10ec:	str	r4, [r6, #0]
    10ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    10f2:	ldr	r3, [pc, #80]	; (1144 <rx_event+0xb0>)
    10f4:	add.w	r0, r7, r8, lsl #9
    10f8:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    10fa:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    10fc:	add.w	r1, r3, r5, lsl #9
    1100:	add	r0, r3
    1102:	bl	ef4 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    1106:	ldr	r2, [pc, #56]	; (1140 <rx_event+0xac>)
				rx_queue_transfer(i);
    1108:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    110a:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    110e:	ldr	r3, [r2, #0]
    1110:	add	r4, r3
    1112:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    1114:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    1118:	b.w	1028 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    111c:	mov	r0, r5
	}
}
    111e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    1122:	b.w	1028 <rx_queue_transfer>
    1126:	nop
    1128:	.word	0x200011ce
    112c:	.word	0x200011e4
    1130:	.word	0x200011c0
    1134:	.word	0x200011c4
    1138:	.word	0x200011d0
    113c:	.word	0x200010ac
    1140:	.word	0x200011e0
    1144:	.word	0x20200000

00001148 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    1148:	ldr	r3, [pc, #120]	; (11c4 <usb_serial_flush_callback+0x7c>)
    114a:	ldrb	r2, [r3, #0]
    114c:	cbnz	r2, 1166 <usb_serial_flush_callback+0x1e>
    114e:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    1152:	ldr	r2, [pc, #116]	; (11c8 <usb_serial_flush_callback+0x80>)
    1154:	ldrb	r2, [r2, #0]
    1156:	cbz	r2, 1166 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    1158:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    115c:	ldr	r5, [pc, #108]	; (11cc <usb_serial_flush_callback+0x84>)
    115e:	ldrh	r2, [r5, #0]
    1160:	cbnz	r2, 1168 <usb_serial_flush_callback+0x20>
    1162:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1166:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1168:	ldr	r6, [pc, #100]	; (11d0 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    116a:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    116e:	ldr	r7, [pc, #100]	; (11d4 <usb_serial_flush_callback+0x8c>)
    1170:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1172:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1174:	ldr	r4, [pc, #96]	; (11d8 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1176:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    117a:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    117e:	mov	r0, r7
    1180:	mov	r1, r4
    1182:	bl	1fe8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1186:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    118a:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    118e:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1192:	ldr	r3, [pc, #72]	; (11dc <usb_serial_flush_callback+0x94>)
    1194:	str	r1, [r3, #0]
		location += 32;
    1196:	adds	r1, #32
	} while (location < end_addr);
    1198:	cmp	r2, r1
    119a:	bhi.n	1194 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    119c:	dsb	sy
	asm("isb");
    11a0:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    11a4:	movs	r0, #4
    11a6:	mov	r1, r7
    11a8:	bl	2018 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    11ac:	ldrb	r3, [r6, #0]
    11ae:	ldr	r2, [pc, #32]	; (11d0 <usb_serial_flush_callback+0x88>)
    11b0:	adds	r3, #1
    11b2:	uxtb	r3, r3
    11b4:	cmp	r3, #3
    11b6:	it	hi
    11b8:	movhi	r3, #0
    11ba:	strb	r3, [r2, #0]
	tx_available = 0;
    11bc:	movs	r3, #0
    11be:	strh	r3, [r5, #0]
    11c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11c4:	.word	0x200010be
    11c8:	.word	0x200012b8
    11cc:	.word	0x200011e6
    11d0:	.word	0x200010bf
    11d4:	.word	0x20001200
    11d8:	.word	0x20201000
    11dc:	.word	0xe000ef70

000011e0 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    11e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11e4:	sub	sp, #20
    11e6:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    11e8:	str	r1, [sp, #4]
    11ea:	cmp	r1, #0
    11ec:	beq.w	1334 <usb_serial_write.part.1+0x154>
    11f0:	movs	r3, #0
    11f2:	ldr.w	r8, [pc, #348]	; 1350 <usb_serial_write.part.1+0x170>
    11f6:	ldr.w	r9, [pc, #332]	; 1344 <usb_serial_write.part.1+0x164>
    11fa:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    11fc:	ldr	r6, [pc, #312]	; (1338 <usb_serial_write.part.1+0x158>)
    11fe:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    1202:	ldr.w	sl, [pc, #336]	; 1354 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    1206:	ldr.w	fp, [pc, #336]	; 1358 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    120a:	ldr	r2, [pc, #304]	; (133c <usb_serial_write.part.1+0x15c>)
    120c:	ldrb	r4, [r2, #0]
    120e:	ldr	r2, [pc, #304]	; (1340 <usb_serial_write.part.1+0x160>)
    1210:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1214:	cmp	r3, #0
    1216:	bne.n	12f6 <usb_serial_write.part.1+0x116>
    1218:	mov	r5, r3
    121a:	mov	r4, r3
    121c:	b.n	1248 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    121e:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    1222:	cbnz	r4, 1226 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    1224:	ldr	r5, [r6, #0]
    1226:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1228:	cmp	r3, #0
    122a:	bne.n	12ea <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    122c:	ldr	r3, [r6, #0]
    122e:	subs	r3, r3, r5
    1230:	cmp	r3, #120	; 0x78
    1232:	bhi.n	1328 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    1234:	ldrb.w	r3, [sl]
    1238:	cmp	r3, #0
    123a:	beq.n	12ea <usb_serial_write.part.1+0x10a>
			yield();
    123c:	bl	d28 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1240:	ldrh.w	r3, [r8]
    1244:	cmp	r3, #0
    1246:	bne.n	12f2 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    1248:	mov	r0, r7
    124a:	bl	2064 <usb_transfer_status>
			if (!(status & 0x80)) {
    124e:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1252:	ldr	r2, [pc, #240]	; (1344 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    1254:	bne.n	121e <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    1256:	mov.w	r3, #2048	; 0x800
    125a:	ldr	r2, [pc, #224]	; (133c <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    125c:	strb.w	r0, [r9]
    1260:	ldrb	r4, [r2, #0]
    1262:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    1264:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1268:	lsls	r4, r4, #11
		if (size >= tx_available) {
    126a:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    126c:	ldr	r1, [pc, #216]	; (1348 <usb_serial_write.part.1+0x168>)
    126e:	add	r0, r4
		if (size >= tx_available) {
    1270:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1272:	add	r0, r1
		if (size >= tx_available) {
    1274:	bcc.n	12fe <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1276:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    1278:	ldr	r1, [sp, #8]
    127a:	bl	ef4 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    127e:	movs	r3, #0
    1280:	mov	r1, r4
    1282:	mov.w	r2, #2048	; 0x800
    1286:	mov	r0, r7
    1288:	bl	1fe8 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    128c:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1290:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    1294:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1298:	str.w	r3, [fp]
		location += 32;
    129c:	adds	r3, #32
	} while (location < end_addr);
    129e:	cmp	r4, r3
    12a0:	bhi.n	1298 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    12a2:	dsb	sy
	asm("isb");
    12a6:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    12aa:	movs	r0, #4
    12ac:	mov	r1, r7
    12ae:	bl	2018 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    12b2:	ldr	r3, [pc, #136]	; (133c <usb_serial_write.part.1+0x15c>)
    12b4:	ldr	r2, [pc, #132]	; (133c <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    12b6:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    12b8:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    12ba:	ldr	r0, [pc, #144]	; (134c <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    12bc:	adds	r3, #1
    12be:	uxtb	r3, r3
    12c0:	cmp	r3, #3
    12c2:	it	hi
    12c4:	movhi	r3, #0
    12c6:	strb	r3, [r2, #0]
			size -= tx_available;
    12c8:	ldrh.w	r2, [r8]
			sent += tx_available;
    12cc:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    12ce:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    12d2:	add	r3, r2
    12d4:	str	r3, [sp, #0]
			data += tx_available;
    12d6:	ldr	r3, [sp, #8]
    12d8:	add	r3, r2
    12da:	str	r3, [sp, #8]
    12dc:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    12de:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    12e2:	ldr	r1, [sp, #4]
    12e4:	subs	r2, r1, r2
    12e6:	str	r2, [sp, #4]
    12e8:	bne.n	120a <usb_serial_write.part.1+0x2a>
    12ea:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    12ec:	add	sp, #20
    12ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12f2:	ldr	r2, [pc, #72]	; (133c <usb_serial_write.part.1+0x15c>)
    12f4:	ldrb	r4, [r2, #0]
    12f6:	mov	r2, r3
    12f8:	rsb	r0, r3, #2048	; 0x800
    12fc:	b.n	1268 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    12fe:	ldr	r4, [sp, #4]
    1300:	ldr	r1, [sp, #8]
    1302:	mov	r2, r4
    1304:	str	r3, [sp, #12]
    1306:	bl	ef4 <memcpy>
			tx_available -= size;
    130a:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    130c:	ldr	r2, [pc, #60]	; (134c <usb_serial_write.part.1+0x16c>)
    130e:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    1312:	subs	r3, r3, r4
    1314:	strh.w	r3, [r8]
    1318:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    131a:	str.w	r1, [r2, #132]	; 0x84
    131e:	mov	r0, r3
    1320:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1322:	add	sp, #20
    1324:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    1328:	movs	r3, #1
				return sent;
    132a:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    132c:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    132e:	add	sp, #20
    1330:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1334:	ldr	r0, [sp, #4]
    1336:	b.n	12ec <usb_serial_write.part.1+0x10c>
    1338:	.word	0x20001070
    133c:	.word	0x200010bf
    1340:	.word	0x20001200
    1344:	.word	0x200011e5
    1348:	.word	0x20201000
    134c:	.word	0x402e0000
    1350:	.word	0x200011e6
    1354:	.word	0x200012b8
    1358:	.word	0xe000ef70

0000135c <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    135c:	bx	lr
    135e:	nop

00001360 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1360:	ldr	r3, [pc, #196]	; (1428 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    1362:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1366:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    1368:	ldr	r7, [pc, #192]	; (142c <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    136a:	cmp	r3, #0
    136c:	beq.n	1418 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    136e:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    1372:	ldr.w	r8, [pc, #236]	; 1460 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    1376:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    1378:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    137c:	movs	r1, #0
    137e:	movs	r2, #128	; 0x80
    1380:	ldr	r0, [pc, #172]	; (1430 <usb_serial_configure+0xd0>)
	tx_head = 0;
    1382:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1384:	ldr	r6, [pc, #172]	; (1434 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1386:	bl	2bc0 <memset>
	tx_head = 0;
    138a:	ldr	r4, [pc, #172]	; (1438 <usb_serial_configure+0xd8>)
	tx_available = 0;
    138c:	ldr	r3, [pc, #172]	; (143c <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    138e:	mov	r1, r5
    1390:	mov.w	r2, #256	; 0x100
    1394:	ldr	r0, [pc, #168]	; (1440 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    1396:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1398:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    139a:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    139c:	bl	2bc0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    13a0:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    13a2:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    13a4:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    13a6:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    13a8:	str	r5, [r6, #8]
    13aa:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    13ac:	ldr	r1, [pc, #148]	; (1444 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    13ae:	ldr	r6, [pc, #152]	; (1448 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    13b0:	ldr	r0, [pc, #152]	; (144c <usb_serial_configure+0xec>)
	rx_available = 0;
    13b2:	ldr.w	lr, [pc, #176]	; 1464 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    13b6:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    13b8:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    13ba:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    13bc:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    13be:	str	r5, [r6, #0]
    13c0:	str	r5, [r6, #4]
    13c2:	str	r5, [r6, #8]
    13c4:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    13c6:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    13ca:	bl	1f80 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    13ce:	ldrh.w	r1, [r8]
    13d2:	mov	r2, r5
    13d4:	ldr	r3, [pc, #120]	; (1450 <usb_serial_configure+0xf0>)
    13d6:	movs	r0, #3
    13d8:	bl	1f1c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    13dc:	mov	r3, r5
    13de:	ldrh	r1, [r7, #0]
    13e0:	movs	r2, #1
    13e2:	movs	r0, #4
    13e4:	bl	1f80 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    13e8:	mov	r0, r4
    13ea:	adds	r4, #1
    13ec:	bl	1028 <rx_queue_transfer>
    13f0:	cmp	r4, #8
    13f2:	bne.n	13e8 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    13f4:	ldr	r3, [pc, #92]	; (1454 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    13f6:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    13f8:	ldr	r0, [pc, #92]	; (1458 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    13fa:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    13fc:	ldr	r4, [pc, #92]	; (145c <usb_serial_configure+0xfc>)
    13fe:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1400:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    1404:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1408:	ldr.w	r2, [r3, #328]	; 0x148
    140c:	orr.w	r2, r2, #16777216	; 0x1000000
    1410:	str.w	r2, [r3, #328]	; 0x148
    1414:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    1418:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    141a:	ldr.w	r8, [pc, #68]	; 1460 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    141e:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    1420:	strh.w	r3, [r8]
    1424:	b.n	137c <usb_serial_configure+0x1c>
    1426:	nop
    1428:	.word	0x20001290
    142c:	.word	0x200010bc
    1430:	.word	0x20001200
    1434:	.word	0x200011d0
    1438:	.word	0x200010bf
    143c:	.word	0x200011e6
    1440:	.word	0x200010c0
    1444:	.word	0x200011e4
    1448:	.word	0x200010ac
    144c:	.word	0x200011c0
    1450:	.word	0x00001095
    1454:	.word	0x402e0000
    1458:	.word	0x20001280
    145c:	.word	0x00001149
    1460:	.word	0x200011ce
    1464:	.word	0x200011e0

00001468 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1468:	ldr	r3, [pc, #196]	; (1530 <usb_serial_read+0xc8>)
    146a:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    146e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1472:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1474:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    1476:	ldr	r3, [pc, #188]	; (1534 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1478:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    147a:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    147c:	cmp	r1, #0
    147e:	beq.n	1528 <usb_serial_read+0xc0>
    1480:	ldr	r3, [pc, #180]	; (1538 <usb_serial_read+0xd0>)
    1482:	uxtb	r4, r4
    1484:	ldrb	r3, [r3, #0]
    1486:	cmp	r4, r3
    1488:	beq.n	152c <usb_serial_read+0xc4>
    148a:	mov	sl, r0
    148c:	movs	r7, #0
    148e:	ldr.w	fp, [pc, #192]	; 1550 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    1492:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1494:	ldr	r3, [pc, #164]	; (153c <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    1496:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    149a:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    149c:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    149e:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    14a0:	ldr	r3, [pc, #156]	; (1540 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    14a2:	it	cs
    14a4:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    14a6:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    14a8:	ldr	r3, [pc, #144]	; (153c <usb_serial_read+0xd4>)
    14aa:	ldrh.w	lr, [r3, r5, lsl #1]
    14ae:	ldr	r3, [pc, #148]	; (1544 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    14b0:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    14b4:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    14b8:	ldr	r3, [pc, #140]	; (1548 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    14ba:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    14be:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    14c0:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    14c2:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    14c4:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    14c6:	bcs.n	14fc <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    14c8:	add.w	r1, lr, r5, lsl #9
    14cc:	mov	r2, r8
    14ce:	add	r1, r3
    14d0:	bl	ef4 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    14d4:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    14d6:	ldr.w	r1, [fp]
    14da:	mov	r0, r9
			rx_index[i] += len;
    14dc:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    14e0:	rsb	r1, r8, r1
			rx_index[i] += len;
    14e4:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    14e6:	str.w	r1, [fp]
			rx_index[i] += len;
    14ea:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    14ee:	ldr	r3, [pc, #92]	; (154c <usb_serial_read+0xe4>)
    14f0:	mov.w	r2, #131072	; 0x20000
    14f4:	str	r2, [r3, #0]
	return count;
}
    14f6:	add	sp, #12
    14f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    14fc:	bl	ef4 <memcpy>
			p += avail;
			rx_available -= avail;
    1500:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    1504:	uxtb	r3, r4
			rx_queue_transfer(i);
    1506:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    1508:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    150a:	add	sl, r6
			rx_available -= avail;
    150c:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    1510:	ldr	r2, [pc, #32]	; (1534 <usb_serial_read+0xcc>)
    1512:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    1514:	bl	1028 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1518:	cmp	r9, r7
    151a:	bls.n	1524 <usb_serial_read+0xbc>
    151c:	ldr	r3, [pc, #24]	; (1538 <usb_serial_read+0xd0>)
    151e:	ldrb	r3, [r3, #0]
    1520:	cmp	r4, r3
    1522:	bne.n	1492 <usb_serial_read+0x2a>
    1524:	mov	r0, r7
    1526:	b.n	14ee <usb_serial_read+0x86>
    1528:	mov	r0, r1
    152a:	b.n	14ee <usb_serial_read+0x86>
    152c:	movs	r0, #0
    152e:	b.n	14ee <usb_serial_read+0x86>
    1530:	.word	0xe000e18c
    1534:	.word	0x200011c0
    1538:	.word	0x200011e4
    153c:	.word	0x200010ac
    1540:	.word	0x200011c4
    1544:	.word	0x200011d0
    1548:	.word	0x20200000
    154c:	.word	0xe000e10c
    1550:	.word	0x200011e0

00001554 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1554:	ldr	r3, [pc, #44]	; (1584 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    1556:	ldr	r2, [pc, #48]	; (1588 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1558:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    155a:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    155c:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    155e:	cmp	r3, r2
    1560:	beq.n	157e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    1562:	adds	r3, #1
	uint32_t i = rx_list[tail];
    1564:	ldr	r0, [pc, #36]	; (158c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1566:	ldr	r2, [pc, #40]	; (1590 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1568:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    156a:	ldr	r1, [pc, #40]	; (1594 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    156c:	it	cs
    156e:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1570:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1572:	ldrh.w	r1, [r1, r3, lsl #1]
    1576:	add.w	r3, r2, r3, lsl #9
    157a:	ldrb	r0, [r3, r1]
    157c:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    157e:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    1582:	bx	lr
    1584:	.word	0x200011c0
    1588:	.word	0x200011e4
    158c:	.word	0x200011c4
    1590:	.word	0x20200000
    1594:	.word	0x200010ac

00001598 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    1598:	ldr	r3, [pc, #4]	; (15a0 <usb_serial_available+0x8>)
    159a:	ldr	r0, [r3, #0]
}
    159c:	bx	lr
    159e:	nop
    15a0:	.word	0x200011e0

000015a4 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    15a4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    15a8:	ldr	r6, [pc, #84]	; (1600 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    15aa:	ldr	r5, [pc, #88]	; (1604 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    15ac:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    15ae:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    15b0:	uxtb	r4, r4
	while (tail != rx_head) {
    15b2:	cmp	r4, r3
    15b4:	beq.n	15fa <usb_serial_flush_input+0x56>
    15b6:	ldr.w	r9, [pc, #84]	; 160c <usb_serial_flush_input+0x68>
    15ba:	ldr.w	fp, [pc, #84]	; 1610 <usb_serial_flush_input+0x6c>
    15be:	ldr.w	r8, [pc, #84]	; 1614 <usb_serial_flush_input+0x70>
    15c2:	ldr	r7, [pc, #68]	; (1608 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    15c4:	adds	r4, #1
    15c6:	cmp	r4, #8
    15c8:	uxtb.w	sl, r4
    15cc:	bls.n	15d2 <usb_serial_flush_input+0x2e>
    15ce:	movs	r4, #0
    15d0:	mov	sl, r4
		uint32_t i = rx_list[tail];
    15d2:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    15d6:	ldr.w	r2, [fp]
    15da:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    15de:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    15e0:	ldrh.w	r1, [r7, r1, lsl #1]
    15e4:	subs	r3, r3, r1
    15e6:	subs	r3, r2, r3
    15e8:	str.w	r3, [fp]
		rx_queue_transfer(i);
    15ec:	bl	1028 <rx_queue_transfer>
		rx_tail = tail;
    15f0:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    15f4:	ldrb	r3, [r5, #0]
    15f6:	cmp	r4, r3
    15f8:	bne.n	15c4 <usb_serial_flush_input+0x20>
    15fa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15fe:	nop
    1600:	.word	0x200011c0
    1604:	.word	0x200011e4
    1608:	.word	0x200010ac
    160c:	.word	0x200011c4
    1610:	.word	0x200011e0
    1614:	.word	0x200011d0

00001618 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1618:	push	{lr}
    161a:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    161c:	movs	r1, #1
    161e:	add.w	r0, sp, #7
    1622:	bl	1468 <usb_serial_read>
    1626:	cbz	r0, 1632 <usb_serial_getchar+0x1a>
    1628:	ldrb.w	r0, [sp, #7]
	return -1;
}
    162c:	add	sp, #12
    162e:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    1632:	mov.w	r0, #4294967295
    1636:	b.n	162c <usb_serial_getchar+0x14>

00001638 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1638:	ldr	r3, [pc, #36]	; (1660 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    163a:	push	{lr}
    163c:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    163e:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1640:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1644:	cbnz	r3, 1650 <usb_serial_putchar+0x18>
    1646:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    164a:	add	sp, #12
    164c:	ldr.w	pc, [sp], #4
    1650:	movs	r1, #1
    1652:	add.w	r0, sp, #7
    1656:	bl	11e0 <usb_serial_write.part.1>
    165a:	add	sp, #12
    165c:	ldr.w	pc, [sp], #4
    1660:	.word	0x200012b8

00001664 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1664:	ldr	r3, [pc, #16]	; (1678 <usb_serial_write+0x14>)
    1666:	ldrb	r3, [r3, #0]
    1668:	and.w	r2, r3, #255	; 0xff
    166c:	cbz	r3, 1672 <usb_serial_write+0xe>
    166e:	b.w	11e0 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1672:	mov	r0, r2
    1674:	bx	lr
    1676:	nop
    1678:	.word	0x200012b8

0000167c <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    167c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1680:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    1682:	ldr.w	r8, [pc, #64]	; 16c4 <usb_serial_write_buffer_free+0x48>
    1686:	movs	r3, #1
    1688:	ldr	r5, [pc, #48]	; (16bc <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    168a:	mov	r7, r4
    168c:	ldr	r6, [pc, #48]	; (16c0 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    168e:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1692:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1694:	mov	r0, r5
    1696:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1698:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    169a:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    169e:	beq.n	16ac <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    16a0:	bl	2064 <usb_transfer_status>
    16a4:	lsls	r3, r0, #24
    16a6:	it	pl
    16a8:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    16ac:	cmp	r4, #4
    16ae:	bne.n	1692 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    16b0:	movs	r3, #0
	return sum;
}
    16b2:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    16b4:	strb.w	r3, [r8]
	return sum;
}
    16b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16bc:	.word	0x20001200
    16c0:	.word	0x200010bf
    16c4:	.word	0x200010be

000016c8 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    16c8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    16cc:	ldr	r3, [pc, #124]	; (174c <usb_serial_flush_output+0x84>)
    16ce:	ldrb	r3, [r3, #0]
    16d0:	cbz	r3, 16d8 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    16d2:	ldr	r5, [pc, #124]	; (1750 <usb_serial_flush_output+0x88>)
    16d4:	ldrh	r2, [r5, #0]
    16d6:	cbnz	r2, 16dc <usb_serial_flush_output+0x14>
    16d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    16dc:	ldr.w	r8, [pc, #132]	; 1764 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    16e0:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    16e4:	ldr	r6, [pc, #108]	; (1754 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    16e6:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    16ea:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    16ee:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    16f0:	ldr	r4, [pc, #100]	; (1758 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    16f2:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    16f4:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    16f8:	ldr	r7, [pc, #96]	; (175c <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    16fa:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    16fe:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1700:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1704:	mov	r1, r4
    1706:	bl	1fe8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    170a:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    170e:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    1712:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1716:	ldr	r3, [pc, #72]	; (1760 <usb_serial_flush_output+0x98>)
    1718:	str	r1, [r3, #0]
		location += 32;
    171a:	adds	r1, #32
	} while (location < end_addr);
    171c:	cmp	r2, r1
    171e:	bhi.n	1718 <usb_serial_flush_output+0x50>
	asm("dsb");
    1720:	dsb	sy
	asm("isb");
    1724:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1728:	movs	r0, #4
    172a:	mov	r1, r6
    172c:	bl	2018 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1730:	ldrb.w	r3, [r8]
    1734:	ldr	r2, [pc, #44]	; (1764 <usb_serial_flush_output+0x9c>)
    1736:	adds	r3, #1
    1738:	uxtb	r3, r3
    173a:	cmp	r3, #3
    173c:	it	hi
    173e:	movhi	r3, #0
    1740:	strb	r3, [r2, #0]
	tx_available = 0;
    1742:	movs	r3, #0
    1744:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    1746:	strb	r3, [r7, #0]
    1748:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    174c:	.word	0x200012b8
    1750:	.word	0x200011e6
    1754:	.word	0x20001200
    1758:	.word	0x20201000
    175c:	.word	0x200010be
    1760:	.word	0xe000ef70
    1764:	.word	0x200010bf

00001768 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1768:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    176a:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    176c:	cbz	r3, 1776 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    176e:	ldr	r3, [r2, #4]
    1770:	orr.w	r3, r3, #32768	; 0x8000
    1774:	str	r3, [r2, #4]
	}
	__disable_irq();
    1776:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1778:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    177a:	cbz	r4, 17b4 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    177c:	ldr	r3, [pc, #80]	; (17d0 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    177e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1780:	ldr.w	r4, [r3, #432]	; 0x1b0
    1784:	tst	r4, r1
    1786:	bne.n	17c8 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    1788:	ldr	r5, [pc, #72]	; (17d4 <schedule_transfer+0x6c>)
    178a:	ldr	r7, [r5, #0]
    178c:	b.n	1798 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    178e:	ldr	r4, [r5, #0]
    1790:	subs	r4, r4, r7
    1792:	cmp.w	r4, #2400	; 0x960
    1796:	bcs.n	17b0 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1798:	ldr.w	r4, [r3, #320]	; 0x140
    179c:	orr.w	r4, r4, #16384	; 0x4000
    17a0:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    17a4:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    17a8:	ldr.w	r4, [r3, #320]	; 0x140
    17ac:	lsls	r4, r4, #17
    17ae:	bpl.n	178e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    17b0:	tst	r1, r6
    17b2:	bne.n	17c8 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    17b4:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    17b6:	ldr	r4, [pc, #24]	; (17d0 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    17b8:	str	r2, [r0, #8]
	endpoint->status = 0;
    17ba:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    17bc:	ldr.w	r3, [r4, #432]	; 0x1b0
    17c0:	orrs	r1, r3
    17c2:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    17c6:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    17c8:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    17ca:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    17cc:	pop	{r4, r5, r6, r7}
    17ce:	bx	lr
    17d0:	.word	0x402e0000
    17d4:	.word	0xe0001004

000017d8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    17d8:	push	{r4, r5, r6, lr}
    17da:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    17dc:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    17de:	cbz	r0, 1806 <run_callbacks+0x2e>
    17e0:	mov	r2, r0
    17e2:	movs	r4, #0
    17e4:	b.n	17ee <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    17e6:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    17e8:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    17ea:	cmp	r2, #1
    17ec:	beq.n	1808 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    17ee:	ldr	r3, [r2, #4]
    17f0:	ands.w	r3, r3, #128	; 0x80
    17f4:	beq.n	17e6 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    17f6:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    17f8:	cbz	r4, 1806 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    17fa:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    17fc:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    17fe:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1800:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    1802:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1804:	bne.n	17fa <run_callbacks+0x22>
    1806:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    1808:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    180a:	str	r3, [r6, #52]	; 0x34
			break;
    180c:	b.n	17f8 <run_callbacks+0x20>
    180e:	nop

00001810 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1810:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    1812:	cbnz	r1, 184e <endpoint0_transmit.constprop.1+0x3e>
    1814:	ldr	r4, [pc, #132]	; (189c <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1816:	ldr	r1, [pc, #136]	; (18a0 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1818:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    181a:	ldr	r3, [pc, #136]	; (18a4 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    181c:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    181e:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1822:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1824:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    1826:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    1828:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    182a:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    182c:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    182e:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1832:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1836:	ldr	r5, [pc, #112]	; (18a8 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    1838:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    183c:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    183e:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1842:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    1844:	ldr.w	r3, [r2, #432]	; 0x1b0
    1848:	cmp	r3, #0
    184a:	bne.n	1844 <endpoint0_transmit.constprop.1+0x34>
}
    184c:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    184e:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1850:	ldr	r3, [pc, #88]	; (18ac <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1852:	ldr	r5, [pc, #80]	; (18a4 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1854:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1856:	ldr	r4, [pc, #68]	; (189c <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1858:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    185c:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    185e:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1860:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1862:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1866:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1868:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    186c:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    186e:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1872:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1876:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    187a:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    187c:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    187e:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1882:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1886:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    188a:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    188c:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    188e:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1892:	ldr.w	r3, [r2, #432]	; 0x1b0
    1896:	cmp	r3, #0
    1898:	bne.n	1892 <endpoint0_transmit.constprop.1+0x82>
    189a:	b.n	1816 <endpoint0_transmit.constprop.1+0x6>
    189c:	.word	0x20003000
    18a0:	.word	0x20002020
    18a4:	.word	0x402e0000
    18a8:	.word	0x20001294
    18ac:	.word	0x20002000

000018b0 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    18b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    18b4:	ldr	r4, [pc, #688]	; (1b68 <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    18b6:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    18b8:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    18bc:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    18c0:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    18c4:	beq.n	1984 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    18c6:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    18ca:	cmp	r3, #0
    18cc:	beq.n	197a <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    18ce:	mov.w	fp, #65537	; 0x10001
    18d2:	ldr.w	r9, [pc, #700]	; 1b90 <isr+0x2e0>
    18d6:	ldr	r6, [pc, #660]	; (1b6c <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    18d8:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    18da:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    18dc:	str.w	r3, [r4, #428]	; 0x1ac
    18e0:	ldr	r0, [r6, #40]	; 0x28
    18e2:	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    18e4:	ldr.w	r3, [r4, #320]	; 0x140
    18e8:	orr.w	r3, r3, #8192	; 0x2000
    18ec:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    18f0:	ldr.w	r3, [r4, #320]	; 0x140
    18f4:	lsls	r7, r3, #18
    18f6:	bpl.n	18e4 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    18f8:	ldr.w	r3, [r5, #320]	; 0x140
    18fc:	bic.w	r3, r3, #8192	; 0x2000
    1900:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1904:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    1908:	ldr.w	r3, [r4, #436]	; 0x1b4
    190c:	ands.w	r3, r3, #65537	; 0x10001
    1910:	bne.n	1908 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1912:	uxth	r1, r0
    1914:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    1918:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    191c:	cmp	r1, r7
    191e:	bhi.w	1a8a <isr+0x1da>
    1922:	cmp.w	r1, #1664	; 0x680
    1926:	bcs.w	1cfc <isr+0x44c>
    192a:	cmp.w	r1, #258	; 0x102
    192e:	beq.w	1c08 <isr+0x358>
    1932:	bhi.w	1b16 <isr+0x266>
    1936:	cmp	r1, #128	; 0x80
    1938:	beq.w	1bee <isr+0x33e>
    193c:	cmp	r1, #130	; 0x82
    193e:	bne.w	1b06 <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1942:	uxth	r2, r2
    1944:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1948:	cmp	r1, #7
    194a:	bhi.w	1b06 <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    194e:	lsls	r1, r1, #2
    1950:	ldr	r0, [pc, #540]	; (1b70 <isr+0x2c0>)
		reply_buffer[0] = 0;
    1952:	ldr	r7, [pc, #544]	; (1b74 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1954:	add	r0, r1
    1956:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1958:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    195a:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    195c:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    195e:	bpl.w	1d7a <isr+0x4ca>
    1962:	lsls	r2, r1, #15
    1964:	bpl.n	196a <isr+0xba>
			reply_buffer[0] = 1;
    1966:	movs	r3, #1
    1968:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    196a:	movs	r1, #2
    196c:	ldr	r0, [pc, #516]	; (1b74 <isr+0x2c4>)
    196e:	bl	1810 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1972:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1976:	cmp	r3, #0
    1978:	bne.n	18dc <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    197a:	ldr	r2, [pc, #492]	; (1b68 <isr+0x2b8>)
    197c:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1980:	cmp	r3, #0
    1982:	bne.n	1a26 <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    1984:	tst.w	r8, #64	; 0x40
    1988:	beq.n	19bc <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    198a:	ldr	r3, [pc, #476]	; (1b68 <isr+0x2b8>)
    198c:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1990:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1992:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1996:	ldr.w	r1, [r3, #444]	; 0x1bc
    199a:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    199e:	ldr.w	r4, [r2, #432]	; 0x1b0
    19a2:	ldr	r3, [pc, #452]	; (1b68 <isr+0x2b8>)
    19a4:	cmp	r4, #0
    19a6:	bne.n	199e <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    19a8:	mov.w	r2, #4294967295
    19ac:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    19b0:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    19b4:	bl	135c <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    19b8:	ldr	r3, [pc, #444]	; (1b78 <isr+0x2c8>)
    19ba:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    19bc:	tst.w	r8, #16777216	; 0x1000000
    19c0:	beq.n	19ca <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    19c2:	ldr	r3, [pc, #440]	; (1b7c <isr+0x2cc>)
    19c4:	ldr	r3, [r3, #0]
    19c6:	cbz	r3, 19ca <isr+0x11a>
    19c8:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    19ca:	tst.w	r8, #33554432	; 0x2000000
    19ce:	beq.n	19d8 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    19d0:	ldr	r3, [pc, #428]	; (1b80 <isr+0x2d0>)
    19d2:	ldr	r3, [r3, #0]
    19d4:	cbz	r3, 19d8 <isr+0x128>
    19d6:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    19d8:	tst.w	r8, #4
    19dc:	beq.n	19f0 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    19de:	ldr	r3, [pc, #392]	; (1b68 <isr+0x2b8>)
    19e0:	ldr.w	r3, [r3, #388]	; 0x184
    19e4:	ands.w	r3, r3, #512	; 0x200
    19e8:	beq.n	1a84 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    19ea:	ldr	r3, [pc, #408]	; (1b84 <isr+0x2d4>)
    19ec:	movs	r2, #1
    19ee:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    19f0:	ldr	r3, [pc, #372]	; (1b68 <isr+0x2b8>)
    19f2:	ldr.w	r2, [r3, #328]	; 0x148
    19f6:	lsls	r2, r2, #24
    19f8:	bpl.n	1a20 <isr+0x170>
    19fa:	tst.w	r8, #128	; 0x80
    19fe:	beq.n	1a20 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    1a00:	ldr	r1, [pc, #388]	; (1b88 <isr+0x2d8>)
    1a02:	ldrb	r2, [r1, #0]
    1a04:	cbz	r2, 1a20 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    1a06:	subs	r2, #1
    1a08:	uxtb	r2, r2
    1a0a:	strb	r2, [r1, #0]
    1a0c:	cbnz	r2, 1a20 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    1a0e:	ldr	r1, [pc, #380]	; (1b8c <isr+0x2dc>)
    1a10:	ldrb	r2, [r1, #0]
    1a12:	and.w	r2, r2, #251	; 0xfb
    1a16:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    1a18:	cmp	r2, #0
    1a1a:	beq.w	1e82 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    1a1e:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    1a20:	add	sp, #12
    1a22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1a26:	ldr	r1, [pc, #360]	; (1b90 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    1a28:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1a2c:	ldr	r0, [r1, #0]
    1a2e:	tst	r3, r0
    1a30:	bne.w	1e00 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    1a34:	ldr	r2, [pc, #320]	; (1b78 <isr+0x2c8>)
    1a36:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    1a38:	ands	r5, r3
    1a3a:	beq.n	1984 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    1a3c:	lsrs	r7, r5, #16
    1a3e:	beq.n	1a60 <isr+0x1b0>
    1a40:	ldr	r6, [pc, #296]	; (1b6c <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    1a42:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    1a46:	rbit	r4, r7
    1a4a:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1a4e:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    1a52:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1a56:	adds	r0, #64	; 0x40
    1a58:	bl	17d8 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    1a5c:	bics	r7, r4
    1a5e:	bne.n	1a46 <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    1a60:	uxth	r5, r5
				while(rx) {
    1a62:	cmp	r5, #0
    1a64:	beq.n	1984 <isr+0xd4>
    1a66:	ldr	r6, [pc, #260]	; (1b6c <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    1a68:	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    1a6a:	rbit	r4, r5
    1a6e:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    1a72:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    1a76:	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    1a7a:	bl	17d8 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    1a7e:	bics	r5, r4
    1a80:	bne.n	1a6a <isr+0x1ba>
    1a82:	b.n	1984 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    1a84:	ldr	r2, [pc, #252]	; (1b84 <isr+0x2d4>)
    1a86:	strb	r3, [r2, #0]
    1a88:	b.n	19f0 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1a8a:	movw	r7, #8225	; 0x2021
    1a8e:	cmp	r1, r7
    1a90:	beq.n	1afe <isr+0x24e>
    1a92:	bhi.w	1ba8 <isr+0x2f8>
    1a96:	cmp.w	r1, #2176	; 0x880
    1a9a:	beq.w	1ce0 <isr+0x430>
    1a9e:	cmp.w	r1, #2304	; 0x900
    1aa2:	bne.n	1b06 <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1aa4:	ubfx	r0, r0, #16, #8
    1aa8:	ldr	r2, [pc, #232]	; (1b94 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1aaa:	ldr	r1, [pc, #236]	; (1b98 <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1aac:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1aae:	ldr	r7, [pc, #236]	; (1b9c <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1ab0:	ldr	r2, [pc, #236]	; (1ba0 <isr+0x2f0>)
    1ab2:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1ab4:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1ab8:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1abc:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    1ac0:	bl	1360 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1ac4:	ldr	r2, [pc, #220]	; (1ba4 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1ac6:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1ac8:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1aca:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1acc:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1ace:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1ad0:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1ad2:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1ad4:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1ad8:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1adc:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1ade:	orr.w	r2, r1, #65536	; 0x10000
    1ae2:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1ae6:	ldr	r2, [pc, #168]	; (1b90 <isr+0x2e0>)
    1ae8:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    1aea:	ldr.w	r3, [r4, #432]	; 0x1b0
    1aee:	cmp	r3, #0
    1af0:	bne.n	1aea <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1af2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1af6:	cmp	r3, #0
    1af8:	bne.w	18dc <isr+0x2c>
    1afc:	b.n	197a <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    1afe:	lsrs	r1, r2, #16
    1b00:	cmp	r1, #7
    1b02:	beq.w	1d82 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    1b06:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1b0a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1b0e:	cmp	r3, #0
    1b10:	bne.w	18dc <isr+0x2c>
    1b14:	b.n	197a <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1b16:	movw	r7, #770	; 0x302
    1b1a:	cmp	r1, r7
    1b1c:	beq.w	1c80 <isr+0x3d0>
    1b20:	cmp.w	r1, #1280	; 0x500
    1b24:	bne.n	1b06 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b26:	ldr	r2, [pc, #124]	; (1ba4 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1b28:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b2a:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1b2c:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1b2e:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b30:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1b32:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1b34:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1b38:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1b3c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1b3e:	orr.w	r3, r1, #65536	; 0x10000
    1b42:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1b46:	ldr.w	r3, [r4, #432]	; 0x1b0
    1b4a:	cmp	r3, #0
    1b4c:	bne.n	1b46 <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1b4e:	lsrs	r3, r0, #16
    1b50:	lsls	r3, r3, #25
    1b52:	orr.w	r3, r3, #16777216	; 0x1000000
    1b56:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1b5a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1b5e:	cmp	r3, #0
    1b60:	bne.w	18dc <isr+0x2c>
    1b64:	b.n	197a <isr+0xca>
    1b66:	nop
    1b68:	.word	0x402e0000
    1b6c:	.word	0x20003000
    1b70:	.word	0x402e01c0
    1b74:	.word	0x200012a8
    1b78:	.word	0x20001284
    1b7c:	.word	0x20001280
    1b80:	.word	0x2000128c
    1b84:	.word	0x20001290
    1b88:	.word	0x20001298
    1b8c:	.word	0x20001288
    1b90:	.word	0x20001294
    1b94:	.word	0x200012b8
    1b98:	.word	0x000200c8
    1b9c:	.word	0x00cc0002
    1ba0:	.word	0x00c80002
    1ba4:	.word	0x20002020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1ba8:	movw	r3, #8737	; 0x2221
    1bac:	cmp	r1, r3
    1bae:	beq.n	1c68 <isr+0x3b8>
    1bb0:	movw	r3, #8993	; 0x2321
    1bb4:	cmp	r1, r3
    1bb6:	bne.n	1b06 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1bb8:	ldr	r3, [pc, #724]	; (1e90 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1bba:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    1bbc:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1bbe:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1bc0:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1bc2:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1bc4:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1bc6:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1bc8:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1bcc:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1bd0:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1bd2:	orr.w	r3, r2, #65536	; 0x10000
    1bd6:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1bda:	ldr.w	r3, [r4, #432]	; 0x1b0
    1bde:	cmp	r3, #0
    1be0:	bne.n	1bda <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1be2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1be6:	cmp	r3, #0
    1be8:	bne.w	18dc <isr+0x2c>
    1bec:	b.n	197a <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1bee:	ldr	r2, [pc, #676]	; (1e94 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    1bf0:	movs	r1, #2
    1bf2:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1bf4:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    1bf6:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    1bf8:	bl	1810 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1bfc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1c00:	cmp	r3, #0
    1c02:	bne.w	18dc <isr+0x2c>
    1c06:	b.n	197a <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1c08:	uxth	r2, r2
    1c0a:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1c0e:	cmp	r3, #7
    1c10:	bhi.w	1b06 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1c14:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1c18:	mov.w	r3, r3, lsl #2
    1c1c:	ldr	r2, [pc, #632]	; (1e98 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1c1e:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1c22:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1c26:	add	r2, r3
    1c28:	ldr	r3, [r2, #0]
    1c2a:	ite	ne
    1c2c:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1c30:	biceq.w	r3, r3, #1
    1c34:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c36:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1c38:	ldr	r3, [pc, #596]	; (1e90 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1c3a:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1c3c:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1c3e:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c40:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1c42:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1c46:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1c4a:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1c4c:	orr.w	r3, r2, #65536	; 0x10000
    1c50:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1c54:	ldr.w	r3, [r4, #432]	; 0x1b0
    1c58:	cmp	r3, #0
    1c5a:	bne.n	1c54 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1c5c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1c60:	cmp	r3, #0
    1c62:	bne.w	18dc <isr+0x2c>
    1c66:	b.n	197a <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    1c68:	uxth	r2, r2
    1c6a:	cmp	r2, #0
    1c6c:	bne.n	1bb8 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1c6e:	ldr	r3, [pc, #556]	; (1e9c <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    1c70:	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1c74:	ldr	r2, [pc, #552]	; (1ea0 <isr+0x5f0>)
    1c76:	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1c78:	ldr	r3, [pc, #552]	; (1ea4 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1c7a:	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1c7c:	strb	r0, [r3, #0]
    1c7e:	b.n	1bb8 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1c80:	uxth	r2, r2
    1c82:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1c86:	cmp	r3, #7
    1c88:	bhi.w	1b06 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1c8c:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1c90:	mov.w	r3, r3, lsl #2
    1c94:	ldr	r2, [pc, #512]	; (1e98 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1c96:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1c9a:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1c9e:	add	r2, r3
    1ca0:	ldr	r3, [r2, #0]
    1ca2:	ite	ne
    1ca4:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1ca8:	orreq.w	r3, r3, #1
    1cac:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1cae:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1cb0:	ldr	r3, [pc, #476]	; (1e90 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1cb2:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1cb4:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1cb6:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1cb8:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1cba:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1cbe:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1cc2:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1cc4:	orr.w	r3, r2, #65536	; 0x10000
    1cc8:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1ccc:	ldr.w	r3, [r4, #432]	; 0x1b0
    1cd0:	cmp	r3, #0
    1cd2:	bne.n	1ccc <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1cd4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1cd8:	cmp	r3, #0
    1cda:	bne.w	18dc <isr+0x2c>
    1cde:	b.n	197a <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1ce0:	ldr	r2, [pc, #452]	; (1ea8 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1ce2:	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1ce4:	ldr	r3, [pc, #428]	; (1e94 <isr+0x5e4>)
    1ce6:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1ce8:	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1cea:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1cec:	bl	1810 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1cf0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1cf4:	cmp	r3, #0
    1cf6:	bne.w	18dc <isr+0x2c>
    1cfa:	b.n	197a <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1cfc:	ldr	r3, [pc, #428]	; (1eac <isr+0x5fc>)
    1cfe:	ldr	r1, [r3, #4]
    1d00:	cmp	r1, #0
    1d02:	beq.w	1b06 <isr+0x256>
    1d06:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1d08:	uxth.w	lr, r2
    1d0c:	b.n	1d18 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1d0e:	adds	r3, #12
    1d10:	ldr	r1, [r3, #4]
    1d12:	cmp	r1, #0
    1d14:	beq.w	1b06 <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1d18:	ldrh	r7, [r3, #0]
    1d1a:	cmp	r7, r0
    1d1c:	bne.n	1d0e <isr+0x45e>
    1d1e:	ldrh	r7, [r3, #2]
    1d20:	cmp	r7, lr
    1d22:	bne.n	1d0e <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    1d24:	lsrs	r7, r0, #8
    1d26:	cmp	r7, #3
    1d28:	beq.w	1efe <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    1d2c:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1d2e:	lsrs	r2, r2, #16
    1d30:	cmp	r3, r2
    1d32:	it	cs
    1d34:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    1d36:	cmp.w	r0, #512	; 0x200
    1d3a:	beq.w	1ee0 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    1d3e:	cmp.w	r0, #1792	; 0x700
    1d42:	beq.w	1e5c <isr+0x5ac>
    1d46:	ldr	r7, [pc, #360]	; (1eb0 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1d48:	mov	r2, r3
    1d4a:	str	r3, [sp, #4]
    1d4c:	mov	r0, r7
    1d4e:	bl	ef4 <memcpy>
    1d52:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1d54:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1d58:	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    1d5a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1d5e:	ldr	r1, [pc, #340]	; (1eb4 <isr+0x604>)
    1d60:	str	r2, [r1, #0]
		location += 32;
    1d62:	adds	r2, #32
	} while (location < end_addr);
    1d64:	cmp	r7, r2
    1d66:	bhi.n	1d5e <isr+0x4ae>
	asm("dsb");
    1d68:	dsb	sy
	asm("isb");
    1d6c:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1d70:	ldr	r0, [pc, #316]	; (1eb0 <isr+0x600>)
    1d72:	mov	r1, r3
    1d74:	bl	1810 <endpoint0_transmit.constprop.1>
    1d78:	b.n	1972 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1d7a:	lsls	r3, r1, #31
    1d7c:	bpl.w	196a <isr+0xba>
    1d80:	b.n	1966 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1d82:	ldr	r7, [pc, #308]	; (1eb8 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1d84:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    1d88:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1d8a:	ldr	r1, [pc, #304]	; (1ebc <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1d8c:	ldr	r3, [pc, #304]	; (1ec0 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1d8e:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1d90:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1d94:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1d96:	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    1d98:	ldr	r1, [pc, #296]	; (1ec4 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1d9a:	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1d9e:	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1da0:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1da4:	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1da8:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1daa:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1dae:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1db2:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1db6:	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1dba:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1dbc:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1dc0:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1dc2:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    1dc4:	ldr.w	r3, [r4, #432]	; 0x1b0
    1dc8:	cmp	r3, #0
    1dca:	bne.n	1dc4 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    1dcc:	ldr	r2, [pc, #192]	; (1e90 <isr+0x5e0>)
    1dce:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1dd0:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1dd4:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1dd6:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1dd8:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1ddc:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1dde:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1de0:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1de4:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1de8:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1dea:	orr.w	r3, r1, r0
    1dee:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1df2:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    1df6:	ldr.w	r3, [r4, #432]	; 0x1b0
    1dfa:	cmp	r3, #0
    1dfc:	bne.n	1df6 <isr+0x546>
    1dfe:	b.n	1972 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1e00:	ldr	r0, [pc, #180]	; (1eb8 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1e02:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1e06:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1e08:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1e0a:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1e0c:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1e0e:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1e10:	bne.w	1a34 <isr+0x184>
    1e14:	uxth	r1, r0
    1e16:	cmp	r1, #0
    1e18:	bne.w	1a34 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1e1c:	ldr	r1, [pc, #164]	; (1ec4 <isr+0x614>)
    1e1e:	ldr	r4, [pc, #168]	; (1ec8 <isr+0x618>)
    1e20:	ldmia	r1, {r0, r1}
    1e22:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1e24:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1e26:	str	r0, [r4, #0]
    1e28:	strh	r1, [r4, #4]
    1e2a:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1e2c:	bne.w	1a34 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    1e30:	cpsid	i
	sof_usage |= (1 << interface);
    1e32:	ldr	r0, [pc, #152]	; (1ecc <isr+0x61c>)
    1e34:	ldrb	r1, [r0, #0]
    1e36:	orr.w	r1, r1, #4
    1e3a:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1e3c:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1e40:	lsls	r0, r1, #24
    1e42:	bmi.n	1e52 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1e44:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1e48:	movs	r0, #128	; 0x80
    1e4a:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1e4e:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    1e52:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1e54:	ldr	r2, [pc, #120]	; (1ed0 <isr+0x620>)
    1e56:	movs	r1, #80	; 0x50
    1e58:	strb	r1, [r2, #0]
    1e5a:	b.n	1a34 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1e5c:	ldr	r0, [pc, #116]	; (1ed4 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1e5e:	mov	r2, r3
    1e60:	ldr	r7, [pc, #76]	; (1eb0 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1e62:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    1e66:	ldr	r1, [pc, #112]	; (1ed8 <isr+0x628>)
    1e68:	ldr	r0, [pc, #112]	; (1edc <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    1e6a:	str	r3, [sp, #4]
    1e6c:	cmp.w	lr, #0
    1e70:	it	eq
    1e72:	moveq	r1, r0
    1e74:	mov	r0, r7
    1e76:	bl	ef4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    1e7a:	movs	r2, #7
    1e7c:	ldr	r3, [sp, #4]
    1e7e:	strb	r2, [r7, #1]
    1e80:	b.n	1d54 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1e82:	ldr.w	r2, [r3, #328]	; 0x148
    1e86:	bic.w	r2, r2, #128	; 0x80
    1e8a:	str.w	r2, [r3, #328]	; 0x148
    1e8e:	b.n	1a1e <isr+0x16e>
    1e90:	.word	0x20002020
    1e94:	.word	0x200012a8
    1e98:	.word	0x402e01c0
    1e9c:	.word	0x20001070
    1ea0:	.word	0x20001310
    1ea4:	.word	0x200011e8
    1ea8:	.word	0x200012b8
    1eac:	.word	0x20000334
    1eb0:	.word	0x20203000
    1eb4:	.word	0xe000ef70
    1eb8:	.word	0x200012a0
    1ebc:	.word	0x00070080
    1ec0:	.word	0x20002000
    1ec4:	.word	0x200012b0
    1ec8:	.word	0x20001308
    1ecc:	.word	0x20001288
    1ed0:	.word	0x20001298
    1ed4:	.word	0x20001290
    1ed8:	.word	0x60001698
    1edc:	.word	0x600016dc

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    1ee0:	ldr	r0, [pc, #40]	; (1f0c <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1ee2:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1ee4:	ldr	r1, [pc, #40]	; (1f10 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    1ee6:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1ee8:	ldr	r0, [pc, #40]	; (1f14 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    1eea:	str	r3, [sp, #4]
    1eec:	cmp	r7, #0
    1eee:	it	eq
    1ef0:	moveq	r1, r0
    1ef2:	ldr	r0, [pc, #36]	; (1f18 <isr+0x668>)
    1ef4:	bl	ef4 <memcpy>
    1ef8:	ldr	r7, [pc, #28]	; (1f18 <isr+0x668>)
    1efa:	ldr	r3, [sp, #4]
    1efc:	b.n	1d54 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1efe:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    1f00:	ldrb	r3, [r1, #0]
    1f02:	cmp	r3, r2
    1f04:	it	cs
    1f06:	movcs	r3, r2
    1f08:	b.n	1d3e <isr+0x48e>
    1f0a:	nop
    1f0c:	.word	0x20001290
    1f10:	.word	0x600016dc
    1f14:	.word	0x60001698
    1f18:	.word	0x20203000

00001f1c <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1f1c:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1f1e:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1f22:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1f26:	ite	ne
    1f28:	movne	r7, #0
    1f2a:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1f2e:	cmp	r2, #2
    1f30:	bls.n	1f36 <usb_config_rx+0x1a>
    1f32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1f36:	mov.w	sl, r0, lsl #7
    1f3a:	ldr.w	r9, [pc, #64]	; 1f7c <usb_config_rx+0x60>
    1f3e:	mov	r5, r1
    1f40:	mov	r4, r0
    1f42:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1f46:	movs	r1, #0
    1f48:	movs	r2, #64	; 0x40
    1f4a:	mov	r8, r3
    1f4c:	mov	r0, r6
    1f4e:	bl	2bc0 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1f52:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1f54:	orr.w	r1, r7, r5, lsl #16
    1f58:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1f5c:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1f60:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1f62:	cmp.w	r8, #0
    1f66:	beq.n	1f32 <usb_config_rx+0x16>
    1f68:	ldr	r3, [pc, #12]	; (1f78 <usb_config_rx+0x5c>)
    1f6a:	lsls	r0, r4
    1f6c:	ldr	r4, [r3, #0]
    1f6e:	orrs	r0, r4
    1f70:	str	r0, [r3, #0]
    1f72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f76:	nop
    1f78:	.word	0x20001284
    1f7c:	.word	0x20003000

00001f80 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1f80:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1f82:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1f86:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1f8a:	ite	ne
    1f8c:	movne	r7, #0
    1f8e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1f92:	cmp	r2, #2
    1f94:	bls.n	1f9a <usb_config_tx+0x1a>
    1f96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1f9a:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1f9c:	lsls	r5, r0, #7
    1f9e:	ldr.w	r9, [pc, #68]	; 1fe4 <usb_config_tx+0x64>
    1fa2:	mov	r8, r1
    1fa4:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1fa6:	movs	r1, #0
    1fa8:	mov	r4, r0
    1faa:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1fac:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1fb0:	mov	r0, sl
    1fb2:	bl	2bc0 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1fb6:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1fb8:	orr.w	r1, r7, r8, lsl #16
    1fbc:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1fc0:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1fc4:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1fc8:	cmp	r6, #0
    1fca:	beq.n	1f96 <usb_config_tx+0x16>
    1fcc:	add.w	r0, r4, #16
    1fd0:	ldr	r3, [pc, #12]	; (1fe0 <usb_config_tx+0x60>)
    1fd2:	lsls	r2, r0
    1fd4:	ldr	r0, [r3, #0]
    1fd6:	orrs	r2, r0
    1fd8:	str	r2, [r3, #0]
    1fda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1fde:	nop
    1fe0:	.word	0x20001284
    1fe4:	.word	0x20003000

00001fe8 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1fe8:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1fea:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1fec:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1fee:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    1ff2:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1ff4:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1ff6:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1ff8:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1ffc:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    2000:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    2004:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    2008:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    200a:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    200c:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    200e:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    2010:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    2012:	pop	{r4, r5, r6, r7}
    2014:	bx	lr
    2016:	nop

00002018 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2018:	subs	r3, r0, #2
    201a:	cmp	r3, #2
    201c:	bls.n	2020 <usb_transmit+0x8>
    201e:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    2020:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    2022:	ldr	r3, [pc, #24]	; (203c <usb_transmit+0x24>)
    2024:	add.w	r4, r0, #16
    2028:	movs	r5, #1
    202a:	mov	r2, r1
    202c:	add.w	r0, r3, r0, lsl #7
    2030:	lsl.w	r1, r5, r4
}
    2034:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    2036:	b.w	1768 <schedule_transfer>
    203a:	nop
    203c:	.word	0x20003040

00002040 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2040:	subs	r3, r0, #2
    2042:	cmp	r3, #2
    2044:	bls.n	2048 <usb_receive+0x8>
    2046:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    2048:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    204a:	ldr	r3, [pc, #20]	; (2060 <usb_receive+0x20>)
    204c:	movs	r4, #1
    204e:	mov	r2, r1
    2050:	lsl.w	r1, r4, r0
    2054:	add.w	r0, r3, r0, lsl #7
}
    2058:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    205c:	b.w	1768 <schedule_transfer>
    2060:	.word	0x20003000

00002064 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    2064:	ldr	r0, [r0, #4]
#endif
}
    2066:	bx	lr

00002068 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2068:	ldr	r2, [pc, #72]	; (20b4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    206a:	ldr	r3, [pc, #76]	; (20b8 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    206c:	ldr.w	r0, [r2, #544]	; 0x220
    2070:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2074:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    2076:	push	{r4, lr}
    2078:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    207a:	bhi.n	2082 <usb_init_serialnumber+0x1a>
    207c:	add.w	r0, r0, r0, lsl #2
    2080:	lsls	r0, r0, #1
    2082:	ldr	r4, [pc, #56]	; (20bc <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    2084:	add	r1, sp, #4
    2086:	movs	r2, #10
    2088:	bl	219c <ultoa>
    208c:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    208e:	movs	r3, #0
    2090:	mov	r0, r4
		char c = buf[i];
    2092:	ldrb.w	r2, [r1], #1
    2096:	adds	r3, #1
		if (!c) break;
    2098:	cbz	r2, 20aa <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    209a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    209c:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    20a0:	bne.n	2092 <usb_init_serialnumber+0x2a>
    20a2:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    20a4:	strb	r3, [r4, #0]
}
    20a6:	add	sp, #16
    20a8:	pop	{r4, pc}
    20aa:	lsls	r3, r3, #1
    20ac:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    20ae:	strb	r3, [r4, #0]
}
    20b0:	add	sp, #16
    20b2:	pop	{r4, pc}
    20b4:	.word	0x401f4400
    20b8:	.word	0x0098967f
    20bc:	.word	0x2000065c

000020c0 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    20c0:	movs	r0, #4
    20c2:	mov	r1, lr
    20c4:	tst	r0, r1
    20c6:	beq.n	20d0 <_MSP>
    20c8:	mrs	r0, PSP
    20cc:	b.w	20e0 <HardFault_HandlerC>

000020d0 <_MSP>:
    20d0:	mrs	r0, MSP
    20d4:	b.w	20e0 <HardFault_HandlerC>

000020d8 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    20d8:	bx	lr
    20da:	nop

000020dc <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    20dc:	bx	lr
    20de:	nop

000020e0 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    20e0:	ldr	r3, [pc, #108]	; (2150 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    20e2:	movs	r1, #5
    20e4:	ldr	r2, [pc, #108]	; (2154 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    20e6:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    20e8:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    20ea:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    20ee:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    20f0:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    20f4:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    20f6:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    20f8:	ldr	r4, [pc, #92]	; (2158 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    20fa:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    20fc:	ldr	r0, [pc, #92]	; (215c <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    20fe:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    2100:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    2104:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    2108:	ldr	r3, [r4, #0]
    210a:	cmp	r3, r0
    210c:	bls.n	2114 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    210e:	ldr	r0, [pc, #80]	; (2160 <HardFault_HandlerC+0x80>)
    2110:	bl	918 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    2114:	ldr	r5, [pc, #56]	; (2150 <HardFault_HandlerC+0x70>)
    2116:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2118:	movs	r0, #0
    211a:	ldr	r2, [pc, #72]	; (2164 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    211c:	ldr	r1, [pc, #72]	; (2168 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    211e:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2122:	str	r0, [sp, #4]
    2124:	ldr	r3, [sp, #4]
    2126:	cmp	r3, r2
    2128:	bhi.n	2136 <HardFault_HandlerC+0x56>
    212a:	ldr	r3, [sp, #4]
    212c:	adds	r3, #1
    212e:	str	r3, [sp, #4]
    2130:	ldr	r3, [sp, #4]
    2132:	cmp	r3, r2
    2134:	bls.n	212a <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    2136:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    213a:	str	r0, [sp, #4]
    213c:	ldr	r3, [sp, #4]
    213e:	cmp	r3, r1
    2140:	bhi.n	211e <HardFault_HandlerC+0x3e>
    2142:	ldr	r3, [sp, #4]
    2144:	adds	r3, #1
    2146:	str	r3, [sp, #4]
    2148:	ldr	r3, [sp, #4]
    214a:	cmp	r3, r1
    214c:	bls.n	2142 <HardFault_HandlerC+0x62>
    214e:	b.n	211e <HardFault_HandlerC+0x3e>
    2150:	.word	0x401bc000
    2154:	.word	0x401f8000
    2158:	.word	0x20000630
    215c:	.word	0x23c345ff
    2160:	.word	0x11e1a300
    2164:	.word	0x000f423f
    2168:	.word	0x0089543f

0000216c <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    216c:	ldr	r2, [pc, #36]	; (2194 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    216e:	push	{r3, lr}
        char *prev = __brkval;
    2170:	ldr	r3, [r2, #0]
        if (incr != 0) {
    2172:	cbz	r0, 217e <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    2174:	add	r0, r3
    2176:	ldr	r1, [pc, #32]	; (2198 <_sbrk+0x2c>)
    2178:	cmp	r0, r1
    217a:	bhi.n	2182 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    217c:	str	r0, [r2, #0]
        }
        return prev;
}
    217e:	mov	r0, r3
    2180:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    2182:	bl	24e0 <__errno>
    2186:	movs	r2, #12
                        return (void *)-1;
    2188:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    218c:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    218e:	mov	r0, r3
    2190:	pop	{r3, pc}
    2192:	nop
    2194:	.word	0x20000674
    2198:	.word	0x20280000

0000219c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    219c:	push	{r4, r5, r6, r7}
    219e:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    21a0:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    21a2:	mov	r7, r6
    21a4:	b.n	21a8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    21a6:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    21a8:	udiv	r3, r0, r2
    21ac:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    21b0:	add.w	r4, r0, #55	; 0x37
    21b4:	cmp	r0, #9
    21b6:	add.w	r0, r0, #48	; 0x30
    21ba:	uxtb	r4, r4
    21bc:	it	ls
    21be:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    21c0:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    21c2:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    21c6:	cmp	r3, #0
    21c8:	bne.n	21a6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    21ca:	adds	r2, r1, r5
    21cc:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    21ce:	cbz	r5, 21e4 <ultoa+0x48>
    21d0:	adds	r3, #1
		t = buf[j];
    21d2:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    21d6:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    21d8:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    21da:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    21dc:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    21de:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    21e2:	blt.n	21d0 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    21e4:	mov	r0, r1
    21e6:	pop	{r4, r5, r6, r7}
    21e8:	bx	lr
    21ea:	nop

000021ec <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    21ec:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    21ee:	ldr	r2, [pc, #24]	; (2208 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    21f0:	movs	r1, #7
    21f2:	ldr	r3, [pc, #24]	; (220c <Panic_Temp_isr+0x20>)
    21f4:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    21f6:	ldr	r3, [r2, #56]	; 0x38
    21f8:	orr.w	r3, r3, #64	; 0x40
    21fc:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    21fe:	dsb	sy
  while (1) asm ("wfi");
    2202:	wfi
    2204:	b.n	2202 <Panic_Temp_isr+0x16>
    2206:	nop
    2208:	.word	0x400d4000
    220c:	.word	0x400ac000

00002210 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2210:	ldr	r0, [pc, #656]	; (24a4 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2212:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2216:	ldr	r3, [pc, #656]	; (24a8 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2218:	ldr	r2, [r0, #120]	; 0x78
    221a:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    221e:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2220:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    2222:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2224:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2228:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    222c:	ldr	r4, [pc, #636]	; (24ac <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    222e:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2232:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2234:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2238:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    223a:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    223c:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2240:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2244:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2248:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    224c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2250:	ldrh.w	r0, [r3, #392]	; 0x188
    2254:	uxth	r0, r0
    2256:	orr.w	r0, r0, #240	; 0xf0
    225a:	strh.w	r0, [r3, #392]	; 0x188
    225e:	add.w	r0, r1, r1, lsl #1
    2262:	ldr	r3, [pc, #580]	; (24a8 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    2264:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2266:	movs	r5, #0
    2268:	lsls	r0, r0, #5
    226a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    226c:	cmp	r1, #4
    226e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2270:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2274:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    2276:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2278:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    227a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    227c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    227e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2280:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2282:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2284:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2286:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2288:	bne.n	225e <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    228a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    228e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2292:	ldr	r3, [pc, #540]	; (24b0 <pwm_init+0x2a0>)
    2294:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2298:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    229a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    229c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    22a0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    22a2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    22a6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    22aa:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    22ae:	ldrh.w	r0, [r4, #392]	; 0x188
    22b2:	uxth	r0, r0
    22b4:	orr.w	r0, r0, #3840	; 0xf00
    22b8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    22bc:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    22c0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    22c4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    22c8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    22cc:	ldrh.w	r0, [r3, #392]	; 0x188
    22d0:	uxth	r0, r0
    22d2:	orr.w	r0, r0, #240	; 0xf0
    22d6:	strh.w	r0, [r3, #392]	; 0x188
    22da:	add.w	r0, r1, r1, lsl #1
    22de:	ldr	r3, [pc, #464]	; (24b0 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    22e0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    22e2:	movs	r5, #0
    22e4:	lsls	r0, r0, #5
    22e6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    22e8:	cmp	r1, #4
    22ea:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    22ec:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    22ee:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    22f2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    22f4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    22f6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    22f8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    22fa:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    22fc:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    22fe:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2300:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2302:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2304:	bne.n	22da <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2306:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    230a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    230e:	ldr	r3, [pc, #420]	; (24b4 <pwm_init+0x2a4>)
    2310:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2314:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2316:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2318:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    231c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    231e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2322:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2326:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    232a:	ldrh.w	r0, [r4, #392]	; 0x188
    232e:	uxth	r0, r0
    2330:	orr.w	r0, r0, #3840	; 0xf00
    2334:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2338:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    233c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2340:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2344:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2348:	ldrh.w	r0, [r3, #392]	; 0x188
    234c:	uxth	r0, r0
    234e:	orr.w	r0, r0, #240	; 0xf0
    2352:	strh.w	r0, [r3, #392]	; 0x188
    2356:	add.w	r0, r1, r1, lsl #1
    235a:	ldr	r3, [pc, #344]	; (24b4 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    235c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    235e:	movs	r5, #0
    2360:	lsls	r0, r0, #5
    2362:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2364:	cmp	r1, #4
    2366:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2368:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    236a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    236e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2370:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2372:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2374:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2376:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2378:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    237a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    237c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    237e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2380:	bne.n	2356 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2382:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2386:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    238a:	ldr	r3, [pc, #300]	; (24b8 <pwm_init+0x2a8>)
    238c:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2390:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2392:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2394:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2398:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    239a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    239e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    23a2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    23a6:	ldrh.w	r0, [r4, #392]	; 0x188
    23aa:	uxth	r0, r0
    23ac:	orr.w	r0, r0, #3840	; 0xf00
    23b0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    23b4:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    23b8:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    23bc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    23c0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    23c4:	ldrh.w	r0, [r3, #392]	; 0x188
    23c8:	uxth	r0, r0
    23ca:	orr.w	r0, r0, #240	; 0xf0
    23ce:	strh.w	r0, [r3, #392]	; 0x188
    23d2:	add.w	r0, r1, r1, lsl #1
    23d6:	ldr	r3, [pc, #224]	; (24b8 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    23d8:	adds	r1, #1
    23da:	lsls	r0, r0, #5
    23dc:	mov	r4, r3
    23de:	cmp	r1, #4
    23e0:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    23e2:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    23e4:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    23e8:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    23ea:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    23ec:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    23ee:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    23f0:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    23f2:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    23f4:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    23f6:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    23f8:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    23fa:	bne.n	23d2 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    23fc:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2400:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2402:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2404:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2408:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    240a:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    240e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2410:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2414:	orrs	r3, r7
    2416:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    241a:	ldrh.w	r3, [r4, #392]	; 0x188
    241e:	uxth	r3, r3
    2420:	orr.w	r3, r3, #3840	; 0xf00
    2424:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2428:	lsls	r0, r2, #5
    242a:	ldr	r3, [pc, #144]	; (24bc <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    242c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    242e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2430:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2432:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2434:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2436:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2438:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    243a:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    243e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2440:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2442:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2444:	bne.n	2428 <pwm_init+0x218>
    2446:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2448:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    244a:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    244e:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2452:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2454:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2458:	lsls	r0, r2, #5
    245a:	ldr	r3, [pc, #100]	; (24c0 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    245c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    245e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2460:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2462:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2464:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2466:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2468:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    246a:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    246c:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    246e:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2470:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2472:	bne.n	2458 <pwm_init+0x248>
    2474:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2476:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2478:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    247c:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2480:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2482:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2486:	lsls	r0, r2, #5
    2488:	ldr	r3, [pc, #56]	; (24c4 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    248a:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    248c:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    248e:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2490:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2492:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2494:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2496:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2498:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    249a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    249c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    249e:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24a0:	bne.n	2486 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    24a2:	pop	{r4, r5, r6, r7, pc}
    24a4:	.word	0x400fc000
    24a8:	.word	0x403dc000
    24ac:	.word	0xfc030000
    24b0:	.word	0x403e0000
    24b4:	.word	0x403e4000
    24b8:	.word	0x403e8000
    24bc:	.word	0x401dc000
    24c0:	.word	0x401e0000
    24c4:	.word	0x401e4000

000024c8 <__aeabi_atexit>:
    24c8:	mov	r3, r1
    24ca:	mov	r1, r0
    24cc:	mov	r0, r3
    24ce:	b.w	24d4 <__cxa_atexit>
    24d2:	nop

000024d4 <__cxa_atexit>:
    24d4:	mov	r3, r2
    24d6:	mov	r2, r1
    24d8:	mov	r1, r0
    24da:	movs	r0, #2
    24dc:	b.w	3208 <__register_exitproc>

000024e0 <__errno>:
    24e0:	ldr	r3, [pc, #4]	; (24e8 <__errno+0x8>)
    24e2:	ldr	r0, [r3, #0]
    24e4:	bx	lr
    24e6:	nop
    24e8:	.word	0x20000aa0

000024ec <__libc_init_array>:
    24ec:	push	{r4, r5, r6, lr}
    24ee:	ldr	r6, [pc, #60]	; (252c <__libc_init_array+0x40>)
    24f0:	ldr	r5, [pc, #60]	; (2530 <__libc_init_array+0x44>)
    24f2:	subs	r6, r6, r5
    24f4:	asrs	r6, r6, #2
    24f6:	it	ne
    24f8:	movne	r4, #0
    24fa:	beq.n	2508 <__libc_init_array+0x1c>
    24fc:	adds	r4, #1
    24fe:	ldr.w	r3, [r5], #4
    2502:	blx	r3
    2504:	cmp	r6, r4
    2506:	bne.n	24fc <__libc_init_array+0x10>
    2508:	ldr	r6, [pc, #40]	; (2534 <__libc_init_array+0x48>)
    250a:	ldr	r5, [pc, #44]	; (2538 <__libc_init_array+0x4c>)
    250c:	subs	r6, r6, r5
    250e:	bl	6400 <___init_veneer>
    2512:	asrs	r6, r6, #2
    2514:	it	ne
    2516:	movne	r4, #0
    2518:	beq.n	2528 <__libc_init_array+0x3c>
    251a:	adds	r4, #1
    251c:	ldr.w	r3, [r5], #4
    2520:	blx	r3
    2522:	cmp	r6, r4
    2524:	bne.n	251a <__libc_init_array+0x2e>
    2526:	pop	{r4, r5, r6, pc}
    2528:	pop	{r4, r5, r6, pc}
    252a:	nop
    252c:	.word	0x60001780
    2530:	.word	0x60001780
    2534:	.word	0x60001788
    2538:	.word	0x60001780

0000253c <malloc>:
    253c:	ldr	r3, [pc, #8]	; (2548 <malloc+0xc>)
    253e:	mov	r1, r0
    2540:	ldr	r0, [r3, #0]
    2542:	b.w	255c <_malloc_r>
    2546:	nop
    2548:	.word	0x20000aa0

0000254c <free>:
    254c:	ldr	r3, [pc, #8]	; (2558 <free+0xc>)
    254e:	mov	r1, r0
    2550:	ldr	r0, [r3, #0]
    2552:	b.w	3348 <_free_r>
    2556:	nop
    2558:	.word	0x20000aa0

0000255c <_malloc_r>:
    255c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2560:	add.w	r5, r1, #11
    2564:	cmp	r5, #22
    2566:	sub	sp, #12
    2568:	mov	r6, r0
    256a:	bls.w	26ac <_malloc_r+0x150>
    256e:	bics.w	r5, r5, #7
    2572:	bmi.w	26f4 <_malloc_r+0x198>
    2576:	cmp	r1, r5
    2578:	bhi.w	26f4 <_malloc_r+0x198>
    257c:	bl	2c5c <__malloc_lock>
    2580:	cmp.w	r5, #504	; 0x1f8
    2584:	bcc.w	2ac0 <_malloc_r+0x564>
    2588:	lsrs	r3, r5, #9
    258a:	beq.w	2702 <_malloc_r+0x1a6>
    258e:	cmp	r3, #4
    2590:	bhi.w	289a <_malloc_r+0x33e>
    2594:	lsrs	r0, r5, #6
    2596:	add.w	lr, r0, #57	; 0x39
    259a:	mov.w	r3, lr, lsl #1
    259e:	adds	r0, #56	; 0x38
    25a0:	ldr	r7, [pc, #784]	; (28b4 <_malloc_r+0x358>)
    25a2:	add.w	r3, r7, r3, lsl #2
    25a6:	sub.w	r1, r3, #8
    25aa:	ldr	r4, [r3, #4]
    25ac:	cmp	r1, r4
    25ae:	bne.n	25c0 <_malloc_r+0x64>
    25b0:	b.n	270c <_malloc_r+0x1b0>
    25b2:	cmp	r2, #0
    25b4:	bge.w	2710 <_malloc_r+0x1b4>
    25b8:	ldr	r4, [r4, #12]
    25ba:	cmp	r1, r4
    25bc:	beq.w	270c <_malloc_r+0x1b0>
    25c0:	ldr	r3, [r4, #4]
    25c2:	bic.w	r3, r3, #3
    25c6:	subs	r2, r3, r5
    25c8:	cmp	r2, #15
    25ca:	ble.n	25b2 <_malloc_r+0x56>
    25cc:	ldr	r1, [pc, #740]	; (28b4 <_malloc_r+0x358>)
    25ce:	ldr	r4, [r7, #16]
    25d0:	add.w	lr, r1, #8
    25d4:	cmp	r4, lr
    25d6:	beq.w	2940 <_malloc_r+0x3e4>
    25da:	ldr	r3, [r4, #4]
    25dc:	bic.w	r3, r3, #3
    25e0:	subs	r2, r3, r5
    25e2:	cmp	r2, #15
    25e4:	bgt.w	291a <_malloc_r+0x3be>
    25e8:	cmp	r2, #0
    25ea:	str.w	lr, [r1, #20]
    25ee:	str.w	lr, [r1, #16]
    25f2:	bge.w	2732 <_malloc_r+0x1d6>
    25f6:	cmp.w	r3, #512	; 0x200
    25fa:	bcs.w	28cc <_malloc_r+0x370>
    25fe:	lsrs	r3, r3, #3
    2600:	add.w	ip, r3, #1
    2604:	movs	r2, #1
    2606:	asrs	r3, r3, #2
    2608:	lsl.w	r3, r2, r3
    260c:	ldr	r2, [r1, #4]
    260e:	ldr.w	r8, [r1, ip, lsl #3]
    2612:	str.w	r8, [r4, #8]
    2616:	add.w	r9, r1, ip, lsl #3
    261a:	orrs	r2, r3
    261c:	sub.w	r3, r9, #8
    2620:	str	r3, [r4, #12]
    2622:	str	r2, [r1, #4]
    2624:	str.w	r4, [r1, ip, lsl #3]
    2628:	str.w	r4, [r8, #12]
    262c:	asrs	r3, r0, #2
    262e:	movs	r4, #1
    2630:	lsls	r4, r3
    2632:	cmp	r4, r2
    2634:	bhi.w	274c <_malloc_r+0x1f0>
    2638:	tst	r4, r2
    263a:	bne.n	264a <_malloc_r+0xee>
    263c:	bic.w	r0, r0, #3
    2640:	lsls	r4, r4, #1
    2642:	tst	r4, r2
    2644:	add.w	r0, r0, #4
    2648:	beq.n	2640 <_malloc_r+0xe4>
    264a:	add.w	r9, r7, r0, lsl #3
    264e:	mov	ip, r9
    2650:	mov	r8, r0
    2652:	ldr.w	r1, [ip, #12]
    2656:	cmp	ip, r1
    2658:	bne.n	266a <_malloc_r+0x10e>
    265a:	b.n	2944 <_malloc_r+0x3e8>
    265c:	cmp	r2, #0
    265e:	bge.w	2964 <_malloc_r+0x408>
    2662:	ldr	r1, [r1, #12]
    2664:	cmp	ip, r1
    2666:	beq.w	2944 <_malloc_r+0x3e8>
    266a:	ldr	r3, [r1, #4]
    266c:	bic.w	r3, r3, #3
    2670:	subs	r2, r3, r5
    2672:	cmp	r2, #15
    2674:	ble.n	265c <_malloc_r+0x100>
    2676:	mov	r4, r1
    2678:	ldr.w	ip, [r1, #12]
    267c:	ldr.w	r8, [r4, #8]!
    2680:	adds	r3, r1, r5
    2682:	orr.w	r5, r5, #1
    2686:	str	r5, [r1, #4]
    2688:	orr.w	r1, r2, #1
    268c:	str.w	ip, [r8, #12]
    2690:	mov	r0, r6
    2692:	str.w	r8, [ip, #8]
    2696:	str	r3, [r7, #20]
    2698:	str	r3, [r7, #16]
    269a:	str.w	lr, [r3, #12]
    269e:	str.w	lr, [r3, #8]
    26a2:	str	r1, [r3, #4]
    26a4:	str	r2, [r3, r2]
    26a6:	bl	2c60 <__malloc_unlock>
    26aa:	b.n	26ec <_malloc_r+0x190>
    26ac:	cmp	r1, #16
    26ae:	bhi.n	26f4 <_malloc_r+0x198>
    26b0:	bl	2c5c <__malloc_lock>
    26b4:	movs	r5, #16
    26b6:	movs	r3, #6
    26b8:	movs	r0, #2
    26ba:	ldr	r7, [pc, #504]	; (28b4 <_malloc_r+0x358>)
    26bc:	add.w	r3, r7, r3, lsl #2
    26c0:	sub.w	r2, r3, #8
    26c4:	ldr	r4, [r3, #4]
    26c6:	cmp	r4, r2
    26c8:	beq.w	2956 <_malloc_r+0x3fa>
    26cc:	ldr	r3, [r4, #4]
    26ce:	ldr	r1, [r4, #12]
    26d0:	ldr	r5, [r4, #8]
    26d2:	bic.w	r3, r3, #3
    26d6:	add	r3, r4
    26d8:	mov	r0, r6
    26da:	ldr	r2, [r3, #4]
    26dc:	str	r1, [r5, #12]
    26de:	orr.w	r2, r2, #1
    26e2:	str	r5, [r1, #8]
    26e4:	str	r2, [r3, #4]
    26e6:	bl	2c60 <__malloc_unlock>
    26ea:	adds	r4, #8
    26ec:	mov	r0, r4
    26ee:	add	sp, #12
    26f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26f4:	movs	r4, #0
    26f6:	movs	r3, #12
    26f8:	mov	r0, r4
    26fa:	str	r3, [r6, #0]
    26fc:	add	sp, #12
    26fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2702:	movs	r3, #128	; 0x80
    2704:	mov.w	lr, #64	; 0x40
    2708:	movs	r0, #63	; 0x3f
    270a:	b.n	25a0 <_malloc_r+0x44>
    270c:	mov	r0, lr
    270e:	b.n	25cc <_malloc_r+0x70>
    2710:	add	r3, r4
    2712:	ldr	r1, [r4, #12]
    2714:	ldr	r2, [r3, #4]
    2716:	ldr	r5, [r4, #8]
    2718:	orr.w	r2, r2, #1
    271c:	str	r1, [r5, #12]
    271e:	mov	r0, r6
    2720:	str	r5, [r1, #8]
    2722:	str	r2, [r3, #4]
    2724:	bl	2c60 <__malloc_unlock>
    2728:	adds	r4, #8
    272a:	mov	r0, r4
    272c:	add	sp, #12
    272e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2732:	add	r3, r4
    2734:	mov	r0, r6
    2736:	ldr	r2, [r3, #4]
    2738:	orr.w	r2, r2, #1
    273c:	str	r2, [r3, #4]
    273e:	bl	2c60 <__malloc_unlock>
    2742:	adds	r4, #8
    2744:	mov	r0, r4
    2746:	add	sp, #12
    2748:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    274c:	ldr	r4, [r7, #8]
    274e:	ldr	r3, [r4, #4]
    2750:	bic.w	r8, r3, #3
    2754:	cmp	r8, r5
    2756:	bcc.n	2762 <_malloc_r+0x206>
    2758:	rsb	r3, r5, r8
    275c:	cmp	r3, #15
    275e:	bgt.w	287a <_malloc_r+0x31e>
    2762:	ldr	r3, [pc, #340]	; (28b8 <_malloc_r+0x35c>)
    2764:	ldr.w	r9, [pc, #352]	; 28c8 <_malloc_r+0x36c>
    2768:	ldr	r2, [r3, #0]
    276a:	ldr.w	r3, [r9]
    276e:	adds	r3, #1
    2770:	add	r2, r5
    2772:	add.w	sl, r4, r8
    2776:	beq.w	2a3a <_malloc_r+0x4de>
    277a:	add.w	r2, r2, #4096	; 0x1000
    277e:	adds	r2, #15
    2780:	bic.w	r2, r2, #4080	; 0xff0
    2784:	bic.w	r2, r2, #15
    2788:	mov	r1, r2
    278a:	mov	r0, r6
    278c:	str	r2, [sp, #4]
    278e:	bl	3044 <_sbrk_r>
    2792:	cmp.w	r0, #4294967295
    2796:	mov	fp, r0
    2798:	ldr	r2, [sp, #4]
    279a:	beq.w	2a4e <_malloc_r+0x4f2>
    279e:	cmp	sl, r0
    27a0:	bhi.w	299c <_malloc_r+0x440>
    27a4:	ldr	r3, [pc, #276]	; (28bc <_malloc_r+0x360>)
    27a6:	ldr	r1, [r3, #0]
    27a8:	cmp	sl, fp
    27aa:	add	r1, r2
    27ac:	str	r1, [r3, #0]
    27ae:	beq.w	2a58 <_malloc_r+0x4fc>
    27b2:	ldr.w	r0, [r9]
    27b6:	ldr.w	lr, [pc, #272]	; 28c8 <_malloc_r+0x36c>
    27ba:	adds	r0, #1
    27bc:	ittet	ne
    27be:	rsbne	sl, sl, fp
    27c2:	addne	r1, sl
    27c4:	streq.w	fp, [lr]
    27c8:	strne	r1, [r3, #0]
    27ca:	ands.w	r1, fp, #7
    27ce:	beq.w	2a00 <_malloc_r+0x4a4>
    27d2:	rsb	r0, r1, #8
    27d6:	rsb	r1, r1, #4096	; 0x1000
    27da:	add	fp, r0
    27dc:	adds	r1, #8
    27de:	add	r2, fp
    27e0:	ubfx	r2, r2, #0, #12
    27e4:	rsb	r9, r2, r1
    27e8:	mov	r1, r9
    27ea:	mov	r0, r6
    27ec:	str	r3, [sp, #4]
    27ee:	bl	3044 <_sbrk_r>
    27f2:	adds	r3, r0, #1
    27f4:	ldr	r3, [sp, #4]
    27f6:	beq.w	2a78 <_malloc_r+0x51c>
    27fa:	rsb	r2, fp, r0
    27fe:	add	r2, r9
    2800:	orr.w	r2, r2, #1
    2804:	ldr	r1, [r3, #0]
    2806:	str.w	fp, [r7, #8]
    280a:	add	r1, r9
    280c:	cmp	r4, r7
    280e:	str.w	r2, [fp, #4]
    2812:	str	r1, [r3, #0]
    2814:	ldr.w	r9, [pc, #164]	; 28bc <_malloc_r+0x360>
    2818:	beq.n	2848 <_malloc_r+0x2ec>
    281a:	cmp.w	r8, #15
    281e:	bls.w	2a1c <_malloc_r+0x4c0>
    2822:	ldr	r2, [r4, #4]
    2824:	sub.w	r3, r8, #12
    2828:	bic.w	r3, r3, #7
    282c:	adds	r0, r4, r3
    282e:	and.w	r2, r2, #1
    2832:	mov.w	lr, #5
    2836:	orrs	r2, r3
    2838:	cmp	r3, #15
    283a:	str	r2, [r4, #4]
    283c:	str.w	lr, [r0, #4]
    2840:	str.w	lr, [r0, #8]
    2844:	bhi.w	2a80 <_malloc_r+0x524>
    2848:	ldr	r3, [pc, #116]	; (28c0 <_malloc_r+0x364>)
    284a:	ldr	r4, [r7, #8]
    284c:	ldr	r2, [r3, #0]
    284e:	cmp	r1, r2
    2850:	it	hi
    2852:	strhi	r1, [r3, #0]
    2854:	ldr	r3, [pc, #108]	; (28c4 <_malloc_r+0x368>)
    2856:	ldr	r2, [r3, #0]
    2858:	cmp	r1, r2
    285a:	ldr	r2, [r4, #4]
    285c:	it	hi
    285e:	strhi	r1, [r3, #0]
    2860:	bic.w	r2, r2, #3
    2864:	cmp	r5, r2
    2866:	sub.w	r3, r2, r5
    286a:	bhi.n	2870 <_malloc_r+0x314>
    286c:	cmp	r3, #15
    286e:	bgt.n	287a <_malloc_r+0x31e>
    2870:	mov	r0, r6
    2872:	bl	2c60 <__malloc_unlock>
    2876:	movs	r4, #0
    2878:	b.n	26ec <_malloc_r+0x190>
    287a:	adds	r2, r4, r5
    287c:	orr.w	r3, r3, #1
    2880:	orr.w	r5, r5, #1
    2884:	str	r5, [r4, #4]
    2886:	mov	r0, r6
    2888:	str	r2, [r7, #8]
    288a:	str	r3, [r2, #4]
    288c:	bl	2c60 <__malloc_unlock>
    2890:	adds	r4, #8
    2892:	mov	r0, r4
    2894:	add	sp, #12
    2896:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    289a:	cmp	r3, #20
    289c:	bls.n	2982 <_malloc_r+0x426>
    289e:	cmp	r3, #84	; 0x54
    28a0:	bhi.w	29ec <_malloc_r+0x490>
    28a4:	lsrs	r0, r5, #12
    28a6:	add.w	lr, r0, #111	; 0x6f
    28aa:	mov.w	r3, lr, lsl #1
    28ae:	adds	r0, #110	; 0x6e
    28b0:	b.n	25a0 <_malloc_r+0x44>
    28b2:	nop
    28b4:	.word	0x20000c10
    28b8:	.word	0x200012d8
    28bc:	.word	0x200012dc
    28c0:	.word	0x200012d4
    28c4:	.word	0x200012d0
    28c8:	.word	0x2000101c
    28cc:	lsrs	r2, r3, #9
    28ce:	cmp	r2, #4
    28d0:	bls.n	2990 <_malloc_r+0x434>
    28d2:	cmp	r2, #20
    28d4:	bhi.w	2a3e <_malloc_r+0x4e2>
    28d8:	add.w	r1, r2, #92	; 0x5c
    28dc:	lsls	r1, r1, #1
    28de:	adds	r2, #91	; 0x5b
    28e0:	add.w	ip, r7, r1, lsl #2
    28e4:	ldr.w	r1, [r7, r1, lsl #2]
    28e8:	ldr.w	r8, [pc, #476]	; 2ac8 <_malloc_r+0x56c>
    28ec:	sub.w	ip, ip, #8
    28f0:	cmp	ip, r1
    28f2:	beq.w	2a06 <_malloc_r+0x4aa>
    28f6:	ldr	r2, [r1, #4]
    28f8:	bic.w	r2, r2, #3
    28fc:	cmp	r3, r2
    28fe:	bcs.n	2906 <_malloc_r+0x3aa>
    2900:	ldr	r1, [r1, #8]
    2902:	cmp	ip, r1
    2904:	bne.n	28f6 <_malloc_r+0x39a>
    2906:	ldr.w	ip, [r1, #12]
    290a:	ldr	r2, [r7, #4]
    290c:	str.w	ip, [r4, #12]
    2910:	str	r1, [r4, #8]
    2912:	str.w	r4, [ip, #8]
    2916:	str	r4, [r1, #12]
    2918:	b.n	262c <_malloc_r+0xd0>
    291a:	adds	r3, r4, r5
    291c:	orr.w	r7, r2, #1
    2920:	orr.w	r5, r5, #1
    2924:	str	r5, [r4, #4]
    2926:	mov	r0, r6
    2928:	str	r3, [r1, #20]
    292a:	str	r3, [r1, #16]
    292c:	str.w	lr, [r3, #12]
    2930:	str.w	lr, [r3, #8]
    2934:	str	r7, [r3, #4]
    2936:	str	r2, [r3, r2]
    2938:	adds	r4, #8
    293a:	bl	2c60 <__malloc_unlock>
    293e:	b.n	26ec <_malloc_r+0x190>
    2940:	ldr	r2, [r1, #4]
    2942:	b.n	262c <_malloc_r+0xd0>
    2944:	add.w	r8, r8, #1
    2948:	tst.w	r8, #3
    294c:	add.w	ip, ip, #8
    2950:	bne.w	2652 <_malloc_r+0xf6>
    2954:	b.n	29b8 <_malloc_r+0x45c>
    2956:	ldr	r4, [r3, #12]
    2958:	cmp	r3, r4
    295a:	it	eq
    295c:	addeq	r0, #2
    295e:	beq.w	25cc <_malloc_r+0x70>
    2962:	b.n	26cc <_malloc_r+0x170>
    2964:	add	r3, r1
    2966:	mov	r4, r1
    2968:	ldr	r2, [r3, #4]
    296a:	ldr	r1, [r1, #12]
    296c:	ldr.w	r5, [r4, #8]!
    2970:	orr.w	r2, r2, #1
    2974:	str	r2, [r3, #4]
    2976:	mov	r0, r6
    2978:	str	r1, [r5, #12]
    297a:	str	r5, [r1, #8]
    297c:	bl	2c60 <__malloc_unlock>
    2980:	b.n	26ec <_malloc_r+0x190>
    2982:	add.w	lr, r3, #92	; 0x5c
    2986:	add.w	r0, r3, #91	; 0x5b
    298a:	mov.w	r3, lr, lsl #1
    298e:	b.n	25a0 <_malloc_r+0x44>
    2990:	lsrs	r2, r3, #6
    2992:	add.w	r1, r2, #57	; 0x39
    2996:	lsls	r1, r1, #1
    2998:	adds	r2, #56	; 0x38
    299a:	b.n	28e0 <_malloc_r+0x384>
    299c:	cmp	r4, r7
    299e:	ldr	r3, [pc, #296]	; (2ac8 <_malloc_r+0x56c>)
    29a0:	beq.w	27a4 <_malloc_r+0x248>
    29a4:	ldr	r4, [r3, #8]
    29a6:	ldr	r2, [r4, #4]
    29a8:	bic.w	r2, r2, #3
    29ac:	b.n	2864 <_malloc_r+0x308>
    29ae:	ldr.w	r3, [r9], #-8
    29b2:	cmp	r9, r3
    29b4:	bne.w	2abc <_malloc_r+0x560>
    29b8:	tst.w	r0, #3
    29bc:	add.w	r0, r0, #4294967295
    29c0:	bne.n	29ae <_malloc_r+0x452>
    29c2:	ldr	r3, [r7, #4]
    29c4:	bic.w	r3, r3, r4
    29c8:	str	r3, [r7, #4]
    29ca:	lsls	r4, r4, #1
    29cc:	cmp	r4, r3
    29ce:	bhi.w	274c <_malloc_r+0x1f0>
    29d2:	cmp	r4, #0
    29d4:	beq.w	274c <_malloc_r+0x1f0>
    29d8:	tst	r4, r3
    29da:	mov	r0, r8
    29dc:	bne.w	264a <_malloc_r+0xee>
    29e0:	lsls	r4, r4, #1
    29e2:	tst	r4, r3
    29e4:	add.w	r0, r0, #4
    29e8:	beq.n	29e0 <_malloc_r+0x484>
    29ea:	b.n	264a <_malloc_r+0xee>
    29ec:	cmp.w	r3, #340	; 0x154
    29f0:	bhi.n	2a24 <_malloc_r+0x4c8>
    29f2:	lsrs	r0, r5, #15
    29f4:	add.w	lr, r0, #120	; 0x78
    29f8:	mov.w	r3, lr, lsl #1
    29fc:	adds	r0, #119	; 0x77
    29fe:	b.n	25a0 <_malloc_r+0x44>
    2a00:	mov.w	r1, #4096	; 0x1000
    2a04:	b.n	27de <_malloc_r+0x282>
    2a06:	movs	r1, #1
    2a08:	ldr.w	r3, [r8, #4]
    2a0c:	asrs	r2, r2, #2
    2a0e:	lsl.w	r2, r1, r2
    2a12:	orrs	r2, r3
    2a14:	str.w	r2, [r8, #4]
    2a18:	mov	r1, ip
    2a1a:	b.n	290c <_malloc_r+0x3b0>
    2a1c:	movs	r3, #1
    2a1e:	str.w	r3, [fp, #4]
    2a22:	b.n	2870 <_malloc_r+0x314>
    2a24:	movw	r2, #1364	; 0x554
    2a28:	cmp	r3, r2
    2a2a:	bhi.n	2a6e <_malloc_r+0x512>
    2a2c:	lsrs	r0, r5, #18
    2a2e:	add.w	lr, r0, #125	; 0x7d
    2a32:	mov.w	r3, lr, lsl #1
    2a36:	adds	r0, #124	; 0x7c
    2a38:	b.n	25a0 <_malloc_r+0x44>
    2a3a:	adds	r2, #16
    2a3c:	b.n	2788 <_malloc_r+0x22c>
    2a3e:	cmp	r2, #84	; 0x54
    2a40:	bhi.n	2a90 <_malloc_r+0x534>
    2a42:	lsrs	r2, r3, #12
    2a44:	add.w	r1, r2, #111	; 0x6f
    2a48:	lsls	r1, r1, #1
    2a4a:	adds	r2, #110	; 0x6e
    2a4c:	b.n	28e0 <_malloc_r+0x384>
    2a4e:	ldr	r4, [r7, #8]
    2a50:	ldr	r2, [r4, #4]
    2a52:	bic.w	r2, r2, #3
    2a56:	b.n	2864 <_malloc_r+0x308>
    2a58:	ubfx	r0, sl, #0, #12
    2a5c:	cmp	r0, #0
    2a5e:	bne.w	27b2 <_malloc_r+0x256>
    2a62:	add	r2, r8
    2a64:	ldr	r3, [r7, #8]
    2a66:	orr.w	r2, r2, #1
    2a6a:	str	r2, [r3, #4]
    2a6c:	b.n	2848 <_malloc_r+0x2ec>
    2a6e:	movs	r3, #254	; 0xfe
    2a70:	mov.w	lr, #127	; 0x7f
    2a74:	movs	r0, #126	; 0x7e
    2a76:	b.n	25a0 <_malloc_r+0x44>
    2a78:	movs	r2, #1
    2a7a:	mov.w	r9, #0
    2a7e:	b.n	2804 <_malloc_r+0x2a8>
    2a80:	add.w	r1, r4, #8
    2a84:	mov	r0, r6
    2a86:	bl	3348 <_free_r>
    2a8a:	ldr.w	r1, [r9]
    2a8e:	b.n	2848 <_malloc_r+0x2ec>
    2a90:	cmp.w	r2, #340	; 0x154
    2a94:	bhi.n	2aa2 <_malloc_r+0x546>
    2a96:	lsrs	r2, r3, #15
    2a98:	add.w	r1, r2, #120	; 0x78
    2a9c:	lsls	r1, r1, #1
    2a9e:	adds	r2, #119	; 0x77
    2aa0:	b.n	28e0 <_malloc_r+0x384>
    2aa2:	movw	r1, #1364	; 0x554
    2aa6:	cmp	r2, r1
    2aa8:	bhi.n	2ab6 <_malloc_r+0x55a>
    2aaa:	lsrs	r2, r3, #18
    2aac:	add.w	r1, r2, #125	; 0x7d
    2ab0:	lsls	r1, r1, #1
    2ab2:	adds	r2, #124	; 0x7c
    2ab4:	b.n	28e0 <_malloc_r+0x384>
    2ab6:	movs	r1, #254	; 0xfe
    2ab8:	movs	r2, #126	; 0x7e
    2aba:	b.n	28e0 <_malloc_r+0x384>
    2abc:	ldr	r3, [r7, #4]
    2abe:	b.n	29ca <_malloc_r+0x46e>
    2ac0:	lsrs	r0, r5, #3
    2ac2:	adds	r3, r0, #1
    2ac4:	lsls	r3, r3, #1
    2ac6:	b.n	26ba <_malloc_r+0x15e>
    2ac8:	.word	0x20000c10

00002acc <__ascii_mbtowc>:
    2acc:	sub	sp, #8
    2ace:	cbz	r1, 2ae4 <__ascii_mbtowc+0x18>
    2ad0:	cbz	r2, 2aea <__ascii_mbtowc+0x1e>
    2ad2:	cbz	r3, 2af0 <__ascii_mbtowc+0x24>
    2ad4:	ldrb	r3, [r2, #0]
    2ad6:	str	r3, [r1, #0]
    2ad8:	ldrb	r2, [r2, #0]
    2ada:	adds	r0, r2, #0
    2adc:	it	ne
    2ade:	movne	r0, #1
    2ae0:	add	sp, #8
    2ae2:	bx	lr
    2ae4:	add	r1, sp, #4
    2ae6:	cmp	r2, #0
    2ae8:	bne.n	2ad2 <__ascii_mbtowc+0x6>
    2aea:	mov	r0, r2
    2aec:	add	sp, #8
    2aee:	bx	lr
    2af0:	mvn.w	r0, #1
    2af4:	b.n	2ae0 <__ascii_mbtowc+0x14>
    2af6:	nop

00002af8 <memmove>:
    2af8:	cmp	r0, r1
    2afa:	push	{r4, r5, r6, r7, lr}
    2afc:	bls.n	2b1a <memmove+0x22>
    2afe:	adds	r3, r1, r2
    2b00:	cmp	r0, r3
    2b02:	bcs.n	2b1a <memmove+0x22>
    2b04:	adds	r1, r0, r2
    2b06:	cmp	r2, #0
    2b08:	beq.n	2bae <memmove+0xb6>
    2b0a:	subs	r2, r3, r2
    2b0c:	ldrb.w	r4, [r3, #-1]!
    2b10:	strb.w	r4, [r1, #-1]!
    2b14:	cmp	r3, r2
    2b16:	bne.n	2b0c <memmove+0x14>
    2b18:	pop	{r4, r5, r6, r7, pc}
    2b1a:	cmp	r2, #15
    2b1c:	bls.n	2bb0 <memmove+0xb8>
    2b1e:	orr.w	r3, r1, r0
    2b22:	lsls	r3, r3, #30
    2b24:	bne.n	2bb4 <memmove+0xbc>
    2b26:	add.w	r4, r0, #16
    2b2a:	add.w	r3, r1, #16
    2b2e:	mov	r5, r2
    2b30:	ldr.w	r6, [r3, #-16]
    2b34:	str.w	r6, [r4, #-16]
    2b38:	ldr.w	r6, [r3, #-12]
    2b3c:	str.w	r6, [r4, #-12]
    2b40:	ldr.w	r6, [r3, #-8]
    2b44:	str.w	r6, [r4, #-8]
    2b48:	subs	r5, #16
    2b4a:	ldr.w	r6, [r3, #-4]
    2b4e:	str.w	r6, [r4, #-4]
    2b52:	cmp	r5, #15
    2b54:	add.w	r3, r3, #16
    2b58:	add.w	r4, r4, #16
    2b5c:	bhi.n	2b30 <memmove+0x38>
    2b5e:	sub.w	r3, r2, #16
    2b62:	bic.w	r3, r3, #15
    2b66:	and.w	lr, r2, #15
    2b6a:	adds	r3, #16
    2b6c:	cmp.w	lr, #3
    2b70:	add	r1, r3
    2b72:	add	r3, r0
    2b74:	bls.n	2bba <memmove+0xc2>
    2b76:	subs	r6, r3, #4
    2b78:	mov	r5, r1
    2b7a:	mov	r4, lr
    2b7c:	subs	r4, #4
    2b7e:	ldr.w	r7, [r5], #4
    2b82:	str.w	r7, [r6, #4]!
    2b86:	cmp	r4, #3
    2b88:	bhi.n	2b7c <memmove+0x84>
    2b8a:	sub.w	r4, lr, #4
    2b8e:	bic.w	r4, r4, #3
    2b92:	adds	r4, #4
    2b94:	add	r3, r4
    2b96:	add	r1, r4
    2b98:	and.w	r2, r2, #3
    2b9c:	cbz	r2, 2bb8 <memmove+0xc0>
    2b9e:	subs	r3, #1
    2ba0:	add	r2, r1
    2ba2:	ldrb.w	r4, [r1], #1
    2ba6:	strb.w	r4, [r3, #1]!
    2baa:	cmp	r2, r1
    2bac:	bne.n	2ba2 <memmove+0xaa>
    2bae:	pop	{r4, r5, r6, r7, pc}
    2bb0:	mov	r3, r0
    2bb2:	b.n	2b9c <memmove+0xa4>
    2bb4:	mov	r3, r0
    2bb6:	b.n	2b9e <memmove+0xa6>
    2bb8:	pop	{r4, r5, r6, r7, pc}
    2bba:	mov	r2, lr
    2bbc:	b.n	2b9c <memmove+0xa4>
    2bbe:	nop

00002bc0 <memset>:
    2bc0:	push	{r4, r5, r6}
    2bc2:	lsls	r4, r0, #30
    2bc4:	beq.n	2c54 <memset+0x94>
    2bc6:	subs	r4, r2, #1
    2bc8:	cmp	r2, #0
    2bca:	beq.n	2c50 <memset+0x90>
    2bcc:	uxtb	r5, r1
    2bce:	mov	r3, r0
    2bd0:	b.n	2bd8 <memset+0x18>
    2bd2:	subs	r2, r4, #1
    2bd4:	cbz	r4, 2c50 <memset+0x90>
    2bd6:	mov	r4, r2
    2bd8:	strb.w	r5, [r3], #1
    2bdc:	lsls	r2, r3, #30
    2bde:	bne.n	2bd2 <memset+0x12>
    2be0:	cmp	r4, #3
    2be2:	bls.n	2c42 <memset+0x82>
    2be4:	uxtb	r5, r1
    2be6:	orr.w	r5, r5, r5, lsl #8
    2bea:	cmp	r4, #15
    2bec:	orr.w	r5, r5, r5, lsl #16
    2bf0:	bls.n	2c26 <memset+0x66>
    2bf2:	add.w	r2, r3, #16
    2bf6:	mov	r6, r4
    2bf8:	subs	r6, #16
    2bfa:	cmp	r6, #15
    2bfc:	str.w	r5, [r2, #-16]
    2c00:	str.w	r5, [r2, #-12]
    2c04:	str.w	r5, [r2, #-8]
    2c08:	str.w	r5, [r2, #-4]
    2c0c:	add.w	r2, r2, #16
    2c10:	bhi.n	2bf8 <memset+0x38>
    2c12:	sub.w	r2, r4, #16
    2c16:	bic.w	r2, r2, #15
    2c1a:	and.w	r4, r4, #15
    2c1e:	adds	r2, #16
    2c20:	cmp	r4, #3
    2c22:	add	r3, r2
    2c24:	bls.n	2c42 <memset+0x82>
    2c26:	mov	r6, r3
    2c28:	mov	r2, r4
    2c2a:	subs	r2, #4
    2c2c:	cmp	r2, #3
    2c2e:	str.w	r5, [r6], #4
    2c32:	bhi.n	2c2a <memset+0x6a>
    2c34:	subs	r2, r4, #4
    2c36:	bic.w	r2, r2, #3
    2c3a:	adds	r2, #4
    2c3c:	add	r3, r2
    2c3e:	and.w	r4, r4, #3
    2c42:	cbz	r4, 2c50 <memset+0x90>
    2c44:	uxtb	r1, r1
    2c46:	add	r4, r3
    2c48:	strb.w	r1, [r3], #1
    2c4c:	cmp	r3, r4
    2c4e:	bne.n	2c48 <memset+0x88>
    2c50:	pop	{r4, r5, r6}
    2c52:	bx	lr
    2c54:	mov	r4, r2
    2c56:	mov	r3, r0
    2c58:	b.n	2be0 <memset+0x20>
    2c5a:	nop

00002c5c <__malloc_lock>:
    2c5c:	bx	lr
    2c5e:	nop

00002c60 <__malloc_unlock>:
    2c60:	bx	lr
    2c62:	nop

00002c64 <_realloc_r>:
    2c64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c68:	mov	r7, r2
    2c6a:	sub	sp, #12
    2c6c:	cmp	r1, #0
    2c6e:	beq.w	2df4 <_realloc_r+0x190>
    2c72:	mov	r6, r1
    2c74:	mov	r9, r0
    2c76:	add.w	r5, r7, #11
    2c7a:	bl	2c5c <__malloc_lock>
    2c7e:	ldr.w	lr, [r6, #-4]
    2c82:	cmp	r5, #22
    2c84:	bic.w	r4, lr, #3
    2c88:	sub.w	r8, r6, #8
    2c8c:	bhi.n	2d10 <_realloc_r+0xac>
    2c8e:	movs	r2, #16
    2c90:	mov	r5, r2
    2c92:	cmp	r7, r5
    2c94:	bhi.n	2d1a <_realloc_r+0xb6>
    2c96:	cmp	r4, r2
    2c98:	bge.n	2d86 <_realloc_r+0x122>
    2c9a:	ldr	r3, [pc, #804]	; (2fc0 <_realloc_r+0x35c>)
    2c9c:	ldr	r1, [r3, #8]
    2c9e:	add.w	r0, r8, r4
    2ca2:	cmp	r0, r1
    2ca4:	ldr	r1, [r0, #4]
    2ca6:	beq.w	2e5c <_realloc_r+0x1f8>
    2caa:	bic.w	r3, r1, #1
    2cae:	add	r3, r0
    2cb0:	ldr	r3, [r3, #4]
    2cb2:	lsls	r3, r3, #31
    2cb4:	bpl.n	2db2 <_realloc_r+0x14e>
    2cb6:	tst.w	lr, #1
    2cba:	beq.n	2d28 <_realloc_r+0xc4>
    2cbc:	mov	r1, r7
    2cbe:	mov	r0, r9
    2cc0:	bl	255c <_malloc_r>
    2cc4:	mov	r7, r0
    2cc6:	cbz	r0, 2d02 <_realloc_r+0x9e>
    2cc8:	ldr.w	r3, [r6, #-4]
    2ccc:	bic.w	r3, r3, #1
    2cd0:	add	r3, r8
    2cd2:	sub.w	r2, r0, #8
    2cd6:	cmp	r2, r3
    2cd8:	beq.w	2f64 <_realloc_r+0x300>
    2cdc:	subs	r2, r4, #4
    2cde:	cmp	r2, #36	; 0x24
    2ce0:	bhi.w	2f46 <_realloc_r+0x2e2>
    2ce4:	cmp	r2, #19
    2ce6:	bhi.w	2ef2 <_realloc_r+0x28e>
    2cea:	mov	r3, r0
    2cec:	mov	r2, r6
    2cee:	ldr	r1, [r2, #0]
    2cf0:	str	r1, [r3, #0]
    2cf2:	ldr	r1, [r2, #4]
    2cf4:	str	r1, [r3, #4]
    2cf6:	ldr	r2, [r2, #8]
    2cf8:	str	r2, [r3, #8]
    2cfa:	mov	r1, r6
    2cfc:	mov	r0, r9
    2cfe:	bl	3348 <_free_r>
    2d02:	mov	r0, r9
    2d04:	bl	2c60 <__malloc_unlock>
    2d08:	mov	r0, r7
    2d0a:	add	sp, #12
    2d0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d10:	bic.w	r5, r5, #7
    2d14:	cmp	r5, #0
    2d16:	mov	r2, r5
    2d18:	bge.n	2c92 <_realloc_r+0x2e>
    2d1a:	movs	r3, #12
    2d1c:	movs	r0, #0
    2d1e:	str.w	r3, [r9]
    2d22:	add	sp, #12
    2d24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d28:	ldr.w	r3, [r6, #-8]
    2d2c:	rsb	sl, r3, r8
    2d30:	ldr.w	r3, [sl, #4]
    2d34:	bic.w	ip, r3, #3
    2d38:	add.w	r3, r4, ip
    2d3c:	cmp	r3, r2
    2d3e:	blt.n	2cbc <_realloc_r+0x58>
    2d40:	mov	r7, sl
    2d42:	ldr.w	r1, [sl, #12]
    2d46:	ldr.w	r0, [r7, #8]!
    2d4a:	subs	r2, r4, #4
    2d4c:	cmp	r2, #36	; 0x24
    2d4e:	str	r1, [r0, #12]
    2d50:	str	r0, [r1, #8]
    2d52:	bhi.w	2f84 <_realloc_r+0x320>
    2d56:	cmp	r2, #19
    2d58:	bls.w	2f80 <_realloc_r+0x31c>
    2d5c:	ldr	r1, [r6, #0]
    2d5e:	str.w	r1, [sl, #8]
    2d62:	ldr	r1, [r6, #4]
    2d64:	str.w	r1, [sl, #12]
    2d68:	cmp	r2, #27
    2d6a:	bhi.w	2fc4 <_realloc_r+0x360>
    2d6e:	adds	r6, #8
    2d70:	add.w	r2, sl, #16
    2d74:	ldr	r1, [r6, #0]
    2d76:	str	r1, [r2, #0]
    2d78:	ldr	r1, [r6, #4]
    2d7a:	str	r1, [r2, #4]
    2d7c:	ldr	r1, [r6, #8]
    2d7e:	str	r1, [r2, #8]
    2d80:	mov	r6, r7
    2d82:	mov	r4, r3
    2d84:	mov	r8, sl
    2d86:	subs	r3, r4, r5
    2d88:	cmp	r3, #15
    2d8a:	bhi.n	2dc8 <_realloc_r+0x164>
    2d8c:	ldr.w	r3, [r8, #4]
    2d90:	and.w	r3, r3, #1
    2d94:	orrs	r3, r4
    2d96:	add	r4, r8
    2d98:	str.w	r3, [r8, #4]
    2d9c:	ldr	r3, [r4, #4]
    2d9e:	orr.w	r3, r3, #1
    2da2:	str	r3, [r4, #4]
    2da4:	mov	r0, r9
    2da6:	bl	2c60 <__malloc_unlock>
    2daa:	mov	r0, r6
    2dac:	add	sp, #12
    2dae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2db2:	bic.w	r1, r1, #3
    2db6:	add	r1, r4
    2db8:	cmp	r1, r2
    2dba:	blt.n	2e00 <_realloc_r+0x19c>
    2dbc:	ldr	r3, [r0, #12]
    2dbe:	ldr	r2, [r0, #8]
    2dc0:	mov	r4, r1
    2dc2:	str	r3, [r2, #12]
    2dc4:	str	r2, [r3, #8]
    2dc6:	b.n	2d86 <_realloc_r+0x122>
    2dc8:	ldr.w	r2, [r8, #4]
    2dcc:	add.w	r1, r8, r5
    2dd0:	and.w	r2, r2, #1
    2dd4:	orrs	r5, r2
    2dd6:	orr.w	r2, r3, #1
    2dda:	add	r3, r1
    2ddc:	str.w	r5, [r8, #4]
    2de0:	str	r2, [r1, #4]
    2de2:	ldr	r2, [r3, #4]
    2de4:	orr.w	r2, r2, #1
    2de8:	adds	r1, #8
    2dea:	str	r2, [r3, #4]
    2dec:	mov	r0, r9
    2dee:	bl	3348 <_free_r>
    2df2:	b.n	2da4 <_realloc_r+0x140>
    2df4:	mov	r1, r2
    2df6:	add	sp, #12
    2df8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2dfc:	b.w	255c <_malloc_r>
    2e00:	tst.w	lr, #1
    2e04:	bne.w	2cbc <_realloc_r+0x58>
    2e08:	ldr.w	r3, [r6, #-8]
    2e0c:	rsb	sl, r3, r8
    2e10:	ldr.w	r3, [sl, #4]
    2e14:	bic.w	ip, r3, #3
    2e18:	add.w	lr, r1, ip
    2e1c:	cmp	lr, r2
    2e1e:	blt.n	2d38 <_realloc_r+0xd4>
    2e20:	ldr	r3, [r0, #12]
    2e22:	ldr	r2, [r0, #8]
    2e24:	mov	r7, sl
    2e26:	str	r3, [r2, #12]
    2e28:	str	r2, [r3, #8]
    2e2a:	ldr.w	r1, [r7, #8]!
    2e2e:	ldr.w	r3, [sl, #12]
    2e32:	str	r3, [r1, #12]
    2e34:	subs	r2, r4, #4
    2e36:	cmp	r2, #36	; 0x24
    2e38:	str	r1, [r3, #8]
    2e3a:	bhi.w	2f70 <_realloc_r+0x30c>
    2e3e:	cmp	r2, #19
    2e40:	bls.n	2f08 <_realloc_r+0x2a4>
    2e42:	ldr	r3, [r6, #0]
    2e44:	str.w	r3, [sl, #8]
    2e48:	ldr	r3, [r6, #4]
    2e4a:	str.w	r3, [sl, #12]
    2e4e:	cmp	r2, #27
    2e50:	bhi.w	2f94 <_realloc_r+0x330>
    2e54:	adds	r6, #8
    2e56:	add.w	r3, sl, #16
    2e5a:	b.n	2f0a <_realloc_r+0x2a6>
    2e5c:	bic.w	fp, r1, #3
    2e60:	add	fp, r4
    2e62:	add.w	r0, r5, #16
    2e66:	cmp	fp, r0
    2e68:	bge.n	2f1e <_realloc_r+0x2ba>
    2e6a:	tst.w	lr, #1
    2e6e:	bne.w	2cbc <_realloc_r+0x58>
    2e72:	ldr.w	r1, [r6, #-8]
    2e76:	rsb	sl, r1, r8
    2e7a:	ldr.w	r1, [sl, #4]
    2e7e:	bic.w	ip, r1, #3
    2e82:	add	fp, ip
    2e84:	cmp	r0, fp
    2e86:	bgt.w	2d38 <_realloc_r+0xd4>
    2e8a:	mov	r7, sl
    2e8c:	ldr.w	r1, [sl, #12]
    2e90:	ldr.w	r0, [r7, #8]!
    2e94:	subs	r2, r4, #4
    2e96:	cmp	r2, #36	; 0x24
    2e98:	str	r1, [r0, #12]
    2e9a:	str	r0, [r1, #8]
    2e9c:	bhi.w	3008 <_realloc_r+0x3a4>
    2ea0:	cmp	r2, #19
    2ea2:	bls.w	2ff0 <_realloc_r+0x38c>
    2ea6:	ldr	r1, [r6, #0]
    2ea8:	str.w	r1, [sl, #8]
    2eac:	ldr	r1, [r6, #4]
    2eae:	str.w	r1, [sl, #12]
    2eb2:	cmp	r2, #27
    2eb4:	bhi.w	3016 <_realloc_r+0x3b2>
    2eb8:	adds	r6, #8
    2eba:	add.w	r2, sl, #16
    2ebe:	ldr	r1, [r6, #0]
    2ec0:	str	r1, [r2, #0]
    2ec2:	ldr	r1, [r6, #4]
    2ec4:	str	r1, [r2, #4]
    2ec6:	ldr	r1, [r6, #8]
    2ec8:	str	r1, [r2, #8]
    2eca:	add.w	r1, sl, r5
    2ece:	rsb	r2, r5, fp
    2ed2:	orr.w	r2, r2, #1
    2ed6:	str	r1, [r3, #8]
    2ed8:	str	r2, [r1, #4]
    2eda:	ldr.w	r3, [sl, #4]
    2ede:	and.w	r3, r3, #1
    2ee2:	orrs	r5, r3
    2ee4:	mov	r0, r9
    2ee6:	str.w	r5, [sl, #4]
    2eea:	bl	2c60 <__malloc_unlock>
    2eee:	mov	r0, r7
    2ef0:	b.n	2dac <_realloc_r+0x148>
    2ef2:	ldr	r3, [r6, #0]
    2ef4:	str	r3, [r0, #0]
    2ef6:	ldr	r3, [r6, #4]
    2ef8:	str	r3, [r0, #4]
    2efa:	cmp	r2, #27
    2efc:	bhi.n	2f4e <_realloc_r+0x2ea>
    2efe:	add.w	r3, r0, #8
    2f02:	add.w	r2, r6, #8
    2f06:	b.n	2cee <_realloc_r+0x8a>
    2f08:	mov	r3, r7
    2f0a:	ldr	r2, [r6, #0]
    2f0c:	str	r2, [r3, #0]
    2f0e:	ldr	r2, [r6, #4]
    2f10:	str	r2, [r3, #4]
    2f12:	ldr	r2, [r6, #8]
    2f14:	str	r2, [r3, #8]
    2f16:	mov	r6, r7
    2f18:	mov	r4, lr
    2f1a:	mov	r8, sl
    2f1c:	b.n	2d86 <_realloc_r+0x122>
    2f1e:	add.w	r1, r8, r5
    2f22:	rsb	fp, r5, fp
    2f26:	orr.w	r2, fp, #1
    2f2a:	str	r1, [r3, #8]
    2f2c:	str	r2, [r1, #4]
    2f2e:	ldr.w	r3, [r6, #-4]
    2f32:	and.w	r3, r3, #1
    2f36:	orrs	r5, r3
    2f38:	mov	r0, r9
    2f3a:	str.w	r5, [r6, #-4]
    2f3e:	bl	2c60 <__malloc_unlock>
    2f42:	mov	r0, r6
    2f44:	b.n	2dac <_realloc_r+0x148>
    2f46:	mov	r1, r6
    2f48:	bl	2af8 <memmove>
    2f4c:	b.n	2cfa <_realloc_r+0x96>
    2f4e:	ldr	r3, [r6, #8]
    2f50:	str	r3, [r0, #8]
    2f52:	ldr	r3, [r6, #12]
    2f54:	str	r3, [r0, #12]
    2f56:	cmp	r2, #36	; 0x24
    2f58:	beq.n	2fac <_realloc_r+0x348>
    2f5a:	add.w	r3, r0, #16
    2f5e:	add.w	r2, r6, #16
    2f62:	b.n	2cee <_realloc_r+0x8a>
    2f64:	ldr.w	r3, [r0, #-4]
    2f68:	bic.w	r3, r3, #3
    2f6c:	add	r4, r3
    2f6e:	b.n	2d86 <_realloc_r+0x122>
    2f70:	mov	r1, r6
    2f72:	mov	r0, r7
    2f74:	mov	r4, lr
    2f76:	mov	r8, sl
    2f78:	bl	2af8 <memmove>
    2f7c:	mov	r6, r7
    2f7e:	b.n	2d86 <_realloc_r+0x122>
    2f80:	mov	r2, r7
    2f82:	b.n	2d74 <_realloc_r+0x110>
    2f84:	mov	r1, r6
    2f86:	mov	r0, r7
    2f88:	mov	r4, r3
    2f8a:	mov	r8, sl
    2f8c:	bl	2af8 <memmove>
    2f90:	mov	r6, r7
    2f92:	b.n	2d86 <_realloc_r+0x122>
    2f94:	ldr	r3, [r6, #8]
    2f96:	str.w	r3, [sl, #16]
    2f9a:	ldr	r3, [r6, #12]
    2f9c:	str.w	r3, [sl, #20]
    2fa0:	cmp	r2, #36	; 0x24
    2fa2:	beq.n	2fdc <_realloc_r+0x378>
    2fa4:	adds	r6, #16
    2fa6:	add.w	r3, sl, #24
    2faa:	b.n	2f0a <_realloc_r+0x2a6>
    2fac:	ldr	r3, [r6, #16]
    2fae:	str	r3, [r0, #16]
    2fb0:	ldr	r3, [r6, #20]
    2fb2:	str	r3, [r0, #20]
    2fb4:	add.w	r2, r6, #24
    2fb8:	add.w	r3, r0, #24
    2fbc:	b.n	2cee <_realloc_r+0x8a>
    2fbe:	nop
    2fc0:	.word	0x20000c10
    2fc4:	ldr	r1, [r6, #8]
    2fc6:	str.w	r1, [sl, #16]
    2fca:	ldr	r1, [r6, #12]
    2fcc:	str.w	r1, [sl, #20]
    2fd0:	cmp	r2, #36	; 0x24
    2fd2:	beq.n	2ff4 <_realloc_r+0x390>
    2fd4:	adds	r6, #16
    2fd6:	add.w	r2, sl, #24
    2fda:	b.n	2d74 <_realloc_r+0x110>
    2fdc:	ldr	r3, [r6, #16]
    2fde:	str.w	r3, [sl, #24]
    2fe2:	ldr	r3, [r6, #20]
    2fe4:	str.w	r3, [sl, #28]
    2fe8:	adds	r6, #24
    2fea:	add.w	r3, sl, #32
    2fee:	b.n	2f0a <_realloc_r+0x2a6>
    2ff0:	mov	r2, r7
    2ff2:	b.n	2ebe <_realloc_r+0x25a>
    2ff4:	ldr	r2, [r6, #16]
    2ff6:	str.w	r2, [sl, #24]
    2ffa:	ldr	r2, [r6, #20]
    2ffc:	str.w	r2, [sl, #28]
    3000:	adds	r6, #24
    3002:	add.w	r2, sl, #32
    3006:	b.n	2d74 <_realloc_r+0x110>
    3008:	mov	r1, r6
    300a:	mov	r0, r7
    300c:	str	r3, [sp, #4]
    300e:	bl	2af8 <memmove>
    3012:	ldr	r3, [sp, #4]
    3014:	b.n	2eca <_realloc_r+0x266>
    3016:	ldr	r1, [r6, #8]
    3018:	str.w	r1, [sl, #16]
    301c:	ldr	r1, [r6, #12]
    301e:	str.w	r1, [sl, #20]
    3022:	cmp	r2, #36	; 0x24
    3024:	beq.n	302e <_realloc_r+0x3ca>
    3026:	adds	r6, #16
    3028:	add.w	r2, sl, #24
    302c:	b.n	2ebe <_realloc_r+0x25a>
    302e:	ldr	r2, [r6, #16]
    3030:	str.w	r2, [sl, #24]
    3034:	ldr	r2, [r6, #20]
    3036:	str.w	r2, [sl, #28]
    303a:	adds	r6, #24
    303c:	add.w	r2, sl, #32
    3040:	b.n	2ebe <_realloc_r+0x25a>
    3042:	nop

00003044 <_sbrk_r>:
    3044:	push	{r3, r4, r5, lr}
    3046:	ldr	r4, [pc, #28]	; (3064 <_sbrk_r+0x20>)
    3048:	movs	r3, #0
    304a:	mov	r5, r0
    304c:	mov	r0, r1
    304e:	str	r3, [r4, #0]
    3050:	bl	216c <_sbrk>
    3054:	adds	r3, r0, #1
    3056:	beq.n	305a <_sbrk_r+0x16>
    3058:	pop	{r3, r4, r5, pc}
    305a:	ldr	r3, [r4, #0]
    305c:	cmp	r3, #0
    305e:	beq.n	3058 <_sbrk_r+0x14>
    3060:	str	r3, [r5, #0]
    3062:	pop	{r3, r4, r5, pc}
    3064:	.word	0x200036c0
	...

00003080 <strlen>:
    3080:	pld	[r0]
    3084:	strd	r4, r5, [sp, #-8]!
    3088:	bic.w	r1, r0, #7
    308c:	mvn.w	ip, #0
    3090:	ands.w	r4, r0, #7
    3094:	pld	[r1, #32]
    3098:	bne.w	312e <strlen+0xae>
    309c:	mov.w	r4, #0
    30a0:	mvn.w	r0, #7
    30a4:	ldrd	r2, r3, [r1]
    30a8:	pld	[r1, #64]	; 0x40
    30ac:	add.w	r0, r0, #8
    30b0:	uadd8	r2, r2, ip
    30b4:	sel	r2, r4, ip
    30b8:	uadd8	r3, r3, ip
    30bc:	sel	r3, r2, ip
    30c0:	cbnz	r3, 3116 <strlen+0x96>
    30c2:	ldrd	r2, r3, [r1, #8]
    30c6:	uadd8	r2, r2, ip
    30ca:	add.w	r0, r0, #8
    30ce:	sel	r2, r4, ip
    30d2:	uadd8	r3, r3, ip
    30d6:	sel	r3, r2, ip
    30da:	cbnz	r3, 3116 <strlen+0x96>
    30dc:	ldrd	r2, r3, [r1, #16]
    30e0:	uadd8	r2, r2, ip
    30e4:	add.w	r0, r0, #8
    30e8:	sel	r2, r4, ip
    30ec:	uadd8	r3, r3, ip
    30f0:	sel	r3, r2, ip
    30f4:	cbnz	r3, 3116 <strlen+0x96>
    30f6:	ldrd	r2, r3, [r1, #24]
    30fa:	add.w	r1, r1, #32
    30fe:	uadd8	r2, r2, ip
    3102:	add.w	r0, r0, #8
    3106:	sel	r2, r4, ip
    310a:	uadd8	r3, r3, ip
    310e:	sel	r3, r2, ip
    3112:	cmp	r3, #0
    3114:	beq.n	30a4 <strlen+0x24>
    3116:	cmp	r2, #0
    3118:	itt	eq
    311a:	addeq	r0, #4
    311c:	moveq	r2, r3
    311e:	rev	r2, r2
    3120:	clz	r2, r2
    3124:	ldrd	r4, r5, [sp], #8
    3128:	add.w	r0, r0, r2, lsr #3
    312c:	bx	lr
    312e:	ldrd	r2, r3, [r1]
    3132:	and.w	r5, r4, #3
    3136:	rsb	r0, r4, #0
    313a:	mov.w	r5, r5, lsl #3
    313e:	tst.w	r4, #4
    3142:	pld	[r1, #64]	; 0x40
    3146:	lsl.w	r5, ip, r5
    314a:	orn	r2, r2, r5
    314e:	itt	ne
    3150:	ornne	r3, r3, r5
    3154:	movne	r2, ip
    3156:	mov.w	r4, #0
    315a:	b.n	30b0 <strlen+0x30>

0000315c <_vdprintf_r>:
    315c:	push	{r4, r5, r6, r7, lr}
    315e:	sub.w	sp, sp, #532	; 0x214
    3162:	add	r5, sp, #16
    3164:	str	r3, [sp, #0]
    3166:	mov	r7, r1
    3168:	mov	r3, r2
    316a:	mov.w	r4, #512	; 0x200
    316e:	add	r2, sp, #12
    3170:	mov	r1, r5
    3172:	str	r4, [sp, #12]
    3174:	mov	r6, r0
    3176:	bl	3c04 <_vasnprintf_r>
    317a:	cbz	r0, 31a0 <_vdprintf_r+0x44>
    317c:	mov	r4, r0
    317e:	mov	r2, r0
    3180:	mov	r1, r7
    3182:	ldr	r3, [sp, #12]
    3184:	mov	r0, r6
    3186:	bl	31dc <_write_r>
    318a:	cmp	r4, r5
    318c:	str	r0, [sp, #12]
    318e:	beq.n	319a <_vdprintf_r+0x3e>
    3190:	mov	r0, r6
    3192:	mov	r1, r4
    3194:	bl	3348 <_free_r>
    3198:	ldr	r0, [sp, #12]
    319a:	add.w	sp, sp, #532	; 0x214
    319e:	pop	{r4, r5, r6, r7, pc}
    31a0:	mov.w	r0, #4294967295
    31a4:	b.n	319a <_vdprintf_r+0x3e>
    31a6:	nop

000031a8 <vdprintf>:
    31a8:	push	{r4}
    31aa:	ldr	r4, [pc, #16]	; (31bc <vdprintf+0x14>)
    31ac:	mov	r3, r2
    31ae:	mov	r2, r1
    31b0:	mov	r1, r0
    31b2:	ldr	r0, [r4, #0]
    31b4:	ldr.w	r4, [sp], #4
    31b8:	b.w	315c <_vdprintf_r>
    31bc:	.word	0x20000aa0

000031c0 <__ascii_wctomb>:
    31c0:	cbz	r1, 31cc <__ascii_wctomb+0xc>
    31c2:	cmp	r2, #255	; 0xff
    31c4:	bhi.n	31d0 <__ascii_wctomb+0x10>
    31c6:	strb	r2, [r1, #0]
    31c8:	movs	r0, #1
    31ca:	bx	lr
    31cc:	mov	r0, r1
    31ce:	bx	lr
    31d0:	movs	r3, #138	; 0x8a
    31d2:	str	r3, [r0, #0]
    31d4:	mov.w	r0, #4294967295
    31d8:	bx	lr
    31da:	nop

000031dc <_write_r>:
    31dc:	push	{r4, r5, r6, lr}
    31de:	mov	r5, r1
    31e0:	ldr	r4, [pc, #32]	; (3204 <_write_r+0x28>)
    31e2:	mov	r1, r2
    31e4:	mov	r6, r0
    31e6:	mov	r2, r3
    31e8:	mov	r0, r5
    31ea:	movs	r3, #0
    31ec:	str	r3, [r4, #0]
    31ee:	bl	ea8 <_write>
    31f2:	adds	r3, r0, #1
    31f4:	beq.n	31f8 <_write_r+0x1c>
    31f6:	pop	{r4, r5, r6, pc}
    31f8:	ldr	r3, [r4, #0]
    31fa:	cmp	r3, #0
    31fc:	beq.n	31f6 <_write_r+0x1a>
    31fe:	str	r3, [r6, #0]
    3200:	pop	{r4, r5, r6, pc}
    3202:	nop
    3204:	.word	0x200036c0

00003208 <__register_exitproc>:
    3208:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    320c:	ldr	r4, [pc, #148]	; (32a4 <__register_exitproc+0x9c>)
    320e:	ldr	r5, [r4, #0]
    3210:	ldr.w	r4, [r5, #328]	; 0x148
    3214:	mov	r6, r0
    3216:	mov	r8, r1
    3218:	mov	sl, r2
    321a:	mov	r9, r3
    321c:	cbz	r4, 3290 <__register_exitproc+0x88>
    321e:	ldr	r0, [r4, #4]
    3220:	cmp	r0, #31
    3222:	bgt.n	3254 <__register_exitproc+0x4c>
    3224:	adds	r3, r0, #1
    3226:	cbz	r6, 3246 <__register_exitproc+0x3e>
    3228:	add.w	r5, r4, r0, lsl #2
    322c:	movs	r2, #1
    322e:	str.w	sl, [r5, #136]	; 0x88
    3232:	ldr.w	r1, [r4, #392]	; 0x188
    3236:	lsls	r2, r0
    3238:	orrs	r1, r2
    323a:	cmp	r6, #2
    323c:	str.w	r1, [r4, #392]	; 0x188
    3240:	str.w	r9, [r5, #264]	; 0x108
    3244:	beq.n	3284 <__register_exitproc+0x7c>
    3246:	adds	r0, #2
    3248:	str	r3, [r4, #4]
    324a:	str.w	r8, [r4, r0, lsl #2]
    324e:	movs	r0, #0
    3250:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3254:	ldr	r3, [pc, #80]	; (32a8 <__register_exitproc+0xa0>)
    3256:	cbz	r3, 329a <__register_exitproc+0x92>
    3258:	mov.w	r0, #400	; 0x190
    325c:	bl	253c <malloc>
    3260:	mov	r4, r0
    3262:	cbz	r0, 329a <__register_exitproc+0x92>
    3264:	ldr.w	r3, [r5, #328]	; 0x148
    3268:	movs	r7, #0
    326a:	stmia.w	r0, {r3, r7}
    326e:	str.w	r4, [r5, #328]	; 0x148
    3272:	mov	r0, r7
    3274:	movs	r3, #1
    3276:	str.w	r7, [r4, #392]	; 0x188
    327a:	str.w	r7, [r4, #396]	; 0x18c
    327e:	cmp	r6, #0
    3280:	beq.n	3246 <__register_exitproc+0x3e>
    3282:	b.n	3228 <__register_exitproc+0x20>
    3284:	ldr.w	r1, [r4, #396]	; 0x18c
    3288:	orrs	r2, r1
    328a:	str.w	r2, [r4, #396]	; 0x18c
    328e:	b.n	3246 <__register_exitproc+0x3e>
    3290:	add.w	r4, r5, #332	; 0x14c
    3294:	str.w	r4, [r5, #328]	; 0x148
    3298:	b.n	321e <__register_exitproc+0x16>
    329a:	mov.w	r0, #4294967295
    329e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32a2:	nop
    32a4:	.word	0x200003a0
    32a8:	.word	0x0000253d

000032ac <_malloc_trim_r>:
    32ac:	push	{r3, r4, r5, r6, r7, lr}
    32ae:	ldr	r7, [pc, #140]	; (333c <_malloc_trim_r+0x90>)
    32b0:	mov	r4, r1
    32b2:	mov	r6, r0
    32b4:	bl	2c5c <__malloc_lock>
    32b8:	ldr	r3, [r7, #8]
    32ba:	ldr	r5, [r3, #4]
    32bc:	bic.w	r5, r5, #3
    32c0:	subs	r1, r5, r4
    32c2:	addw	r1, r1, #4079	; 0xfef
    32c6:	bic.w	r1, r1, #4080	; 0xff0
    32ca:	bic.w	r1, r1, #15
    32ce:	sub.w	r4, r1, #4096	; 0x1000
    32d2:	cmp.w	r4, #4096	; 0x1000
    32d6:	blt.n	32e8 <_malloc_trim_r+0x3c>
    32d8:	movs	r1, #0
    32da:	mov	r0, r6
    32dc:	bl	3044 <_sbrk_r>
    32e0:	ldr	r3, [r7, #8]
    32e2:	add	r3, r5
    32e4:	cmp	r0, r3
    32e6:	beq.n	32f2 <_malloc_trim_r+0x46>
    32e8:	mov	r0, r6
    32ea:	bl	2c60 <__malloc_unlock>
    32ee:	movs	r0, #0
    32f0:	pop	{r3, r4, r5, r6, r7, pc}
    32f2:	negs	r1, r4
    32f4:	mov	r0, r6
    32f6:	bl	3044 <_sbrk_r>
    32fa:	adds	r0, #1
    32fc:	beq.n	331a <_malloc_trim_r+0x6e>
    32fe:	ldr	r3, [pc, #64]	; (3340 <_malloc_trim_r+0x94>)
    3300:	ldr	r2, [r7, #8]
    3302:	ldr	r1, [r3, #0]
    3304:	subs	r5, r5, r4
    3306:	orr.w	r5, r5, #1
    330a:	mov	r0, r6
    330c:	subs	r1, r1, r4
    330e:	str	r5, [r2, #4]
    3310:	str	r1, [r3, #0]
    3312:	bl	2c60 <__malloc_unlock>
    3316:	movs	r0, #1
    3318:	pop	{r3, r4, r5, r6, r7, pc}
    331a:	movs	r1, #0
    331c:	mov	r0, r6
    331e:	bl	3044 <_sbrk_r>
    3322:	ldr	r2, [r7, #8]
    3324:	subs	r3, r0, r2
    3326:	cmp	r3, #15
    3328:	ble.n	32e8 <_malloc_trim_r+0x3c>
    332a:	ldr	r4, [pc, #24]	; (3344 <_malloc_trim_r+0x98>)
    332c:	ldr	r1, [pc, #16]	; (3340 <_malloc_trim_r+0x94>)
    332e:	ldr	r4, [r4, #0]
    3330:	orr.w	r3, r3, #1
    3334:	subs	r0, r0, r4
    3336:	str	r3, [r2, #4]
    3338:	str	r0, [r1, #0]
    333a:	b.n	32e8 <_malloc_trim_r+0x3c>
    333c:	.word	0x20000c10
    3340:	.word	0x200012dc
    3344:	.word	0x2000101c

00003348 <_free_r>:
    3348:	cmp	r1, #0
    334a:	beq.n	33d8 <_free_r+0x90>
    334c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3350:	mov	r5, r1
    3352:	mov	r8, r0
    3354:	bl	2c5c <__malloc_lock>
    3358:	ldr.w	r7, [r5, #-4]
    335c:	ldr	r1, [pc, #424]	; (3508 <_free_r+0x1c0>)
    335e:	bic.w	r3, r7, #1
    3362:	sub.w	r4, r5, #8
    3366:	adds	r2, r4, r3
    3368:	ldr	r6, [r1, #8]
    336a:	ldr	r0, [r2, #4]
    336c:	cmp	r2, r6
    336e:	bic.w	r0, r0, #3
    3372:	beq.n	343a <_free_r+0xf2>
    3374:	lsls	r6, r7, #31
    3376:	str	r0, [r2, #4]
    3378:	bmi.n	3392 <_free_r+0x4a>
    337a:	ldr.w	r7, [r5, #-8]
    337e:	subs	r4, r4, r7
    3380:	add.w	lr, r1, #8
    3384:	ldr	r5, [r4, #8]
    3386:	cmp	r5, lr
    3388:	add	r3, r7
    338a:	beq.n	346c <_free_r+0x124>
    338c:	ldr	r7, [r4, #12]
    338e:	str	r7, [r5, #12]
    3390:	str	r5, [r7, #8]
    3392:	adds	r5, r2, r0
    3394:	ldr	r5, [r5, #4]
    3396:	lsls	r5, r5, #31
    3398:	bpl.n	3420 <_free_r+0xd8>
    339a:	orr.w	r2, r3, #1
    339e:	str	r2, [r4, #4]
    33a0:	str	r3, [r4, r3]
    33a2:	cmp.w	r3, #512	; 0x200
    33a6:	bcs.n	33da <_free_r+0x92>
    33a8:	lsrs	r3, r3, #3
    33aa:	adds	r2, r3, #1
    33ac:	ldr	r5, [r1, #4]
    33ae:	ldr.w	r7, [r1, r2, lsl #3]
    33b2:	str	r7, [r4, #8]
    33b4:	movs	r0, #1
    33b6:	asrs	r3, r3, #2
    33b8:	lsl.w	r3, r0, r3
    33bc:	add.w	r0, r1, r2, lsl #3
    33c0:	orrs	r5, r3
    33c2:	subs	r0, #8
    33c4:	str	r0, [r4, #12]
    33c6:	str	r5, [r1, #4]
    33c8:	str.w	r4, [r1, r2, lsl #3]
    33cc:	str	r4, [r7, #12]
    33ce:	mov	r0, r8
    33d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    33d4:	b.w	2c60 <__malloc_unlock>
    33d8:	bx	lr
    33da:	lsrs	r2, r3, #9
    33dc:	cmp	r2, #4
    33de:	bhi.n	3488 <_free_r+0x140>
    33e0:	lsrs	r2, r3, #6
    33e2:	add.w	r7, r2, #57	; 0x39
    33e6:	lsls	r7, r7, #1
    33e8:	add.w	r5, r2, #56	; 0x38
    33ec:	add.w	r0, r1, r7, lsl #2
    33f0:	ldr.w	r2, [r1, r7, lsl #2]
    33f4:	ldr	r1, [pc, #272]	; (3508 <_free_r+0x1c0>)
    33f6:	subs	r0, #8
    33f8:	cmp	r0, r2
    33fa:	beq.n	3498 <_free_r+0x150>
    33fc:	ldr	r1, [r2, #4]
    33fe:	bic.w	r1, r1, #3
    3402:	cmp	r3, r1
    3404:	bcs.n	340c <_free_r+0xc4>
    3406:	ldr	r2, [r2, #8]
    3408:	cmp	r0, r2
    340a:	bne.n	33fc <_free_r+0xb4>
    340c:	ldr	r0, [r2, #12]
    340e:	str	r0, [r4, #12]
    3410:	str	r2, [r4, #8]
    3412:	str	r4, [r0, #8]
    3414:	str	r4, [r2, #12]
    3416:	mov	r0, r8
    3418:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    341c:	b.w	2c60 <__malloc_unlock>
    3420:	ldr	r5, [r2, #8]
    3422:	ldr	r7, [pc, #232]	; (350c <_free_r+0x1c4>)
    3424:	cmp	r5, r7
    3426:	add	r3, r0
    3428:	beq.n	34aa <_free_r+0x162>
    342a:	ldr	r0, [r2, #12]
    342c:	str	r0, [r5, #12]
    342e:	orr.w	r2, r3, #1
    3432:	str	r5, [r0, #8]
    3434:	str	r2, [r4, #4]
    3436:	str	r3, [r4, r3]
    3438:	b.n	33a2 <_free_r+0x5a>
    343a:	lsls	r7, r7, #31
    343c:	add	r3, r0
    343e:	bmi.n	3450 <_free_r+0x108>
    3440:	ldr.w	r2, [r5, #-8]
    3444:	subs	r4, r4, r2
    3446:	add	r3, r2
    3448:	ldr	r0, [r4, #8]
    344a:	ldr	r2, [r4, #12]
    344c:	str	r2, [r0, #12]
    344e:	str	r0, [r2, #8]
    3450:	ldr	r2, [pc, #188]	; (3510 <_free_r+0x1c8>)
    3452:	ldr	r2, [r2, #0]
    3454:	orr.w	r0, r3, #1
    3458:	cmp	r3, r2
    345a:	str	r0, [r4, #4]
    345c:	str	r4, [r1, #8]
    345e:	bcc.n	33ce <_free_r+0x86>
    3460:	ldr	r3, [pc, #176]	; (3514 <_free_r+0x1cc>)
    3462:	mov	r0, r8
    3464:	ldr	r1, [r3, #0]
    3466:	bl	32ac <_malloc_trim_r>
    346a:	b.n	33ce <_free_r+0x86>
    346c:	adds	r1, r2, r0
    346e:	ldr	r1, [r1, #4]
    3470:	lsls	r1, r1, #31
    3472:	bmi.n	34fe <_free_r+0x1b6>
    3474:	ldr	r1, [r2, #8]
    3476:	ldr	r2, [r2, #12]
    3478:	str	r2, [r1, #12]
    347a:	add	r3, r0
    347c:	orr.w	r0, r3, #1
    3480:	str	r1, [r2, #8]
    3482:	str	r0, [r4, #4]
    3484:	str	r3, [r4, r3]
    3486:	b.n	33ce <_free_r+0x86>
    3488:	cmp	r2, #20
    348a:	bhi.n	34bc <_free_r+0x174>
    348c:	add.w	r7, r2, #92	; 0x5c
    3490:	lsls	r7, r7, #1
    3492:	add.w	r5, r2, #91	; 0x5b
    3496:	b.n	33ec <_free_r+0xa4>
    3498:	asrs	r2, r5, #2
    349a:	ldr	r3, [r1, #4]
    349c:	movs	r5, #1
    349e:	lsl.w	r2, r5, r2
    34a2:	orrs	r3, r2
    34a4:	str	r3, [r1, #4]
    34a6:	mov	r2, r0
    34a8:	b.n	340e <_free_r+0xc6>
    34aa:	orr.w	r2, r3, #1
    34ae:	str	r4, [r1, #20]
    34b0:	str	r4, [r1, #16]
    34b2:	str	r5, [r4, #12]
    34b4:	str	r5, [r4, #8]
    34b6:	str	r2, [r4, #4]
    34b8:	str	r3, [r4, r3]
    34ba:	b.n	33ce <_free_r+0x86>
    34bc:	cmp	r2, #84	; 0x54
    34be:	bhi.n	34ce <_free_r+0x186>
    34c0:	lsrs	r2, r3, #12
    34c2:	add.w	r7, r2, #111	; 0x6f
    34c6:	lsls	r7, r7, #1
    34c8:	add.w	r5, r2, #110	; 0x6e
    34cc:	b.n	33ec <_free_r+0xa4>
    34ce:	cmp.w	r2, #340	; 0x154
    34d2:	bhi.n	34e2 <_free_r+0x19a>
    34d4:	lsrs	r2, r3, #15
    34d6:	add.w	r7, r2, #120	; 0x78
    34da:	lsls	r7, r7, #1
    34dc:	add.w	r5, r2, #119	; 0x77
    34e0:	b.n	33ec <_free_r+0xa4>
    34e2:	movw	r0, #1364	; 0x554
    34e6:	cmp	r2, r0
    34e8:	bhi.n	34f8 <_free_r+0x1b0>
    34ea:	lsrs	r2, r3, #18
    34ec:	add.w	r7, r2, #125	; 0x7d
    34f0:	lsls	r7, r7, #1
    34f2:	add.w	r5, r2, #124	; 0x7c
    34f6:	b.n	33ec <_free_r+0xa4>
    34f8:	movs	r7, #254	; 0xfe
    34fa:	movs	r5, #126	; 0x7e
    34fc:	b.n	33ec <_free_r+0xa4>
    34fe:	orr.w	r2, r3, #1
    3502:	str	r2, [r4, #4]
    3504:	str	r3, [r4, r3]
    3506:	b.n	33ce <_free_r+0x86>
    3508:	.word	0x20000c10
    350c:	.word	0x20000c18
    3510:	.word	0x20001018
    3514:	.word	0x200012d8

00003518 <_localeconv_r>:
    3518:	ldr	r2, [pc, #16]	; (352c <_localeconv_r+0x14>)
    351a:	ldr	r3, [pc, #20]	; (3530 <_localeconv_r+0x18>)
    351c:	ldr	r2, [r2, #0]
    351e:	ldr	r0, [r2, #52]	; 0x34
    3520:	cmp	r0, #0
    3522:	it	eq
    3524:	moveq	r0, r3
    3526:	adds	r0, #240	; 0xf0
    3528:	bx	lr
    352a:	nop
    352c:	.word	0x20000aa0
    3530:	.word	0x20000aa4
	...

00003540 <memchr>:
    3540:	and.w	r1, r1, #255	; 0xff
    3544:	cmp	r2, #16
    3546:	blt.n	35a0 <memchr+0x60>
    3548:	tst.w	r0, #7
    354c:	beq.n	3560 <memchr+0x20>
    354e:	ldrb.w	r3, [r0], #1
    3552:	subs	r2, #1
    3554:	cmp	r3, r1
    3556:	beq.n	35b4 <memchr+0x74>
    3558:	tst.w	r0, #7
    355c:	cbz	r2, 35b0 <memchr+0x70>
    355e:	bne.n	354e <memchr+0xe>
    3560:	push	{r4, r5, r6, r7}
    3562:	orr.w	r1, r1, r1, lsl #8
    3566:	orr.w	r1, r1, r1, lsl #16
    356a:	bic.w	r4, r2, #7
    356e:	mvns.w	r7, #0
    3572:	movs	r3, #0
    3574:	ldrd	r5, r6, [r0], #8
    3578:	subs	r4, #8
    357a:	eor.w	r5, r5, r1
    357e:	eor.w	r6, r6, r1
    3582:	uadd8	r5, r5, r7
    3586:	sel	r5, r3, r7
    358a:	uadd8	r6, r6, r7
    358e:	sel	r6, r5, r7
    3592:	cbnz	r6, 35b8 <memchr+0x78>
    3594:	bne.n	3574 <memchr+0x34>
    3596:	pop	{r4, r5, r6, r7}
    3598:	and.w	r1, r1, #255	; 0xff
    359c:	and.w	r2, r2, #7
    35a0:	cbz	r2, 35b0 <memchr+0x70>
    35a2:	ldrb.w	r3, [r0], #1
    35a6:	subs	r2, #1
    35a8:	eor.w	r3, r3, r1
    35ac:	cbz	r3, 35b4 <memchr+0x74>
    35ae:	bne.n	35a2 <memchr+0x62>
    35b0:	movs	r0, #0
    35b2:	bx	lr
    35b4:	subs	r0, #1
    35b6:	bx	lr
    35b8:	cmp	r5, #0
    35ba:	itte	eq
    35bc:	moveq	r5, r6
    35be:	subeq	r0, #3
    35c0:	subne	r0, #7
    35c2:	tst.w	r5, #1
    35c6:	bne.n	35d8 <memchr+0x98>
    35c8:	adds	r0, #1
    35ca:	tst.w	r5, #256	; 0x100
    35ce:	ittt	eq
    35d0:	addeq	r0, #1
    35d2:	tsteq.w	r5, #98304	; 0x18000
    35d6:	addeq	r0, #1
    35d8:	pop	{r4, r5, r6, r7}
    35da:	subs	r0, #1
    35dc:	bx	lr
    35de:	nop

000035e0 <_Balloc>:
    35e0:	ldr	r3, [r0, #76]	; 0x4c
    35e2:	push	{r4, r5, r6, lr}
    35e4:	mov	r5, r0
    35e6:	mov	r4, r1
    35e8:	cbz	r3, 35fe <_Balloc+0x1e>
    35ea:	ldr.w	r0, [r3, r4, lsl #2]
    35ee:	cbz	r0, 3612 <_Balloc+0x32>
    35f0:	ldr	r2, [r0, #0]
    35f2:	str.w	r2, [r3, r4, lsl #2]
    35f6:	movs	r3, #0
    35f8:	str	r3, [r0, #16]
    35fa:	str	r3, [r0, #12]
    35fc:	pop	{r4, r5, r6, pc}
    35fe:	movs	r2, #33	; 0x21
    3600:	movs	r1, #4
    3602:	bl	3c64 <_calloc_r>
    3606:	str	r0, [r5, #76]	; 0x4c
    3608:	mov	r3, r0
    360a:	cmp	r0, #0
    360c:	bne.n	35ea <_Balloc+0xa>
    360e:	movs	r0, #0
    3610:	pop	{r4, r5, r6, pc}
    3612:	movs	r1, #1
    3614:	lsl.w	r6, r1, r4
    3618:	adds	r2, r6, #5
    361a:	mov	r0, r5
    361c:	lsls	r2, r2, #2
    361e:	bl	3c64 <_calloc_r>
    3622:	cmp	r0, #0
    3624:	beq.n	360e <_Balloc+0x2e>
    3626:	str	r4, [r0, #4]
    3628:	str	r6, [r0, #8]
    362a:	b.n	35f6 <_Balloc+0x16>

0000362c <_Bfree>:
    362c:	cbz	r1, 363c <_Bfree+0x10>
    362e:	ldr	r3, [r0, #76]	; 0x4c
    3630:	ldr	r2, [r1, #4]
    3632:	ldr.w	r0, [r3, r2, lsl #2]
    3636:	str	r0, [r1, #0]
    3638:	str.w	r1, [r3, r2, lsl #2]
    363c:	bx	lr
    363e:	nop

00003640 <__multadd>:
    3640:	push	{r4, r5, r6, r7, lr}
    3642:	ldr	r4, [r1, #16]
    3644:	sub	sp, #12
    3646:	mov	r5, r1
    3648:	mov	r6, r0
    364a:	add.w	lr, r1, #20
    364e:	movs	r7, #0
    3650:	ldr.w	r0, [lr]
    3654:	uxth	r1, r0
    3656:	mla	r1, r2, r1, r3
    365a:	lsrs	r3, r1, #16
    365c:	lsrs	r0, r0, #16
    365e:	mla	r3, r2, r0, r3
    3662:	uxth	r1, r1
    3664:	adds	r7, #1
    3666:	add.w	r1, r1, r3, lsl #16
    366a:	cmp	r4, r7
    366c:	str.w	r1, [lr], #4
    3670:	mov.w	r3, r3, lsr #16
    3674:	bgt.n	3650 <__multadd+0x10>
    3676:	cbz	r3, 3688 <__multadd+0x48>
    3678:	ldr	r2, [r5, #8]
    367a:	cmp	r4, r2
    367c:	bge.n	368e <__multadd+0x4e>
    367e:	add.w	r2, r5, r4, lsl #2
    3682:	adds	r4, #1
    3684:	str	r3, [r2, #20]
    3686:	str	r4, [r5, #16]
    3688:	mov	r0, r5
    368a:	add	sp, #12
    368c:	pop	{r4, r5, r6, r7, pc}
    368e:	ldr	r1, [r5, #4]
    3690:	str	r3, [sp, #4]
    3692:	adds	r1, #1
    3694:	mov	r0, r6
    3696:	bl	35e0 <_Balloc>
    369a:	ldr	r2, [r5, #16]
    369c:	adds	r2, #2
    369e:	add.w	r1, r5, #12
    36a2:	mov	r7, r0
    36a4:	lsls	r2, r2, #2
    36a6:	adds	r0, #12
    36a8:	bl	ef4 <memcpy>
    36ac:	ldr	r2, [r6, #76]	; 0x4c
    36ae:	ldr	r1, [r5, #4]
    36b0:	ldr	r3, [sp, #4]
    36b2:	ldr.w	r0, [r2, r1, lsl #2]
    36b6:	str	r0, [r5, #0]
    36b8:	str.w	r5, [r2, r1, lsl #2]
    36bc:	mov	r5, r7
    36be:	b.n	367e <__multadd+0x3e>

000036c0 <__hi0bits>:
    36c0:	lsrs	r3, r0, #16
    36c2:	lsls	r3, r3, #16
    36c4:	cbnz	r3, 36f4 <__hi0bits+0x34>
    36c6:	lsls	r0, r0, #16
    36c8:	movs	r3, #16
    36ca:	tst.w	r0, #4278190080	; 0xff000000
    36ce:	itt	eq
    36d0:	lsleq	r0, r0, #8
    36d2:	addeq	r3, #8
    36d4:	tst.w	r0, #4026531840	; 0xf0000000
    36d8:	itt	eq
    36da:	lsleq	r0, r0, #4
    36dc:	addeq	r3, #4
    36de:	tst.w	r0, #3221225472	; 0xc0000000
    36e2:	itt	eq
    36e4:	lsleq	r0, r0, #2
    36e6:	addeq	r3, #2
    36e8:	cmp	r0, #0
    36ea:	blt.n	36fc <__hi0bits+0x3c>
    36ec:	lsls	r2, r0, #1
    36ee:	bmi.n	36f8 <__hi0bits+0x38>
    36f0:	movs	r0, #32
    36f2:	bx	lr
    36f4:	movs	r3, #0
    36f6:	b.n	36ca <__hi0bits+0xa>
    36f8:	adds	r0, r3, #1
    36fa:	bx	lr
    36fc:	mov	r0, r3
    36fe:	bx	lr

00003700 <__lo0bits>:
    3700:	ldr	r3, [r0, #0]
    3702:	ands.w	r2, r3, #7
    3706:	beq.n	3718 <__lo0bits+0x18>
    3708:	lsls	r1, r3, #31
    370a:	bmi.n	374e <__lo0bits+0x4e>
    370c:	lsls	r2, r3, #30
    370e:	bmi.n	3752 <__lo0bits+0x52>
    3710:	lsrs	r3, r3, #2
    3712:	str	r3, [r0, #0]
    3714:	movs	r0, #2
    3716:	bx	lr
    3718:	uxth	r1, r3
    371a:	cbnz	r1, 3720 <__lo0bits+0x20>
    371c:	lsrs	r3, r3, #16
    371e:	movs	r2, #16
    3720:	tst.w	r3, #255	; 0xff
    3724:	itt	eq
    3726:	lsreq	r3, r3, #8
    3728:	addeq	r2, #8
    372a:	lsls	r1, r3, #28
    372c:	itt	eq
    372e:	lsreq	r3, r3, #4
    3730:	addeq	r2, #4
    3732:	lsls	r1, r3, #30
    3734:	itt	eq
    3736:	lsreq	r3, r3, #2
    3738:	addeq	r2, #2
    373a:	lsls	r1, r3, #31
    373c:	bmi.n	3748 <__lo0bits+0x48>
    373e:	lsrs	r3, r3, #1
    3740:	bne.n	3746 <__lo0bits+0x46>
    3742:	movs	r0, #32
    3744:	bx	lr
    3746:	adds	r2, #1
    3748:	str	r3, [r0, #0]
    374a:	mov	r0, r2
    374c:	bx	lr
    374e:	movs	r0, #0
    3750:	bx	lr
    3752:	lsrs	r3, r3, #1
    3754:	str	r3, [r0, #0]
    3756:	movs	r0, #1
    3758:	bx	lr
    375a:	nop

0000375c <__i2b>:
    375c:	push	{r4, lr}
    375e:	mov	r4, r1
    3760:	movs	r1, #1
    3762:	bl	35e0 <_Balloc>
    3766:	movs	r2, #1
    3768:	str	r4, [r0, #20]
    376a:	str	r2, [r0, #16]
    376c:	pop	{r4, pc}
    376e:	nop

00003770 <__multiply>:
    3770:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3774:	ldr	r5, [r1, #16]
    3776:	ldr	r7, [r2, #16]
    3778:	cmp	r5, r7
    377a:	sub	sp, #12
    377c:	mov	r4, r1
    377e:	mov	r6, r2
    3780:	bge.n	378c <__multiply+0x1c>
    3782:	mov	r2, r5
    3784:	mov	r4, r6
    3786:	mov	r5, r7
    3788:	mov	r6, r1
    378a:	mov	r7, r2
    378c:	ldr	r3, [r4, #8]
    378e:	ldr	r1, [r4, #4]
    3790:	add.w	r8, r5, r7
    3794:	cmp	r8, r3
    3796:	it	gt
    3798:	addgt	r1, #1
    379a:	bl	35e0 <_Balloc>
    379e:	add.w	ip, r0, #20
    37a2:	add.w	r9, ip, r8, lsl #2
    37a6:	cmp	ip, r9
    37a8:	str	r0, [sp, #0]
    37aa:	bcs.n	37b8 <__multiply+0x48>
    37ac:	mov	r3, ip
    37ae:	movs	r1, #0
    37b0:	str.w	r1, [r3], #4
    37b4:	cmp	r9, r3
    37b6:	bhi.n	37b0 <__multiply+0x40>
    37b8:	add.w	r2, r6, #20
    37bc:	add.w	sl, r2, r7, lsl #2
    37c0:	add.w	r3, r4, #20
    37c4:	cmp	r2, sl
    37c6:	add.w	lr, r3, r5, lsl #2
    37ca:	bcs.n	3876 <__multiply+0x106>
    37cc:	str.w	r9, [sp, #4]
    37d0:	mov	r9, r3
    37d2:	ldr.w	r3, [r2], #4
    37d6:	uxth.w	fp, r3
    37da:	cmp.w	fp, #0
    37de:	beq.n	3822 <__multiply+0xb2>
    37e0:	movs	r0, #0
    37e2:	mov	r7, r9
    37e4:	mov	r6, ip
    37e6:	mov	r5, r0
    37e8:	b.n	37ec <__multiply+0x7c>
    37ea:	mov	r6, r3
    37ec:	ldr.w	r4, [r7], #4
    37f0:	ldr	r0, [r6, #0]
    37f2:	uxth	r1, r4
    37f4:	uxth	r3, r0
    37f6:	mla	r1, fp, r1, r3
    37fa:	lsrs	r4, r4, #16
    37fc:	lsrs	r0, r0, #16
    37fe:	adds	r3, r1, r5
    3800:	mla	r0, fp, r4, r0
    3804:	add.w	r0, r0, r3, lsr #16
    3808:	uxth	r1, r3
    380a:	mov	r3, r6
    380c:	orr.w	r1, r1, r0, lsl #16
    3810:	cmp	lr, r7
    3812:	mov.w	r5, r0, lsr #16
    3816:	str.w	r1, [r3], #4
    381a:	bhi.n	37ea <__multiply+0x7a>
    381c:	str	r5, [r6, #4]
    381e:	ldr.w	r3, [r2, #-4]
    3822:	movs.w	fp, r3, lsr #16
    3826:	beq.n	386a <__multiply+0xfa>
    3828:	ldr.w	r3, [ip]
    382c:	mov	r7, ip
    382e:	mov	r0, r3
    3830:	mov	r5, r9
    3832:	movs	r1, #0
    3834:	b.n	3838 <__multiply+0xc8>
    3836:	mov	r7, r6
    3838:	ldrh	r4, [r5, #0]
    383a:	lsrs	r0, r0, #16
    383c:	mla	r0, fp, r4, r0
    3840:	add	r1, r0
    3842:	uxth	r4, r3
    3844:	mov	r6, r7
    3846:	orr.w	r3, r4, r1, lsl #16
    384a:	str.w	r3, [r6], #4
    384e:	ldr	r0, [r7, #4]
    3850:	ldr.w	r4, [r5], #4
    3854:	uxth	r3, r0
    3856:	lsrs	r4, r4, #16
    3858:	mla	r4, fp, r4, r3
    385c:	add.w	r3, r4, r1, lsr #16
    3860:	cmp	lr, r5
    3862:	mov.w	r1, r3, lsr #16
    3866:	bhi.n	3836 <__multiply+0xc6>
    3868:	str	r3, [r7, #4]
    386a:	cmp	sl, r2
    386c:	add.w	ip, ip, #4
    3870:	bhi.n	37d2 <__multiply+0x62>
    3872:	ldr.w	r9, [sp, #4]
    3876:	cmp.w	r8, #0
    387a:	ble.n	3894 <__multiply+0x124>
    387c:	ldr.w	r3, [r9, #-4]
    3880:	sub.w	r9, r9, #4
    3884:	cbz	r3, 388e <__multiply+0x11e>
    3886:	b.n	3894 <__multiply+0x124>
    3888:	ldr.w	r3, [r9, #-4]!
    388c:	cbnz	r3, 3894 <__multiply+0x124>
    388e:	subs.w	r8, r8, #1
    3892:	bne.n	3888 <__multiply+0x118>
    3894:	ldr	r0, [sp, #0]
    3896:	str.w	r8, [r0, #16]
    389a:	add	sp, #12
    389c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000038a0 <__pow5mult>:
    38a0:	ands.w	r3, r2, #3
    38a4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38a8:	mov	r4, r2
    38aa:	mov	r7, r0
    38ac:	bne.n	390c <__pow5mult+0x6c>
    38ae:	mov	r6, r1
    38b0:	asrs	r4, r4, #2
    38b2:	beq.n	38ee <__pow5mult+0x4e>
    38b4:	ldr	r5, [r7, #72]	; 0x48
    38b6:	cbz	r5, 391e <__pow5mult+0x7e>
    38b8:	lsls	r3, r4, #31
    38ba:	mov.w	r8, #0
    38be:	bmi.n	38ce <__pow5mult+0x2e>
    38c0:	asrs	r4, r4, #1
    38c2:	beq.n	38ee <__pow5mult+0x4e>
    38c4:	ldr	r0, [r5, #0]
    38c6:	cbz	r0, 38f4 <__pow5mult+0x54>
    38c8:	mov	r5, r0
    38ca:	lsls	r3, r4, #31
    38cc:	bpl.n	38c0 <__pow5mult+0x20>
    38ce:	mov	r2, r5
    38d0:	mov	r1, r6
    38d2:	mov	r0, r7
    38d4:	bl	3770 <__multiply>
    38d8:	cbz	r6, 3908 <__pow5mult+0x68>
    38da:	ldr	r2, [r6, #4]
    38dc:	ldr	r3, [r7, #76]	; 0x4c
    38de:	asrs	r4, r4, #1
    38e0:	ldr.w	r1, [r3, r2, lsl #2]
    38e4:	str	r1, [r6, #0]
    38e6:	str.w	r6, [r3, r2, lsl #2]
    38ea:	mov	r6, r0
    38ec:	bne.n	38c4 <__pow5mult+0x24>
    38ee:	mov	r0, r6
    38f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38f4:	mov	r2, r5
    38f6:	mov	r1, r5
    38f8:	mov	r0, r7
    38fa:	bl	3770 <__multiply>
    38fe:	str	r0, [r5, #0]
    3900:	str.w	r8, [r0]
    3904:	mov	r5, r0
    3906:	b.n	38ca <__pow5mult+0x2a>
    3908:	mov	r6, r0
    390a:	b.n	38c0 <__pow5mult+0x20>
    390c:	subs	r2, r3, #1
    390e:	ldr	r5, [pc, #44]	; (393c <__pow5mult+0x9c>)
    3910:	movs	r3, #0
    3912:	ldr.w	r2, [r5, r2, lsl #2]
    3916:	bl	3640 <__multadd>
    391a:	mov	r6, r0
    391c:	b.n	38b0 <__pow5mult+0x10>
    391e:	movs	r1, #1
    3920:	mov	r0, r7
    3922:	bl	35e0 <_Balloc>
    3926:	movw	r1, #625	; 0x271
    392a:	movs	r2, #1
    392c:	movs	r3, #0
    392e:	str	r1, [r0, #20]
    3930:	str	r2, [r0, #16]
    3932:	mov	r5, r0
    3934:	str	r0, [r7, #72]	; 0x48
    3936:	str	r3, [r0, #0]
    3938:	b.n	38b8 <__pow5mult+0x18>
    393a:	nop
    393c:	.word	0x200005a8

00003940 <__lshift>:
    3940:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3944:	mov	r9, r2
    3946:	ldr	r2, [r1, #16]
    3948:	ldr	r3, [r1, #8]
    394a:	mov.w	r4, r9, asr #5
    394e:	add.w	r8, r4, r2
    3952:	add.w	r5, r8, #1
    3956:	cmp	r5, r3
    3958:	mov	r6, r1
    395a:	mov	sl, r0
    395c:	ldr	r1, [r1, #4]
    395e:	ble.n	396a <__lshift+0x2a>
    3960:	lsls	r3, r3, #1
    3962:	cmp	r5, r3
    3964:	add.w	r1, r1, #1
    3968:	bgt.n	3960 <__lshift+0x20>
    396a:	mov	r0, sl
    396c:	bl	35e0 <_Balloc>
    3970:	cmp	r4, #0
    3972:	add.w	r2, r0, #20
    3976:	ble.n	39ea <__lshift+0xaa>
    3978:	add.w	r3, r2, r4, lsl #2
    397c:	movs	r1, #0
    397e:	str.w	r1, [r2], #4
    3982:	cmp	r3, r2
    3984:	bne.n	397e <__lshift+0x3e>
    3986:	ldr	r4, [r6, #16]
    3988:	add.w	r1, r6, #20
    398c:	ands.w	r9, r9, #31
    3990:	add.w	lr, r1, r4, lsl #2
    3994:	beq.n	39da <__lshift+0x9a>
    3996:	rsb	r2, r9, #32
    399a:	movs	r4, #0
    399c:	ldr	r7, [r1, #0]
    399e:	lsl.w	ip, r7, r9
    39a2:	orr.w	r4, ip, r4
    39a6:	mov	ip, r3
    39a8:	str.w	r4, [r3], #4
    39ac:	ldr.w	r4, [r1], #4
    39b0:	cmp	lr, r1
    39b2:	lsr.w	r4, r4, r2
    39b6:	bhi.n	399c <__lshift+0x5c>
    39b8:	str.w	r4, [ip, #4]
    39bc:	cbz	r4, 39c2 <__lshift+0x82>
    39be:	add.w	r5, r8, #2
    39c2:	ldr.w	r3, [sl, #76]	; 0x4c
    39c6:	ldr	r2, [r6, #4]
    39c8:	subs	r5, #1
    39ca:	ldr.w	r1, [r3, r2, lsl #2]
    39ce:	str	r5, [r0, #16]
    39d0:	str	r1, [r6, #0]
    39d2:	str.w	r6, [r3, r2, lsl #2]
    39d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    39da:	subs	r3, #4
    39dc:	ldr.w	r2, [r1], #4
    39e0:	str.w	r2, [r3, #4]!
    39e4:	cmp	lr, r1
    39e6:	bhi.n	39dc <__lshift+0x9c>
    39e8:	b.n	39c2 <__lshift+0x82>
    39ea:	mov	r3, r2
    39ec:	b.n	3986 <__lshift+0x46>
    39ee:	nop

000039f0 <__mcmp>:
    39f0:	ldr	r2, [r0, #16]
    39f2:	ldr	r3, [r1, #16]
    39f4:	subs	r2, r2, r3
    39f6:	bne.n	3a20 <__mcmp+0x30>
    39f8:	lsls	r3, r3, #2
    39fa:	adds	r0, #20
    39fc:	adds	r1, #20
    39fe:	add	r1, r3
    3a00:	push	{r4}
    3a02:	add	r3, r0
    3a04:	b.n	3a0a <__mcmp+0x1a>
    3a06:	cmp	r0, r3
    3a08:	bcs.n	3a24 <__mcmp+0x34>
    3a0a:	ldr.w	r4, [r3, #-4]!
    3a0e:	ldr.w	r2, [r1, #-4]!
    3a12:	cmp	r4, r2
    3a14:	beq.n	3a06 <__mcmp+0x16>
    3a16:	bcc.n	3a2c <__mcmp+0x3c>
    3a18:	movs	r0, #1
    3a1a:	ldr.w	r4, [sp], #4
    3a1e:	bx	lr
    3a20:	mov	r0, r2
    3a22:	bx	lr
    3a24:	movs	r0, #0
    3a26:	ldr.w	r4, [sp], #4
    3a2a:	bx	lr
    3a2c:	mov.w	r0, #4294967295
    3a30:	b.n	3a1a <__mcmp+0x2a>
    3a32:	nop

00003a34 <__mdiff>:
    3a34:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3a38:	ldr	r3, [r1, #16]
    3a3a:	mov	r7, r1
    3a3c:	ldr	r1, [r2, #16]
    3a3e:	subs	r3, r3, r1
    3a40:	cmp	r3, #0
    3a42:	mov	r8, r2
    3a44:	bne.n	3a76 <__mdiff+0x42>
    3a46:	lsls	r1, r1, #2
    3a48:	add.w	r2, r7, #20
    3a4c:	add.w	r5, r8, #20
    3a50:	adds	r3, r2, r1
    3a52:	add	r1, r5
    3a54:	b.n	3a5a <__mdiff+0x26>
    3a56:	cmp	r2, r3
    3a58:	bcs.n	3b18 <__mdiff+0xe4>
    3a5a:	ldr.w	r6, [r3, #-4]!
    3a5e:	ldr.w	r4, [r1, #-4]!
    3a62:	cmp	r6, r4
    3a64:	beq.n	3a56 <__mdiff+0x22>
    3a66:	bcs.n	3b2a <__mdiff+0xf6>
    3a68:	mov	r3, r7
    3a6a:	mov	r4, r2
    3a6c:	mov	r7, r8
    3a6e:	mov.w	r9, #1
    3a72:	mov	r8, r3
    3a74:	b.n	3a84 <__mdiff+0x50>
    3a76:	blt.n	3b34 <__mdiff+0x100>
    3a78:	add.w	r5, r7, #20
    3a7c:	add.w	r4, r2, #20
    3a80:	mov.w	r9, #0
    3a84:	ldr	r1, [r7, #4]
    3a86:	bl	35e0 <_Balloc>
    3a8a:	ldr.w	r3, [r8, #16]
    3a8e:	ldr	r6, [r7, #16]
    3a90:	str.w	r9, [r0, #12]
    3a94:	add.w	ip, r4, r3, lsl #2
    3a98:	mov	lr, r4
    3a9a:	add.w	r7, r5, r6, lsl #2
    3a9e:	add.w	r4, r0, #20
    3aa2:	movs	r3, #0
    3aa4:	ldr.w	r1, [lr], #4
    3aa8:	ldr.w	r8, [r5], #4
    3aac:	uxth	r2, r1
    3aae:	uxtah	r3, r3, r8
    3ab2:	lsrs	r1, r1, #16
    3ab4:	subs	r2, r3, r2
    3ab6:	rsb	r3, r1, r8, lsr #16
    3aba:	add.w	r3, r3, r2, asr #16
    3abe:	uxth	r2, r2
    3ac0:	orr.w	r2, r2, r3, lsl #16
    3ac4:	cmp	ip, lr
    3ac6:	str.w	r2, [r4], #4
    3aca:	mov.w	r3, r3, asr #16
    3ace:	bhi.n	3aa4 <__mdiff+0x70>
    3ad0:	cmp	r7, r5
    3ad2:	bls.n	3b04 <__mdiff+0xd0>
    3ad4:	mov	ip, r4
    3ad6:	mov	r1, r5
    3ad8:	ldr.w	lr, [r1], #4
    3adc:	uxtah	r2, r3, lr
    3ae0:	asrs	r3, r2, #16
    3ae2:	add.w	r3, r3, lr, lsr #16
    3ae6:	uxth	r2, r2
    3ae8:	orr.w	r2, r2, r3, lsl #16
    3aec:	cmp	r7, r1
    3aee:	str.w	r2, [ip], #4
    3af2:	mov.w	r3, r3, asr #16
    3af6:	bhi.n	3ad8 <__mdiff+0xa4>
    3af8:	mvns	r5, r5
    3afa:	add	r5, r7
    3afc:	bic.w	r5, r5, #3
    3b00:	adds	r5, #4
    3b02:	add	r4, r5
    3b04:	subs	r4, #4
    3b06:	cbnz	r2, 3b12 <__mdiff+0xde>
    3b08:	ldr.w	r3, [r4, #-4]!
    3b0c:	subs	r6, #1
    3b0e:	cmp	r3, #0
    3b10:	beq.n	3b08 <__mdiff+0xd4>
    3b12:	str	r6, [r0, #16]
    3b14:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b18:	movs	r1, #0
    3b1a:	bl	35e0 <_Balloc>
    3b1e:	movs	r2, #1
    3b20:	movs	r3, #0
    3b22:	str	r2, [r0, #16]
    3b24:	str	r3, [r0, #20]
    3b26:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b2a:	mov	r4, r5
    3b2c:	mov.w	r9, #0
    3b30:	mov	r5, r2
    3b32:	b.n	3a84 <__mdiff+0x50>
    3b34:	mov	r3, r7
    3b36:	add.w	r4, r7, #20
    3b3a:	add.w	r5, r8, #20
    3b3e:	mov	r7, r8
    3b40:	mov.w	r9, #1
    3b44:	mov	r8, r3
    3b46:	b.n	3a84 <__mdiff+0x50>

00003b48 <__d2b>:
    3b48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3b4c:	vmov	r6, r7, d0
    3b50:	sub	sp, #12
    3b52:	mov	r8, r1
    3b54:	movs	r1, #1
    3b56:	mov	r4, r7
    3b58:	ubfx	r5, r7, #20, #11
    3b5c:	mov	r7, r2
    3b5e:	bl	35e0 <_Balloc>
    3b62:	ubfx	r4, r4, #0, #20
    3b66:	mov	r9, r0
    3b68:	cbz	r5, 3b6e <__d2b+0x26>
    3b6a:	orr.w	r4, r4, #1048576	; 0x100000
    3b6e:	str	r4, [sp, #4]
    3b70:	cbz	r6, 3bba <__d2b+0x72>
    3b72:	add	r0, sp, #8
    3b74:	str.w	r6, [r0, #-8]!
    3b78:	bl	3700 <__lo0bits>
    3b7c:	cmp	r0, #0
    3b7e:	bne.n	3bea <__d2b+0xa2>
    3b80:	ldmia.w	sp, {r2, r3}
    3b84:	str.w	r2, [r9, #20]
    3b88:	cmp	r3, #0
    3b8a:	ite	eq
    3b8c:	moveq	r1, #1
    3b8e:	movne	r1, #2
    3b90:	str.w	r3, [r9, #24]
    3b94:	str.w	r1, [r9, #16]
    3b98:	cbnz	r5, 3bd2 <__d2b+0x8a>
    3b9a:	add.w	r3, r9, r1, lsl #2
    3b9e:	subw	r0, r0, #1074	; 0x432
    3ba2:	str.w	r0, [r8]
    3ba6:	ldr	r0, [r3, #16]
    3ba8:	bl	36c0 <__hi0bits>
    3bac:	rsb	r0, r0, r1, lsl #5
    3bb0:	str	r0, [r7, #0]
    3bb2:	mov	r0, r9
    3bb4:	add	sp, #12
    3bb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3bba:	add	r0, sp, #4
    3bbc:	bl	3700 <__lo0bits>
    3bc0:	ldr	r3, [sp, #4]
    3bc2:	str.w	r3, [r9, #20]
    3bc6:	movs	r1, #1
    3bc8:	adds	r0, #32
    3bca:	str.w	r1, [r9, #16]
    3bce:	cmp	r5, #0
    3bd0:	beq.n	3b9a <__d2b+0x52>
    3bd2:	subw	r5, r5, #1075	; 0x433
    3bd6:	add	r5, r0
    3bd8:	rsb	r0, r0, #53	; 0x35
    3bdc:	str.w	r5, [r8]
    3be0:	str	r0, [r7, #0]
    3be2:	mov	r0, r9
    3be4:	add	sp, #12
    3be6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3bea:	ldmia.w	sp, {r2, r3}
    3bee:	rsb	r1, r0, #32
    3bf2:	lsl.w	r1, r3, r1
    3bf6:	orrs	r2, r1
    3bf8:	lsrs	r3, r0
    3bfa:	str	r3, [sp, #4]
    3bfc:	str.w	r2, [r9, #20]
    3c00:	b.n	3b88 <__d2b+0x40>
    3c02:	nop

00003c04 <_vasnprintf_r>:
    3c04:	push	{r4, r5, r6, lr}
    3c06:	mov	r5, r2
    3c08:	sub	sp, #104	; 0x68
    3c0a:	ldr	r4, [r2, #0]
    3c0c:	cbz	r1, 3c12 <_vasnprintf_r+0xe>
    3c0e:	cmp	r4, #0
    3c10:	bne.n	3c48 <_vasnprintf_r+0x44>
    3c12:	movs	r4, #0
    3c14:	mov.w	r2, #648	; 0x288
    3c18:	strh.w	r2, [sp, #12]
    3c1c:	str	r4, [sp, #0]
    3c1e:	str	r4, [sp, #16]
    3c20:	mov	r2, r3
    3c22:	movw	r6, #65535	; 0xffff
    3c26:	ldr	r3, [sp, #120]	; 0x78
    3c28:	str	r4, [sp, #8]
    3c2a:	mov	r1, sp
    3c2c:	str	r4, [sp, #20]
    3c2e:	strh.w	r6, [sp, #14]
    3c32:	bl	4a78 <_svfprintf_r>
    3c36:	cmp	r0, #0
    3c38:	blt.n	3c5e <_vasnprintf_r+0x5a>
    3c3a:	ldr	r3, [sp, #0]
    3c3c:	str	r0, [r5, #0]
    3c3e:	movs	r2, #0
    3c40:	strb	r2, [r3, #0]
    3c42:	ldr	r0, [sp, #16]
    3c44:	add	sp, #104	; 0x68
    3c46:	pop	{r4, r5, r6, pc}
    3c48:	mov.w	r2, #1544	; 0x608
    3c4c:	str	r1, [sp, #0]
    3c4e:	str	r1, [sp, #16]
    3c50:	strh.w	r2, [sp, #12]
    3c54:	bge.n	3c20 <_vasnprintf_r+0x1c>
    3c56:	movs	r3, #139	; 0x8b
    3c58:	str	r3, [r0, #0]
    3c5a:	movs	r0, #0
    3c5c:	b.n	3c44 <_vasnprintf_r+0x40>
    3c5e:	movs	r0, #0
    3c60:	b.n	3c44 <_vasnprintf_r+0x40>
    3c62:	nop

00003c64 <_calloc_r>:
    3c64:	push	{r4, lr}
    3c66:	mul.w	r1, r2, r1
    3c6a:	bl	255c <_malloc_r>
    3c6e:	mov	r4, r0
    3c70:	cbz	r0, 3caa <_calloc_r+0x46>
    3c72:	ldr.w	r2, [r0, #-4]
    3c76:	bic.w	r2, r2, #3
    3c7a:	subs	r2, #4
    3c7c:	cmp	r2, #36	; 0x24
    3c7e:	bhi.n	3cb2 <_calloc_r+0x4e>
    3c80:	cmp	r2, #19
    3c82:	bls.n	3cae <_calloc_r+0x4a>
    3c84:	movs	r3, #0
    3c86:	cmp	r2, #27
    3c88:	str	r3, [r0, #0]
    3c8a:	str	r3, [r0, #4]
    3c8c:	bls.n	3cbc <_calloc_r+0x58>
    3c8e:	cmp	r2, #36	; 0x24
    3c90:	str	r3, [r0, #8]
    3c92:	str	r3, [r0, #12]
    3c94:	iteee	ne
    3c96:	addne.w	r2, r0, #16
    3c9a:	streq	r3, [r0, #16]
    3c9c:	streq	r3, [r0, #20]
    3c9e:	addeq.w	r2, r0, #24
    3ca2:	movs	r3, #0
    3ca4:	str	r3, [r2, #0]
    3ca6:	str	r3, [r2, #4]
    3ca8:	str	r3, [r2, #8]
    3caa:	mov	r0, r4
    3cac:	pop	{r4, pc}
    3cae:	mov	r2, r0
    3cb0:	b.n	3ca2 <_calloc_r+0x3e>
    3cb2:	movs	r1, #0
    3cb4:	bl	2bc0 <memset>
    3cb8:	mov	r0, r4
    3cba:	pop	{r4, pc}
    3cbc:	add.w	r2, r0, #8
    3cc0:	b.n	3ca2 <_calloc_r+0x3e>
    3cc2:	nop

00003cc4 <quorem>:
    3cc4:	ldr	r2, [r0, #16]
    3cc6:	ldr	r3, [r1, #16]
    3cc8:	cmp	r3, r2
    3cca:	bgt.w	3de8 <quorem+0x124>
    3cce:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cd2:	add.w	r8, r3, #4294967295
    3cd6:	add.w	r7, r1, #20
    3cda:	add.w	fp, r0, #20
    3cde:	ldr.w	r2, [r7, r8, lsl #2]
    3ce2:	ldr.w	r3, [fp, r8, lsl #2]
    3ce6:	mov.w	r4, r8, lsl #2
    3cea:	sub	sp, #12
    3cec:	adds	r2, #1
    3cee:	udiv	r9, r3, r2
    3cf2:	add.w	r3, fp, r4
    3cf6:	str	r4, [sp, #0]
    3cf8:	add.w	sl, r7, r4
    3cfc:	str	r3, [sp, #4]
    3cfe:	cmp.w	r9, #0
    3d02:	beq.n	3d78 <quorem+0xb4>
    3d04:	movs	r5, #0
    3d06:	mov	ip, r7
    3d08:	mov	lr, fp
    3d0a:	mov	r3, r5
    3d0c:	ldr.w	r6, [ip], #4
    3d10:	ldr.w	r2, [lr]
    3d14:	uxth	r4, r6
    3d16:	mla	r5, r9, r4, r5
    3d1a:	lsrs	r6, r6, #16
    3d1c:	lsrs	r4, r5, #16
    3d1e:	mla	r4, r9, r6, r4
    3d22:	uxth	r5, r5
    3d24:	subs	r3, r3, r5
    3d26:	uxth	r6, r4
    3d28:	uxtah	r3, r3, r2
    3d2c:	rsb	r6, r6, r2, lsr #16
    3d30:	add.w	r6, r6, r3, asr #16
    3d34:	uxth	r3, r3
    3d36:	orr.w	r3, r3, r6, lsl #16
    3d3a:	cmp	sl, ip
    3d3c:	str.w	r3, [lr], #4
    3d40:	mov.w	r5, r4, lsr #16
    3d44:	mov.w	r3, r6, asr #16
    3d48:	bcs.n	3d0c <quorem+0x48>
    3d4a:	ldr	r3, [sp, #0]
    3d4c:	ldr.w	r3, [fp, r3]
    3d50:	cbnz	r3, 3d78 <quorem+0xb4>
    3d52:	ldr	r4, [sp, #4]
    3d54:	subs	r3, r4, #4
    3d56:	cmp	fp, r3
    3d58:	bcs.n	3d74 <quorem+0xb0>
    3d5a:	ldr.w	r3, [r4, #-4]
    3d5e:	cbnz	r3, 3d74 <quorem+0xb0>
    3d60:	sub.w	r3, r4, #8
    3d64:	b.n	3d6c <quorem+0xa8>
    3d66:	ldr	r2, [r3, #0]
    3d68:	subs	r3, #4
    3d6a:	cbnz	r2, 3d74 <quorem+0xb0>
    3d6c:	cmp	fp, r3
    3d6e:	add.w	r8, r8, #4294967295
    3d72:	bcc.n	3d66 <quorem+0xa2>
    3d74:	str.w	r8, [r0, #16]
    3d78:	mov	r4, r0
    3d7a:	bl	39f0 <__mcmp>
    3d7e:	cmp	r0, #0
    3d80:	blt.n	3de0 <quorem+0x11c>
    3d82:	add.w	r9, r9, #1
    3d86:	mov	r5, fp
    3d88:	movs	r3, #0
    3d8a:	ldr.w	r1, [r7], #4
    3d8e:	ldr	r0, [r5, #0]
    3d90:	uxth	r2, r1
    3d92:	subs	r2, r3, r2
    3d94:	lsrs	r1, r1, #16
    3d96:	uxtah	r2, r2, r0
    3d9a:	rsb	r3, r1, r0, lsr #16
    3d9e:	add.w	r3, r3, r2, asr #16
    3da2:	uxth	r1, r2
    3da4:	orr.w	r1, r1, r3, lsl #16
    3da8:	cmp	sl, r7
    3daa:	str.w	r1, [r5], #4
    3dae:	mov.w	r3, r3, asr #16
    3db2:	bcs.n	3d8a <quorem+0xc6>
    3db4:	ldr.w	r2, [fp, r8, lsl #2]
    3db8:	add.w	r3, fp, r8, lsl #2
    3dbc:	cbnz	r2, 3de0 <quorem+0x11c>
    3dbe:	subs	r2, r3, #4
    3dc0:	cmp	fp, r2
    3dc2:	bcs.n	3ddc <quorem+0x118>
    3dc4:	ldr.w	r2, [r3, #-4]
    3dc8:	cbnz	r2, 3ddc <quorem+0x118>
    3dca:	subs	r3, #8
    3dcc:	b.n	3dd4 <quorem+0x110>
    3dce:	ldr	r2, [r3, #0]
    3dd0:	subs	r3, #4
    3dd2:	cbnz	r2, 3ddc <quorem+0x118>
    3dd4:	cmp	fp, r3
    3dd6:	add.w	r8, r8, #4294967295
    3dda:	bcc.n	3dce <quorem+0x10a>
    3ddc:	str.w	r8, [r4, #16]
    3de0:	mov	r0, r9
    3de2:	add	sp, #12
    3de4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3de8:	movs	r0, #0
    3dea:	bx	lr
    3dec:	movs	r0, r0
	...

00003df0 <_dtoa_r>:
    3df0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3df4:	vmov	r6, r7, d0
    3df8:	sub	sp, #76	; 0x4c
    3dfa:	ldr	r5, [r0, #64]	; 0x40
    3dfc:	str	r1, [sp, #4]
    3dfe:	mov	r4, r0
    3e00:	mov	r8, r2
    3e02:	str	r3, [sp, #16]
    3e04:	vmov	sl, s0
    3e08:	mov	fp, r7
    3e0a:	cbz	r5, 3e20 <_dtoa_r+0x30>
    3e0c:	ldr	r2, [r0, #68]	; 0x44
    3e0e:	str	r2, [r5, #4]
    3e10:	movs	r3, #1
    3e12:	lsls	r3, r2
    3e14:	str	r3, [r5, #8]
    3e16:	mov	r1, r5
    3e18:	bl	362c <_Bfree>
    3e1c:	movs	r3, #0
    3e1e:	str	r3, [r4, #64]	; 0x40
    3e20:	cmp.w	fp, #0
    3e24:	mov	r6, fp
    3e26:	blt.n	3e92 <_dtoa_r+0xa2>
    3e28:	ldr	r2, [sp, #112]	; 0x70
    3e2a:	movs	r3, #0
    3e2c:	str	r3, [r2, #0]
    3e2e:	ldr	r3, [pc, #784]	; (4140 <_dtoa_r+0x350>)
    3e30:	mov	r2, r3
    3e32:	ands	r3, r6
    3e34:	cmp	r3, r2
    3e36:	beq.n	3e64 <_dtoa_r+0x74>
    3e38:	vmov	d7, sl, fp
    3e3c:	vcmp.f64	d7, #0.0
    3e40:	vmrs	APSR_nzcv, fpscr
    3e44:	strd	sl, fp, [sp, #8]
    3e48:	bne.n	3ea0 <_dtoa_r+0xb0>
    3e4a:	ldr	r2, [sp, #16]
    3e4c:	movs	r3, #1
    3e4e:	str	r3, [r2, #0]
    3e50:	ldr	r3, [sp, #116]	; 0x74
    3e52:	cmp	r3, #0
    3e54:	beq.w	3fc6 <_dtoa_r+0x1d6>
    3e58:	ldr	r0, [pc, #744]	; (4144 <_dtoa_r+0x354>)
    3e5a:	str	r0, [r3, #0]
    3e5c:	subs	r0, #1
    3e5e:	add	sp, #76	; 0x4c
    3e60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e64:	ldr	r2, [sp, #16]
    3e66:	movw	r3, #9999	; 0x270f
    3e6a:	str	r3, [r2, #0]
    3e6c:	cmp.w	sl, #0
    3e70:	beq.w	3f98 <_dtoa_r+0x1a8>
    3e74:	ldr	r0, [pc, #720]	; (4148 <_dtoa_r+0x358>)
    3e76:	ldr	r3, [sp, #116]	; 0x74
    3e78:	cmp	r3, #0
    3e7a:	beq.n	3e5e <_dtoa_r+0x6e>
    3e7c:	ldrb	r3, [r0, #3]
    3e7e:	cmp	r3, #0
    3e80:	beq.w	3fca <_dtoa_r+0x1da>
    3e84:	add.w	r3, r0, #8
    3e88:	ldr	r2, [sp, #116]	; 0x74
    3e8a:	str	r3, [r2, #0]
    3e8c:	add	sp, #76	; 0x4c
    3e8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e92:	ldr	r2, [sp, #112]	; 0x70
    3e94:	movs	r3, #1
    3e96:	bic.w	r6, fp, #2147483648	; 0x80000000
    3e9a:	str	r3, [r2, #0]
    3e9c:	mov	fp, r6
    3e9e:	b.n	3e2e <_dtoa_r+0x3e>
    3ea0:	add	r1, sp, #68	; 0x44
    3ea2:	add	r2, sp, #64	; 0x40
    3ea4:	vldr	d0, [sp, #8]
    3ea8:	mov	r0, r4
    3eaa:	bl	3b48 <__d2b>
    3eae:	lsrs	r1, r6, #20
    3eb0:	str	r0, [sp, #28]
    3eb2:	bne.n	3faa <_dtoa_r+0x1ba>
    3eb4:	ldr	r0, [sp, #64]	; 0x40
    3eb6:	ldr	r1, [sp, #68]	; 0x44
    3eb8:	add	r1, r0
    3eba:	addw	r3, r1, #1074	; 0x432
    3ebe:	cmp	r3, #32
    3ec0:	ble.w	4346 <_dtoa_r+0x556>
    3ec4:	rsb	r3, r3, #64	; 0x40
    3ec8:	addw	r2, r1, #1042	; 0x412
    3ecc:	lsls	r6, r3
    3ece:	lsr.w	r3, sl, r2
    3ed2:	orrs	r3, r6
    3ed4:	vmov	s15, r3
    3ed8:	vcvt.f64.u32	d7, s15
    3edc:	movs	r5, #1
    3ede:	vmov	r2, r3, d7
    3ee2:	subs	r1, #1
    3ee4:	sub.w	r3, r3, #32505856	; 0x1f00000
    3ee8:	str	r5, [sp, #40]	; 0x28
    3eea:	vmov	d7, r2, r3
    3eee:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    3ef2:	vldr	d4, [pc, #564]	; 4128 <_dtoa_r+0x338>
    3ef6:	vsub.f64	d6, d7, d6
    3efa:	vldr	d7, [pc, #564]	; 4130 <_dtoa_r+0x340>
    3efe:	vldr	d5, [pc, #568]	; 4138 <_dtoa_r+0x348>
    3f02:	vfma.f64	d7, d6, d4
    3f06:	vmov	s13, r1
    3f0a:	vcvt.f64.s32	d6, s13
    3f0e:	vfma.f64	d7, d6, d5
    3f12:	vcvt.s32.f64	s13, d7
    3f16:	vcmpe.f64	d7, #0.0
    3f1a:	vmrs	APSR_nzcv, fpscr
    3f1e:	vstr	s13, [sp, #8]
    3f22:	bmi.w	415e <_dtoa_r+0x36e>
    3f26:	ldr	r5, [sp, #8]
    3f28:	cmp	r5, #22
    3f2a:	bhi.w	4158 <_dtoa_r+0x368>
    3f2e:	ldr	r3, [pc, #540]	; (414c <_dtoa_r+0x35c>)
    3f30:	add.w	r3, r3, r5, lsl #3
    3f34:	vldr	d7, [r3]
    3f38:	vmov	d6, sl, fp
    3f3c:	vcmpe.f64	d7, d6
    3f40:	vmrs	APSR_nzcv, fpscr
    3f44:	ble.w	4354 <_dtoa_r+0x564>
    3f48:	subs	r3, r5, #1
    3f4a:	str	r3, [sp, #8]
    3f4c:	movs	r3, #0
    3f4e:	str	r3, [sp, #48]	; 0x30
    3f50:	subs	r1, r0, r1
    3f52:	subs.w	r9, r1, #1
    3f56:	bmi.w	4188 <_dtoa_r+0x398>
    3f5a:	movs	r3, #0
    3f5c:	str	r3, [sp, #24]
    3f5e:	ldr	r3, [sp, #8]
    3f60:	cmp	r3, #0
    3f62:	blt.w	4176 <_dtoa_r+0x386>
    3f66:	add	r9, r3
    3f68:	str	r3, [sp, #44]	; 0x2c
    3f6a:	movs	r3, #0
    3f6c:	str	r3, [sp, #20]
    3f6e:	ldr	r3, [sp, #4]
    3f70:	cmp	r3, #9
    3f72:	bhi.n	3fce <_dtoa_r+0x1de>
    3f74:	cmp	r3, #5
    3f76:	ble.w	4a38 <_dtoa_r+0xc48>
    3f7a:	subs	r3, #4
    3f7c:	str	r3, [sp, #4]
    3f7e:	movs	r3, #0
    3f80:	str	r3, [sp, #56]	; 0x38
    3f82:	ldr	r3, [sp, #4]
    3f84:	subs	r3, #2
    3f86:	cmp	r3, #3
    3f88:	bhi.w	4a4a <_dtoa_r+0xc5a>
    3f8c:	tbh	[pc, r3, lsl #1]
    3f90:	.word	0x01e502a9
    3f94:	.word	0x03c802b5
    3f98:	ldr	r3, [pc, #428]	; (4148 <_dtoa_r+0x358>)
    3f9a:	ldr	r2, [pc, #436]	; (4150 <_dtoa_r+0x360>)
    3f9c:	ubfx	r0, r6, #0, #20
    3fa0:	cmp	r0, #0
    3fa2:	ite	ne
    3fa4:	movne	r0, r3
    3fa6:	moveq	r0, r2
    3fa8:	b.n	3e76 <_dtoa_r+0x86>
    3faa:	ldrd	r2, r3, [sp, #8]
    3fae:	ubfx	r0, r3, #0, #20
    3fb2:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    3fb6:	movs	r5, #0
    3fb8:	subw	r1, r1, #1023	; 0x3ff
    3fbc:	orr.w	r3, r3, #3145728	; 0x300000
    3fc0:	ldr	r0, [sp, #64]	; 0x40
    3fc2:	str	r5, [sp, #40]	; 0x28
    3fc4:	b.n	3eea <_dtoa_r+0xfa>
    3fc6:	ldr	r0, [pc, #396]	; (4154 <_dtoa_r+0x364>)
    3fc8:	b.n	3e5e <_dtoa_r+0x6e>
    3fca:	adds	r3, r0, #3
    3fcc:	b.n	3e88 <_dtoa_r+0x98>
    3fce:	movs	r1, #0
    3fd0:	str	r1, [r4, #68]	; 0x44
    3fd2:	mov	r0, r4
    3fd4:	mov	r8, r1
    3fd6:	str	r1, [sp, #4]
    3fd8:	bl	35e0 <_Balloc>
    3fdc:	mov.w	r7, #4294967295
    3fe0:	movs	r3, #1
    3fe2:	str	r0, [sp, #32]
    3fe4:	str	r0, [r4, #64]	; 0x40
    3fe6:	str	r7, [sp, #52]	; 0x34
    3fe8:	str	r3, [sp, #36]	; 0x24
    3fea:	ldr	r3, [sp, #68]	; 0x44
    3fec:	cmp	r3, #0
    3fee:	blt.n	40e6 <_dtoa_r+0x2f6>
    3ff0:	ldr	r2, [sp, #8]
    3ff2:	cmp	r2, #14
    3ff4:	bgt.n	40e6 <_dtoa_r+0x2f6>
    3ff6:	ldr	r3, [pc, #340]	; (414c <_dtoa_r+0x35c>)
    3ff8:	cmp.w	r8, #0
    3ffc:	add.w	r3, r3, r2, lsl #3
    4000:	vldr	d4, [r3]
    4004:	blt.w	4510 <_dtoa_r+0x720>
    4008:	vneg.f64	d2, d4
    400c:	vmov	d7, sl, fp
    4010:	vdiv.f64	d6, d7, d4
    4014:	vcvt.s32.f64	s12, d6
    4018:	ldr	r2, [sp, #32]
    401a:	vmov	r3, s12
    401e:	cmp	r7, #1
    4020:	add.w	r3, r3, #48	; 0x30
    4024:	vcvt.f64.s32	d5, s12
    4028:	add.w	fp, r2, #1
    402c:	strb	r3, [r2, #0]
    402e:	vfma.f64	d7, d2, d5
    4032:	beq.n	407a <_dtoa_r+0x28a>
    4034:	vmov.f64	d3, #36	; 0x41200000  10.0
    4038:	vmul.f64	d7, d7, d3
    403c:	vcmp.f64	d7, #0.0
    4040:	vmrs	APSR_nzcv, fpscr
    4044:	beq.n	40bc <_dtoa_r+0x2cc>
    4046:	ldr	r2, [sp, #32]
    4048:	b.n	4058 <_dtoa_r+0x268>
    404a:	vmul.f64	d7, d7, d3
    404e:	vcmp.f64	d7, #0.0
    4052:	vmrs	APSR_nzcv, fpscr
    4056:	beq.n	40bc <_dtoa_r+0x2cc>
    4058:	vdiv.f64	d6, d7, d4
    405c:	vcvt.s32.f64	s12, d6
    4060:	vmov	r3, s12
    4064:	adds	r3, #48	; 0x30
    4066:	strb.w	r3, [fp], #1
    406a:	rsb	r3, r2, fp
    406e:	cmp	r3, r7
    4070:	vcvt.f64.s32	d5, s12
    4074:	vfma.f64	d7, d2, d5
    4078:	bne.n	404a <_dtoa_r+0x25a>
    407a:	vadd.f64	d7, d7, d7
    407e:	vcmpe.f64	d4, d7
    4082:	vmrs	APSR_nzcv, fpscr
    4086:	bmi.n	409a <_dtoa_r+0x2aa>
    4088:	vcmp.f64	d4, d7
    408c:	vmrs	APSR_nzcv, fpscr
    4090:	bne.n	40bc <_dtoa_r+0x2cc>
    4092:	vmov	r3, s12
    4096:	lsls	r3, r3, #31
    4098:	bpl.n	40bc <_dtoa_r+0x2cc>
    409a:	ldrb.w	r0, [fp, #-1]
    409e:	ldr	r2, [sp, #32]
    40a0:	add.w	r3, fp, #4294967295
    40a4:	b.n	40b0 <_dtoa_r+0x2c0>
    40a6:	cmp	r2, r3
    40a8:	beq.w	4876 <_dtoa_r+0xa86>
    40ac:	ldrb.w	r0, [r3, #-1]!
    40b0:	cmp	r0, #57	; 0x39
    40b2:	add.w	fp, r3, #1
    40b6:	beq.n	40a6 <_dtoa_r+0x2b6>
    40b8:	adds	r0, #1
    40ba:	strb	r0, [r3, #0]
    40bc:	ldr	r1, [sp, #28]
    40be:	mov	r0, r4
    40c0:	bl	362c <_Bfree>
    40c4:	movs	r2, #0
    40c6:	ldr	r3, [sp, #8]
    40c8:	strb.w	r2, [fp]
    40cc:	ldr	r2, [sp, #16]
    40ce:	adds	r3, #1
    40d0:	str	r3, [r2, #0]
    40d2:	ldr	r3, [sp, #116]	; 0x74
    40d4:	cmp	r3, #0
    40d6:	beq.w	47a6 <_dtoa_r+0x9b6>
    40da:	ldr	r0, [sp, #32]
    40dc:	str.w	fp, [r3]
    40e0:	add	sp, #76	; 0x4c
    40e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40e6:	ldr	r2, [sp, #36]	; 0x24
    40e8:	cmp	r2, #0
    40ea:	beq.n	4194 <_dtoa_r+0x3a4>
    40ec:	ldr	r2, [sp, #4]
    40ee:	cmp	r2, #1
    40f0:	ble.w	4550 <_dtoa_r+0x760>
    40f4:	ldr	r1, [sp, #20]
    40f6:	subs	r2, r7, #1
    40f8:	cmp	r1, r2
    40fa:	blt.w	47ac <_dtoa_r+0x9bc>
    40fe:	subs	r3, r1, r2
    4100:	str	r3, [sp, #56]	; 0x38
    4102:	cmp	r7, #0
    4104:	ldr	r3, [sp, #24]
    4106:	blt.w	4952 <_dtoa_r+0xb62>
    410a:	str	r3, [sp, #40]	; 0x28
    410c:	mov	r3, r7
    410e:	ldr	r2, [sp, #24]
    4110:	movs	r1, #1
    4112:	add	r2, r3
    4114:	mov	r0, r4
    4116:	str	r2, [sp, #24]
    4118:	add	r9, r3
    411a:	bl	375c <__i2b>
    411e:	mov	r6, r0
    4120:	b.n	419e <_dtoa_r+0x3ae>
    4122:	nop
    4124:	nop.w
    4128:	.word	0x636f4361
    412c:	.word	0x3fd287a7
    4130:	.word	0x8b60c8b3
    4134:	.word	0x3fc68a28
    4138:	.word	0x509f79fb
    413c:	.word	0x3fd34413
    4140:	.word	0x7ff00000
    4144:	.word	0x200005c5
    4148:	.word	0x200005c0
    414c:	.word	0x200004b8
    4150:	.word	0x200005b4
    4154:	.word	0x200005c4
    4158:	movs	r3, #1
    415a:	str	r3, [sp, #48]	; 0x30
    415c:	b.n	3f50 <_dtoa_r+0x160>
    415e:	vcvt.f64.s32	d6, s13
    4162:	vcmp.f64	d7, d6
    4166:	vmrs	APSR_nzcv, fpscr
    416a:	beq.w	3f26 <_dtoa_r+0x136>
    416e:	ldr	r3, [sp, #8]
    4170:	subs	r3, #1
    4172:	str	r3, [sp, #8]
    4174:	b.n	3f26 <_dtoa_r+0x136>
    4176:	ldr	r2, [sp, #24]
    4178:	ldr	r3, [sp, #8]
    417a:	subs	r2, r2, r3
    417c:	negs	r3, r3
    417e:	str	r3, [sp, #20]
    4180:	movs	r3, #0
    4182:	str	r2, [sp, #24]
    4184:	str	r3, [sp, #44]	; 0x2c
    4186:	b.n	3f6e <_dtoa_r+0x17e>
    4188:	rsb	r3, r9, #0
    418c:	str	r3, [sp, #24]
    418e:	mov.w	r9, #0
    4192:	b.n	3f5e <_dtoa_r+0x16e>
    4194:	ldr	r3, [sp, #20]
    4196:	str	r3, [sp, #56]	; 0x38
    4198:	ldr	r6, [sp, #36]	; 0x24
    419a:	ldr	r3, [sp, #24]
    419c:	str	r3, [sp, #40]	; 0x28
    419e:	ldr	r1, [sp, #40]	; 0x28
    41a0:	mov	r3, r1
    41a2:	cbz	r1, 41be <_dtoa_r+0x3ce>
    41a4:	cmp.w	r9, #0
    41a8:	ble.n	41be <_dtoa_r+0x3ce>
    41aa:	cmp	r1, r9
    41ac:	ldr	r2, [sp, #24]
    41ae:	it	ge
    41b0:	movge	r3, r9
    41b2:	subs	r2, r2, r3
    41b4:	str	r2, [sp, #24]
    41b6:	subs	r2, r1, r3
    41b8:	str	r2, [sp, #40]	; 0x28
    41ba:	rsb	r9, r3, r9
    41be:	ldr	r3, [sp, #20]
    41c0:	cmp	r3, #0
    41c2:	ble.w	46c6 <_dtoa_r+0x8d6>
    41c6:	ldr	r2, [sp, #36]	; 0x24
    41c8:	cmp	r2, #0
    41ca:	beq.w	4502 <_dtoa_r+0x712>
    41ce:	ldr	r2, [sp, #56]	; 0x38
    41d0:	cmp	r2, #0
    41d2:	beq.w	4502 <_dtoa_r+0x712>
    41d6:	mov	r1, r6
    41d8:	mov	r0, r4
    41da:	bl	38a0 <__pow5mult>
    41de:	ldr	r2, [sp, #28]
    41e0:	mov	r1, r0
    41e2:	mov	r6, r0
    41e4:	mov	r0, r4
    41e6:	bl	3770 <__multiply>
    41ea:	ldr	r1, [sp, #28]
    41ec:	mov	r5, r0
    41ee:	mov	r0, r4
    41f0:	bl	362c <_Bfree>
    41f4:	ldr	r3, [sp, #20]
    41f6:	ldr	r2, [sp, #56]	; 0x38
    41f8:	subs	r3, r3, r2
    41fa:	str	r3, [sp, #20]
    41fc:	bne.w	4500 <_dtoa_r+0x710>
    4200:	movs	r1, #1
    4202:	mov	r0, r4
    4204:	bl	375c <__i2b>
    4208:	ldr	r3, [sp, #44]	; 0x2c
    420a:	str	r0, [sp, #20]
    420c:	cmp	r3, #0
    420e:	beq.w	456a <_dtoa_r+0x77a>
    4212:	mov	r1, r0
    4214:	mov	r2, r3
    4216:	mov	r0, r4
    4218:	bl	38a0 <__pow5mult>
    421c:	ldr	r3, [sp, #4]
    421e:	str	r0, [sp, #20]
    4220:	cmp	r3, #1
    4222:	ble.w	4726 <_dtoa_r+0x936>
    4226:	movs	r3, #0
    4228:	str	r3, [sp, #28]
    422a:	ldr	r2, [sp, #20]
    422c:	ldr	r3, [r2, #16]
    422e:	add.w	r3, r2, r3, lsl #2
    4232:	ldr	r0, [r3, #16]
    4234:	bl	36c0 <__hi0bits>
    4238:	rsb	r0, r0, #32
    423c:	add	r0, r9
    423e:	ands.w	r0, r0, #31
    4242:	beq.w	4566 <_dtoa_r+0x776>
    4246:	rsb	r3, r0, #32
    424a:	cmp	r3, #4
    424c:	ble.w	4a40 <_dtoa_r+0xc50>
    4250:	rsb	r0, r0, #28
    4254:	ldr	r3, [sp, #24]
    4256:	add	r3, r0
    4258:	str	r3, [sp, #24]
    425a:	ldr	r3, [sp, #40]	; 0x28
    425c:	add	r3, r0
    425e:	str	r3, [sp, #40]	; 0x28
    4260:	add	r9, r0
    4262:	ldr	r3, [sp, #24]
    4264:	cmp	r3, #0
    4266:	ble.n	4274 <_dtoa_r+0x484>
    4268:	mov	r1, r5
    426a:	mov	r2, r3
    426c:	mov	r0, r4
    426e:	bl	3940 <__lshift>
    4272:	mov	r5, r0
    4274:	cmp.w	r9, #0
    4278:	ble.n	4286 <_dtoa_r+0x496>
    427a:	mov	r2, r9
    427c:	ldr	r1, [sp, #20]
    427e:	mov	r0, r4
    4280:	bl	3940 <__lshift>
    4284:	str	r0, [sp, #20]
    4286:	ldr	r3, [sp, #48]	; 0x30
    4288:	cmp	r3, #0
    428a:	bne.w	4690 <_dtoa_r+0x8a0>
    428e:	cmp	r7, #0
    4290:	ble.w	46d4 <_dtoa_r+0x8e4>
    4294:	ldr	r3, [sp, #36]	; 0x24
    4296:	cmp	r3, #0
    4298:	bne.w	4592 <_dtoa_r+0x7a2>
    429c:	ldr.w	fp, [sp, #32]
    42a0:	ldr.w	sl, [sp, #20]
    42a4:	mov	r8, fp
    42a6:	b.n	42ae <_dtoa_r+0x4be>
    42a8:	bl	3640 <__multadd>
    42ac:	mov	r5, r0
    42ae:	mov	r1, sl
    42b0:	mov	r0, r5
    42b2:	bl	3cc4 <quorem>
    42b6:	add.w	r9, r0, #48	; 0x30
    42ba:	strb.w	r9, [r8], #1
    42be:	rsb	r3, fp, r8
    42c2:	cmp	r3, r7
    42c4:	mov.w	r2, #10
    42c8:	mov.w	r3, #0
    42cc:	mov	r1, r5
    42ce:	mov	r0, r4
    42d0:	blt.n	42a8 <_dtoa_r+0x4b8>
    42d2:	ldr	r3, [sp, #32]
    42d4:	cmp	r7, #1
    42d6:	ite	ge
    42d8:	addge	r3, r3, r7
    42da:	addlt	r3, #1
    42dc:	mov	fp, r3
    42de:	mov.w	sl, #0
    42e2:	mov	r1, r5
    42e4:	movs	r2, #1
    42e6:	mov	r0, r4
    42e8:	bl	3940 <__lshift>
    42ec:	ldr	r1, [sp, #20]
    42ee:	str	r0, [sp, #28]
    42f0:	bl	39f0 <__mcmp>
    42f4:	cmp	r0, #0
    42f6:	ble.w	4812 <_dtoa_r+0xa22>
    42fa:	ldrb.w	r2, [fp, #-1]
    42fe:	ldr	r1, [sp, #32]
    4300:	add.w	r3, fp, #4294967295
    4304:	b.n	4310 <_dtoa_r+0x520>
    4306:	cmp	r3, r1
    4308:	beq.w	4712 <_dtoa_r+0x922>
    430c:	ldrb.w	r2, [r3, #-1]!
    4310:	cmp	r2, #57	; 0x39
    4312:	add.w	fp, r3, #1
    4316:	beq.n	4306 <_dtoa_r+0x516>
    4318:	adds	r2, #1
    431a:	strb	r2, [r3, #0]
    431c:	ldr	r1, [sp, #20]
    431e:	mov	r0, r4
    4320:	bl	362c <_Bfree>
    4324:	cmp	r6, #0
    4326:	beq.w	40bc <_dtoa_r+0x2cc>
    432a:	cmp.w	sl, #0
    432e:	beq.n	433c <_dtoa_r+0x54c>
    4330:	cmp	sl, r6
    4332:	beq.n	433c <_dtoa_r+0x54c>
    4334:	mov	r1, sl
    4336:	mov	r0, r4
    4338:	bl	362c <_Bfree>
    433c:	mov	r1, r6
    433e:	mov	r0, r4
    4340:	bl	362c <_Bfree>
    4344:	b.n	40bc <_dtoa_r+0x2cc>
    4346:	rsb	r3, r3, #32
    434a:	lsl.w	r3, sl, r3
    434e:	vmov	s15, r3
    4352:	b.n	3ed8 <_dtoa_r+0xe8>
    4354:	movs	r3, #0
    4356:	str	r3, [sp, #48]	; 0x30
    4358:	b.n	3f50 <_dtoa_r+0x160>
    435a:	movs	r3, #0
    435c:	str	r3, [sp, #36]	; 0x24
    435e:	ldr	r3, [sp, #8]
    4360:	add	r3, r8
    4362:	adds	r7, r3, #1
    4364:	cmp	r7, #0
    4366:	str	r3, [sp, #52]	; 0x34
    4368:	ble.w	47c6 <_dtoa_r+0x9d6>
    436c:	mov	r6, r7
    436e:	mov	r5, r7
    4370:	movs	r1, #0
    4372:	cmp	r6, #23
    4374:	str	r1, [r4, #68]	; 0x44
    4376:	bls.n	438e <_dtoa_r+0x59e>
    4378:	movs	r2, #1
    437a:	movs	r3, #4
    437c:	lsls	r3, r3, #1
    437e:	add.w	r0, r3, #20
    4382:	cmp	r0, r6
    4384:	mov	r1, r2
    4386:	add.w	r2, r2, #1
    438a:	bls.n	437c <_dtoa_r+0x58c>
    438c:	str	r1, [r4, #68]	; 0x44
    438e:	mov	r0, r4
    4390:	bl	35e0 <_Balloc>
    4394:	cmp	r5, #14
    4396:	str	r0, [sp, #32]
    4398:	str	r0, [r4, #64]	; 0x40
    439a:	bhi.w	3fea <_dtoa_r+0x1fa>
    439e:	ldr	r3, [sp, #56]	; 0x38
    43a0:	cmp	r3, #0
    43a2:	beq.w	3fea <_dtoa_r+0x1fa>
    43a6:	ldr	r1, [sp, #8]
    43a8:	cmp	r1, #0
    43aa:	strd	sl, fp, [sp, #56]	; 0x38
    43ae:	ble.w	4834 <_dtoa_r+0xa44>
    43b2:	ldr	r3, [pc, #792]	; (46cc <_dtoa_r+0x8dc>)
    43b4:	and.w	r2, r1, #15
    43b8:	add.w	r2, r3, r2, lsl #3
    43bc:	asrs	r3, r1, #4
    43be:	lsls	r6, r3, #27
    43c0:	vldr	d6, [r2]
    43c4:	bpl.w	47be <_dtoa_r+0x9ce>
    43c8:	ldr	r2, [pc, #772]	; (46d0 <_dtoa_r+0x8e0>)
    43ca:	vldr	d7, [r2, #32]
    43ce:	vmov	d4, sl, fp
    43d2:	and.w	r3, r3, #15
    43d6:	movs	r1, #3
    43d8:	vdiv.f64	d5, d4, d7
    43dc:	cbz	r3, 43f6 <_dtoa_r+0x606>
    43de:	ldr	r2, [pc, #752]	; (46d0 <_dtoa_r+0x8e0>)
    43e0:	lsls	r5, r3, #31
    43e2:	bpl.n	43ee <_dtoa_r+0x5fe>
    43e4:	vldr	d7, [r2]
    43e8:	adds	r1, #1
    43ea:	vmul.f64	d6, d6, d7
    43ee:	asrs	r3, r3, #1
    43f0:	add.w	r2, r2, #8
    43f4:	bne.n	43e0 <_dtoa_r+0x5f0>
    43f6:	vdiv.f64	d4, d5, d6
    43fa:	ldr	r3, [sp, #48]	; 0x30
    43fc:	cbz	r3, 440e <_dtoa_r+0x61e>
    43fe:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4402:	vcmpe.f64	d4, d7
    4406:	vmrs	APSR_nzcv, fpscr
    440a:	bmi.w	497c <_dtoa_r+0xb8c>
    440e:	vmov	s15, r1
    4412:	vcvt.f64.s32	d6, s15
    4416:	vmov.f64	d7, #28	; 0x40e00000  7.0
    441a:	vfma.f64	d7, d6, d4
    441e:	vmov	r2, r3, d7
    4422:	sub.w	r3, r3, #54525952	; 0x3400000
    4426:	cmp	r7, #0
    4428:	beq.w	4778 <_dtoa_r+0x988>
    442c:	ldr	r6, [sp, #8]
    442e:	mov	r1, r7
    4430:	ldr	r0, [sp, #36]	; 0x24
    4432:	cmp	r0, #0
    4434:	beq.w	48d2 <_dtoa_r+0xae2>
    4438:	vmov.f64	d3, #96	; 0x3f000000  0.5
    443c:	ldr	r0, [pc, #652]	; (46cc <_dtoa_r+0x8dc>)
    443e:	ldr	r5, [sp, #32]
    4440:	add.w	r0, r0, r1, lsl #3
    4444:	vldr	d6, [r0, #-8]
    4448:	vcvt.s32.f64	s14, d4
    444c:	vdiv.f64	d5, d3, d6
    4450:	vmov	r0, s14
    4454:	vmov	d6, r2, r3
    4458:	adds	r0, #48	; 0x30
    445a:	uxtb	r0, r0
    445c:	vsub.f64	d5, d5, d6
    4460:	vcvt.f64.s32	d7, s14
    4464:	vsub.f64	d7, d4, d7
    4468:	vcmpe.f64	d5, d7
    446c:	vmrs	APSR_nzcv, fpscr
    4470:	strb	r0, [r5, #0]
    4472:	add.w	fp, r5, #1
    4476:	bgt.n	44de <_dtoa_r+0x6ee>
    4478:	vmov.f64	d3, #112	; 0x3f800000  1.0
    447c:	vsub.f64	d6, d3, d7
    4480:	vcmpe.f64	d5, d6
    4484:	vmrs	APSR_nzcv, fpscr
    4488:	bgt.w	49e8 <_dtoa_r+0xbf8>
    448c:	cmp	r1, #1
    448e:	ble.w	482c <_dtoa_r+0xa3c>
    4492:	vmov.f64	d4, #36	; 0x41200000  10.0
    4496:	ldr	r3, [sp, #32]
    4498:	add	r1, r3
    449a:	b.n	44b2 <_dtoa_r+0x6c2>
    449c:	vsub.f64	d6, d3, d7
    44a0:	vcmpe.f64	d6, d5
    44a4:	vmrs	APSR_nzcv, fpscr
    44a8:	bmi.w	49e8 <_dtoa_r+0xbf8>
    44ac:	cmp	fp, r1
    44ae:	beq.w	482c <_dtoa_r+0xa3c>
    44b2:	vmul.f64	d7, d7, d4
    44b6:	vmul.f64	d5, d5, d4
    44ba:	vcvt.s32.f64	s12, d7
    44be:	vmov	r3, s12
    44c2:	add.w	r0, r3, #48	; 0x30
    44c6:	uxtb	r0, r0
    44c8:	vcvt.f64.s32	d6, s12
    44cc:	vsub.f64	d7, d7, d6
    44d0:	vcmpe.f64	d7, d5
    44d4:	vmrs	APSR_nzcv, fpscr
    44d8:	strb.w	r0, [fp], #1
    44dc:	bpl.n	449c <_dtoa_r+0x6ac>
    44de:	str	r6, [sp, #8]
    44e0:	b.n	40bc <_dtoa_r+0x2cc>
    44e2:	movs	r3, #0
    44e4:	str	r3, [sp, #36]	; 0x24
    44e6:	cmp.w	r8, #0
    44ea:	ble.w	47ce <_dtoa_r+0x9de>
    44ee:	mov	r6, r8
    44f0:	mov	r5, r8
    44f2:	str.w	r8, [sp, #52]	; 0x34
    44f6:	mov	r7, r8
    44f8:	b.n	4370 <_dtoa_r+0x580>
    44fa:	movs	r3, #1
    44fc:	str	r3, [sp, #36]	; 0x24
    44fe:	b.n	44e6 <_dtoa_r+0x6f6>
    4500:	str	r5, [sp, #28]
    4502:	ldr	r2, [sp, #20]
    4504:	ldr	r1, [sp, #28]
    4506:	mov	r0, r4
    4508:	bl	38a0 <__pow5mult>
    450c:	mov	r5, r0
    450e:	b.n	4200 <_dtoa_r+0x410>
    4510:	cmp	r7, #0
    4512:	bgt.w	4008 <_dtoa_r+0x218>
    4516:	bne.w	479e <_dtoa_r+0x9ae>
    451a:	vmov.f64	d7, #20	; 0x40a00000  5.0
    451e:	vmul.f64	d4, d4, d7
    4522:	vmov	d7, sl, fp
    4526:	vcmpe.f64	d4, d7
    452a:	vmrs	APSR_nzcv, fpscr
    452e:	mov	r6, r7
    4530:	str	r7, [sp, #20]
    4532:	blt.w	4700 <_dtoa_r+0x910>
    4536:	mvn.w	r3, r8
    453a:	ldr.w	fp, [sp, #32]
    453e:	str	r3, [sp, #8]
    4540:	ldr	r1, [sp, #20]
    4542:	mov	r0, r4
    4544:	bl	362c <_Bfree>
    4548:	cmp	r6, #0
    454a:	beq.w	40bc <_dtoa_r+0x2cc>
    454e:	b.n	433c <_dtoa_r+0x54c>
    4550:	ldr	r2, [sp, #40]	; 0x28
    4552:	cmp	r2, #0
    4554:	beq.w	495c <_dtoa_r+0xb6c>
    4558:	ldr	r2, [sp, #20]
    455a:	str	r2, [sp, #56]	; 0x38
    455c:	ldr	r2, [sp, #24]
    455e:	str	r2, [sp, #40]	; 0x28
    4560:	addw	r3, r3, #1075	; 0x433
    4564:	b.n	410e <_dtoa_r+0x31e>
    4566:	movs	r0, #28
    4568:	b.n	4254 <_dtoa_r+0x464>
    456a:	ldr	r3, [sp, #4]
    456c:	cmp	r3, #1
    456e:	ble.w	49f2 <_dtoa_r+0xc02>
    4572:	ldr	r3, [sp, #44]	; 0x2c
    4574:	str	r3, [sp, #28]
    4576:	movs	r0, #1
    4578:	b.n	423c <_dtoa_r+0x44c>
    457a:	mov	r1, r6
    457c:	movs	r3, #0
    457e:	movs	r2, #10
    4580:	mov	r0, r4
    4582:	bl	3640 <__multadd>
    4586:	ldr	r3, [sp, #52]	; 0x34
    4588:	cmp	r3, #0
    458a:	mov	r6, r0
    458c:	ble.w	4a2a <_dtoa_r+0xc3a>
    4590:	mov	r7, r3
    4592:	ldr	r3, [sp, #40]	; 0x28
    4594:	cmp	r3, #0
    4596:	ble.n	45a4 <_dtoa_r+0x7b4>
    4598:	mov	r1, r6
    459a:	mov	r2, r3
    459c:	mov	r0, r4
    459e:	bl	3940 <__lshift>
    45a2:	mov	r6, r0
    45a4:	ldr	r3, [sp, #28]
    45a6:	cmp	r3, #0
    45a8:	bne.w	4888 <_dtoa_r+0xa98>
    45ac:	mov	r8, r6
    45ae:	ldr	r3, [sp, #32]
    45b0:	subs	r7, #1
    45b2:	adds	r2, r3, r7
    45b4:	str	r2, [sp, #36]	; 0x24
    45b6:	and.w	r2, sl, #1
    45ba:	str	r2, [sp, #40]	; 0x28
    45bc:	mov	r7, r3
    45be:	ldr.w	fp, [sp, #20]
    45c2:	mov	r0, r5
    45c4:	mov	r1, fp
    45c6:	bl	3cc4 <quorem>
    45ca:	mov	r1, r6
    45cc:	mov	sl, r0
    45ce:	mov	r0, r5
    45d0:	bl	39f0 <__mcmp>
    45d4:	mov	r2, r8
    45d6:	mov	r1, fp
    45d8:	mov	r9, r0
    45da:	mov	r0, r4
    45dc:	bl	3a34 <__mdiff>
    45e0:	ldr	r3, [r0, #12]
    45e2:	mov	fp, r0
    45e4:	add.w	r2, sl, #48	; 0x30
    45e8:	cmp	r3, #0
    45ea:	bne.n	4680 <_dtoa_r+0x890>
    45ec:	mov	r1, r0
    45ee:	mov	r0, r5
    45f0:	str	r2, [sp, #28]
    45f2:	bl	39f0 <__mcmp>
    45f6:	mov	r1, fp
    45f8:	str	r0, [sp, #24]
    45fa:	mov	r0, r4
    45fc:	bl	362c <_Bfree>
    4600:	ldr	r3, [sp, #24]
    4602:	ldr	r2, [sp, #28]
    4604:	cbnz	r3, 4612 <_dtoa_r+0x822>
    4606:	ldr	r1, [sp, #4]
    4608:	cbnz	r1, 4612 <_dtoa_r+0x822>
    460a:	ldr	r1, [sp, #40]	; 0x28
    460c:	cmp	r1, #0
    460e:	beq.w	49fc <_dtoa_r+0xc0c>
    4612:	cmp.w	r9, #0
    4616:	blt.w	47d8 <_dtoa_r+0x9e8>
    461a:	bne.n	4628 <_dtoa_r+0x838>
    461c:	ldr	r1, [sp, #4]
    461e:	cbnz	r1, 4628 <_dtoa_r+0x838>
    4620:	ldr	r1, [sp, #40]	; 0x28
    4622:	cmp	r1, #0
    4624:	beq.w	47d8 <_dtoa_r+0x9e8>
    4628:	cmp	r3, #0
    462a:	bgt.w	48b0 <_dtoa_r+0xac0>
    462e:	ldr	r3, [sp, #36]	; 0x24
    4630:	strb	r2, [r7, #0]
    4632:	add.w	r9, r7, #1
    4636:	cmp	r7, r3
    4638:	mov	fp, r9
    463a:	beq.w	48ca <_dtoa_r+0xada>
    463e:	mov	r1, r5
    4640:	movs	r3, #0
    4642:	movs	r2, #10
    4644:	mov	r0, r4
    4646:	bl	3640 <__multadd>
    464a:	cmp	r6, r8
    464c:	mov	r5, r0
    464e:	mov	r1, r6
    4650:	mov.w	r3, #0
    4654:	mov.w	r2, #10
    4658:	mov	r0, r4
    465a:	beq.n	4674 <_dtoa_r+0x884>
    465c:	bl	3640 <__multadd>
    4660:	mov	r1, r8
    4662:	mov	r6, r0
    4664:	movs	r3, #0
    4666:	movs	r2, #10
    4668:	mov	r0, r4
    466a:	bl	3640 <__multadd>
    466e:	mov	r7, r9
    4670:	mov	r8, r0
    4672:	b.n	45be <_dtoa_r+0x7ce>
    4674:	bl	3640 <__multadd>
    4678:	mov	r7, r9
    467a:	mov	r6, r0
    467c:	mov	r8, r0
    467e:	b.n	45be <_dtoa_r+0x7ce>
    4680:	mov	r1, r0
    4682:	mov	r0, r4
    4684:	str	r2, [sp, #24]
    4686:	bl	362c <_Bfree>
    468a:	movs	r3, #1
    468c:	ldr	r2, [sp, #24]
    468e:	b.n	4612 <_dtoa_r+0x822>
    4690:	ldr	r1, [sp, #20]
    4692:	mov	r0, r5
    4694:	bl	39f0 <__mcmp>
    4698:	cmp	r0, #0
    469a:	bge.w	428e <_dtoa_r+0x49e>
    469e:	mov	r1, r5
    46a0:	ldr	r5, [sp, #8]
    46a2:	movs	r3, #0
    46a4:	subs	r5, #1
    46a6:	movs	r2, #10
    46a8:	mov	r0, r4
    46aa:	str	r5, [sp, #8]
    46ac:	bl	3640 <__multadd>
    46b0:	ldr	r3, [sp, #36]	; 0x24
    46b2:	mov	r5, r0
    46b4:	cmp	r3, #0
    46b6:	bne.w	457a <_dtoa_r+0x78a>
    46ba:	ldr	r3, [sp, #52]	; 0x34
    46bc:	cmp	r3, #0
    46be:	ble.w	4a1c <_dtoa_r+0xc2c>
    46c2:	mov	r7, r3
    46c4:	b.n	429c <_dtoa_r+0x4ac>
    46c6:	ldr	r5, [sp, #28]
    46c8:	b.n	4200 <_dtoa_r+0x410>
    46ca:	nop
    46cc:	.word	0x200004b8
    46d0:	.word	0x20000580
    46d4:	ldr	r3, [sp, #4]
    46d6:	cmp	r3, #2
    46d8:	ble.w	4294 <_dtoa_r+0x4a4>
    46dc:	cmp	r7, #0
    46de:	bne.w	49b4 <_dtoa_r+0xbc4>
    46e2:	mov	r3, r7
    46e4:	ldr	r1, [sp, #20]
    46e6:	movs	r2, #5
    46e8:	mov	r0, r4
    46ea:	bl	3640 <__multadd>
    46ee:	mov	r1, r0
    46f0:	str	r0, [sp, #20]
    46f2:	mov	r0, r5
    46f4:	bl	39f0 <__mcmp>
    46f8:	cmp	r0, #0
    46fa:	str	r5, [sp, #28]
    46fc:	ble.w	4536 <_dtoa_r+0x746>
    4700:	ldr	r2, [sp, #8]
    4702:	ldr	r1, [sp, #32]
    4704:	movs	r3, #49	; 0x31
    4706:	adds	r2, #1
    4708:	str	r2, [sp, #8]
    470a:	strb	r3, [r1, #0]
    470c:	add.w	fp, r1, #1
    4710:	b.n	4540 <_dtoa_r+0x750>
    4712:	ldr	r2, [sp, #8]
    4714:	adds	r2, #1
    4716:	str	r2, [sp, #8]
    4718:	ldr	r2, [sp, #32]
    471a:	movs	r3, #49	; 0x31
    471c:	strb	r3, [r2, #0]
    471e:	b.n	431c <_dtoa_r+0x52c>
    4720:	movs	r3, #1
    4722:	str	r3, [sp, #36]	; 0x24
    4724:	b.n	435e <_dtoa_r+0x56e>
    4726:	cmp.w	sl, #0
    472a:	bne.w	4226 <_dtoa_r+0x436>
    472e:	ubfx	r3, fp, #0, #20
    4732:	cmp	r3, #0
    4734:	bne.w	496e <_dtoa_r+0xb7e>
    4738:	bic.w	r3, fp, #2147483648	; 0x80000000
    473c:	lsrs	r3, r3, #20
    473e:	lsls	r3, r3, #20
    4740:	cmp	r3, #0
    4742:	beq.w	49ee <_dtoa_r+0xbfe>
    4746:	ldr	r3, [sp, #24]
    4748:	adds	r3, #1
    474a:	str	r3, [sp, #24]
    474c:	movs	r3, #1
    474e:	add.w	r9, r9, #1
    4752:	str	r3, [sp, #28]
    4754:	ldr	r3, [sp, #44]	; 0x2c
    4756:	movs	r0, #1
    4758:	cmp	r3, #0
    475a:	beq.w	423c <_dtoa_r+0x44c>
    475e:	b.n	422a <_dtoa_r+0x43a>
    4760:	vmov	s15, r1
    4764:	vcvt.f64.s32	d6, s15
    4768:	vmov.f64	d7, #28	; 0x40e00000  7.0
    476c:	vfma.f64	d7, d4, d6
    4770:	vmov	r2, r3, d7
    4774:	sub.w	r3, r3, #54525952	; 0x3400000
    4778:	vmov	d6, r2, r3
    477c:	vmov.f64	d7, #20	; 0x40a00000  5.0
    4780:	vsub.f64	d7, d4, d7
    4784:	vcmpe.f64	d7, d6
    4788:	vmrs	APSR_nzcv, fpscr
    478c:	bgt.w	494a <_dtoa_r+0xb5a>
    4790:	vneg.f64	d6, d6
    4794:	vcmpe.f64	d7, d6
    4798:	vmrs	APSR_nzcv, fpscr
    479c:	bpl.n	482c <_dtoa_r+0xa3c>
    479e:	movs	r3, #0
    47a0:	str	r3, [sp, #20]
    47a2:	mov	r6, r3
    47a4:	b.n	4536 <_dtoa_r+0x746>
    47a6:	ldr	r0, [sp, #32]
    47a8:	b.w	3e5e <_dtoa_r+0x6e>
    47ac:	ldr	r3, [sp, #20]
    47ae:	ldr	r1, [sp, #44]	; 0x2c
    47b0:	str	r2, [sp, #20]
    47b2:	subs	r3, r2, r3
    47b4:	add	r1, r3
    47b6:	movs	r3, #0
    47b8:	str	r1, [sp, #44]	; 0x2c
    47ba:	str	r3, [sp, #56]	; 0x38
    47bc:	b.n	4102 <_dtoa_r+0x312>
    47be:	vldr	d5, [sp, #56]	; 0x38
    47c2:	movs	r1, #2
    47c4:	b.n	43dc <_dtoa_r+0x5ec>
    47c6:	mov	r5, r7
    47c8:	movs	r1, #0
    47ca:	str	r1, [r4, #68]	; 0x44
    47cc:	b.n	438e <_dtoa_r+0x59e>
    47ce:	movs	r5, #1
    47d0:	str	r5, [sp, #52]	; 0x34
    47d2:	mov	r7, r5
    47d4:	mov	r8, r5
    47d6:	b.n	47c8 <_dtoa_r+0x9d8>
    47d8:	cmp	r3, #0
    47da:	mov	r9, r2
    47dc:	ble.n	4802 <_dtoa_r+0xa12>
    47de:	mov	r1, r5
    47e0:	movs	r2, #1
    47e2:	mov	r0, r4
    47e4:	bl	3940 <__lshift>
    47e8:	ldr	r1, [sp, #20]
    47ea:	mov	r5, r0
    47ec:	bl	39f0 <__mcmp>
    47f0:	cmp	r0, #0
    47f2:	ble.w	4a0e <_dtoa_r+0xc1e>
    47f6:	cmp.w	r9, #57	; 0x39
    47fa:	beq.w	49b8 <_dtoa_r+0xbc8>
    47fe:	add.w	r9, sl, #49	; 0x31
    4802:	mov	sl, r6
    4804:	strb.w	r9, [r7]
    4808:	add.w	fp, r7, #1
    480c:	mov	r6, r8
    480e:	str	r5, [sp, #28]
    4810:	b.n	431c <_dtoa_r+0x52c>
    4812:	bne.n	481e <_dtoa_r+0xa2e>
    4814:	tst.w	r9, #1
    4818:	beq.n	481e <_dtoa_r+0xa2e>
    481a:	b.n	42fa <_dtoa_r+0x50a>
    481c:	mov	fp, r2
    481e:	ldrb.w	r3, [fp, #-1]
    4822:	cmp	r3, #48	; 0x30
    4824:	add.w	r2, fp, #4294967295
    4828:	beq.n	481c <_dtoa_r+0xa2c>
    482a:	b.n	431c <_dtoa_r+0x52c>
    482c:	ldrd	sl, fp, [sp, #56]	; 0x38
    4830:	b.w	3fea <_dtoa_r+0x1fa>
    4834:	ldr	r3, [sp, #8]
    4836:	negs	r3, r3
    4838:	cmp	r3, #0
    483a:	beq.w	4974 <_dtoa_r+0xb84>
    483e:	ldr	r2, [pc, #556]	; (4a6c <_dtoa_r+0xc7c>)
    4840:	and.w	r1, r3, #15
    4844:	add.w	r2, r2, r1, lsl #3
    4848:	vldr	d7, [r2]
    484c:	vldr	d6, [sp, #56]	; 0x38
    4850:	asrs	r3, r3, #4
    4852:	vmul.f64	d4, d6, d7
    4856:	beq.w	4a26 <_dtoa_r+0xc36>
    485a:	ldr	r2, [pc, #532]	; (4a70 <_dtoa_r+0xc80>)
    485c:	movs	r1, #2
    485e:	lsls	r0, r3, #31
    4860:	bpl.n	486c <_dtoa_r+0xa7c>
    4862:	vldr	d7, [r2]
    4866:	adds	r1, #1
    4868:	vmul.f64	d4, d4, d7
    486c:	asrs	r3, r3, #1
    486e:	add.w	r2, r2, #8
    4872:	bne.n	485e <_dtoa_r+0xa6e>
    4874:	b.n	43fa <_dtoa_r+0x60a>
    4876:	ldr	r1, [sp, #32]
    4878:	movs	r2, #48	; 0x30
    487a:	strb	r2, [r1, #0]
    487c:	ldr	r2, [sp, #8]
    487e:	ldrb.w	r0, [fp, #-1]
    4882:	adds	r2, #1
    4884:	str	r2, [sp, #8]
    4886:	b.n	40b8 <_dtoa_r+0x2c8>
    4888:	ldr	r1, [r6, #4]
    488a:	mov	r0, r4
    488c:	bl	35e0 <_Balloc>
    4890:	ldr	r3, [r6, #16]
    4892:	adds	r2, r3, #2
    4894:	mov	r8, r0
    4896:	lsls	r2, r2, #2
    4898:	add.w	r1, r6, #12
    489c:	adds	r0, #12
    489e:	bl	ef4 <memcpy>
    48a2:	mov	r1, r8
    48a4:	movs	r2, #1
    48a6:	mov	r0, r4
    48a8:	bl	3940 <__lshift>
    48ac:	mov	r8, r0
    48ae:	b.n	45ae <_dtoa_r+0x7be>
    48b0:	cmp	r2, #57	; 0x39
    48b2:	beq.w	49b8 <_dtoa_r+0xbc8>
    48b6:	add.w	r9, r2, #1
    48ba:	mov	sl, r6
    48bc:	strb.w	r9, [r7]
    48c0:	add.w	fp, r7, #1
    48c4:	mov	r6, r8
    48c6:	str	r5, [sp, #28]
    48c8:	b.n	431c <_dtoa_r+0x52c>
    48ca:	mov	sl, r6
    48cc:	mov	r9, r2
    48ce:	mov	r6, r8
    48d0:	b.n	42e2 <_dtoa_r+0x4f2>
    48d2:	ldr	r0, [pc, #408]	; (4a6c <_dtoa_r+0xc7c>)
    48d4:	vcvt.s32.f64	s12, d4
    48d8:	subs	r5, r1, #1
    48da:	add.w	r0, r0, r5, lsl #3
    48de:	vmov	d7, r2, r3
    48e2:	vldr	d3, [r0]
    48e6:	vmov	r3, s12
    48ea:	vmul.f64	d3, d3, d7
    48ee:	ldr	r0, [sp, #32]
    48f0:	adds	r3, #48	; 0x30
    48f2:	cmp	r1, #1
    48f4:	vcvt.f64.s32	d6, s12
    48f8:	strb	r3, [r0, #0]
    48fa:	add.w	fp, r0, #1
    48fe:	vsub.f64	d7, d4, d6
    4902:	beq.n	492e <_dtoa_r+0xb3e>
    4904:	vmov.f64	d5, #36	; 0x41200000  10.0
    4908:	ldr	r3, [sp, #32]
    490a:	add	r1, r3
    490c:	mov	r3, fp
    490e:	vmul.f64	d7, d7, d5
    4912:	vcvt.s32.f64	s12, d7
    4916:	vmov	r2, s12
    491a:	adds	r2, #48	; 0x30
    491c:	strb.w	r2, [r3], #1
    4920:	cmp	r1, r3
    4922:	vcvt.f64.s32	d6, s12
    4926:	vsub.f64	d7, d7, d6
    492a:	bne.n	490e <_dtoa_r+0xb1e>
    492c:	add	fp, r5
    492e:	vmov.f64	d6, #96	; 0x3f000000  0.5
    4932:	vadd.f64	d5, d3, d6
    4936:	vcmpe.f64	d5, d7
    493a:	vmrs	APSR_nzcv, fpscr
    493e:	bpl.n	49c8 <_dtoa_r+0xbd8>
    4940:	str	r6, [sp, #8]
    4942:	ldrb.w	r0, [fp, #-1]
    4946:	b.w	409e <_dtoa_r+0x2ae>
    494a:	movs	r3, #0
    494c:	str	r3, [sp, #20]
    494e:	mov	r6, r3
    4950:	b.n	4700 <_dtoa_r+0x910>
    4952:	subs	r3, r3, r7
    4954:	str	r3, [sp, #40]	; 0x28
    4956:	movs	r3, #0
    4958:	b.w	410e <_dtoa_r+0x31e>
    495c:	ldr	r2, [sp, #20]
    495e:	ldr	r3, [sp, #64]	; 0x40
    4960:	str	r2, [sp, #56]	; 0x38
    4962:	ldr	r2, [sp, #24]
    4964:	str	r2, [sp, #40]	; 0x28
    4966:	rsb	r3, r3, #54	; 0x36
    496a:	b.w	410e <_dtoa_r+0x31e>
    496e:	movs	r3, #0
    4970:	str	r3, [sp, #28]
    4972:	b.n	4754 <_dtoa_r+0x964>
    4974:	vldr	d4, [sp, #56]	; 0x38
    4978:	movs	r1, #2
    497a:	b.n	43fa <_dtoa_r+0x60a>
    497c:	cmp	r7, #0
    497e:	beq.w	4760 <_dtoa_r+0x970>
    4982:	ldr	r0, [sp, #52]	; 0x34
    4984:	cmp	r0, #0
    4986:	ble.w	482c <_dtoa_r+0xa3c>
    498a:	vmov.f64	d5, #36	; 0x41200000  10.0
    498e:	vmov.f64	d7, #28	; 0x40e00000  7.0
    4992:	adds	r1, #1
    4994:	vmov	s13, r1
    4998:	vmul.f64	d4, d4, d5
    499c:	ldr	r3, [sp, #8]
    499e:	vcvt.f64.s32	d6, s13
    49a2:	subs	r6, r3, #1
    49a4:	vfma.f64	d7, d4, d6
    49a8:	vmov	r2, r3, d7
    49ac:	mov	r1, r0
    49ae:	sub.w	r3, r3, #54525952	; 0x3400000
    49b2:	b.n	4430 <_dtoa_r+0x640>
    49b4:	str	r5, [sp, #28]
    49b6:	b.n	4536 <_dtoa_r+0x746>
    49b8:	movs	r2, #57	; 0x39
    49ba:	mov	sl, r6
    49bc:	str	r5, [sp, #28]
    49be:	mov	r6, r8
    49c0:	strb	r2, [r7, #0]
    49c2:	add.w	fp, r7, #1
    49c6:	b.n	42fe <_dtoa_r+0x50e>
    49c8:	vsub.f64	d6, d6, d3
    49cc:	vcmpe.f64	d6, d7
    49d0:	vmrs	APSR_nzcv, fpscr
    49d4:	bgt.n	49da <_dtoa_r+0xbea>
    49d6:	b.n	482c <_dtoa_r+0xa3c>
    49d8:	mov	fp, r2
    49da:	ldrb.w	r3, [fp, #-1]
    49de:	cmp	r3, #48	; 0x30
    49e0:	add.w	r2, fp, #4294967295
    49e4:	beq.n	49d8 <_dtoa_r+0xbe8>
    49e6:	b.n	44de <_dtoa_r+0x6ee>
    49e8:	str	r6, [sp, #8]
    49ea:	b.w	409e <_dtoa_r+0x2ae>
    49ee:	str	r3, [sp, #28]
    49f0:	b.n	4754 <_dtoa_r+0x964>
    49f2:	cmp.w	sl, #0
    49f6:	bne.w	4572 <_dtoa_r+0x782>
    49fa:	b.n	472e <_dtoa_r+0x93e>
    49fc:	cmp	r2, #57	; 0x39
    49fe:	mov	fp, r9
    4a00:	mov	r9, r2
    4a02:	beq.n	49b8 <_dtoa_r+0xbc8>
    4a04:	cmp.w	fp, #0
    4a08:	bgt.w	47fe <_dtoa_r+0xa0e>
    4a0c:	b.n	4802 <_dtoa_r+0xa12>
    4a0e:	bne.w	4802 <_dtoa_r+0xa12>
    4a12:	tst.w	r9, #1
    4a16:	beq.w	4802 <_dtoa_r+0xa12>
    4a1a:	b.n	47f6 <_dtoa_r+0xa06>
    4a1c:	ldr	r3, [sp, #4]
    4a1e:	cmp	r3, #2
    4a20:	bgt.n	4a34 <_dtoa_r+0xc44>
    4a22:	ldr	r7, [sp, #52]	; 0x34
    4a24:	b.n	429c <_dtoa_r+0x4ac>
    4a26:	movs	r1, #2
    4a28:	b.n	43fa <_dtoa_r+0x60a>
    4a2a:	ldr	r3, [sp, #4]
    4a2c:	cmp	r3, #2
    4a2e:	bgt.n	4a34 <_dtoa_r+0xc44>
    4a30:	ldr	r7, [sp, #52]	; 0x34
    4a32:	b.n	4592 <_dtoa_r+0x7a2>
    4a34:	ldr	r7, [sp, #52]	; 0x34
    4a36:	b.n	46dc <_dtoa_r+0x8ec>
    4a38:	movs	r3, #1
    4a3a:	str	r3, [sp, #56]	; 0x38
    4a3c:	b.w	3f82 <_dtoa_r+0x192>
    4a40:	beq.w	4262 <_dtoa_r+0x472>
    4a44:	rsb	r0, r0, #60	; 0x3c
    4a48:	b.n	4254 <_dtoa_r+0x464>
    4a4a:	movs	r5, #0
    4a4c:	str	r5, [r4, #68]	; 0x44
    4a4e:	mov	r1, r5
    4a50:	mov	r0, r4
    4a52:	bl	35e0 <_Balloc>
    4a56:	mov.w	r7, #4294967295
    4a5a:	movs	r3, #1
    4a5c:	str	r0, [sp, #32]
    4a5e:	mov	r8, r5
    4a60:	str	r0, [r4, #64]	; 0x40
    4a62:	str	r7, [sp, #52]	; 0x34
    4a64:	str	r3, [sp, #36]	; 0x24
    4a66:	b.w	3fea <_dtoa_r+0x1fa>
    4a6a:	nop
    4a6c:	.word	0x200004b8
    4a70:	.word	0x20000580
    4a74:	.word	0x00000000

00004a78 <_svfprintf_r>:
    4a78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a7c:	vpush	{d8-d10}
    4a80:	sub	sp, #228	; 0xe4
    4a82:	mov	r4, r1
    4a84:	str	r1, [sp, #12]
    4a86:	mov	sl, r2
    4a88:	str	r3, [sp, #36]	; 0x24
    4a8a:	str	r0, [sp, #20]
    4a8c:	bl	3518 <_localeconv_r>
    4a90:	ldr	r3, [r0, #0]
    4a92:	str	r3, [sp, #64]	; 0x40
    4a94:	mov	r0, r3
    4a96:	bl	3080 <strlen>
    4a9a:	ldrh	r3, [r4, #12]
    4a9c:	str	r0, [sp, #60]	; 0x3c
    4a9e:	lsls	r1, r3, #24
    4aa0:	bpl.n	4aaa <_svfprintf_r+0x32>
    4aa2:	ldr	r3, [r4, #16]
    4aa4:	cmp	r3, #0
    4aa6:	beq.w	5ba4 <_svfprintf_r+0x112c>
    4aaa:	movs	r3, #0
    4aac:	vldr	d8, [pc, #656]	; 4d40 <_svfprintf_r+0x2c8>
    4ab0:	vldr	d9, [pc, #660]	; 4d48 <_svfprintf_r+0x2d0>
    4ab4:	str	r3, [sp, #52]	; 0x34
    4ab6:	str	r3, [sp, #116]	; 0x74
    4ab8:	str	r3, [sp, #112]	; 0x70
    4aba:	str	r3, [sp, #68]	; 0x44
    4abc:	str	r3, [sp, #24]
    4abe:	add	r3, sp, #160	; 0xa0
    4ac0:	str	r3, [sp, #108]	; 0x6c
    4ac2:	mov	r9, r3
    4ac4:	ldrb.w	r3, [sl]
    4ac8:	mov	r4, sl
    4aca:	cbz	r3, 4b08 <_svfprintf_r+0x90>
    4acc:	cmp	r3, #37	; 0x25
    4ace:	bne.n	4ad6 <_svfprintf_r+0x5e>
    4ad0:	b.n	4b08 <_svfprintf_r+0x90>
    4ad2:	cmp	r3, #37	; 0x25
    4ad4:	beq.n	4ade <_svfprintf_r+0x66>
    4ad6:	ldrb.w	r3, [r4, #1]!
    4ada:	cmp	r3, #0
    4adc:	bne.n	4ad2 <_svfprintf_r+0x5a>
    4ade:	rsb	r5, sl, r4
    4ae2:	cbz	r5, 4b08 <_svfprintf_r+0x90>
    4ae4:	ldr	r3, [sp, #112]	; 0x70
    4ae6:	ldr	r2, [sp, #116]	; 0x74
    4ae8:	str.w	sl, [r9]
    4aec:	adds	r3, #1
    4aee:	add	r2, r5
    4af0:	cmp	r3, #7
    4af2:	str.w	r5, [r9, #4]
    4af6:	str	r2, [sp, #116]	; 0x74
    4af8:	str	r3, [sp, #112]	; 0x70
    4afa:	bgt.w	4c44 <_svfprintf_r+0x1cc>
    4afe:	add.w	r9, r9, #8
    4b02:	ldr	r3, [sp, #24]
    4b04:	add	r3, r5
    4b06:	str	r3, [sp, #24]
    4b08:	ldrb	r3, [r4, #0]
    4b0a:	cmp	r3, #0
    4b0c:	beq.w	4c56 <_svfprintf_r+0x1de>
    4b10:	movs	r3, #0
    4b12:	mov	r2, r3
    4b14:	strb.w	r3, [sp, #79]	; 0x4f
    4b18:	mov	r1, r3
    4b1a:	str	r3, [sp, #28]
    4b1c:	mov	fp, r3
    4b1e:	mov.w	r8, #4294967295
    4b22:	ldrb	r3, [r4, #1]
    4b24:	add.w	sl, r4, #1
    4b28:	mov	r5, r8
    4b2a:	add.w	sl, sl, #1
    4b2e:	sub.w	r0, r3, #32
    4b32:	cmp	r0, #88	; 0x58
    4b34:	bhi.w	5328 <_svfprintf_r+0x8b0>
    4b38:	tbh	[pc, r0, lsl #1]
    4b3c:	.word	0x03f60363
    4b40:	.word	0x036b03f6
    4b44:	.word	0x03f603f6
    4b48:	.word	0x03f603f6
    4b4c:	.word	0x03f603f6
    4b50:	.word	0x037e0370
    4b54:	.word	0x005d03f6
    4b58:	.word	0x03f600df
    4b5c:	.word	0x010c00fb
    4b60:	.word	0x010c010c
    4b64:	.word	0x010c010c
    4b68:	.word	0x010c010c
    4b6c:	.word	0x010c010c
    4b70:	.word	0x03f603f6
    4b74:	.word	0x03f603f6
    4b78:	.word	0x03f603f6
    4b7c:	.word	0x03f603f6
    4b80:	.word	0x03f603f6
    4b84:	.word	0x015e011c
    4b88:	.word	0x015e03f6
    4b8c:	.word	0x03f603f6
    4b90:	.word	0x03f603f6
    4b94:	.word	0x03f602a1
    4b98:	.word	0x02a603f6
    4b9c:	.word	0x03f603f6
    4ba0:	.word	0x03f603f6
    4ba4:	.word	0x02d803f6
    4ba8:	.word	0x03f603f6
    4bac:	.word	0x03f60305
    4bb0:	.word	0x03f603f6
    4bb4:	.word	0x03f603f6
    4bb8:	.word	0x03f603f6
    4bbc:	.word	0x03f603f6
    4bc0:	.word	0x034303f6
    4bc4:	.word	0x015e0356
    4bc8:	.word	0x015e015e
    4bcc:	.word	0x0356035e
    4bd0:	.word	0x03f603f6
    4bd4:	.word	0x03f603a4
    4bd8:	.word	0x00a203b1
    4bdc:	.word	0x03c30062
    4be0:	.word	0x03c803f6
    4be4:	.word	0x038303f6
    4be8:	.word	0x03f603f6
    4bec:	.short	0x038b
    4bee:	ldr	r0, [sp, #28]
    4bf0:	str	r3, [sp, #36]	; 0x24
    4bf2:	negs	r0, r0
    4bf4:	str	r0, [sp, #28]
    4bf6:	orr.w	fp, fp, #4
    4bfa:	ldrb.w	r3, [sl]
    4bfe:	b.n	4b2a <_svfprintf_r+0xb2>
    4c00:	mov	r8, r5
    4c02:	ldr	r0, [sp, #36]	; 0x24
    4c04:	movs	r1, #0
    4c06:	movs	r3, #48	; 0x30
    4c08:	movs	r2, #120	; 0x78
    4c0a:	cmp	r8, r1
    4c0c:	strb.w	r3, [sp, #80]	; 0x50
    4c10:	ldr	r4, [r0, #0]
    4c12:	strb.w	r2, [sp, #81]	; 0x51
    4c16:	add.w	r7, r0, #4
    4c1a:	mov.w	r5, #0
    4c1e:	strb.w	r1, [sp, #79]	; 0x4f
    4c22:	orr.w	r3, fp, #2
    4c26:	blt.w	5362 <_svfprintf_r+0x8ea>
    4c2a:	bic.w	r3, fp, #128	; 0x80
    4c2e:	orr.w	fp, r3, #2
    4c32:	orrs.w	r3, r4, r5
    4c36:	str	r7, [sp, #36]	; 0x24
    4c38:	beq.w	530e <_svfprintf_r+0x896>
    4c3c:	mov	r7, r1
    4c3e:	str	r2, [sp, #48]	; 0x30
    4c40:	ldr	r0, [pc, #268]	; (4d50 <_svfprintf_r+0x2d8>)
    4c42:	b.n	51a2 <_svfprintf_r+0x72a>
    4c44:	add	r2, sp, #108	; 0x6c
    4c46:	ldr	r1, [sp, #12]
    4c48:	ldr	r0, [sp, #20]
    4c4a:	bl	5fe8 <__ssprint_r>
    4c4e:	cbnz	r0, 4c64 <_svfprintf_r+0x1ec>
    4c50:	add.w	r9, sp, #160	; 0xa0
    4c54:	b.n	4b02 <_svfprintf_r+0x8a>
    4c56:	ldr	r3, [sp, #116]	; 0x74
    4c58:	cbz	r3, 4c64 <_svfprintf_r+0x1ec>
    4c5a:	ldr	r0, [sp, #20]
    4c5c:	ldr	r1, [sp, #12]
    4c5e:	add	r2, sp, #108	; 0x6c
    4c60:	bl	5fe8 <__ssprint_r>
    4c64:	ldr	r3, [sp, #12]
    4c66:	ldrh	r3, [r3, #12]
    4c68:	tst.w	r3, #64	; 0x40
    4c6c:	ldr	r3, [sp, #24]
    4c6e:	it	ne
    4c70:	movne.w	r3, #4294967295
    4c74:	mov	r0, r3
    4c76:	add	sp, #228	; 0xe4
    4c78:	vpop	{d8-d10}
    4c7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c80:	str	r3, [sp, #48]	; 0x30
    4c82:	mov	r8, r5
    4c84:	cmp	r2, #0
    4c86:	bne.w	5fbe <_svfprintf_r+0x1546>
    4c8a:	ands.w	r3, fp, #32
    4c8e:	beq.w	509e <_svfprintf_r+0x626>
    4c92:	ldr	r7, [sp, #36]	; 0x24
    4c94:	adds	r7, #7
    4c96:	bic.w	r3, r7, #7
    4c9a:	movs	r7, #0
    4c9c:	add.w	r2, r3, #8
    4ca0:	cmp	r8, r7
    4ca2:	str	r2, [sp, #36]	; 0x24
    4ca4:	ldrd	r4, r5, [r3]
    4ca8:	strb.w	r7, [sp, #79]	; 0x4f
    4cac:	blt.w	596c <_svfprintf_r+0xef4>
    4cb0:	orrs.w	r3, r4, r5
    4cb4:	bic.w	fp, fp, #128	; 0x80
    4cb8:	beq.w	5352 <_svfprintf_r+0x8da>
    4cbc:	add	r6, sp, #160	; 0xa0
    4cbe:	lsrs	r2, r4, #3
    4cc0:	orr.w	r2, r2, r5, lsl #29
    4cc4:	lsrs	r1, r5, #3
    4cc6:	and.w	r3, r4, #7
    4cca:	mov	r5, r1
    4ccc:	mov	r4, r2
    4cce:	adds	r3, #48	; 0x30
    4cd0:	orrs.w	r2, r4, r5
    4cd4:	strb.w	r3, [r6, #-1]!
    4cd8:	bne.n	4cbe <_svfprintf_r+0x246>
    4cda:	tst.w	fp, #1
    4cde:	beq.w	5130 <_svfprintf_r+0x6b8>
    4ce2:	cmp	r3, #48	; 0x30
    4ce4:	beq.w	5130 <_svfprintf_r+0x6b8>
    4ce8:	movs	r2, #48	; 0x30
    4cea:	subs	r3, r6, #1
    4cec:	strb.w	r2, [r6, #-1]
    4cf0:	add	r2, sp, #160	; 0xa0
    4cf2:	subs	r2, r2, r3
    4cf4:	str	r2, [sp, #32]
    4cf6:	mov	r6, r3
    4cf8:	b.n	5136 <_svfprintf_r+0x6be>
    4cfa:	ldrb.w	r3, [sl]
    4cfe:	cmp	r3, #42	; 0x2a
    4d00:	add.w	r4, sl, #1
    4d04:	beq.w	5f66 <_svfprintf_r+0x14ee>
    4d08:	sub.w	r0, r3, #48	; 0x30
    4d0c:	cmp	r0, #9
    4d0e:	it	ls
    4d10:	movls	r5, #0
    4d12:	bhi.w	5ec0 <_svfprintf_r+0x1448>
    4d16:	ldrb.w	r3, [r4], #1
    4d1a:	add.w	r5, r5, r5, lsl #2
    4d1e:	add.w	r5, r0, r5, lsl #1
    4d22:	sub.w	r0, r3, #48	; 0x30
    4d26:	cmp	r0, #9
    4d28:	bls.n	4d16 <_svfprintf_r+0x29e>
    4d2a:	orr.w	r5, r5, r5, asr #31
    4d2e:	mov	sl, r4
    4d30:	b.n	4b2e <_svfprintf_r+0xb6>
    4d32:	orr.w	fp, fp, #128	; 0x80
    4d36:	ldrb.w	r3, [sl]
    4d3a:	b.n	4b2a <_svfprintf_r+0xb2>
    4d3c:	nop.w
	...
    4d48:	.word	0xffffffff
    4d4c:	.word	0x7fefffff
    4d50:	.word	0x200005fc
    4d54:	sub.w	r0, r3, #48	; 0x30
    4d58:	movs	r3, #0
    4d5a:	mov	r4, r3
    4d5c:	ldrb.w	r3, [sl], #1
    4d60:	add.w	r4, r4, r4, lsl #2
    4d64:	add.w	r4, r0, r4, lsl #1
    4d68:	sub.w	r0, r3, #48	; 0x30
    4d6c:	cmp	r0, #9
    4d6e:	bls.n	4d5c <_svfprintf_r+0x2e4>
    4d70:	str	r4, [sp, #28]
    4d72:	b.n	4b2e <_svfprintf_r+0xb6>
    4d74:	str	r3, [sp, #48]	; 0x30
    4d76:	mov	r8, r5
    4d78:	cmp	r2, #0
    4d7a:	bne.w	5fd6 <_svfprintf_r+0x155e>
    4d7e:	orr.w	fp, fp, #16
    4d82:	tst.w	fp, #32
    4d86:	beq.w	5790 <_svfprintf_r+0xd18>
    4d8a:	ldr	r7, [sp, #36]	; 0x24
    4d8c:	adds	r7, #7
    4d8e:	bic.w	r7, r7, #7
    4d92:	ldrd	r2, r3, [r7]
    4d96:	add.w	r1, r7, #8
    4d9a:	str	r1, [sp, #36]	; 0x24
    4d9c:	mov	r4, r2
    4d9e:	mov	r5, r3
    4da0:	cmp	r2, #0
    4da2:	sbcs.w	r3, r3, #0
    4da6:	blt.w	5818 <_svfprintf_r+0xda0>
    4daa:	cmp.w	r8, #0
    4dae:	ldrb.w	r7, [sp, #79]	; 0x4f
    4db2:	blt.w	5120 <_svfprintf_r+0x6a8>
    4db6:	orrs.w	r3, r4, r5
    4dba:	bic.w	fp, fp, #128	; 0x80
    4dbe:	beq.w	55ae <_svfprintf_r+0xb36>
    4dc2:	cmp	r5, #0
    4dc4:	it	eq
    4dc6:	cmpeq	r4, #10
    4dc8:	bcc.w	5128 <_svfprintf_r+0x6b0>
    4dcc:	add	r6, sp, #160	; 0xa0
    4dce:	mov	r0, r4
    4dd0:	mov	r1, r5
    4dd2:	movs	r2, #10
    4dd4:	movs	r3, #0
    4dd6:	bl	60e8 <__aeabi_uldivmod>
    4dda:	adds	r2, #48	; 0x30
    4ddc:	strb.w	r2, [r6, #-1]!
    4de0:	mov	r0, r4
    4de2:	mov	r1, r5
    4de4:	movs	r3, #0
    4de6:	movs	r2, #10
    4de8:	bl	60e8 <__aeabi_uldivmod>
    4dec:	mov	r4, r0
    4dee:	mov	r5, r1
    4df0:	orrs.w	r3, r4, r5
    4df4:	bne.n	4dce <_svfprintf_r+0x356>
    4df6:	b.n	5130 <_svfprintf_r+0x6b8>
    4df8:	str	r3, [sp, #48]	; 0x30
    4dfa:	mov	r8, r5
    4dfc:	cmp	r2, #0
    4dfe:	bne.w	5fce <_svfprintf_r+0x1556>
    4e02:	ldr	r7, [sp, #36]	; 0x24
    4e04:	tst.w	fp, #8
    4e08:	add.w	r7, r7, #7
    4e0c:	beq.w	5a90 <_svfprintf_r+0x1018>
    4e10:	bic.w	r3, r7, #7
    4e14:	vldr	d8, [r3]
    4e18:	add.w	r2, r3, #8
    4e1c:	str	r2, [sp, #36]	; 0x24
    4e1e:	vabs.f64	d7, d8
    4e22:	vcmp.f64	d7, d9
    4e26:	vmrs	APSR_nzcv, fpscr
    4e2a:	ble.w	59a6 <_svfprintf_r+0xf2e>
    4e2e:	vcmpe.f64	d8, #0.0
    4e32:	vmrs	APSR_nzcv, fpscr
    4e36:	bmi.w	5dce <_svfprintf_r+0x1356>
    4e3a:	ldrb.w	r7, [sp, #79]	; 0x4f
    4e3e:	ldr	r6, [pc, #668]	; (50dc <_svfprintf_r+0x664>)
    4e40:	ldr	r3, [pc, #668]	; (50e0 <_svfprintf_r+0x668>)
    4e42:	ldr	r1, [sp, #48]	; 0x30
    4e44:	movs	r2, #3
    4e46:	mov.w	r8, #0
    4e4a:	str	r2, [sp, #16]
    4e4c:	bic.w	fp, fp, #128	; 0x80
    4e50:	cmp	r1, #71	; 0x47
    4e52:	it	le
    4e54:	movle	r6, r3
    4e56:	str	r2, [sp, #32]
    4e58:	str.w	r8, [sp, #56]	; 0x38
    4e5c:	cbz	r7, 4e64 <_svfprintf_r+0x3ec>
    4e5e:	ldr	r3, [sp, #16]
    4e60:	adds	r3, #1
    4e62:	str	r3, [sp, #16]
    4e64:	ands.w	r3, fp, #2
    4e68:	str	r3, [sp, #40]	; 0x28
    4e6a:	beq.n	4e72 <_svfprintf_r+0x3fa>
    4e6c:	ldr	r3, [sp, #16]
    4e6e:	adds	r3, #2
    4e70:	str	r3, [sp, #16]
    4e72:	ands.w	r3, fp, #132	; 0x84
    4e76:	str	r3, [sp, #44]	; 0x2c
    4e78:	bne.w	537c <_svfprintf_r+0x904>
    4e7c:	ldr	r3, [sp, #28]
    4e7e:	ldr	r2, [sp, #16]
    4e80:	subs	r4, r3, r2
    4e82:	cmp	r4, #0
    4e84:	ble.w	537c <_svfprintf_r+0x904>
    4e88:	cmp	r4, #16
    4e8a:	ldr	r1, [sp, #116]	; 0x74
    4e8c:	ldr	r2, [sp, #112]	; 0x70
    4e8e:	ldr	r7, [pc, #596]	; (50e4 <_svfprintf_r+0x66c>)
    4e90:	ble.n	4eda <_svfprintf_r+0x462>
    4e92:	mov	r0, r9
    4e94:	movs	r5, #16
    4e96:	mov	r9, r8
    4e98:	mov	r8, r6
    4e9a:	ldr	r6, [sp, #20]
    4e9c:	b.n	4ea8 <_svfprintf_r+0x430>
    4e9e:	subs	r4, #16
    4ea0:	cmp	r4, #16
    4ea2:	add.w	r0, r0, #8
    4ea6:	ble.n	4ed4 <_svfprintf_r+0x45c>
    4ea8:	adds	r2, #1
    4eaa:	adds	r1, #16
    4eac:	cmp	r2, #7
    4eae:	str	r1, [sp, #116]	; 0x74
    4eb0:	str	r2, [sp, #112]	; 0x70
    4eb2:	str	r7, [r0, #0]
    4eb4:	str	r5, [r0, #4]
    4eb6:	ble.n	4e9e <_svfprintf_r+0x426>
    4eb8:	add	r2, sp, #108	; 0x6c
    4eba:	ldr	r1, [sp, #12]
    4ebc:	mov	r0, r6
    4ebe:	bl	5fe8 <__ssprint_r>
    4ec2:	cmp	r0, #0
    4ec4:	bne.w	4c64 <_svfprintf_r+0x1ec>
    4ec8:	subs	r4, #16
    4eca:	cmp	r4, #16
    4ecc:	ldr	r1, [sp, #116]	; 0x74
    4ece:	ldr	r2, [sp, #112]	; 0x70
    4ed0:	add	r0, sp, #160	; 0xa0
    4ed2:	bgt.n	4ea8 <_svfprintf_r+0x430>
    4ed4:	mov	r6, r8
    4ed6:	mov	r8, r9
    4ed8:	mov	r9, r0
    4eda:	adds	r2, #1
    4edc:	adds	r3, r4, r1
    4ede:	cmp	r2, #7
    4ee0:	str	r3, [sp, #116]	; 0x74
    4ee2:	str	r2, [sp, #112]	; 0x70
    4ee4:	str.w	r7, [r9]
    4ee8:	str.w	r4, [r9, #4]
    4eec:	bgt.w	56b4 <_svfprintf_r+0xc3c>
    4ef0:	ldrb.w	r7, [sp, #79]	; 0x4f
    4ef4:	add.w	r9, r9, #8
    4ef8:	cbz	r7, 4f18 <_svfprintf_r+0x4a0>
    4efa:	ldr	r2, [sp, #112]	; 0x70
    4efc:	adds	r2, #1
    4efe:	adds	r3, #1
    4f00:	add.w	r0, sp, #79	; 0x4f
    4f04:	movs	r1, #1
    4f06:	cmp	r2, #7
    4f08:	str	r3, [sp, #116]	; 0x74
    4f0a:	str	r2, [sp, #112]	; 0x70
    4f0c:	stmia.w	r9, {r0, r1}
    4f10:	bgt.w	55d2 <_svfprintf_r+0xb5a>
    4f14:	add.w	r9, r9, #8
    4f18:	ldr	r2, [sp, #40]	; 0x28
    4f1a:	cbz	r2, 4f38 <_svfprintf_r+0x4c0>
    4f1c:	ldr	r2, [sp, #112]	; 0x70
    4f1e:	adds	r2, #1
    4f20:	adds	r3, #2
    4f22:	add	r0, sp, #80	; 0x50
    4f24:	movs	r1, #2
    4f26:	cmp	r2, #7
    4f28:	str	r3, [sp, #116]	; 0x74
    4f2a:	str	r2, [sp, #112]	; 0x70
    4f2c:	stmia.w	r9, {r0, r1}
    4f30:	bgt.w	55ea <_svfprintf_r+0xb72>
    4f34:	add.w	r9, r9, #8
    4f38:	ldr	r2, [sp, #44]	; 0x2c
    4f3a:	cmp	r2, #128	; 0x80
    4f3c:	beq.w	543c <_svfprintf_r+0x9c4>
    4f40:	ldr	r2, [sp, #32]
    4f42:	rsb	r4, r2, r8
    4f46:	cmp	r4, #0
    4f48:	ble.n	4fb4 <_svfprintf_r+0x53c>
    4f4a:	cmp	r4, #16
    4f4c:	ldr	r2, [sp, #112]	; 0x70
    4f4e:	ldr	r7, [pc, #408]	; (50e8 <_svfprintf_r+0x670>)
    4f50:	ble.n	4f9a <_svfprintf_r+0x522>
    4f52:	mov	r1, r9
    4f54:	mov.w	r8, #16
    4f58:	mov	r9, r6
    4f5a:	ldr	r5, [sp, #20]
    4f5c:	ldr	r6, [sp, #12]
    4f5e:	b.n	4f6a <_svfprintf_r+0x4f2>
    4f60:	subs	r4, #16
    4f62:	cmp	r4, #16
    4f64:	add.w	r1, r1, #8
    4f68:	ble.n	4f96 <_svfprintf_r+0x51e>
    4f6a:	adds	r2, #1
    4f6c:	adds	r3, #16
    4f6e:	cmp	r2, #7
    4f70:	str	r3, [sp, #116]	; 0x74
    4f72:	str	r2, [sp, #112]	; 0x70
    4f74:	stmia.w	r1, {r7, r8}
    4f78:	ble.n	4f60 <_svfprintf_r+0x4e8>
    4f7a:	add	r2, sp, #108	; 0x6c
    4f7c:	mov	r1, r6
    4f7e:	mov	r0, r5
    4f80:	bl	5fe8 <__ssprint_r>
    4f84:	cmp	r0, #0
    4f86:	bne.w	4c64 <_svfprintf_r+0x1ec>
    4f8a:	subs	r4, #16
    4f8c:	cmp	r4, #16
    4f8e:	ldr	r3, [sp, #116]	; 0x74
    4f90:	ldr	r2, [sp, #112]	; 0x70
    4f92:	add	r1, sp, #160	; 0xa0
    4f94:	bgt.n	4f6a <_svfprintf_r+0x4f2>
    4f96:	mov	r6, r9
    4f98:	mov	r9, r1
    4f9a:	adds	r2, #1
    4f9c:	add	r3, r4
    4f9e:	cmp	r2, #7
    4fa0:	str	r3, [sp, #116]	; 0x74
    4fa2:	str	r2, [sp, #112]	; 0x70
    4fa4:	str.w	r7, [r9]
    4fa8:	str.w	r4, [r9, #4]
    4fac:	bgt.w	55ba <_svfprintf_r+0xb42>
    4fb0:	add.w	r9, r9, #8
    4fb4:	tst.w	fp, #256	; 0x100
    4fb8:	bne.w	5380 <_svfprintf_r+0x908>
    4fbc:	ldr	r2, [sp, #112]	; 0x70
    4fbe:	ldr	r0, [sp, #32]
    4fc0:	str.w	r6, [r9]
    4fc4:	adds	r2, #1
    4fc6:	add	r3, r0
    4fc8:	cmp	r2, #7
    4fca:	str	r3, [sp, #116]	; 0x74
    4fcc:	str.w	r0, [r9, #4]
    4fd0:	str	r2, [sp, #112]	; 0x70
    4fd2:	bgt.w	555a <_svfprintf_r+0xae2>
    4fd6:	add.w	r9, r9, #8
    4fda:	tst.w	fp, #4
    4fde:	beq.n	505e <_svfprintf_r+0x5e6>
    4fe0:	ldr	r2, [sp, #28]
    4fe2:	ldr	r1, [sp, #16]
    4fe4:	subs	r4, r2, r1
    4fe6:	cmp	r4, #0
    4fe8:	ble.n	505e <_svfprintf_r+0x5e6>
    4fea:	cmp	r4, #16
    4fec:	ldr	r2, [sp, #112]	; 0x70
    4fee:	ldr	r7, [pc, #244]	; (50e4 <_svfprintf_r+0x66c>)
    4ff0:	ble.n	5038 <_svfprintf_r+0x5c0>
    4ff2:	movs	r5, #16
    4ff4:	ldr	r6, [sp, #20]
    4ff6:	ldr.w	r8, [sp, #12]
    4ffa:	b.n	5006 <_svfprintf_r+0x58e>
    4ffc:	subs	r4, #16
    4ffe:	cmp	r4, #16
    5000:	add.w	r9, r9, #8
    5004:	ble.n	5038 <_svfprintf_r+0x5c0>
    5006:	adds	r2, #1
    5008:	adds	r3, #16
    500a:	cmp	r2, #7
    500c:	str	r3, [sp, #116]	; 0x74
    500e:	str	r2, [sp, #112]	; 0x70
    5010:	str.w	r7, [r9]
    5014:	str.w	r5, [r9, #4]
    5018:	ble.n	4ffc <_svfprintf_r+0x584>
    501a:	add	r2, sp, #108	; 0x6c
    501c:	mov	r1, r8
    501e:	mov	r0, r6
    5020:	bl	5fe8 <__ssprint_r>
    5024:	cmp	r0, #0
    5026:	bne.w	4c64 <_svfprintf_r+0x1ec>
    502a:	subs	r4, #16
    502c:	cmp	r4, #16
    502e:	ldr	r3, [sp, #116]	; 0x74
    5030:	ldr	r2, [sp, #112]	; 0x70
    5032:	add.w	r9, sp, #160	; 0xa0
    5036:	bgt.n	5006 <_svfprintf_r+0x58e>
    5038:	adds	r2, #1
    503a:	add	r3, r4
    503c:	cmp	r2, #7
    503e:	str	r3, [sp, #116]	; 0x74
    5040:	str	r2, [sp, #112]	; 0x70
    5042:	str.w	r7, [r9]
    5046:	str.w	r4, [r9, #4]
    504a:	ble.n	505e <_svfprintf_r+0x5e6>
    504c:	add	r2, sp, #108	; 0x6c
    504e:	ldr	r1, [sp, #12]
    5050:	ldr	r0, [sp, #20]
    5052:	bl	5fe8 <__ssprint_r>
    5056:	cmp	r0, #0
    5058:	bne.w	4c64 <_svfprintf_r+0x1ec>
    505c:	ldr	r3, [sp, #116]	; 0x74
    505e:	ldr	r2, [sp, #24]
    5060:	ldr	r1, [sp, #28]
    5062:	ldr	r0, [sp, #16]
    5064:	cmp	r1, r0
    5066:	ite	ge
    5068:	addge	r2, r2, r1
    506a:	addlt	r2, r2, r0
    506c:	str	r2, [sp, #24]
    506e:	cmp	r3, #0
    5070:	bne.w	5572 <_svfprintf_r+0xafa>
    5074:	movs	r3, #0
    5076:	str	r3, [sp, #112]	; 0x70
    5078:	add.w	r9, sp, #160	; 0xa0
    507c:	b.n	4ac4 <_svfprintf_r+0x4c>
    507e:	orr.w	fp, fp, #8
    5082:	ldrb.w	r3, [sl]
    5086:	b.n	4b2a <_svfprintf_r+0xb2>
    5088:	str	r3, [sp, #48]	; 0x30
    508a:	mov	r8, r5
    508c:	cmp	r2, #0
    508e:	bne.w	5fc6 <_svfprintf_r+0x154e>
    5092:	orr.w	fp, fp, #16
    5096:	ands.w	r3, fp, #32
    509a:	bne.w	4c92 <_svfprintf_r+0x21a>
    509e:	ands.w	r2, fp, #16
    50a2:	bne.w	57c8 <_svfprintf_r+0xd50>
    50a6:	ands.w	r3, fp, #64	; 0x40
    50aa:	beq.w	57c8 <_svfprintf_r+0xd50>
    50ae:	ldr	r1, [sp, #36]	; 0x24
    50b0:	strb.w	r2, [sp, #79]	; 0x4f
    50b4:	mov	r3, r1
    50b6:	cmp.w	r8, #0
    50ba:	add.w	r3, r3, #4
    50be:	ldrh	r4, [r1, #0]
    50c0:	mov.w	r5, #0
    50c4:	blt.w	5c1e <_svfprintf_r+0x11a6>
    50c8:	orrs.w	r1, r4, r5
    50cc:	bic.w	fp, fp, #128	; 0x80
    50d0:	str	r3, [sp, #36]	; 0x24
    50d2:	beq.w	5352 <_svfprintf_r+0x8da>
    50d6:	mov	r7, r2
    50d8:	b.n	4cbc <_svfprintf_r+0x244>
    50da:	nop
    50dc:	.word	0x200005dc
    50e0:	.word	0x200005d8
    50e4:	.word	0x20000618
    50e8:	.word	0x200005c8
    50ec:	str	r3, [sp, #48]	; 0x30
    50ee:	mov	r8, r5
    50f0:	cmp	r2, #0
    50f2:	bne.w	5fa8 <_svfprintf_r+0x1530>
    50f6:	orr.w	fp, fp, #16
    50fa:	ands.w	r3, fp, #32
    50fe:	beq.w	56d0 <_svfprintf_r+0xc58>
    5102:	ldr	r7, [sp, #36]	; 0x24
    5104:	adds	r7, #7
    5106:	bic.w	r3, r7, #7
    510a:	movs	r7, #0
    510c:	add.w	r2, r3, #8
    5110:	cmp	r8, r7
    5112:	str	r2, [sp, #36]	; 0x24
    5114:	ldrd	r4, r5, [r3]
    5118:	strb.w	r7, [sp, #79]	; 0x4f
    511c:	bge.w	4db6 <_svfprintf_r+0x33e>
    5120:	orrs.w	r3, r4, r5
    5124:	bne.w	4dc2 <_svfprintf_r+0x34a>
    5128:	add	r6, sp, #224	; 0xe0
    512a:	adds	r4, #48	; 0x30
    512c:	strb.w	r4, [r6, #-65]!
    5130:	add	r3, sp, #160	; 0xa0
    5132:	subs	r3, r3, r6
    5134:	str	r3, [sp, #32]
    5136:	ldr	r3, [sp, #32]
    5138:	cmp	r3, r8
    513a:	it	lt
    513c:	movlt	r3, r8
    513e:	str	r3, [sp, #16]
    5140:	movs	r3, #0
    5142:	str	r3, [sp, #56]	; 0x38
    5144:	b.n	4e5c <_svfprintf_r+0x3e4>
    5146:	str	r3, [sp, #48]	; 0x30
    5148:	mov	r8, r5
    514a:	cmp	r2, #0
    514c:	bne.w	5fa0 <_svfprintf_r+0x1528>
    5150:	tst.w	fp, #32
    5154:	ldr	r0, [pc, #776]	; (5460 <_svfprintf_r+0x9e8>)
    5156:	beq.w	5266 <_svfprintf_r+0x7ee>
    515a:	ldr	r7, [sp, #36]	; 0x24
    515c:	adds	r7, #7
    515e:	bic.w	r3, r7, #7
    5162:	ldrd	r4, r5, [r3]
    5166:	add.w	r2, r3, #8
    516a:	str	r2, [sp, #36]	; 0x24
    516c:	ands.w	r7, fp, #1
    5170:	beq.w	5602 <_svfprintf_r+0xb8a>
    5174:	orrs.w	r3, r4, r5
    5178:	beq.w	5ac2 <_svfprintf_r+0x104a>
    517c:	movs	r7, #0
    517e:	movs	r3, #48	; 0x30
    5180:	ldrb.w	r2, [sp, #48]	; 0x30
    5184:	strb.w	r3, [sp, #80]	; 0x50
    5188:	cmp	r8, r7
    518a:	strb.w	r2, [sp, #81]	; 0x51
    518e:	strb.w	r7, [sp, #79]	; 0x4f
    5192:	orr.w	r3, fp, #2
    5196:	blt.w	5dc8 <_svfprintf_r+0x1350>
    519a:	bic.w	r3, fp, #128	; 0x80
    519e:	orr.w	fp, r3, #2
    51a2:	add	r6, sp, #160	; 0xa0
    51a4:	lsrs	r3, r4, #4
    51a6:	and.w	r1, r4, #15
    51aa:	orr.w	r3, r3, r5, lsl #28
    51ae:	lsrs	r2, r5, #4
    51b0:	mov	r4, r3
    51b2:	mov	r5, r2
    51b4:	ldrb	r3, [r0, r1]
    51b6:	strb.w	r3, [r6, #-1]!
    51ba:	orrs.w	r3, r4, r5
    51be:	bne.n	51a4 <_svfprintf_r+0x72c>
    51c0:	b.n	5130 <_svfprintf_r+0x6b8>
    51c2:	ldr	r1, [sp, #36]	; 0x24
    51c4:	str	r3, [sp, #48]	; 0x30
    51c6:	ldr	r2, [r1, #0]
    51c8:	strb.w	r2, [sp, #120]	; 0x78
    51cc:	movs	r3, #0
    51ce:	mov	r2, r1
    51d0:	mov	r7, r3
    51d2:	strb.w	r3, [sp, #79]	; 0x4f
    51d6:	adds	r2, #4
    51d8:	movs	r3, #1
    51da:	str	r3, [sp, #16]
    51dc:	mov	r8, r7
    51de:	str	r7, [sp, #56]	; 0x38
    51e0:	str	r2, [sp, #36]	; 0x24
    51e2:	str	r3, [sp, #32]
    51e4:	add	r6, sp, #120	; 0x78
    51e6:	b.n	4e64 <_svfprintf_r+0x3ec>
    51e8:	str	r3, [sp, #48]	; 0x30
    51ea:	mov	r8, r5
    51ec:	cmp	r2, #0
    51ee:	beq.w	4d82 <_svfprintf_r+0x30a>
    51f2:	strb.w	r1, [sp, #79]	; 0x4f
    51f6:	b.n	4d82 <_svfprintf_r+0x30a>
    51f8:	orr.w	fp, fp, #64	; 0x40
    51fc:	ldrb.w	r3, [sl]
    5200:	b.n	4b2a <_svfprintf_r+0xb2>
    5202:	ldrb.w	r3, [sl]
    5206:	cmp	r1, #0
    5208:	bne.w	4b2a <_svfprintf_r+0xb2>
    520c:	movs	r2, #1
    520e:	movs	r1, #32
    5210:	b.n	4b2a <_svfprintf_r+0xb2>
    5212:	orr.w	fp, fp, #1
    5216:	ldrb.w	r3, [sl]
    521a:	b.n	4b2a <_svfprintf_r+0xb2>
    521c:	ldr	r4, [sp, #36]	; 0x24
    521e:	ldr	r3, [r4, #0]
    5220:	str	r3, [sp, #28]
    5222:	mov	r0, r3
    5224:	cmp	r0, #0
    5226:	mov	r3, r4
    5228:	add.w	r3, r3, #4
    522c:	blt.w	4bee <_svfprintf_r+0x176>
    5230:	str	r3, [sp, #36]	; 0x24
    5232:	ldrb.w	r3, [sl]
    5236:	b.n	4b2a <_svfprintf_r+0xb2>
    5238:	ldrb.w	r3, [sl]
    523c:	movs	r2, #1
    523e:	movs	r1, #43	; 0x2b
    5240:	b.n	4b2a <_svfprintf_r+0xb2>
    5242:	str	r3, [sp, #48]	; 0x30
    5244:	mov	r8, r5
    5246:	cmp	r2, #0
    5248:	beq.w	50fa <_svfprintf_r+0x682>
    524c:	strb.w	r1, [sp, #79]	; 0x4f
    5250:	b.n	50fa <_svfprintf_r+0x682>
    5252:	str	r3, [sp, #48]	; 0x30
    5254:	mov	r8, r5
    5256:	cmp	r2, #0
    5258:	bne.w	5fb0 <_svfprintf_r+0x1538>
    525c:	tst.w	fp, #32
    5260:	ldr	r0, [pc, #512]	; (5464 <_svfprintf_r+0x9ec>)
    5262:	bne.w	515a <_svfprintf_r+0x6e2>
    5266:	ldr	r2, [sp, #36]	; 0x24
    5268:	tst.w	fp, #16
    526c:	mov	r3, r2
    526e:	bne.w	57f4 <_svfprintf_r+0xd7c>
    5272:	tst.w	fp, #64	; 0x40
    5276:	beq.w	57f4 <_svfprintf_r+0xd7c>
    527a:	adds	r3, #4
    527c:	ldrh	r4, [r2, #0]
    527e:	str	r3, [sp, #36]	; 0x24
    5280:	movs	r5, #0
    5282:	b.n	516c <_svfprintf_r+0x6f4>
    5284:	ldrb.w	r3, [sl]
    5288:	cmp	r3, #108	; 0x6c
    528a:	ittte	eq
    528c:	ldrbeq.w	r3, [sl, #1]
    5290:	orreq.w	fp, fp, #32
    5294:	addeq.w	sl, sl, #1
    5298:	orrne.w	fp, fp, #16
    529c:	b.n	4b2a <_svfprintf_r+0xb2>
    529e:	cmp	r2, #0
    52a0:	bne.w	5f82 <_svfprintf_r+0x150a>
    52a4:	tst.w	fp, #32
    52a8:	beq.w	5978 <_svfprintf_r+0xf00>
    52ac:	ldr	r2, [sp, #36]	; 0x24
    52ae:	ldr	r1, [sp, #24]
    52b0:	ldr	r3, [r2, #0]
    52b2:	asrs	r5, r1, #31
    52b4:	mov	r0, r1
    52b6:	adds	r2, #4
    52b8:	mov	r1, r5
    52ba:	str	r2, [sp, #36]	; 0x24
    52bc:	strd	r0, r1, [r3]
    52c0:	b.n	4ac4 <_svfprintf_r+0x4c>
    52c2:	orr.w	fp, fp, #32
    52c6:	ldrb.w	r3, [sl]
    52ca:	b.n	4b2a <_svfprintf_r+0xb2>
    52cc:	ldr	r2, [sp, #36]	; 0x24
    52ce:	str	r3, [sp, #48]	; 0x30
    52d0:	ldr	r6, [r2, #0]
    52d2:	movs	r4, #0
    52d4:	strb.w	r4, [sp, #79]	; 0x4f
    52d8:	adds	r7, r2, #4
    52da:	cmp	r6, #0
    52dc:	beq.w	5daa <_svfprintf_r+0x1332>
    52e0:	cmp	r5, #0
    52e2:	blt.w	5c2a <_svfprintf_r+0x11b2>
    52e6:	mov	r2, r5
    52e8:	mov	r1, r4
    52ea:	mov	r0, r6
    52ec:	bl	3540 <memchr>
    52f0:	cmp	r0, #0
    52f2:	beq.w	5e8e <_svfprintf_r+0x1416>
    52f6:	subs	r3, r0, r6
    52f8:	str	r3, [sp, #32]
    52fa:	mov	r8, r4
    52fc:	bic.w	r3, r3, r3, asr #31
    5300:	str	r7, [sp, #36]	; 0x24
    5302:	str	r3, [sp, #16]
    5304:	str.w	r8, [sp, #56]	; 0x38
    5308:	ldrb.w	r7, [sp, #79]	; 0x4f
    530c:	b.n	4e5c <_svfprintf_r+0x3e4>
    530e:	ldr	r0, [pc, #340]	; (5464 <_svfprintf_r+0x9ec>)
    5310:	str	r2, [sp, #48]	; 0x30
    5312:	cmp.w	r8, #0
    5316:	bne.w	5622 <_svfprintf_r+0xbaa>
    531a:	mov	r7, r8
    531c:	mov.w	r8, #0
    5320:	str.w	r8, [sp, #32]
    5324:	add	r6, sp, #160	; 0xa0
    5326:	b.n	5136 <_svfprintf_r+0x6be>
    5328:	str	r3, [sp, #48]	; 0x30
    532a:	cmp	r2, #0
    532c:	bne.w	5f8a <_svfprintf_r+0x1512>
    5330:	ldr	r2, [sp, #48]	; 0x30
    5332:	cmp	r2, #0
    5334:	beq.w	4c56 <_svfprintf_r+0x1de>
    5338:	movs	r3, #0
    533a:	movs	r1, #1
    533c:	mov	r7, r3
    533e:	str	r1, [sp, #16]
    5340:	strb.w	r2, [sp, #120]	; 0x78
    5344:	strb.w	r3, [sp, #79]	; 0x4f
    5348:	mov	r8, r3
    534a:	str	r3, [sp, #56]	; 0x38
    534c:	str	r1, [sp, #32]
    534e:	add	r6, sp, #120	; 0x78
    5350:	b.n	4e64 <_svfprintf_r+0x3ec>
    5352:	cmp.w	r8, #0
    5356:	beq.w	5e70 <_svfprintf_r+0x13f8>
    535a:	movs	r7, #0
    535c:	movs	r4, #0
    535e:	movs	r5, #0
    5360:	b.n	4cbc <_svfprintf_r+0x244>
    5362:	ldr	r0, [pc, #256]	; (5464 <_svfprintf_r+0x9ec>)
    5364:	str	r2, [sp, #48]	; 0x30
    5366:	mov	fp, r3
    5368:	orrs.w	r3, r4, r5
    536c:	str	r7, [sp, #36]	; 0x24
    536e:	mov.w	r7, #0
    5372:	bne.w	51a2 <_svfprintf_r+0x72a>
    5376:	movs	r4, #0
    5378:	movs	r5, #0
    537a:	b.n	51a2 <_svfprintf_r+0x72a>
    537c:	ldr	r3, [sp, #116]	; 0x74
    537e:	b.n	4ef8 <_svfprintf_r+0x480>
    5380:	ldr	r2, [sp, #48]	; 0x30
    5382:	cmp	r2, #101	; 0x65
    5384:	ble.w	54ca <_svfprintf_r+0xa52>
    5388:	vcmp.f64	d8, #0.0
    538c:	vmrs	APSR_nzcv, fpscr
    5390:	bne.w	5626 <_svfprintf_r+0xbae>
    5394:	ldr	r2, [sp, #112]	; 0x70
    5396:	ldr	r1, [pc, #208]	; (5468 <_svfprintf_r+0x9f0>)
    5398:	str.w	r1, [r9]
    539c:	adds	r2, #1
    539e:	adds	r3, #1
    53a0:	movs	r1, #1
    53a2:	cmp	r2, #7
    53a4:	str	r3, [sp, #116]	; 0x74
    53a6:	str	r2, [sp, #112]	; 0x70
    53a8:	str.w	r1, [r9, #4]
    53ac:	bgt.w	5ad4 <_svfprintf_r+0x105c>
    53b0:	add.w	r9, r9, #8
    53b4:	ldr	r2, [sp, #84]	; 0x54
    53b6:	ldr	r1, [sp, #52]	; 0x34
    53b8:	cmp	r2, r1
    53ba:	blt.n	53c4 <_svfprintf_r+0x94c>
    53bc:	tst.w	fp, #1
    53c0:	beq.w	4fda <_svfprintf_r+0x562>
    53c4:	ldr	r2, [sp, #112]	; 0x70
    53c6:	ldr	r0, [sp, #60]	; 0x3c
    53c8:	ldr	r1, [sp, #64]	; 0x40
    53ca:	str.w	r1, [r9]
    53ce:	adds	r2, #1
    53d0:	add	r3, r0
    53d2:	cmp	r2, #7
    53d4:	str	r3, [sp, #116]	; 0x74
    53d6:	str.w	r0, [r9, #4]
    53da:	str	r2, [sp, #112]	; 0x70
    53dc:	bgt.w	5b8c <_svfprintf_r+0x1114>
    53e0:	add.w	r9, r9, #8
    53e4:	ldr	r2, [sp, #52]	; 0x34
    53e6:	subs	r4, r2, #1
    53e8:	cmp	r4, #0
    53ea:	ble.w	4fda <_svfprintf_r+0x562>
    53ee:	cmp	r4, #16
    53f0:	ldr	r2, [sp, #112]	; 0x70
    53f2:	ldr	r7, [pc, #120]	; (546c <_svfprintf_r+0x9f4>)
    53f4:	ble.w	57b0 <_svfprintf_r+0xd38>
    53f8:	movs	r5, #16
    53fa:	ldr	r6, [sp, #20]
    53fc:	ldr.w	r8, [sp, #12]
    5400:	b.n	540e <_svfprintf_r+0x996>
    5402:	add.w	r9, r9, #8
    5406:	subs	r4, #16
    5408:	cmp	r4, #16
    540a:	ble.w	57b0 <_svfprintf_r+0xd38>
    540e:	adds	r2, #1
    5410:	adds	r3, #16
    5412:	cmp	r2, #7
    5414:	str	r3, [sp, #116]	; 0x74
    5416:	str	r2, [sp, #112]	; 0x70
    5418:	str.w	r7, [r9]
    541c:	str.w	r5, [r9, #4]
    5420:	ble.n	5402 <_svfprintf_r+0x98a>
    5422:	add	r2, sp, #108	; 0x6c
    5424:	mov	r1, r8
    5426:	mov	r0, r6
    5428:	bl	5fe8 <__ssprint_r>
    542c:	cmp	r0, #0
    542e:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5432:	ldr	r3, [sp, #116]	; 0x74
    5434:	ldr	r2, [sp, #112]	; 0x70
    5436:	add.w	r9, sp, #160	; 0xa0
    543a:	b.n	5406 <_svfprintf_r+0x98e>
    543c:	ldr	r2, [sp, #28]
    543e:	ldr	r1, [sp, #16]
    5440:	subs	r4, r2, r1
    5442:	cmp	r4, #0
    5444:	ble.w	4f40 <_svfprintf_r+0x4c8>
    5448:	cmp	r4, #16
    544a:	ldr	r2, [sp, #112]	; 0x70
    544c:	ldr	r7, [pc, #28]	; (546c <_svfprintf_r+0x9f4>)
    544e:	ble.n	54ae <_svfprintf_r+0xa36>
    5450:	mov	r1, r9
    5452:	movs	r5, #16
    5454:	mov	r9, r8
    5456:	mov	r0, r3
    5458:	mov	r8, r6
    545a:	ldr	r6, [sp, #20]
    545c:	b.n	547a <_svfprintf_r+0xa02>
    545e:	nop
    5460:	.word	0x200005e8
    5464:	.word	0x200005fc
    5468:	.word	0x200005c4
    546c:	.word	0x200005c8
    5470:	subs	r4, #16
    5472:	cmp	r4, #16
    5474:	add.w	r1, r1, #8
    5478:	ble.n	54a6 <_svfprintf_r+0xa2e>
    547a:	adds	r2, #1
    547c:	adds	r0, #16
    547e:	cmp	r2, #7
    5480:	str	r0, [sp, #116]	; 0x74
    5482:	str	r2, [sp, #112]	; 0x70
    5484:	str	r7, [r1, #0]
    5486:	str	r5, [r1, #4]
    5488:	ble.n	5470 <_svfprintf_r+0x9f8>
    548a:	add	r2, sp, #108	; 0x6c
    548c:	ldr	r1, [sp, #12]
    548e:	mov	r0, r6
    5490:	bl	5fe8 <__ssprint_r>
    5494:	cmp	r0, #0
    5496:	bne.w	4c64 <_svfprintf_r+0x1ec>
    549a:	subs	r4, #16
    549c:	cmp	r4, #16
    549e:	ldr	r0, [sp, #116]	; 0x74
    54a0:	ldr	r2, [sp, #112]	; 0x70
    54a2:	add	r1, sp, #160	; 0xa0
    54a4:	bgt.n	547a <_svfprintf_r+0xa02>
    54a6:	mov	r6, r8
    54a8:	mov	r3, r0
    54aa:	mov	r8, r9
    54ac:	mov	r9, r1
    54ae:	adds	r2, #1
    54b0:	add	r3, r4
    54b2:	cmp	r2, #7
    54b4:	str	r3, [sp, #116]	; 0x74
    54b6:	str	r2, [sp, #112]	; 0x70
    54b8:	str.w	r7, [r9]
    54bc:	str.w	r4, [r9, #4]
    54c0:	bgt.w	5950 <_svfprintf_r+0xed8>
    54c4:	add.w	r9, r9, #8
    54c8:	b.n	4f40 <_svfprintf_r+0x4c8>
    54ca:	ldr	r2, [sp, #52]	; 0x34
    54cc:	str.w	r6, [r9]
    54d0:	cmp	r2, #1
    54d2:	ldr	r2, [sp, #112]	; 0x70
    54d4:	add.w	r3, r3, #1
    54d8:	add.w	r2, r2, #1
    54dc:	mov.w	r1, #1
    54e0:	str	r3, [sp, #116]	; 0x74
    54e2:	str	r2, [sp, #112]	; 0x70
    54e4:	str.w	r1, [r9, #4]
    54e8:	ble.w	590c <_svfprintf_r+0xe94>
    54ec:	cmp	r2, #7
    54ee:	bgt.w	591c <_svfprintf_r+0xea4>
    54f2:	add.w	r9, r9, #8
    54f6:	ldr	r0, [sp, #60]	; 0x3c
    54f8:	ldr	r1, [sp, #64]	; 0x40
    54fa:	str.w	r1, [r9]
    54fe:	adds	r2, #1
    5500:	add	r3, r0
    5502:	cmp	r2, #7
    5504:	str	r3, [sp, #116]	; 0x74
    5506:	str	r2, [sp, #112]	; 0x70
    5508:	str.w	r0, [r9, #4]
    550c:	bgt.w	5936 <_svfprintf_r+0xebe>
    5510:	add.w	r9, r9, #8
    5514:	vcmp.f64	d8, #0.0
    5518:	vmrs	APSR_nzcv, fpscr
    551c:	ldr	r1, [sp, #52]	; 0x34
    551e:	beq.w	570c <_svfprintf_r+0xc94>
    5522:	subs	r1, #1
    5524:	adds	r2, #1
    5526:	adds	r6, #1
    5528:	add	r3, r1
    552a:	cmp	r2, #7
    552c:	str.w	r6, [r9]
    5530:	str	r2, [sp, #112]	; 0x70
    5532:	str	r3, [sp, #116]	; 0x74
    5534:	str.w	r1, [r9, #4]
    5538:	bgt.w	5776 <_svfprintf_r+0xcfe>
    553c:	add.w	r9, r9, #8
    5540:	ldr	r0, [sp, #68]	; 0x44
    5542:	str.w	r0, [r9, #4]
    5546:	adds	r2, #1
    5548:	add	r3, r0
    554a:	add	r1, sp, #92	; 0x5c
    554c:	cmp	r2, #7
    554e:	str	r3, [sp, #116]	; 0x74
    5550:	str	r2, [sp, #112]	; 0x70
    5552:	str.w	r1, [r9]
    5556:	ble.w	4fd6 <_svfprintf_r+0x55e>
    555a:	add	r2, sp, #108	; 0x6c
    555c:	ldr	r1, [sp, #12]
    555e:	ldr	r0, [sp, #20]
    5560:	bl	5fe8 <__ssprint_r>
    5564:	cmp	r0, #0
    5566:	bne.w	4c64 <_svfprintf_r+0x1ec>
    556a:	ldr	r3, [sp, #116]	; 0x74
    556c:	add.w	r9, sp, #160	; 0xa0
    5570:	b.n	4fda <_svfprintf_r+0x562>
    5572:	add	r2, sp, #108	; 0x6c
    5574:	ldr	r1, [sp, #12]
    5576:	ldr	r0, [sp, #20]
    5578:	bl	5fe8 <__ssprint_r>
    557c:	cmp	r0, #0
    557e:	beq.w	5074 <_svfprintf_r+0x5fc>
    5582:	b.w	4c64 <_svfprintf_r+0x1ec>
    5586:	ldr	r1, [sp, #36]	; 0x24
    5588:	cmp.w	r8, #0
    558c:	ldr	r4, [r1, #0]
    558e:	strb.w	r3, [sp, #79]	; 0x4f
    5592:	add.w	r7, r1, #4
    5596:	mov.w	r5, #0
    559a:	blt.w	5c80 <_svfprintf_r+0x1208>
    559e:	orrs.w	r2, r4, r5
    55a2:	str	r7, [sp, #36]	; 0x24
    55a4:	bic.w	fp, fp, #128	; 0x80
    55a8:	mov	r7, r3
    55aa:	bne.w	4dc2 <_svfprintf_r+0x34a>
    55ae:	cmp.w	r8, #0
    55b2:	beq.w	531c <_svfprintf_r+0x8a4>
    55b6:	movs	r4, #0
    55b8:	b.n	5128 <_svfprintf_r+0x6b0>
    55ba:	add	r2, sp, #108	; 0x6c
    55bc:	ldr	r1, [sp, #12]
    55be:	ldr	r0, [sp, #20]
    55c0:	bl	5fe8 <__ssprint_r>
    55c4:	cmp	r0, #0
    55c6:	bne.w	4c64 <_svfprintf_r+0x1ec>
    55ca:	ldr	r3, [sp, #116]	; 0x74
    55cc:	add.w	r9, sp, #160	; 0xa0
    55d0:	b.n	4fb4 <_svfprintf_r+0x53c>
    55d2:	add	r2, sp, #108	; 0x6c
    55d4:	ldr	r1, [sp, #12]
    55d6:	ldr	r0, [sp, #20]
    55d8:	bl	5fe8 <__ssprint_r>
    55dc:	cmp	r0, #0
    55de:	bne.w	4c64 <_svfprintf_r+0x1ec>
    55e2:	ldr	r3, [sp, #116]	; 0x74
    55e4:	add.w	r9, sp, #160	; 0xa0
    55e8:	b.n	4f18 <_svfprintf_r+0x4a0>
    55ea:	add	r2, sp, #108	; 0x6c
    55ec:	ldr	r1, [sp, #12]
    55ee:	ldr	r0, [sp, #20]
    55f0:	bl	5fe8 <__ssprint_r>
    55f4:	cmp	r0, #0
    55f6:	bne.w	4c64 <_svfprintf_r+0x1ec>
    55fa:	ldr	r3, [sp, #116]	; 0x74
    55fc:	add.w	r9, sp, #160	; 0xa0
    5600:	b.n	4f38 <_svfprintf_r+0x4c0>
    5602:	cmp.w	r8, #0
    5606:	strb.w	r7, [sp, #79]	; 0x4f
    560a:	blt.w	5aec <_svfprintf_r+0x1074>
    560e:	orrs.w	r3, r4, r5
    5612:	bic.w	fp, fp, #128	; 0x80
    5616:	bne.w	51a2 <_svfprintf_r+0x72a>
    561a:	cmp.w	r8, #0
    561e:	beq.w	531a <_svfprintf_r+0x8a2>
    5622:	movs	r7, #0
    5624:	b.n	5376 <_svfprintf_r+0x8fe>
    5626:	ldr	r4, [sp, #84]	; 0x54
    5628:	cmp	r4, #0
    562a:	ble.w	5af0 <_svfprintf_r+0x1078>
    562e:	ldr	r2, [sp, #56]	; 0x38
    5630:	ldr	r1, [sp, #52]	; 0x34
    5632:	cmp	r2, r1
    5634:	it	ge
    5636:	movge	r2, r1
    5638:	cmp	r2, #0
    563a:	mov	r4, r2
    563c:	ble.n	565a <_svfprintf_r+0xbe2>
    563e:	ldr	r2, [sp, #112]	; 0x70
    5640:	str.w	r6, [r9]
    5644:	adds	r2, #1
    5646:	add	r3, r4
    5648:	cmp	r2, #7
    564a:	str	r3, [sp, #116]	; 0x74
    564c:	str.w	r4, [r9, #4]
    5650:	str	r2, [sp, #112]	; 0x70
    5652:	bgt.w	5d3a <_svfprintf_r+0x12c2>
    5656:	add.w	r9, r9, #8
    565a:	ldr	r2, [sp, #56]	; 0x38
    565c:	cmp	r4, #0
    565e:	it	ge
    5660:	subge	r2, r2, r4
    5662:	cmp	r2, #0
    5664:	mov	r4, r2
    5666:	ble.w	584c <_svfprintf_r+0xdd4>
    566a:	cmp	r4, #16
    566c:	ldr	r2, [sp, #112]	; 0x70
    566e:	ldr	r7, [pc, #772]	; (5974 <_svfprintf_r+0xefc>)
    5670:	ble.w	5aa6 <_svfprintf_r+0x102e>
    5674:	mov	r1, r9
    5676:	movs	r5, #16
    5678:	mov	r9, r6
    567a:	ldr.w	r8, [sp, #20]
    567e:	ldr	r6, [sp, #12]
    5680:	b.n	568c <_svfprintf_r+0xc14>
    5682:	adds	r1, #8
    5684:	subs	r4, #16
    5686:	cmp	r4, #16
    5688:	ble.w	5aa2 <_svfprintf_r+0x102a>
    568c:	adds	r2, #1
    568e:	adds	r3, #16
    5690:	cmp	r2, #7
    5692:	str	r3, [sp, #116]	; 0x74
    5694:	str	r2, [sp, #112]	; 0x70
    5696:	str	r7, [r1, #0]
    5698:	str	r5, [r1, #4]
    569a:	ble.n	5682 <_svfprintf_r+0xc0a>
    569c:	add	r2, sp, #108	; 0x6c
    569e:	mov	r1, r6
    56a0:	mov	r0, r8
    56a2:	bl	5fe8 <__ssprint_r>
    56a6:	cmp	r0, #0
    56a8:	bne.w	4c64 <_svfprintf_r+0x1ec>
    56ac:	ldr	r3, [sp, #116]	; 0x74
    56ae:	ldr	r2, [sp, #112]	; 0x70
    56b0:	add	r1, sp, #160	; 0xa0
    56b2:	b.n	5684 <_svfprintf_r+0xc0c>
    56b4:	add	r2, sp, #108	; 0x6c
    56b6:	ldr	r1, [sp, #12]
    56b8:	ldr	r0, [sp, #20]
    56ba:	bl	5fe8 <__ssprint_r>
    56be:	cmp	r0, #0
    56c0:	bne.w	4c64 <_svfprintf_r+0x1ec>
    56c4:	ldrb.w	r7, [sp, #79]	; 0x4f
    56c8:	ldr	r3, [sp, #116]	; 0x74
    56ca:	add.w	r9, sp, #160	; 0xa0
    56ce:	b.n	4ef8 <_svfprintf_r+0x480>
    56d0:	ands.w	r2, fp, #16
    56d4:	bne.w	5586 <_svfprintf_r+0xb0e>
    56d8:	ands.w	r3, fp, #64	; 0x40
    56dc:	beq.w	5586 <_svfprintf_r+0xb0e>
    56e0:	ldr	r1, [sp, #36]	; 0x24
    56e2:	strb.w	r2, [sp, #79]	; 0x4f
    56e6:	mov	r3, r1
    56e8:	cmp.w	r8, #0
    56ec:	add.w	r3, r3, #4
    56f0:	ldrh	r4, [r1, #0]
    56f2:	mov.w	r5, #0
    56f6:	blt.w	5c22 <_svfprintf_r+0x11aa>
    56fa:	orrs.w	r1, r4, r5
    56fe:	bic.w	fp, fp, #128	; 0x80
    5702:	str	r3, [sp, #36]	; 0x24
    5704:	mov	r7, r2
    5706:	bne.w	4dc2 <_svfprintf_r+0x34a>
    570a:	b.n	55ae <_svfprintf_r+0xb36>
    570c:	subs	r4, r1, #1
    570e:	cmp	r4, #0
    5710:	ble.w	5540 <_svfprintf_r+0xac8>
    5714:	cmp	r4, #16
    5716:	ldr	r7, [pc, #604]	; (5974 <_svfprintf_r+0xefc>)
    5718:	ble.n	5760 <_svfprintf_r+0xce8>
    571a:	movs	r5, #16
    571c:	ldr	r6, [sp, #20]
    571e:	ldr.w	r8, [sp, #12]
    5722:	b.n	572e <_svfprintf_r+0xcb6>
    5724:	subs	r4, #16
    5726:	cmp	r4, #16
    5728:	add.w	r9, r9, #8
    572c:	ble.n	5760 <_svfprintf_r+0xce8>
    572e:	adds	r2, #1
    5730:	adds	r3, #16
    5732:	cmp	r2, #7
    5734:	str	r3, [sp, #116]	; 0x74
    5736:	str	r2, [sp, #112]	; 0x70
    5738:	str.w	r7, [r9]
    573c:	str.w	r5, [r9, #4]
    5740:	ble.n	5724 <_svfprintf_r+0xcac>
    5742:	add	r2, sp, #108	; 0x6c
    5744:	mov	r1, r8
    5746:	mov	r0, r6
    5748:	bl	5fe8 <__ssprint_r>
    574c:	cmp	r0, #0
    574e:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5752:	subs	r4, #16
    5754:	cmp	r4, #16
    5756:	ldr	r3, [sp, #116]	; 0x74
    5758:	ldr	r2, [sp, #112]	; 0x70
    575a:	add.w	r9, sp, #160	; 0xa0
    575e:	bgt.n	572e <_svfprintf_r+0xcb6>
    5760:	adds	r2, #1
    5762:	add	r3, r4
    5764:	cmp	r2, #7
    5766:	str	r3, [sp, #116]	; 0x74
    5768:	str	r2, [sp, #112]	; 0x70
    576a:	str.w	r7, [r9]
    576e:	str.w	r4, [r9, #4]
    5772:	ble.w	553c <_svfprintf_r+0xac4>
    5776:	add	r2, sp, #108	; 0x6c
    5778:	ldr	r1, [sp, #12]
    577a:	ldr	r0, [sp, #20]
    577c:	bl	5fe8 <__ssprint_r>
    5780:	cmp	r0, #0
    5782:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5786:	ldr	r3, [sp, #116]	; 0x74
    5788:	ldr	r2, [sp, #112]	; 0x70
    578a:	add.w	r9, sp, #160	; 0xa0
    578e:	b.n	5540 <_svfprintf_r+0xac8>
    5790:	tst.w	fp, #16
    5794:	bne.n	57fe <_svfprintf_r+0xd86>
    5796:	tst.w	fp, #64	; 0x40
    579a:	beq.n	57fe <_svfprintf_r+0xd86>
    579c:	ldr	r1, [sp, #36]	; 0x24
    579e:	ldrsh.w	r4, [r1]
    57a2:	adds	r1, #4
    57a4:	asrs	r5, r4, #31
    57a6:	mov	r2, r4
    57a8:	mov	r3, r5
    57aa:	str	r1, [sp, #36]	; 0x24
    57ac:	b.w	4da0 <_svfprintf_r+0x328>
    57b0:	adds	r2, #1
    57b2:	add	r3, r4
    57b4:	cmp	r2, #7
    57b6:	str	r3, [sp, #116]	; 0x74
    57b8:	str	r2, [sp, #112]	; 0x70
    57ba:	str.w	r7, [r9]
    57be:	str.w	r4, [r9, #4]
    57c2:	ble.w	4fd6 <_svfprintf_r+0x55e>
    57c6:	b.n	555a <_svfprintf_r+0xae2>
    57c8:	ldr	r1, [sp, #36]	; 0x24
    57ca:	cmp.w	r8, #0
    57ce:	ldr	r4, [r1, #0]
    57d0:	strb.w	r3, [sp, #79]	; 0x4f
    57d4:	add.w	r7, r1, #4
    57d8:	mov.w	r5, #0
    57dc:	blt.w	596a <_svfprintf_r+0xef2>
    57e0:	orrs.w	r2, r4, r5
    57e4:	bic.w	fp, fp, #128	; 0x80
    57e8:	str	r7, [sp, #36]	; 0x24
    57ea:	beq.w	5352 <_svfprintf_r+0x8da>
    57ee:	mov	r7, r3
    57f0:	b.w	4cbc <_svfprintf_r+0x244>
    57f4:	ldr	r4, [r3, #0]
    57f6:	adds	r3, #4
    57f8:	str	r3, [sp, #36]	; 0x24
    57fa:	movs	r5, #0
    57fc:	b.n	516c <_svfprintf_r+0x6f4>
    57fe:	ldr	r2, [sp, #36]	; 0x24
    5800:	ldr	r4, [r2, #0]
    5802:	mov	r3, r2
    5804:	adds	r3, #4
    5806:	asrs	r5, r4, #31
    5808:	mov	r2, r4
    580a:	str	r3, [sp, #36]	; 0x24
    580c:	cmp	r2, #0
    580e:	mov	r3, r5
    5810:	sbcs.w	r3, r3, #0
    5814:	bge.w	4daa <_svfprintf_r+0x332>
    5818:	negs	r4, r4
    581a:	mov.w	r7, #45	; 0x2d
    581e:	sbc.w	r5, r5, r5, lsl #1
    5822:	cmp.w	r8, #0
    5826:	strb.w	r7, [sp, #79]	; 0x4f
    582a:	blt.w	4dc2 <_svfprintf_r+0x34a>
    582e:	bic.w	fp, fp, #128	; 0x80
    5832:	b.w	4dc2 <_svfprintf_r+0x34a>
    5836:	add	r2, sp, #108	; 0x6c
    5838:	ldr	r1, [sp, #12]
    583a:	ldr	r0, [sp, #20]
    583c:	bl	5fe8 <__ssprint_r>
    5840:	cmp	r0, #0
    5842:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5846:	ldr	r3, [sp, #116]	; 0x74
    5848:	add.w	r9, sp, #160	; 0xa0
    584c:	ldr	r1, [sp, #56]	; 0x38
    584e:	ldr	r2, [sp, #84]	; 0x54
    5850:	add	r1, r6
    5852:	mov	r5, r1
    5854:	ldr	r1, [sp, #52]	; 0x34
    5856:	cmp	r2, r1
    5858:	blt.n	58ea <_svfprintf_r+0xe72>
    585a:	tst.w	fp, #1
    585e:	bne.n	58ea <_svfprintf_r+0xe72>
    5860:	ldr	r0, [sp, #52]	; 0x34
    5862:	add	r6, r0
    5864:	subs	r4, r6, r5
    5866:	subs	r2, r0, r2
    5868:	cmp	r4, r2
    586a:	it	ge
    586c:	movge	r4, r2
    586e:	cmp	r4, #0
    5870:	mov	r6, r4
    5872:	ble.n	5890 <_svfprintf_r+0xe18>
    5874:	ldr	r1, [sp, #112]	; 0x70
    5876:	str.w	r5, [r9]
    587a:	adds	r1, #1
    587c:	add	r3, r4
    587e:	cmp	r1, #7
    5880:	str	r3, [sp, #116]	; 0x74
    5882:	str.w	r4, [r9, #4]
    5886:	str	r1, [sp, #112]	; 0x70
    5888:	bgt.w	5d8c <_svfprintf_r+0x1314>
    588c:	add.w	r9, r9, #8
    5890:	cmp	r6, #0
    5892:	ite	ge
    5894:	subge	r4, r2, r6
    5896:	movlt	r4, r2
    5898:	cmp	r4, #0
    589a:	ble.w	4fda <_svfprintf_r+0x562>
    589e:	cmp	r4, #16
    58a0:	ldr	r2, [sp, #112]	; 0x70
    58a2:	ldr	r7, [pc, #208]	; (5974 <_svfprintf_r+0xefc>)
    58a4:	ble.n	57b0 <_svfprintf_r+0xd38>
    58a6:	movs	r5, #16
    58a8:	ldr	r6, [sp, #20]
    58aa:	ldr.w	r8, [sp, #12]
    58ae:	b.n	58bc <_svfprintf_r+0xe44>
    58b0:	add.w	r9, r9, #8
    58b4:	subs	r4, #16
    58b6:	cmp	r4, #16
    58b8:	ble.w	57b0 <_svfprintf_r+0xd38>
    58bc:	adds	r2, #1
    58be:	adds	r3, #16
    58c0:	cmp	r2, #7
    58c2:	str	r3, [sp, #116]	; 0x74
    58c4:	str	r2, [sp, #112]	; 0x70
    58c6:	str.w	r7, [r9]
    58ca:	str.w	r5, [r9, #4]
    58ce:	ble.n	58b0 <_svfprintf_r+0xe38>
    58d0:	add	r2, sp, #108	; 0x6c
    58d2:	mov	r1, r8
    58d4:	mov	r0, r6
    58d6:	bl	5fe8 <__ssprint_r>
    58da:	cmp	r0, #0
    58dc:	bne.w	4c64 <_svfprintf_r+0x1ec>
    58e0:	ldr	r3, [sp, #116]	; 0x74
    58e2:	ldr	r2, [sp, #112]	; 0x70
    58e4:	add.w	r9, sp, #160	; 0xa0
    58e8:	b.n	58b4 <_svfprintf_r+0xe3c>
    58ea:	ldr	r1, [sp, #112]	; 0x70
    58ec:	ldr	r4, [sp, #60]	; 0x3c
    58ee:	ldr	r0, [sp, #64]	; 0x40
    58f0:	str.w	r0, [r9]
    58f4:	adds	r1, #1
    58f6:	add	r3, r4
    58f8:	cmp	r1, #7
    58fa:	str	r3, [sp, #116]	; 0x74
    58fc:	str.w	r4, [r9, #4]
    5900:	str	r1, [sp, #112]	; 0x70
    5902:	bgt.w	5d52 <_svfprintf_r+0x12da>
    5906:	add.w	r9, r9, #8
    590a:	b.n	5860 <_svfprintf_r+0xde8>
    590c:	tst.w	fp, #1
    5910:	bne.w	54ec <_svfprintf_r+0xa74>
    5914:	cmp	r2, #7
    5916:	ble.w	553c <_svfprintf_r+0xac4>
    591a:	b.n	5776 <_svfprintf_r+0xcfe>
    591c:	add	r2, sp, #108	; 0x6c
    591e:	ldr	r1, [sp, #12]
    5920:	ldr	r0, [sp, #20]
    5922:	bl	5fe8 <__ssprint_r>
    5926:	cmp	r0, #0
    5928:	bne.w	4c64 <_svfprintf_r+0x1ec>
    592c:	ldr	r3, [sp, #116]	; 0x74
    592e:	ldr	r2, [sp, #112]	; 0x70
    5930:	add.w	r9, sp, #160	; 0xa0
    5934:	b.n	54f6 <_svfprintf_r+0xa7e>
    5936:	add	r2, sp, #108	; 0x6c
    5938:	ldr	r1, [sp, #12]
    593a:	ldr	r0, [sp, #20]
    593c:	bl	5fe8 <__ssprint_r>
    5940:	cmp	r0, #0
    5942:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5946:	ldr	r3, [sp, #116]	; 0x74
    5948:	ldr	r2, [sp, #112]	; 0x70
    594a:	add.w	r9, sp, #160	; 0xa0
    594e:	b.n	5514 <_svfprintf_r+0xa9c>
    5950:	add	r2, sp, #108	; 0x6c
    5952:	ldr	r1, [sp, #12]
    5954:	ldr	r0, [sp, #20]
    5956:	bl	5fe8 <__ssprint_r>
    595a:	cmp	r0, #0
    595c:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5960:	ldr	r3, [sp, #116]	; 0x74
    5962:	add.w	r9, sp, #160	; 0xa0
    5966:	b.w	4f40 <_svfprintf_r+0x4c8>
    596a:	str	r7, [sp, #36]	; 0x24
    596c:	movs	r7, #0
    596e:	b.w	4cbc <_svfprintf_r+0x244>
    5972:	nop
    5974:	.word	0x200005c8
    5978:	tst.w	fp, #16
    597c:	bne.n	5996 <_svfprintf_r+0xf1e>
    597e:	tst.w	fp, #64	; 0x40
    5982:	beq.n	5996 <_svfprintf_r+0xf1e>
    5984:	ldr	r2, [sp, #36]	; 0x24
    5986:	ldr	r3, [r2, #0]
    5988:	adds	r2, #4
    598a:	str	r2, [sp, #36]	; 0x24
    598c:	ldrh.w	r2, [sp, #24]
    5990:	strh	r2, [r3, #0]
    5992:	b.w	4ac4 <_svfprintf_r+0x4c>
    5996:	ldr	r2, [sp, #36]	; 0x24
    5998:	ldr	r3, [r2, #0]
    599a:	adds	r2, #4
    599c:	str	r2, [sp, #36]	; 0x24
    599e:	ldr	r2, [sp, #24]
    59a0:	str	r2, [r3, #0]
    59a2:	b.w	4ac4 <_svfprintf_r+0x4c>
    59a6:	vcmp.f64	d8, d8
    59aa:	vmrs	APSR_nzcv, fpscr
    59ae:	bvs.w	5eee <_svfprintf_r+0x1476>
    59b2:	ldr	r3, [sp, #48]	; 0x30
    59b4:	cmp.w	r8, #4294967295
    59b8:	bic.w	r5, r3, #32
    59bc:	beq.w	5e0a <_svfprintf_r+0x1392>
    59c0:	cmp	r5, #71	; 0x47
    59c2:	beq.w	5c12 <_svfprintf_r+0x119a>
    59c6:	orr.w	r3, fp, #256	; 0x100
    59ca:	str	r3, [sp, #40]	; 0x28
    59cc:	vmov	r3, s17
    59d0:	cmp	r3, #0
    59d2:	blt.w	5e10 <_svfprintf_r+0x1398>
    59d6:	vmov.f64	d10, d8
    59da:	movs	r7, #0
    59dc:	ldr	r3, [sp, #48]	; 0x30
    59de:	cmp	r3, #102	; 0x66
    59e0:	beq.w	5de8 <_svfprintf_r+0x1370>
    59e4:	cmp	r3, #70	; 0x46
    59e6:	beq.w	5bc2 <_svfprintf_r+0x114a>
    59ea:	vmov.f64	d0, d10
    59ee:	cmp	r5, #69	; 0x45
    59f0:	ite	eq
    59f2:	addeq.w	r4, r8, #1
    59f6:	movne	r4, r8
    59f8:	add	r2, sp, #100	; 0x64
    59fa:	add	r3, sp, #88	; 0x58
    59fc:	str	r2, [sp, #4]
    59fe:	str	r3, [sp, #0]
    5a00:	mov	r2, r4
    5a02:	add	r3, sp, #84	; 0x54
    5a04:	movs	r1, #2
    5a06:	ldr	r0, [sp, #20]
    5a08:	bl	3df0 <_dtoa_r>
    5a0c:	ldr	r3, [sp, #48]	; 0x30
    5a0e:	cmp	r3, #103	; 0x67
    5a10:	mov	r6, r0
    5a12:	bne.w	5e32 <_svfprintf_r+0x13ba>
    5a16:	tst.w	fp, #1
    5a1a:	beq.w	5eea <_svfprintf_r+0x1472>
    5a1e:	adds	r1, r6, r4
    5a20:	vcmp.f64	d10, #0.0
    5a24:	vmrs	APSR_nzcv, fpscr
    5a28:	beq.w	5d36 <_svfprintf_r+0x12be>
    5a2c:	ldr	r3, [sp, #100]	; 0x64
    5a2e:	cmp	r1, r3
    5a30:	bls.n	5a40 <_svfprintf_r+0xfc8>
    5a32:	movs	r0, #48	; 0x30
    5a34:	adds	r2, r3, #1
    5a36:	str	r2, [sp, #100]	; 0x64
    5a38:	strb	r0, [r3, #0]
    5a3a:	ldr	r3, [sp, #100]	; 0x64
    5a3c:	cmp	r1, r3
    5a3e:	bhi.n	5a34 <_svfprintf_r+0xfbc>
    5a40:	subs	r3, r3, r6
    5a42:	cmp	r5, #71	; 0x47
    5a44:	str	r3, [sp, #52]	; 0x34
    5a46:	beq.w	5c88 <_svfprintf_r+0x1210>
    5a4a:	ldr	r3, [sp, #48]	; 0x30
    5a4c:	cmp	r3, #101	; 0x65
    5a4e:	ble.w	5e50 <_svfprintf_r+0x13d8>
    5a52:	ldr	r3, [sp, #48]	; 0x30
    5a54:	cmp	r3, #102	; 0x66
    5a56:	ldr	r3, [sp, #84]	; 0x54
    5a58:	beq.w	5e54 <_svfprintf_r+0x13dc>
    5a5c:	str	r3, [sp, #56]	; 0x38
    5a5e:	ldr	r2, [sp, #56]	; 0x38
    5a60:	ldr	r1, [sp, #52]	; 0x34
    5a62:	cmp	r2, r1
    5a64:	blt.w	5e18 <_svfprintf_r+0x13a0>
    5a68:	tst.w	fp, #1
    5a6c:	bne.w	5ed8 <_svfprintf_r+0x1460>
    5a70:	bic.w	r3, r2, r2, asr #31
    5a74:	str	r2, [sp, #32]
    5a76:	movs	r2, #103	; 0x67
    5a78:	str	r2, [sp, #48]	; 0x30
    5a7a:	cmp	r7, #0
    5a7c:	bne.w	5c6c <_svfprintf_r+0x11f4>
    5a80:	mov	r8, r7
    5a82:	str	r3, [sp, #16]
    5a84:	ldr.w	fp, [sp, #40]	; 0x28
    5a88:	ldrb.w	r7, [sp, #79]	; 0x4f
    5a8c:	b.w	4e5c <_svfprintf_r+0x3e4>
    5a90:	bic.w	r7, r7, #7
    5a94:	add.w	r3, r7, #8
    5a98:	vldr	d8, [r7]
    5a9c:	str	r3, [sp, #36]	; 0x24
    5a9e:	b.w	4e1e <_svfprintf_r+0x3a6>
    5aa2:	mov	r6, r9
    5aa4:	mov	r9, r1
    5aa6:	adds	r2, #1
    5aa8:	add	r3, r4
    5aaa:	cmp	r2, #7
    5aac:	str	r3, [sp, #116]	; 0x74
    5aae:	str	r2, [sp, #112]	; 0x70
    5ab0:	str.w	r7, [r9]
    5ab4:	str.w	r4, [r9, #4]
    5ab8:	bgt.w	5836 <_svfprintf_r+0xdbe>
    5abc:	add.w	r9, r9, #8
    5ac0:	b.n	584c <_svfprintf_r+0xdd4>
    5ac2:	movs	r7, #0
    5ac4:	cmp	r8, r7
    5ac6:	strb.w	r7, [sp, #79]	; 0x4f
    5aca:	blt.w	5376 <_svfprintf_r+0x8fe>
    5ace:	bic.w	fp, fp, #128	; 0x80
    5ad2:	b.n	5312 <_svfprintf_r+0x89a>
    5ad4:	add	r2, sp, #108	; 0x6c
    5ad6:	ldr	r1, [sp, #12]
    5ad8:	ldr	r0, [sp, #20]
    5ada:	bl	5fe8 <__ssprint_r>
    5ade:	cmp	r0, #0
    5ae0:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5ae4:	ldr	r3, [sp, #116]	; 0x74
    5ae6:	add.w	r9, sp, #160	; 0xa0
    5aea:	b.n	53b4 <_svfprintf_r+0x93c>
    5aec:	ldr	r7, [sp, #36]	; 0x24
    5aee:	b.n	5368 <_svfprintf_r+0x8f0>
    5af0:	ldr	r2, [sp, #112]	; 0x70
    5af2:	ldr	r1, [pc, #740]	; (5dd8 <_svfprintf_r+0x1360>)
    5af4:	str.w	r1, [r9]
    5af8:	adds	r2, #1
    5afa:	adds	r3, #1
    5afc:	movs	r1, #1
    5afe:	cmp	r2, #7
    5b00:	str	r3, [sp, #116]	; 0x74
    5b02:	str	r2, [sp, #112]	; 0x70
    5b04:	str.w	r1, [r9, #4]
    5b08:	bgt.n	5bf8 <_svfprintf_r+0x1180>
    5b0a:	add.w	r9, r9, #8
    5b0e:	cbnz	r4, 5b1c <_svfprintf_r+0x10a4>
    5b10:	ldr	r2, [sp, #52]	; 0x34
    5b12:	cbnz	r2, 5b1c <_svfprintf_r+0x10a4>
    5b14:	tst.w	fp, #1
    5b18:	beq.w	4fda <_svfprintf_r+0x562>
    5b1c:	ldr	r2, [sp, #112]	; 0x70
    5b1e:	ldr	r0, [sp, #60]	; 0x3c
    5b20:	ldr	r1, [sp, #64]	; 0x40
    5b22:	str.w	r1, [r9]
    5b26:	adds	r2, #1
    5b28:	add	r3, r0
    5b2a:	cmp	r2, #7
    5b2c:	str	r3, [sp, #116]	; 0x74
    5b2e:	str.w	r0, [r9, #4]
    5b32:	str	r2, [sp, #112]	; 0x70
    5b34:	bgt.w	5ea4 <_svfprintf_r+0x142c>
    5b38:	add.w	r9, r9, #8
    5b3c:	negs	r4, r4
    5b3e:	cmp	r4, #0
    5b40:	ble.w	5c52 <_svfprintf_r+0x11da>
    5b44:	cmp	r4, #16
    5b46:	ldr	r7, [pc, #660]	; (5ddc <_svfprintf_r+0x1364>)
    5b48:	ble.w	5d70 <_svfprintf_r+0x12f8>
    5b4c:	mov	r1, r9
    5b4e:	movs	r5, #16
    5b50:	mov	r9, r6
    5b52:	ldr.w	r8, [sp, #20]
    5b56:	ldr	r6, [sp, #12]
    5b58:	b.n	5b64 <_svfprintf_r+0x10ec>
    5b5a:	adds	r1, #8
    5b5c:	subs	r4, #16
    5b5e:	cmp	r4, #16
    5b60:	ble.w	5d6c <_svfprintf_r+0x12f4>
    5b64:	adds	r2, #1
    5b66:	adds	r3, #16
    5b68:	cmp	r2, #7
    5b6a:	str	r3, [sp, #116]	; 0x74
    5b6c:	str	r2, [sp, #112]	; 0x70
    5b6e:	str	r7, [r1, #0]
    5b70:	str	r5, [r1, #4]
    5b72:	ble.n	5b5a <_svfprintf_r+0x10e2>
    5b74:	add	r2, sp, #108	; 0x6c
    5b76:	mov	r1, r6
    5b78:	mov	r0, r8
    5b7a:	bl	5fe8 <__ssprint_r>
    5b7e:	cmp	r0, #0
    5b80:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5b84:	ldr	r3, [sp, #116]	; 0x74
    5b86:	ldr	r2, [sp, #112]	; 0x70
    5b88:	add	r1, sp, #160	; 0xa0
    5b8a:	b.n	5b5c <_svfprintf_r+0x10e4>
    5b8c:	add	r2, sp, #108	; 0x6c
    5b8e:	ldr	r1, [sp, #12]
    5b90:	ldr	r0, [sp, #20]
    5b92:	bl	5fe8 <__ssprint_r>
    5b96:	cmp	r0, #0
    5b98:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5b9c:	ldr	r3, [sp, #116]	; 0x74
    5b9e:	add.w	r9, sp, #160	; 0xa0
    5ba2:	b.n	53e4 <_svfprintf_r+0x96c>
    5ba4:	movs	r1, #64	; 0x40
    5ba6:	ldr	r0, [sp, #20]
    5ba8:	bl	255c <_malloc_r>
    5bac:	ldr	r2, [sp, #12]
    5bae:	str	r0, [r2, #0]
    5bb0:	str	r0, [r2, #16]
    5bb2:	cmp	r0, #0
    5bb4:	beq.w	5f92 <_svfprintf_r+0x151a>
    5bb8:	ldr	r2, [sp, #12]
    5bba:	movs	r3, #64	; 0x40
    5bbc:	str	r3, [r2, #20]
    5bbe:	b.w	4aaa <_svfprintf_r+0x32>
    5bc2:	add	r2, sp, #100	; 0x64
    5bc4:	add	r3, sp, #88	; 0x58
    5bc6:	str	r2, [sp, #4]
    5bc8:	str	r3, [sp, #0]
    5bca:	mov	r2, r8
    5bcc:	add	r3, sp, #84	; 0x54
    5bce:	movs	r1, #3
    5bd0:	vmov.f64	d0, d10
    5bd4:	ldr	r0, [sp, #20]
    5bd6:	bl	3df0 <_dtoa_r>
    5bda:	mov	r4, r8
    5bdc:	mov	r6, r0
    5bde:	ldr	r3, [sp, #48]	; 0x30
    5be0:	cmp	r3, #70	; 0x46
    5be2:	add.w	r1, r6, r4
    5be6:	bne.w	5a20 <_svfprintf_r+0xfa8>
    5bea:	ldrb	r3, [r6, #0]
    5bec:	cmp	r3, #48	; 0x30
    5bee:	beq.w	5f0c <_svfprintf_r+0x1494>
    5bf2:	ldr	r4, [sp, #84]	; 0x54
    5bf4:	add	r1, r4
    5bf6:	b.n	5a20 <_svfprintf_r+0xfa8>
    5bf8:	add	r2, sp, #108	; 0x6c
    5bfa:	ldr	r1, [sp, #12]
    5bfc:	ldr	r0, [sp, #20]
    5bfe:	bl	5fe8 <__ssprint_r>
    5c02:	cmp	r0, #0
    5c04:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5c08:	ldr	r4, [sp, #84]	; 0x54
    5c0a:	ldr	r3, [sp, #116]	; 0x74
    5c0c:	add.w	r9, sp, #160	; 0xa0
    5c10:	b.n	5b0e <_svfprintf_r+0x1096>
    5c12:	cmp.w	r8, #0
    5c16:	it	eq
    5c18:	moveq.w	r8, #1
    5c1c:	b.n	59c6 <_svfprintf_r+0xf4e>
    5c1e:	str	r3, [sp, #36]	; 0x24
    5c20:	b.n	596c <_svfprintf_r+0xef4>
    5c22:	str	r3, [sp, #36]	; 0x24
    5c24:	mov	r7, r2
    5c26:	b.w	5120 <_svfprintf_r+0x6a8>
    5c2a:	mov	r0, r6
    5c2c:	bl	3080 <strlen>
    5c30:	mov	r8, r4
    5c32:	mov	r3, r0
    5c34:	str	r0, [sp, #32]
    5c36:	b.w	52fc <_svfprintf_r+0x884>
    5c3a:	add	r2, sp, #108	; 0x6c
    5c3c:	ldr	r1, [sp, #12]
    5c3e:	ldr	r0, [sp, #20]
    5c40:	bl	5fe8 <__ssprint_r>
    5c44:	cmp	r0, #0
    5c46:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5c4a:	ldr	r3, [sp, #116]	; 0x74
    5c4c:	ldr	r2, [sp, #112]	; 0x70
    5c4e:	add.w	r9, sp, #160	; 0xa0
    5c52:	ldr	r0, [sp, #52]	; 0x34
    5c54:	str.w	r6, [r9]
    5c58:	adds	r2, #1
    5c5a:	add	r3, r0
    5c5c:	cmp	r2, #7
    5c5e:	str	r3, [sp, #116]	; 0x74
    5c60:	str	r2, [sp, #112]	; 0x70
    5c62:	str.w	r0, [r9, #4]
    5c66:	ble.w	4fd6 <_svfprintf_r+0x55e>
    5c6a:	b.n	555a <_svfprintf_r+0xae2>
    5c6c:	movs	r7, #45	; 0x2d
    5c6e:	str	r3, [sp, #16]
    5c70:	ldr.w	fp, [sp, #40]	; 0x28
    5c74:	strb.w	r7, [sp, #79]	; 0x4f
    5c78:	mov.w	r8, #0
    5c7c:	b.w	4e5e <_svfprintf_r+0x3e6>
    5c80:	str	r7, [sp, #36]	; 0x24
    5c82:	mov	r7, r3
    5c84:	b.w	5120 <_svfprintf_r+0x6a8>
    5c88:	ldr	r3, [sp, #84]	; 0x54
    5c8a:	adds	r2, r3, #3
    5c8c:	blt.n	5c94 <_svfprintf_r+0x121c>
    5c8e:	cmp	r8, r3
    5c90:	bge.w	5a5c <_svfprintf_r+0xfe4>
    5c94:	ldr	r2, [sp, #48]	; 0x30
    5c96:	subs	r2, #2
    5c98:	str	r2, [sp, #48]	; 0x30
    5c9a:	subs	r3, #1
    5c9c:	cmp	r3, #0
    5c9e:	ldrb.w	r2, [sp, #48]	; 0x30
    5ca2:	str	r3, [sp, #84]	; 0x54
    5ca4:	it	lt
    5ca6:	neglt	r3, r3
    5ca8:	strb.w	r2, [sp, #92]	; 0x5c
    5cac:	ite	lt
    5cae:	movlt	r2, #45	; 0x2d
    5cb0:	movge	r2, #43	; 0x2b
    5cb2:	cmp	r3, #9
    5cb4:	strb.w	r2, [sp, #93]	; 0x5d
    5cb8:	ble.w	5ec8 <_svfprintf_r+0x1450>
    5cbc:	add.w	r0, sp, #107	; 0x6b
    5cc0:	mov	r4, r0
    5cc2:	ldr	r2, [pc, #284]	; (5de0 <_svfprintf_r+0x1368>)
    5cc4:	smull	r2, r1, r2, r3
    5cc8:	asrs	r2, r3, #31
    5cca:	rsb	r2, r2, r1, asr #2
    5cce:	add.w	r1, r2, r2, lsl #2
    5cd2:	sub.w	r3, r3, r1, lsl #1
    5cd6:	add.w	r1, r3, #48	; 0x30
    5cda:	cmp	r2, #9
    5cdc:	mov	r3, r2
    5cde:	strb.w	r1, [r4, #-1]!
    5ce2:	bgt.n	5cc2 <_svfprintf_r+0x124a>
    5ce4:	mov	r1, r4
    5ce6:	adds	r3, #48	; 0x30
    5ce8:	uxtb	r2, r3
    5cea:	strb.w	r2, [r1, #-1]!
    5cee:	cmp	r0, r1
    5cf0:	bls.w	5fb8 <_svfprintf_r+0x1540>
    5cf4:	add.w	r1, sp, #94	; 0x5e
    5cf8:	mov	r3, r4
    5cfa:	b.n	5d00 <_svfprintf_r+0x1288>
    5cfc:	ldrb.w	r2, [r3], #1
    5d00:	strb.w	r2, [r1], #1
    5d04:	cmp	r0, r3
    5d06:	bne.n	5cfc <_svfprintf_r+0x1284>
    5d08:	adds	r3, r0, #1
    5d0a:	subs	r3, r3, r4
    5d0c:	add.w	r2, sp, #94	; 0x5e
    5d10:	add	r3, r2
    5d12:	add	r2, sp, #92	; 0x5c
    5d14:	subs	r3, r3, r2
    5d16:	ldr	r2, [sp, #52]	; 0x34
    5d18:	str	r3, [sp, #68]	; 0x44
    5d1a:	cmp	r2, #1
    5d1c:	add	r3, r2
    5d1e:	str	r3, [sp, #32]
    5d20:	ble.w	5f22 <_svfprintf_r+0x14aa>
    5d24:	ldr	r3, [sp, #32]
    5d26:	ldr	r2, [sp, #60]	; 0x3c
    5d28:	add	r3, r2
    5d2a:	movs	r2, #0
    5d2c:	str	r3, [sp, #32]
    5d2e:	str	r2, [sp, #56]	; 0x38
    5d30:	bic.w	r3, r3, r3, asr #31
    5d34:	b.n	5a7a <_svfprintf_r+0x1002>
    5d36:	mov	r3, r1
    5d38:	b.n	5a40 <_svfprintf_r+0xfc8>
    5d3a:	add	r2, sp, #108	; 0x6c
    5d3c:	ldr	r1, [sp, #12]
    5d3e:	ldr	r0, [sp, #20]
    5d40:	bl	5fe8 <__ssprint_r>
    5d44:	cmp	r0, #0
    5d46:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5d4a:	ldr	r3, [sp, #116]	; 0x74
    5d4c:	add.w	r9, sp, #160	; 0xa0
    5d50:	b.n	565a <_svfprintf_r+0xbe2>
    5d52:	add	r2, sp, #108	; 0x6c
    5d54:	ldr	r1, [sp, #12]
    5d56:	ldr	r0, [sp, #20]
    5d58:	bl	5fe8 <__ssprint_r>
    5d5c:	cmp	r0, #0
    5d5e:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5d62:	ldr	r2, [sp, #84]	; 0x54
    5d64:	ldr	r3, [sp, #116]	; 0x74
    5d66:	add.w	r9, sp, #160	; 0xa0
    5d6a:	b.n	5860 <_svfprintf_r+0xde8>
    5d6c:	mov	r6, r9
    5d6e:	mov	r9, r1
    5d70:	adds	r2, #1
    5d72:	add	r3, r4
    5d74:	cmp	r2, #7
    5d76:	str	r3, [sp, #116]	; 0x74
    5d78:	str	r2, [sp, #112]	; 0x70
    5d7a:	str.w	r7, [r9]
    5d7e:	str.w	r4, [r9, #4]
    5d82:	bgt.w	5c3a <_svfprintf_r+0x11c2>
    5d86:	add.w	r9, r9, #8
    5d8a:	b.n	5c52 <_svfprintf_r+0x11da>
    5d8c:	add	r2, sp, #108	; 0x6c
    5d8e:	ldr	r1, [sp, #12]
    5d90:	ldr	r0, [sp, #20]
    5d92:	bl	5fe8 <__ssprint_r>
    5d96:	cmp	r0, #0
    5d98:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5d9c:	ldr	r2, [sp, #84]	; 0x54
    5d9e:	ldr	r1, [sp, #52]	; 0x34
    5da0:	ldr	r3, [sp, #116]	; 0x74
    5da2:	subs	r2, r1, r2
    5da4:	add.w	r9, sp, #160	; 0xa0
    5da8:	b.n	5890 <_svfprintf_r+0xe18>
    5daa:	cmp	r5, #6
    5dac:	mov	r3, r5
    5dae:	it	cs
    5db0:	movcs	r3, #6
    5db2:	str	r3, [sp, #32]
    5db4:	bic.w	r3, r3, r3, asr #31
    5db8:	mov	r8, r6
    5dba:	str	r7, [sp, #36]	; 0x24
    5dbc:	str	r6, [sp, #56]	; 0x38
    5dbe:	mov	r7, r6
    5dc0:	str	r3, [sp, #16]
    5dc2:	ldr	r6, [pc, #32]	; (5de4 <_svfprintf_r+0x136c>)
    5dc4:	b.w	4e5c <_svfprintf_r+0x3e4>
    5dc8:	mov	fp, r3
    5dca:	b.w	51a2 <_svfprintf_r+0x72a>
    5dce:	movs	r7, #45	; 0x2d
    5dd0:	strb.w	r7, [sp, #79]	; 0x4f
    5dd4:	b.w	4e3e <_svfprintf_r+0x3c6>
    5dd8:	.word	0x200005c4
    5ddc:	.word	0x200005c8
    5de0:	.word	0x66666667
    5de4:	.word	0x20000610
    5de8:	add	r2, sp, #100	; 0x64
    5dea:	add	r3, sp, #88	; 0x58
    5dec:	str	r2, [sp, #4]
    5dee:	str	r3, [sp, #0]
    5df0:	movs	r1, #3
    5df2:	add	r3, sp, #84	; 0x54
    5df4:	mov	r2, r8
    5df6:	vmov.f64	d0, d10
    5dfa:	ldr	r0, [sp, #20]
    5dfc:	bl	3df0 <_dtoa_r>
    5e00:	mov	r4, r8
    5e02:	mov	r6, r0
    5e04:	add.w	r1, r0, r8
    5e08:	b.n	5bea <_svfprintf_r+0x1172>
    5e0a:	mov.w	r8, #6
    5e0e:	b.n	59c6 <_svfprintf_r+0xf4e>
    5e10:	vneg.f64	d10, d8
    5e14:	movs	r7, #45	; 0x2d
    5e16:	b.n	59dc <_svfprintf_r+0xf64>
    5e18:	ldr	r2, [sp, #60]	; 0x3c
    5e1a:	ldr	r3, [sp, #52]	; 0x34
    5e1c:	add	r3, r2
    5e1e:	ldr	r2, [sp, #56]	; 0x38
    5e20:	str	r3, [sp, #32]
    5e22:	cmp	r2, #0
    5e24:	ble.w	5f34 <_svfprintf_r+0x14bc>
    5e28:	movs	r2, #103	; 0x67
    5e2a:	bic.w	r3, r3, r3, asr #31
    5e2e:	str	r2, [sp, #48]	; 0x30
    5e30:	b.n	5a7a <_svfprintf_r+0x1002>
    5e32:	ldr	r3, [sp, #48]	; 0x30
    5e34:	cmp	r3, #71	; 0x47
    5e36:	bne.w	5a1e <_svfprintf_r+0xfa6>
    5e3a:	tst.w	fp, #1
    5e3e:	bne.w	5bde <_svfprintf_r+0x1166>
    5e42:	ldr	r3, [sp, #100]	; 0x64
    5e44:	cmp	r5, #71	; 0x47
    5e46:	sub.w	r3, r3, r6
    5e4a:	str	r3, [sp, #52]	; 0x34
    5e4c:	beq.w	5c88 <_svfprintf_r+0x1210>
    5e50:	ldr	r3, [sp, #84]	; 0x54
    5e52:	b.n	5c9a <_svfprintf_r+0x1222>
    5e54:	cmp	r3, #0
    5e56:	mov	r2, r3
    5e58:	str	r3, [sp, #56]	; 0x38
    5e5a:	ble.n	5f44 <_svfprintf_r+0x14cc>
    5e5c:	cmp.w	r8, #0
    5e60:	bne.n	5efa <_svfprintf_r+0x1482>
    5e62:	tst.w	fp, #1
    5e66:	bne.n	5efa <_svfprintf_r+0x1482>
    5e68:	bic.w	r3, r3, r3, asr #31
    5e6c:	str	r2, [sp, #32]
    5e6e:	b.n	5a7a <_svfprintf_r+0x1002>
    5e70:	tst.w	fp, #1
    5e74:	mov	r7, r8
    5e76:	beq.n	5e84 <_svfprintf_r+0x140c>
    5e78:	add	r6, sp, #224	; 0xe0
    5e7a:	movs	r3, #48	; 0x30
    5e7c:	strb.w	r3, [r6, #-65]!
    5e80:	b.w	5130 <_svfprintf_r+0x6b8>
    5e84:	str.w	r8, [sp, #32]
    5e88:	add	r6, sp, #160	; 0xa0
    5e8a:	b.w	5136 <_svfprintf_r+0x6be>
    5e8e:	bic.w	r3, r5, r5, asr #31
    5e92:	str	r7, [sp, #36]	; 0x24
    5e94:	str	r3, [sp, #16]
    5e96:	str	r5, [sp, #32]
    5e98:	mov	r8, r0
    5e9a:	str	r0, [sp, #56]	; 0x38
    5e9c:	ldrb.w	r7, [sp, #79]	; 0x4f
    5ea0:	b.w	4e5c <_svfprintf_r+0x3e4>
    5ea4:	add	r2, sp, #108	; 0x6c
    5ea6:	ldr	r1, [sp, #12]
    5ea8:	ldr	r0, [sp, #20]
    5eaa:	bl	5fe8 <__ssprint_r>
    5eae:	cmp	r0, #0
    5eb0:	bne.w	4c64 <_svfprintf_r+0x1ec>
    5eb4:	ldr	r4, [sp, #84]	; 0x54
    5eb6:	ldr	r3, [sp, #116]	; 0x74
    5eb8:	ldr	r2, [sp, #112]	; 0x70
    5eba:	add.w	r9, sp, #160	; 0xa0
    5ebe:	b.n	5b3c <_svfprintf_r+0x10c4>
    5ec0:	mov	sl, r4
    5ec2:	movs	r5, #0
    5ec4:	b.w	4b2e <_svfprintf_r+0xb6>
    5ec8:	adds	r3, #48	; 0x30
    5eca:	movs	r2, #48	; 0x30
    5ecc:	strb.w	r3, [sp, #95]	; 0x5f
    5ed0:	strb.w	r2, [sp, #94]	; 0x5e
    5ed4:	add	r3, sp, #96	; 0x60
    5ed6:	b.n	5d12 <_svfprintf_r+0x129a>
    5ed8:	ldr	r2, [sp, #60]	; 0x3c
    5eda:	ldr	r3, [sp, #56]	; 0x38
    5edc:	add	r3, r2
    5ede:	movs	r2, #103	; 0x67
    5ee0:	str	r3, [sp, #32]
    5ee2:	str	r2, [sp, #48]	; 0x30
    5ee4:	bic.w	r3, r3, r3, asr #31
    5ee8:	b.n	5a7a <_svfprintf_r+0x1002>
    5eea:	ldr	r3, [sp, #100]	; 0x64
    5eec:	b.n	5a40 <_svfprintf_r+0xfc8>
    5eee:	ldr	r6, [pc, #240]	; (5fe0 <_svfprintf_r+0x1568>)
    5ef0:	ldr	r3, [pc, #240]	; (5fe4 <_svfprintf_r+0x156c>)
    5ef2:	ldrb.w	r7, [sp, #79]	; 0x4f
    5ef6:	b.w	4e42 <_svfprintf_r+0x3ca>
    5efa:	ldr	r3, [sp, #56]	; 0x38
    5efc:	ldr	r2, [sp, #60]	; 0x3c
    5efe:	adds	r5, r3, r2
    5f00:	add.w	r3, r5, r8
    5f04:	str	r3, [sp, #32]
    5f06:	bic.w	r3, r3, r3, asr #31
    5f0a:	b.n	5a7a <_svfprintf_r+0x1002>
    5f0c:	vcmp.f64	d10, #0.0
    5f10:	vmrs	APSR_nzcv, fpscr
    5f14:	beq.w	5bf2 <_svfprintf_r+0x117a>
    5f18:	rsb	r4, r4, #1
    5f1c:	str	r4, [sp, #84]	; 0x54
    5f1e:	add	r1, r4
    5f20:	b.n	5a20 <_svfprintf_r+0xfa8>
    5f22:	ands.w	r3, fp, #1
    5f26:	bne.w	5d24 <_svfprintf_r+0x12ac>
    5f2a:	str	r3, [sp, #56]	; 0x38
    5f2c:	ldr	r3, [sp, #32]
    5f2e:	bic.w	r3, r3, r3, asr #31
    5f32:	b.n	5a7a <_svfprintf_r+0x1002>
    5f34:	ldr	r3, [sp, #56]	; 0x38
    5f36:	ldr	r2, [sp, #32]
    5f38:	rsb	r3, r3, #1
    5f3c:	add	r2, r3
    5f3e:	mov	r3, r2
    5f40:	str	r2, [sp, #32]
    5f42:	b.n	5e28 <_svfprintf_r+0x13b0>
    5f44:	cmp.w	r8, #0
    5f48:	bne.n	5f50 <_svfprintf_r+0x14d8>
    5f4a:	tst.w	fp, #1
    5f4e:	beq.n	5f60 <_svfprintf_r+0x14e8>
    5f50:	ldr	r3, [sp, #60]	; 0x3c
    5f52:	adds	r5, r3, #1
    5f54:	add.w	r3, r5, r8
    5f58:	str	r3, [sp, #32]
    5f5a:	bic.w	r3, r3, r3, asr #31
    5f5e:	b.n	5a7a <_svfprintf_r+0x1002>
    5f60:	movs	r3, #1
    5f62:	str	r3, [sp, #32]
    5f64:	b.n	5a7a <_svfprintf_r+0x1002>
    5f66:	ldr	r0, [sp, #36]	; 0x24
    5f68:	ldrb.w	r3, [sl, #1]
    5f6c:	ldr	r5, [r0, #0]
    5f6e:	adds	r0, #4
    5f70:	cmp	r5, #0
    5f72:	str	r0, [sp, #36]	; 0x24
    5f74:	mov	sl, r4
    5f76:	bge.w	4b2a <_svfprintf_r+0xb2>
    5f7a:	mov.w	r5, #4294967295
    5f7e:	b.w	4b2a <_svfprintf_r+0xb2>
    5f82:	strb.w	r1, [sp, #79]	; 0x4f
    5f86:	b.w	52a4 <_svfprintf_r+0x82c>
    5f8a:	strb.w	r1, [sp, #79]	; 0x4f
    5f8e:	b.w	5330 <_svfprintf_r+0x8b8>
    5f92:	ldr	r2, [sp, #20]
    5f94:	movs	r3, #12
    5f96:	str	r3, [r2, #0]
    5f98:	mov.w	r0, #4294967295
    5f9c:	b.w	4c76 <_svfprintf_r+0x1fe>
    5fa0:	strb.w	r1, [sp, #79]	; 0x4f
    5fa4:	b.w	5150 <_svfprintf_r+0x6d8>
    5fa8:	strb.w	r1, [sp, #79]	; 0x4f
    5fac:	b.w	50f6 <_svfprintf_r+0x67e>
    5fb0:	strb.w	r1, [sp, #79]	; 0x4f
    5fb4:	b.w	525c <_svfprintf_r+0x7e4>
    5fb8:	add.w	r3, sp, #94	; 0x5e
    5fbc:	b.n	5d12 <_svfprintf_r+0x129a>
    5fbe:	strb.w	r1, [sp, #79]	; 0x4f
    5fc2:	b.w	4c8a <_svfprintf_r+0x212>
    5fc6:	strb.w	r1, [sp, #79]	; 0x4f
    5fca:	b.w	5092 <_svfprintf_r+0x61a>
    5fce:	strb.w	r1, [sp, #79]	; 0x4f
    5fd2:	b.w	4e02 <_svfprintf_r+0x38a>
    5fd6:	strb.w	r1, [sp, #79]	; 0x4f
    5fda:	b.w	4d7e <_svfprintf_r+0x306>
    5fde:	nop
    5fe0:	.word	0x200005e4
    5fe4:	.word	0x200005e0

00005fe8 <__ssprint_r>:
    5fe8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5fec:	ldr	r3, [r2, #8]
    5fee:	sub	sp, #12
    5ff0:	mov	r8, r2
    5ff2:	cmp	r3, #0
    5ff4:	beq.n	60dc <__ssprint_r+0xf4>
    5ff6:	mov	fp, r0
    5ff8:	mov.w	r9, #0
    5ffc:	ldr	r6, [r2, #0]
    5ffe:	ldr	r0, [r1, #0]
    6000:	ldr	r3, [r1, #8]
    6002:	mov	r5, r1
    6004:	mov	r4, r9
    6006:	cmp	r4, #0
    6008:	beq.n	6096 <__ssprint_r+0xae>
    600a:	cmp	r4, r3
    600c:	mov	r7, r3
    600e:	mov	sl, r3
    6010:	bcc.n	60a0 <__ssprint_r+0xb8>
    6012:	ldrh	r3, [r5, #12]
    6014:	tst.w	r3, #1152	; 0x480
    6018:	beq.n	6076 <__ssprint_r+0x8e>
    601a:	ldr	r7, [r5, #20]
    601c:	ldr	r1, [r5, #16]
    601e:	add.w	r7, r7, r7, lsl #1
    6022:	rsb	sl, r1, r0
    6026:	add.w	r7, r7, r7, lsr #31
    602a:	adds	r0, r4, #1
    602c:	asrs	r7, r7, #1
    602e:	add	r0, sl
    6030:	cmp	r0, r7
    6032:	mov	r2, r7
    6034:	itt	hi
    6036:	movhi	r7, r0
    6038:	movhi	r2, r7
    603a:	lsls	r3, r3, #21
    603c:	bpl.n	60a6 <__ssprint_r+0xbe>
    603e:	mov	r1, r2
    6040:	mov	r0, fp
    6042:	bl	255c <_malloc_r>
    6046:	cmp	r0, #0
    6048:	beq.n	60ba <__ssprint_r+0xd2>
    604a:	mov	r2, sl
    604c:	ldr	r1, [r5, #16]
    604e:	str	r0, [sp, #4]
    6050:	bl	ef4 <memcpy>
    6054:	ldrh	r2, [r5, #12]
    6056:	ldr	r3, [sp, #4]
    6058:	bic.w	r2, r2, #1152	; 0x480
    605c:	orr.w	r2, r2, #128	; 0x80
    6060:	strh	r2, [r5, #12]
    6062:	rsb	r2, sl, r7
    6066:	add.w	r0, r3, sl
    606a:	str	r7, [r5, #20]
    606c:	str	r3, [r5, #16]
    606e:	str	r0, [r5, #0]
    6070:	str	r2, [r5, #8]
    6072:	mov	r7, r4
    6074:	mov	sl, r4
    6076:	mov	r2, sl
    6078:	mov	r1, r9
    607a:	bl	2af8 <memmove>
    607e:	ldr.w	r2, [r8, #8]
    6082:	ldr	r3, [r5, #8]
    6084:	ldr	r0, [r5, #0]
    6086:	subs	r3, r3, r7
    6088:	add	r0, sl
    608a:	subs	r4, r2, r4
    608c:	str	r3, [r5, #8]
    608e:	str	r0, [r5, #0]
    6090:	str.w	r4, [r8, #8]
    6094:	cbz	r4, 60dc <__ssprint_r+0xf4>
    6096:	ldr.w	r9, [r6]
    609a:	ldr	r4, [r6, #4]
    609c:	adds	r6, #8
    609e:	b.n	6006 <__ssprint_r+0x1e>
    60a0:	mov	r7, r4
    60a2:	mov	sl, r4
    60a4:	b.n	6076 <__ssprint_r+0x8e>
    60a6:	mov	r0, fp
    60a8:	bl	2c64 <_realloc_r>
    60ac:	mov	r3, r0
    60ae:	cmp	r0, #0
    60b0:	bne.n	6062 <__ssprint_r+0x7a>
    60b2:	ldr	r1, [r5, #16]
    60b4:	mov	r0, fp
    60b6:	bl	3348 <_free_r>
    60ba:	movs	r3, #12
    60bc:	str.w	r3, [fp]
    60c0:	ldrh	r3, [r5, #12]
    60c2:	movs	r2, #0
    60c4:	orr.w	r3, r3, #64	; 0x40
    60c8:	mov.w	r0, #4294967295
    60cc:	strh	r3, [r5, #12]
    60ce:	str.w	r2, [r8, #8]
    60d2:	str.w	r2, [r8, #4]
    60d6:	add	sp, #12
    60d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60dc:	movs	r0, #0
    60de:	str.w	r0, [r8, #4]
    60e2:	add	sp, #12
    60e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000060e8 <__aeabi_uldivmod>:
    60e8:	cbnz	r3, 6100 <__aeabi_uldivmod+0x18>
    60ea:	cbnz	r2, 6100 <__aeabi_uldivmod+0x18>
    60ec:	cmp	r1, #0
    60ee:	it	eq
    60f0:	cmpeq	r0, #0
    60f2:	itt	ne
    60f4:	movne.w	r1, #4294967295
    60f8:	movne.w	r0, #4294967295
    60fc:	b.w	63fc <__aeabi_idiv0>
    6100:	sub.w	ip, sp, #8
    6104:	strd	ip, lr, [sp, #-16]!
    6108:	bl	6118 <__udivmoddi4>
    610c:	ldr.w	lr, [sp, #4]
    6110:	ldrd	r2, r3, [sp, #8]
    6114:	add	sp, #16
    6116:	bx	lr

00006118 <__udivmoddi4>:
    6118:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    611c:	mov	ip, r1
    611e:	mov	r6, r1
    6120:	mov	r4, r0
    6122:	ldr	r5, [sp, #32]
    6124:	cmp	r3, #0
    6126:	bne.n	61ca <__udivmoddi4+0xb2>
    6128:	cmp	r2, r1
    612a:	mov	r7, r2
    612c:	bls.n	6208 <__udivmoddi4+0xf0>
    612e:	clz	lr, r2
    6132:	cmp.w	lr, #0
    6136:	beq.n	6150 <__udivmoddi4+0x38>
    6138:	rsb	r4, lr, #32
    613c:	lsr.w	r4, r0, r4
    6140:	lsl.w	r6, r1, lr
    6144:	orr.w	ip, r4, r6
    6148:	lsl.w	r7, r2, lr
    614c:	lsl.w	r4, r0, lr
    6150:	mov.w	r9, r7, lsr #16
    6154:	lsrs	r2, r4, #16
    6156:	udiv	r0, ip, r9
    615a:	uxth.w	r8, r7
    615e:	mls	r6, r9, r0, ip
    6162:	orr.w	r6, r2, r6, lsl #16
    6166:	mul.w	r3, r0, r8
    616a:	cmp	r3, r6
    616c:	bls.n	6182 <__udivmoddi4+0x6a>
    616e:	adds	r6, r6, r7
    6170:	add.w	r2, r0, #4294967295
    6174:	bcs.w	63bc <__udivmoddi4+0x2a4>
    6178:	cmp	r3, r6
    617a:	bls.w	63bc <__udivmoddi4+0x2a4>
    617e:	subs	r0, #2
    6180:	add	r6, r7
    6182:	subs	r6, r6, r3
    6184:	uxth	r2, r4
    6186:	udiv	r3, r6, r9
    618a:	mls	r6, r9, r3, r6
    618e:	orr.w	r4, r2, r6, lsl #16
    6192:	mul.w	r8, r3, r8
    6196:	cmp	r8, r4
    6198:	bls.n	61ae <__udivmoddi4+0x96>
    619a:	adds	r4, r4, r7
    619c:	add.w	r2, r3, #4294967295
    61a0:	bcs.w	63b8 <__udivmoddi4+0x2a0>
    61a4:	cmp	r8, r4
    61a6:	bls.w	63b8 <__udivmoddi4+0x2a0>
    61aa:	subs	r3, #2
    61ac:	add	r4, r7
    61ae:	rsb	r4, r8, r4
    61b2:	orr.w	r0, r3, r0, lsl #16
    61b6:	movs	r1, #0
    61b8:	cmp	r5, #0
    61ba:	beq.n	6282 <__udivmoddi4+0x16a>
    61bc:	lsr.w	r4, r4, lr
    61c0:	movs	r3, #0
    61c2:	str	r4, [r5, #0]
    61c4:	str	r3, [r5, #4]
    61c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61ca:	cmp	r3, r1
    61cc:	bls.n	61de <__udivmoddi4+0xc6>
    61ce:	cmp	r5, #0
    61d0:	beq.n	627e <__udivmoddi4+0x166>
    61d2:	movs	r1, #0
    61d4:	stmia.w	r5, {r0, r6}
    61d8:	mov	r0, r1
    61da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61de:	clz	r1, r3
    61e2:	cmp	r1, #0
    61e4:	bne.w	6308 <__udivmoddi4+0x1f0>
    61e8:	cmp	r3, r6
    61ea:	bcc.n	61f2 <__udivmoddi4+0xda>
    61ec:	cmp	r2, r0
    61ee:	bhi.w	63e2 <__udivmoddi4+0x2ca>
    61f2:	subs	r4, r0, r2
    61f4:	sbc.w	r6, r6, r3
    61f8:	movs	r0, #1
    61fa:	mov	ip, r6
    61fc:	cmp	r5, #0
    61fe:	beq.n	6282 <__udivmoddi4+0x16a>
    6200:	stmia.w	r5, {r4, ip}
    6204:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6208:	cbnz	r2, 6210 <__udivmoddi4+0xf8>
    620a:	movs	r7, #1
    620c:	udiv	r7, r7, r2
    6210:	clz	lr, r7
    6214:	cmp.w	lr, #0
    6218:	bne.n	6286 <__udivmoddi4+0x16e>
    621a:	subs	r3, r6, r7
    621c:	mov.w	r8, r7, lsr #16
    6220:	uxth.w	ip, r7
    6224:	movs	r1, #1
    6226:	udiv	r0, r3, r8
    622a:	lsrs	r2, r4, #16
    622c:	mls	r6, r8, r0, r3
    6230:	orr.w	r6, r2, r6, lsl #16
    6234:	mul.w	r3, ip, r0
    6238:	cmp	r3, r6
    623a:	bls.n	624c <__udivmoddi4+0x134>
    623c:	adds	r6, r6, r7
    623e:	add.w	r2, r0, #4294967295
    6242:	bcs.n	624a <__udivmoddi4+0x132>
    6244:	cmp	r3, r6
    6246:	bhi.w	63e6 <__udivmoddi4+0x2ce>
    624a:	mov	r0, r2
    624c:	subs	r6, r6, r3
    624e:	uxth	r2, r4
    6250:	udiv	r3, r6, r8
    6254:	mls	r6, r8, r3, r6
    6258:	orr.w	r4, r2, r6, lsl #16
    625c:	mul.w	ip, ip, r3
    6260:	cmp	ip, r4
    6262:	bls.n	6274 <__udivmoddi4+0x15c>
    6264:	adds	r4, r4, r7
    6266:	add.w	r2, r3, #4294967295
    626a:	bcs.n	6272 <__udivmoddi4+0x15a>
    626c:	cmp	ip, r4
    626e:	bhi.w	63dc <__udivmoddi4+0x2c4>
    6272:	mov	r3, r2
    6274:	rsb	r4, ip, r4
    6278:	orr.w	r0, r3, r0, lsl #16
    627c:	b.n	61b8 <__udivmoddi4+0xa0>
    627e:	mov	r1, r5
    6280:	mov	r0, r5
    6282:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6286:	rsb	r1, lr, #32
    628a:	lsl.w	r3, r6, lr
    628e:	lsl.w	r7, r7, lr
    6292:	lsr.w	r9, r0, r1
    6296:	mov.w	r8, r7, lsr #16
    629a:	lsrs	r6, r1
    629c:	orr.w	r9, r9, r3
    62a0:	udiv	sl, r6, r8
    62a4:	mov.w	r4, r9, lsr #16
    62a8:	mls	r6, r8, sl, r6
    62ac:	uxth.w	ip, r7
    62b0:	orr.w	r3, r4, r6, lsl #16
    62b4:	mul.w	r2, sl, ip
    62b8:	cmp	r2, r3
    62ba:	lsl.w	r4, r0, lr
    62be:	bls.n	62d6 <__udivmoddi4+0x1be>
    62c0:	adds	r3, r3, r7
    62c2:	add.w	r1, sl, #4294967295
    62c6:	bcs.w	63d8 <__udivmoddi4+0x2c0>
    62ca:	cmp	r2, r3
    62cc:	bls.w	63d8 <__udivmoddi4+0x2c0>
    62d0:	sub.w	sl, sl, #2
    62d4:	add	r3, r7
    62d6:	subs	r3, r3, r2
    62d8:	uxth.w	r9, r9
    62dc:	udiv	r1, r3, r8
    62e0:	mls	r3, r8, r1, r3
    62e4:	orr.w	r3, r9, r3, lsl #16
    62e8:	mul.w	r6, r1, ip
    62ec:	cmp	r6, r3
    62ee:	bls.n	6300 <__udivmoddi4+0x1e8>
    62f0:	adds	r3, r3, r7
    62f2:	add.w	r2, r1, #4294967295
    62f6:	bcs.n	63d0 <__udivmoddi4+0x2b8>
    62f8:	cmp	r6, r3
    62fa:	bls.n	63d0 <__udivmoddi4+0x2b8>
    62fc:	subs	r1, #2
    62fe:	add	r3, r7
    6300:	subs	r3, r3, r6
    6302:	orr.w	r1, r1, sl, lsl #16
    6306:	b.n	6226 <__udivmoddi4+0x10e>
    6308:	rsb	lr, r1, #32
    630c:	lsr.w	r4, r2, lr
    6310:	lsls	r3, r1
    6312:	orrs	r3, r4
    6314:	lsr.w	r7, r0, lr
    6318:	lsl.w	r4, r6, r1
    631c:	mov.w	ip, r3, lsr #16
    6320:	lsr.w	r6, r6, lr
    6324:	orrs	r4, r7
    6326:	udiv	r9, r6, ip
    632a:	lsrs	r7, r4, #16
    632c:	mls	r6, ip, r9, r6
    6330:	uxth.w	r8, r3
    6334:	orr.w	r6, r7, r6, lsl #16
    6338:	mul.w	r7, r9, r8
    633c:	cmp	r7, r6
    633e:	lsl.w	r2, r2, r1
    6342:	lsl.w	sl, r0, r1
    6346:	bls.n	635a <__udivmoddi4+0x242>
    6348:	adds	r6, r6, r3
    634a:	add.w	r0, r9, #4294967295
    634e:	bcs.n	63d4 <__udivmoddi4+0x2bc>
    6350:	cmp	r7, r6
    6352:	bls.n	63d4 <__udivmoddi4+0x2bc>
    6354:	sub.w	r9, r9, #2
    6358:	add	r6, r3
    635a:	subs	r6, r6, r7
    635c:	uxth	r0, r4
    635e:	udiv	r4, r6, ip
    6362:	mls	r6, ip, r4, r6
    6366:	orr.w	r7, r0, r6, lsl #16
    636a:	mul.w	r8, r4, r8
    636e:	cmp	r8, r7
    6370:	bls.n	6382 <__udivmoddi4+0x26a>
    6372:	adds	r7, r7, r3
    6374:	add.w	r0, r4, #4294967295
    6378:	bcs.n	63cc <__udivmoddi4+0x2b4>
    637a:	cmp	r8, r7
    637c:	bls.n	63cc <__udivmoddi4+0x2b4>
    637e:	subs	r4, #2
    6380:	add	r7, r3
    6382:	orr.w	r0, r4, r9, lsl #16
    6386:	rsb	r7, r8, r7
    638a:	umull	r8, r9, r0, r2
    638e:	cmp	r7, r9
    6390:	mov	r4, r8
    6392:	mov	r6, r9
    6394:	bcc.n	63c0 <__udivmoddi4+0x2a8>
    6396:	beq.n	63ec <__udivmoddi4+0x2d4>
    6398:	cbz	r5, 63f4 <__udivmoddi4+0x2dc>
    639a:	subs.w	r3, sl, r4
    639e:	sbc.w	r7, r7, r6
    63a2:	lsl.w	lr, r7, lr
    63a6:	lsrs	r3, r1
    63a8:	lsrs	r7, r1
    63aa:	orr.w	r3, lr, r3
    63ae:	stmia.w	r5, {r3, r7}
    63b2:	movs	r1, #0
    63b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    63b8:	mov	r3, r2
    63ba:	b.n	61ae <__udivmoddi4+0x96>
    63bc:	mov	r0, r2
    63be:	b.n	6182 <__udivmoddi4+0x6a>
    63c0:	subs.w	r4, r8, r2
    63c4:	sbc.w	r6, r9, r3
    63c8:	subs	r0, #1
    63ca:	b.n	6398 <__udivmoddi4+0x280>
    63cc:	mov	r4, r0
    63ce:	b.n	6382 <__udivmoddi4+0x26a>
    63d0:	mov	r1, r2
    63d2:	b.n	6300 <__udivmoddi4+0x1e8>
    63d4:	mov	r9, r0
    63d6:	b.n	635a <__udivmoddi4+0x242>
    63d8:	mov	sl, r1
    63da:	b.n	62d6 <__udivmoddi4+0x1be>
    63dc:	subs	r3, #2
    63de:	add	r4, r7
    63e0:	b.n	6274 <__udivmoddi4+0x15c>
    63e2:	mov	r0, r1
    63e4:	b.n	61fc <__udivmoddi4+0xe4>
    63e6:	subs	r0, #2
    63e8:	add	r6, r7
    63ea:	b.n	624c <__udivmoddi4+0x134>
    63ec:	cmp	sl, r8
    63ee:	bcc.n	63c0 <__udivmoddi4+0x2a8>
    63f0:	mov	r6, r7
    63f2:	b.n	6398 <__udivmoddi4+0x280>
    63f4:	mov	r1, r5
    63f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    63fa:	nop

000063fc <__aeabi_idiv0>:
    63fc:	bx	lr
    63fe:	nop

00006400 <___init_veneer>:
    6400:	ldr.w	pc, [pc]	; 6404 <___init_veneer+0x4>
    6404:	.word	0x6000172d
	...

Disassembly of section .fini:

00006410 <_fini>:
    6410:	push	{r3, r4, r5, r6, r7, lr}
    6412:	nop
