
.vsteensy/build/10_FrequencyGenerator.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`x.......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	cmp	r2, r3
6000105e:	bcs.n	6000107a <ResetHandler+0x46>
60001060:	mvns	r4, r2
60001062:	mov	r0, r1
60001064:	add	r3, r4
60001066:	bic.w	r3, r3, #3
6000106a:	adds	r3, #4
6000106c:	add	r3, r1
		*dest++ = *src++;
6000106e:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	cmp	r0, r3
		*dest++ = *src++;
60001074:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	cmp	r2, r1
60001080:	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	cmp	r2, r3
60001086:	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	mvns	r4, r2
6000108a:	mov	r0, r1
6000108c:	add	r3, r4
6000108e:	bic.w	r3, r3, #3
60001092:	adds	r3, #4
60001094:	add	r3, r1
		*dest++ = *src++;
60001096:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	cmp	r0, r3
		*dest++ = *src++;
6000109c:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	cmp	r2, r3
600010a8:	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	mvns	r0, r2
600010ac:	mov	r1, r2
		*dest++ = 0;
600010ae:	movs	r4, #0
600010b0:	add	r3, r0
600010b2:	bic.w	r3, r3, #3
600010b6:	adds	r3, #4
600010b8:	add	r3, r2
600010ba:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	cmp	r3, r1
600010c0:	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	mov.w	r1, #15728640	; 0xf00000
600010c8:	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	str	r1, [r2, #0]
600010cc:	add.w	r1, r3, #704	; 0x2c0
600010d0:	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	str.w	r2, [r3, #4]!
600010d6:	cmp	r1, r3
600010d8:	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	movs	r1, #128	; 0x80
600010de:	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	strb.w	r1, [r3], #1
600010e4:	cmp	r3, r2
600010e6:	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	ldr	r3, [r6, #28]
6000111c:	bic.w	r3, r3, #127	; 0x7f
60001120:	orr.w	r3, r3, #64	; 0x40
60001124:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	ldr	r3, [r6, #36]	; 0x24
60001128:	bic.w	r3, r3, #127	; 0x7f
6000112c:	orr.w	r3, r3, #64	; 0x40
60001130:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	bl	60001390 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	orr.w	r3, r3, #1
60001176:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	ldr	r3, [r0, #0]
6000117a:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	bl	60001488 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	bl	60001750 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	nop
60001198:	nop
6000119a:	nop
6000119c:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	ldr	r2, [r3, #56]	; 0x38
600011be:	lsls	r2, r2, #31
600011c0:	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	ldr	r2, [r3, #56]	; 0x38
600011ce:	orr.w	r2, r2, #1
600011d2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	ldr	r3, [r2, #8]
600011da:	orr.w	r3, r3, #65537	; 0x10001
600011de:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	bl	60001748 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	cmp	r3, #19
600011e8:	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	bl	600012a4 <usb_init>
	analog_init();
600011ee:	bl	60001608 <analog_init>
	pwm_init();
600011f2:	bl	60001778 <__pwm_init_veneer>
	tempmon_init();
600011f6:	bl	600014ec <tempmon_init>

	startup_late_hook();
600011fa:	bl	60001740 <__startup_late_hook_veneer>
600011fe:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	cmp.w	r3, #300	; 0x12c
60001204:	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	bl	60001738 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	bl	60001768 <__main_veneer>
6000120e:	b.n	6000120e <ResetHandler+0x1da>
60001210:	.word	0x400ac000
60001214:	.word	0xaaaaaaab
60001218:	.word	0x00200007
6000121c:	.word	0x20078000
60001220:	.word	0x00000000
60001224:	.word	0x60001790
60001228:	.word	0x00006698
6000122c:	.word	0x20000000
60001230:	.word	0x60007e2c
60001234:	.word	0x20001150
60001238:	.word	0x20001150
6000123c:	.word	0x20003700
60001240:	.word	0xe000ed88
60001244:	.word	0x200033fc
60001248:	.word	0x000019b1
6000124c:	.word	0xe000e400
60001250:	.word	0xe000e4a0
60001254:	.word	0x400d8000
60001258:	.word	0x400fc000
6000125c:	.word	0xe000ed08
60001260:	.word	0xe000e014
60001264:	.word	0xe000e018
60001268:	.word	0x000022cd
6000126c:	.word	0xe000edfc
60001270:	.word	0x20200000
60001274:	.word	0x000022d1
60001278:	.word	0xe0001000
6000127c:	.word	0xe0001004
60001280:	.word	0x2000141c
60001284:	.word	0x23c34600
60001288:	.word	0x40084000
6000128c:	.word	0x400d4000
60001290:	.word	0x56c00000
60001294:	.word	0x20001424
60001298:	.word	0x20003400
6000129c:	.word	0x2018101b
600012a0:	.word	0x13110d0c

600012a4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a4:	ldr	r3, [pc, #192]	; (60001368 <usb_init+0xc4>)
600012a6:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600012aa:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012ac:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b0:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012b4:	bl	60001758 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b8:	ldr	r1, [pc, #176]	; (6000136c <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012ba:	ldr	r0, [pc, #180]	; (60001370 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012bc:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c0:	ldr	r4, [pc, #176]	; (60001374 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c2:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c6:	ldr	r3, [pc, #176]	; (60001378 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c8:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012cc:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012d0:	ldr	r2, [r4, #0]
600012d2:	ands	r3, r2
600012d4:	cbnz	r3, 600012de <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012d6:	ldr.w	r3, [r0, #424]	; 0x1a8
600012da:	lsls	r2, r3, #30
600012dc:	beq.n	60001314 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012de:	ldr	r3, [pc, #144]	; (60001370 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012e0:	mov.w	r1, #2147483648	; 0x80000000
600012e4:	ldr	r2, [pc, #140]	; (60001374 <usb_init+0xd0>)
600012e6:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012e8:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ea:	ldr.w	r1, [r3, #320]	; 0x140
600012ee:	orr.w	r1, r1, #2
600012f2:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012f6:	ldr.w	r3, [r2, #320]	; 0x140
600012fa:	lsls	r3, r3, #30
600012fc:	bmi.n	600012f6 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012fe:	mov.w	r0, #131072	; 0x20000
60001302:	ldr	r1, [pc, #120]	; (6000137c <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001304:	ldr	r3, [pc, #108]	; (60001374 <usb_init+0xd0>)
60001306:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000130a:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000130c:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000130e:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001310:	bl	60001760 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001314:	ldr	r5, [pc, #104]	; (60001380 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001316:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001318:	ldr	r3, [pc, #88]	; (60001374 <usb_init+0xd0>)
6000131a:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000131e:	ldr	r4, [pc, #80]	; (60001370 <usb_init+0xcc>)
60001320:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001322:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001324:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001326:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001328:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000132a:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000132e:	mov.w	r2, #640	; 0x280
60001332:	bl	60001770 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001336:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000133a:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000133e:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001342:	ldr	r2, [pc, #64]	; (60001384 <usb_init+0xe0>)
60001344:	ldr	r1, [pc, #64]	; (60001388 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001346:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001348:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000134a:	str.w	r5, [r4, #344]	; 0x158
6000134e:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001352:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001356:	ldr	r2, [pc, #52]	; (6000138c <usb_init+0xe8>)
60001358:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000135c:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000135e:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001360:	str.w	r3, [r4, #320]	; 0x140
60001364:	pop	{r4, r5, r6, pc}
60001366:	nop
60001368:	.word	0x400d8000
6000136c:	.word	0x400fc000
60001370:	.word	0x402e0000
60001374:	.word	0x400d9000
60001378:	.word	0x001e1c00
6000137c:	.word	0xe000e28c
60001380:	.word	0x20003000
60001384:	.word	0x20003400
60001388:	.word	0x000010d5
6000138c:	.word	0xe000e10c

60001390 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001390:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001392:	ldr	r2, [pc, #160]	; (60001434 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001394:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001396:	ldr	r3, [pc, #160]	; (60001438 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001398:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000139c:	ldr	r4, [pc, #156]	; (6000143c <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000139e:	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013a0:	ldr.w	lr, [pc, #216]	; 6000147c <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600013a4:	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013a6:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013a8:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600013aa:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013ae:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600013b2:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013b4:	ldr.w	lr, [pc, #200]	; 60001480 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013b8:	ldr	r7, [pc, #132]	; (60001440 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013ba:	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600013be:	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013c0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013c2:	ldr	r6, [pc, #128]	; (60001444 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013c4:	ldr	r7, [pc, #128]	; (60001448 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013c6:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013c8:	ldr	r1, [pc, #128]	; (6000144c <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013ca:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013cc:	ldr	r6, [pc, #128]	; (60001450 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013ce:	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013d2:	ldr	r7, [pc, #128]	; (60001454 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013d4:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013d6:	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d8:	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013dc:	ldr	r6, [pc, #120]	; (60001458 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013de:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013e0:	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013e2:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013e4:	ldr.w	lr, [pc, #156]	; 60001484 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013e8:	ldr	r6, [pc, #112]	; (6000145c <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013ea:	ldr	r1, [pc, #116]	; (60001460 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013ec:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013f0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013f2:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013f4:	ldr	r7, [pc, #108]	; (60001464 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013f6:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013f8:	ldr	r6, [pc, #108]	; (60001468 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013fa:	ldr	r1, [pc, #112]	; (6000146c <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013fc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013fe:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001400:	ldr	r7, [pc, #108]	; (60001470 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001402:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001404:	ldr	r6, [pc, #108]	; (60001474 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001406:	ldr	r1, [pc, #112]	; (60001478 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001408:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000140a:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000140c:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000140e:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001410:	dsb	sy
	asm("isb");
60001414:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001418:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
6000141c:	dsb	sy
	asm("isb");
60001420:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001424:	ldr.w	r3, [r2, #-136]
60001428:	orr.w	r3, r3, #196608	; 0x30000
6000142c:	str.w	r3, [r2, #-136]
60001430:	pop	{r4, r5, r6, r7, pc}
60001432:	nop
60001434:	.word	0xe000ed9c
60001438:	.word	0xe000eda0
6000143c:	.word	0xe000ed94
60001440:	.word	0x00100009
60001444:	.word	0x00200013
60001448:	.word	0x07020021
6000144c:	.word	0x20003700
60001450:	.word	0x20000014
60001454:	.word	0x13080025
60001458:	.word	0x10000009
6000145c:	.word	0x40000017
60001460:	.word	0x13100033
60001464:	.word	0x60000018
60001468:	.word	0x070b002f
6000146c:	.word	0x70000019
60001470:	.word	0x170b0037
60001474:	.word	0x7000001a
60001478:	.word	0x130b002f
6000147c:	.word	0x1000003f
60001480:	.word	0x03080025
60001484:	.word	0x20200016

60001488 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001488:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000148a:	ldr	r2, [pc, #92]	; (600014e8 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000148c:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000148e:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001492:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001496:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000149a:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000149e:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600014a2:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600014a4:	tst.w	r3, #2
600014a8:	beq.n	600014b8 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600014aa:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600014ac:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600014ae:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600014b0:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600014b2:	tst.w	r3, #2
600014b6:	bne.n	600014aa <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600014b8:	tst.w	r3, #8192	; 0x2000
600014bc:	bne.n	600014c2 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600014be:	str	r5, [r2, #20]
			continue;
600014c0:	b.n	600014a2 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600014c2:	tst.w	r3, #4096	; 0x1000
600014c6:	bne.n	600014cc <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600014c8:	str	r6, [r2, #20]
			continue;
600014ca:	b.n	600014a2 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600014cc:	cmp	r3, #0
600014ce:	bge.n	600014a2 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600014d0:	tst.w	r3, #65536	; 0x10000
600014d4:	beq.n	600014da <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600014d6:	str	r1, [r2, #24]
			continue;
600014d8:	b.n	600014a2 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600014da:	lsls	r3, r3, #25
600014dc:	bmi.n	600014e2 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600014de:	str	r7, [r2, #20]
			continue;
600014e0:	b.n	600014a2 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600014e2:	pop	{r4, r5, r6, r7}
600014e4:	bx	lr
600014e6:	nop
600014e8:	.word	0x400d8000

600014ec <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ec:	ldr	r2, [pc, #236]	; (600015dc <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014ee:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014f2:	ldr	r1, [pc, #236]	; (600015e0 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014f4:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014f6:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
600014f8:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014fa:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014fe:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001500:	ldr.w	lr, [pc, #256]	; 60001604 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001504:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001506:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000150a:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000150e:	ldr	r7, [pc, #212]	; (600015e4 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001510:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001512:	ubfx	r4, r3, #8, #12
60001516:	ldr	r6, [pc, #208]	; (600015e8 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001518:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000151c:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001520:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001524:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001528:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000152c:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001530:	vmov	s15, r4
60001534:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001538:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000153a:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000153e:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001542:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001546:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001548:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000154c:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001550:	ldr	r5, [pc, #152]	; (600015ec <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001552:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001556:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001558:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155c:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001560:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001562:	vdiv.f32	s11, s14, s13
60001566:	ldr	r6, [pc, #136]	; (600015f0 <tempmon_init+0x104>)
60001568:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	ldr	r1, [pc, #136]	; (600015f4 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000156c:	ldr	r4, [pc, #136]	; (600015f8 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156e:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001572:	vmov	s15, r3
60001576:	ldr	r3, [pc, #132]	; (600015fc <tempmon_init+0x110>)
60001578:	str.w	r3, [r6, #320]	; 0x140
6000157c:	vcvt.f32.u32	s15, s15
60001580:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001584:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001588:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000158c:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001590:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001594:	vmov	r3, s11
60001598:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000159c:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015a0:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015a4:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a6:	and.w	r1, r1, r5, lsl #16
600015aa:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015ae:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015b2:	orrs	r3, r1
600015b4:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015b8:	vmov	r3, s15
600015bc:	ldr.w	r1, [r2, #272]	; 0x110
600015c0:	ubfx	r3, r3, #0, #12
600015c4:	orrs	r3, r1
600015c6:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015ca:	ldr	r3, [r2, #0]
600015cc:	orr.w	r3, r3, #2
600015d0:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600015d2:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600015d4:	ldr	r3, [pc, #40]	; (60001600 <tempmon_init+0x114>)
600015d6:	movs	r2, #1
600015d8:	str	r2, [r3, #0]
600015da:	pop	{r4, r5, r6, r7, pc}
600015dc:	.word	0x400d8180
600015e0:	.word	0x401f4400
600015e4:	.word	0x20001430
600015e8:	.word	0x20001434
600015ec:	.word	0x2000142c
600015f0:	.word	0x20003400
600015f4:	.word	0x0fff0000
600015f8:	.word	0xe000e440
600015fc:	.word	0x00001add
60001600:	.word	0xe000e108
60001604:	.word	0x20001428

60001608 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001608:	ldr	r3, [pc, #68]	; (60001650 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000160a:	ldr	r1, [pc, #72]	; (60001654 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000160c:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000160e:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001610:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001614:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001616:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001618:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000161c:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000161e:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001620:	orr.w	r0, r0, #768	; 0x300
60001624:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001626:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001628:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000162a:	ldr	r3, [r2, #72]	; 0x48
6000162c:	lsls	r3, r3, #24
6000162e:	bmi.n	6000162a <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001630:	ldr	r3, [pc, #36]	; (60001658 <analog_init+0x50>)
60001632:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001636:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001638:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000163a:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000163c:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000163e:	ldr	r3, [r2, #72]	; 0x48
60001640:	ands.w	r3, r3, #128	; 0x80
60001644:	bne.n	6000163e <analog_init+0x36>
	calibrating = 0;
60001646:	ldr	r2, [pc, #20]	; (6000165c <analog_init+0x54>)
60001648:	strb	r3, [r2, #0]
}
6000164a:	pop	{r4, r5}
6000164c:	bx	lr
6000164e:	nop
60001650:	.word	0x400fc000
60001654:	.word	0x400c4000
60001658:	.word	0x400c8000
6000165c:	.word	0x2000146d

60001660 <usb_string_product_name_default>:
60001660:	..U.S.B. .S.e.r.
60001670:	i.a.l...

60001678 <usb_string_manufacturer_name_default>:
60001678:	..T.e.e.n.s.y.d.
60001688:	u.i.n.o.

60001690 <string0>:
60001690:	....

60001694 <usb_config_descriptor_12>:
60001694:	..C.....2.......
600016a4:	...$....$....$..
600016b4:	.$..............
600016c4:	.........@......
600016d4:	@...

600016d8 <usb_config_descriptor_480>:
600016d8:	..C.....2.......
600016e8:	...$....$....$..
600016f8:	.$..............
60001708:	................
60001718:	....

6000171c <qualifier_descriptor>:
6000171c:	.......@..

60001726 <_serialEvent_default>:
60001726:	..

60001728 <_init>:
60001728:	push	{r3, r4, r5, r6, r7, lr}
6000172a:	nop
6000172c:	pop	{r3, r4, r5, r6, r7}
6000172e:	pop	{r3}
60001730:	mov	lr, r3
60001732:	bx	lr
60001734:			; <UNDEFINED> instruction: 0xffffffff

60001738 <____libc_init_array_veneer>:
60001738:	ldr.w	pc, [pc]	; 6000173c <____libc_init_array_veneer+0x4>
6000173c:	.word	0x00002779

60001740 <__startup_late_hook_veneer>:
60001740:	ldr.w	pc, [pc]	; 60001744 <__startup_late_hook_veneer+0x4>
60001744:	.word	0x000019cd

60001748 <__startup_early_hook_veneer>:
60001748:	ldr.w	pc, [pc]	; 6000174c <__startup_early_hook_veneer+0x4>
6000174c:	.word	0x000019c9

60001750 <__set_arm_clock_veneer>:
60001750:	ldr.w	pc, [pc]	; 60001754 <__set_arm_clock_veneer+0x4>
60001754:	.word	0x00002491

60001758 <__usb_init_serialnumber_veneer>:
60001758:	ldr.w	pc, [pc]	; 6000175c <__usb_init_serialnumber_veneer+0x4>
6000175c:	.word	0x00001959

60001760 <__delay_veneer>:
60001760:	ldr.w	pc, [pc]	; 60001764 <__delay_veneer+0x4>
60001764:	.word	0x0000188d

60001768 <__main_veneer>:
60001768:	ldr.w	pc, [pc]	; 6000176c <__main_veneer+0x4>
6000176c:	.word	0x00002349

60001770 <__memset_veneer>:
60001770:	ldr.w	pc, [pc]	; 60001774 <__memset_veneer+0x4>
60001774:	.word	0x00002e3d

60001778 <__pwm_init_veneer>:
60001778:	ldr.w	pc, [pc]	; 6000177c <__pwm_init_veneer+0x4>
6000177c:	.word	0x00001ee1

60001780 <__init_array_start>:
60001780:	.word	0x00000045
60001784:	.word	0x00000671

60001788 <__init_array_end>:
60001788:	.word	0xffffffff
6000178c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	asrs	r0, r2, #5
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	str	r4, [r2, #104]	; 0x68
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	cmp	r3, #0
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	nop
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	asrs	r4, r2, #5
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	str	r4, [r2, #104]	; 0x68
  ADC2_CFG = mode1;
      72:	movs	r0, r0
  
  if(num >= 4){
      74:	asrs	r0, r2, #5
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	movs	r0, r0
	...

0000007c <std::_Function_handler<void (long, long), void (*)(int, int)>::_M_invoke(std::_Any_data const&, long&&, long&&)>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      7c:	push	{r4}
      {
	(*_Base::_M_get_pointer(__functor))(
      7e:	ldr	r4, [r1, #0]
      80:	ldr	r3, [r0, #0]
      82:	ldr	r1, [r2, #0]
      84:	.word	0xf85d4620
	    std::forward<_ArgTypes>(__args)...);
      }
      88:	ldr	r3, [pc, #16]	; (9c <std::_Function_base::_Base_manager<void (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x10>)

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
      8a:	.short	0x4718

0000008c <std::_Function_base::_Base_manager<void (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
      8c:	cmp	r2, #1
      8e:	.short	0xd006
      90:	cmp	r2, #2
      92:	.short	0xd102
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
      94:	ldr	r3, [r1, #0]
      96:	.short	0xb100
      98:	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
      9a:	movs	r0, #0
      9c:	.word	0x60014770
      a0:	movs	r0, #0
      a2:	bx	lr

000000a4 <EncoderTool::Encoder::~Encoder()>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
      a4:	ldr	r3, [r0, #32]
#include "core_pins.h"

namespace EncoderTool
{
    // Simple encoder implementation which reads phase A and B from two digital pins
    class Encoder : public EncoderBase
      a6:	.short	0xb510
      a8:	mov	r4, r0
      aa:	cbz	r3, b6 <EncoderTool::Encoder::~Encoder()+0x12>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
      ac:	.word	0x0118f100
      b0:	movs	r2, #3
      b2:	mov	r0, r1
      b4:	blx	r3
      b6:	mov	r0, r4
      b8:	pop	{r4, pc}
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
      ba:	nop

000000bc <FreqGen_t::panic()>:
  protected:
    Channel channel[nrOfChannels];

    unsigned usedChannels = 0;

    void panic()
      bc:	.word	0x2101b508
    {
      pinMode(LED_BUILTIN, OUTPUT);
      c0:	movs	r0, #13
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
      c2:	.short	0x4c08
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
      c4:	movs	r5, #8
      c6:	.short	0xf001
      c8:	ldc2	0, cr14, [fp, #-16]
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
      cc:	.word	0x5088f8c4
      while (true)
      {
        digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
        delay(50);
      d0:	movs	r0, #50	; 0x32
      d2:	.short	0xf001
      d4:			; <UNDEFINED> instruction: 0xfbdb68a3
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
      d8:	lsls	r3, r3, #28
      da:	bmi.n	cc <FreqGen_t::panic()+0x10>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
      dc:	.word	0x5084f8c4
      e0:	b.n	d0 <FreqGen_t::panic()+0x14>
      e2:	nop
      e4:	ands	r0, r0
      e6:	tst	r0, r0

000000e8 <loop>:

    // Inline implementation ===============================================

    void Encoder::tick()
    {
        update(digitalReadFast(pinA), digitalReadFast(pinB));
      e8:	ldr	r2, [pc, #160]	; (18c <loop+0xa4>)
      ea:	ldrb.w	r3, [r2, #44]	; 0x2c
      ee:	mov	r0, r2
      f0:	ldrb.w	r2, [r2, #48]	; 0x30
#endif
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
      f4:	lsls	r3, r3, #4
      f6:	lsls	r2, r2, #4

    onChannelChanged(0, 0); // print some info at startup
}

void loop()
{
      f8:	push	{r4, r5, r6, lr}
      fa:	ldr	r4, [pc, #148]	; (190 <loop+0xa8>)
      fc:	ldr	r1, [r4, r3]
      fe:	adds	r6, r4, r2
     100:	.word	0x442358a5
     104:	ldr	r1, [r1, #8]
     106:	ldr	r2, [r6, #12]
     108:	.word	0x68db68ad
     10c:	tst	r5, r2
     10e:	.short	0xbf14
     110:	movne	r2, #1
     112:	.short	0x2200
     114:	tst	r1, r3
     116:	.short	0xbf14
     118:	movne	r1, #1
     11a:	.short	0x2100
     11c:	bl	76c <EncoderTool::EncoderBase::update(unsigned long, unsigned long)>	; unpredictable branch in IT block

     120:	.word	0xf8924a1c
     124:	adds	r0, #44	; 0x2c
     126:	.short	0x4610
     128:	ldrb.w	r2, [r2, #48]	; 0x30
     12c:	.word	0x0112011b
     130:	ldr	r1, [r4, r3]
     132:	.short	0x4423
     134:	ldr	r5, [r4, r2]
     136:	.short	0x18a6
     138:	ldr	r1, [r1, #8]
     13a:	ldreq	r2, [r6, #12]
     13c:	.word	0x68db68ad
     140:	tst	r5, r2
     142:	.short	0xbf14
     144:	movne	r2, #1
     146:	moveq	r2, #0
     148:	tst	r1, r3
     14a:	ite	ne
     14c:	.word	0x21002101
     150:	bl	76c <EncoderTool::EncoderBase::update(unsigned long, unsigned long)>	; unpredictable branch in IT block

     154:	.word	0xf8924a10
     158:	adds	r0, #44	; 0x2c
     15a:	movne	r0, r2
     15c:	.word	0x2030f892
     160:	lsls	r3, r3, #4
     162:	.short	0x0112
     164:	ldr	r1, [r4, r3]
     166:	addeq	r3, r4
     168:	.word	0x58a418a5
     16c:	ldr	r1, [r1, #8]
     16e:	.short	0x68ea
     170:	ldr	r4, [r4, #8]
     172:	.short	0x68db
     174:	tst	r4, r2
     176:	.short	0xbf14
     178:	movne	r2, #1
     17a:	.short	0x2200
     17c:	tst	r1, r3
    frequencyEncoder.tick();
    chnSelectEncoder.tick();
    dutyCycleEncoder.tick();
}
     17e:	.short	0xe8bd
     180:	eors	r0, r6
     182:	ite	ne	; unpredictable <IT:eq>
     184:	.word	0x21002101
     188:	b.w	76c <EncoderTool::EncoderBase::update(unsigned long, unsigned long)>	; unpredictable branch in IT block

     18c:	.word	0x200011a0
     190:	lsls	r4, r0, #4
     192:	.short	0x2000
     194:	asrs	r4, r5, #5
     196:	.short	0x2000
     198:	asrs	r4, r2, #7
     19a:	.short	0x2000

0000019c <printChannelInfo(unsigned int)>:
      return channel[ch].getDutyCycle();
    }

    uint8_t getPin(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     19c:	ldr	r2, [pc, #44]	; (1cc <printChannelInfo(unsigned int)+0x30>)
     19e:	ldrne	r3, [r2, #96]	; 0x60
     1a0:	.word	0xb5104298

// Helpers ===================================================
void printChannelInfo(unsigned ch)
{
     1a4:	sub	sp, #8
     1a6:	.short	0xd20d
      return channel[ch].getPin();
     1a8:	add.w	r3, r0, r0, lsl #1
    int pin = generator.getPin(ch);
    int frq = generator.getFrequency(ch);
    int dty = generator.getDutyCycle(ch);

    Serial.printf("Pin: %u -> f=%u Hz d=%u %%\n", pin, frq, dty);
     1ac:	.word	0x48094908
     1b0:	lsls	r3, r3, #2
     1b2:	.short	0x18d4
     1b4:	ldrb	r2, [r2, r3]
     1b6:	.short	0x68a3
     1b8:	ldr	r4, [r4, #4]
     1ba:	streq	r4, [sp, #0]
     1bc:	.word	0xf8b4f002
}
     1c0:	add	sp, #8
     1c2:	.short	0xbd10
      return channel[ch].getDutyCycle();
    }

    uint8_t getPin(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     1c4:	mov	r0, r2
     1c6:	.short	0xf7ff
     1c8:	vpmin.f<illegal width 64>	d27, d9, d0
     1cc:	.word	0x200006f4
     1d0:	movs	r0, r3
     1d2:	movs	r0, #0
     1d4:	lsls	r4, r1, #30
     1d6:	movs	r0, #0

000001d8 <onFrequencyChanged(int, int)>:

void onFrequencyChanged(int encVal, int encDelta)
{
     1d8:	.word	0x4b1eb5f8
      channel[ch].setDutyCycle(d);
    }

    unsigned getFrequency(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     1dc:	ldr	r5, [pc, #120]	; (258 <onFrequencyChanged(int, int)+0x80>)
    unsigned ch = chnSelectEncoder.getValue();
     1de:	.short	0x681e
     1e0:	ldr	r3, [r5, #96]	; 0x60
     1e2:	.short	0x429e
     1e4:	bcs.n	24c <onFrequencyChanged(int, int)+0x74>
      return channel[ch].getFrequency();
     1e6:	.short	0xeb06
     1e8:	lsls	r6, r0, #17
     1ea:	.short	0xf44f
     1ec:	strb	r2, [r7, #9]
     1ee:	.short	0x00a4
     1f0:	adds	r7, r5, r4
     1f2:	.short	0x5d28
     1f4:	ldr	r3, [r7, #8]
     1f6:	.short	0xfb02
     1f8:	adds	r1, #1
     1fa:	bic.w	r1, r1, r1, asr #31
}

void Channel::setFrequency(int f)
{
    frequency = max(0, f);
    analogWriteFrequency(pin, frequency);
     1fe:	vmov	s15, r1
        analogWrite(pin, 0); // switch off output
}

void Channel::setFrequency(int f)
{
    frequency = max(0, f);
     202:	str	r1, [r7, #8]
    analogWriteFrequency(pin, frequency);
     204:	vcvt.f32.s32	s0, s15
     208:	bl	1e78 <analogWriteFrequency>
}

void Channel::enable(bool on)
{
    if (on)
        setDutyCycle(dutyCycle); // set last stored duty cycle
     20c:	ldr	r3, [r7, #4]
     20e:	ldrb	r0, [r5, r4]
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
     210:	cmp	r3, #0
     212:	ble.n	246 <onFrequencyChanged(int, int)+0x6e>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     214:	cmp	r3, #99	; 0x63
     216:	ble.n	22c <onFrequencyChanged(int, int)+0x54>
     218:	movs	r1, #253	; 0xfd
     21a:	movs	r3, #99	; 0x63
    analogWriteFrequency(pin, frequency);
}

void Channel::setDutyCycle(int d) // percent
{
    dutyCycle = min(99, max(0, d)); // limit to [0, 100[
     21c:	str	r3, [r7, #4]
    analogWrite(pin, dutyCycle * 2.56f);
     21e:	bl	1db0 <analogWrite>
    unsigned f = generator.getFrequency(ch) + encDelta * 1000;
    generator.setFrequency(ch, f);

    printChannelInfo(ch);
     222:	mov	r0, r6
}
     224:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
{
    unsigned ch = chnSelectEncoder.getValue();
    unsigned f = generator.getFrequency(ch) + encDelta * 1000;
    generator.setFrequency(ch, f);

    printChannelInfo(ch);
     228:	b.w	19c <printChannelInfo(unsigned int)>
     22c:	vmov	s15, r3
     230:	vldr	s14, [pc, #40]	; 25c <onFrequencyChanged(int, int)+0x84>
     234:	vcvt.f32.s32	s15, s15
     238:	vmul.f32	s15, s15, s14
     23c:	vcvt.s32.f32	s15, s15
     240:	vmov	r1, s15
     244:	b.n	21c <onFrequencyChanged(int, int)+0x44>
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
     246:	movs	r1, #0
     248:	mov	r3, r1
     24a:	b.n	21c <onFrequencyChanged(int, int)+0x44>
      channel[ch].setDutyCycle(d);
    }

    unsigned getFrequency(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     24c:	mov	r0, r5
     24e:	bl	bc <FreqGen_t::panic()>
     252:	nop
     254:	.word	0x2000116c
     258:	.word	0x200006f4
     25c:	.word	0x4023d70a

00000260 <onDutyCycleChanged(int, int)>:
}

void onDutyCycleChanged(int encVal, int encDelta)
{
     260:	ldr	r3, [pc, #96]	; (2c4 <onDutyCycleChanged(int, int)+0x64>)
      return channel[ch].getFrequency();
    }

    unsigned getDutyCycle(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     262:	ldr	r0, [pc, #100]	; (2c8 <onDutyCycleChanged(int, int)+0x68>)
     264:	push	{r4, lr}
    unsigned ch = chnSelectEncoder.getValue(); // get the currently active channel
     266:	ldr	r4, [r3, #0]
     268:	ldr	r3, [r0, #96]	; 0x60
     26a:	cmp	r4, r3
     26c:	bcs.n	2be <onDutyCycleChanged(int, int)+0x5e>
      return channel[ch].getDutyCycle();
     26e:	add.w	r3, r4, r4, lsl #1
    unsigned d = generator.getDutyCycle(ch) + encDelta * 5;
     272:	add.w	r1, r1, r1, lsl #2
     276:	lsls	r3, r3, #2
     278:	adds	r2, r0, r3
     27a:	ldrb	r0, [r0, r3]
     27c:	ldr	r3, [r2, #4]
     27e:	add	r1, r3
     280:	cmp	r1, #0
     282:	ble.n	2b8 <onDutyCycleChanged(int, int)+0x58>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     284:	cmp	r1, #99	; 0x63
     286:	ble.n	29c <onDutyCycleChanged(int, int)+0x3c>
     288:	movs	r1, #253	; 0xfd
     28a:	movs	r3, #99	; 0x63
    analogWriteFrequency(pin, frequency);
}

void Channel::setDutyCycle(int d) // percent
{
    dutyCycle = min(99, max(0, d)); // limit to [0, 100[
     28c:	str	r3, [r2, #4]
    analogWrite(pin, dutyCycle * 2.56f);
     28e:	bl	1db0 <analogWrite>
    generator.setDutyCycle(ch, d);

    printChannelInfo(ch);
     292:	mov	r0, r4
}
     294:	ldmia.w	sp!, {r4, lr}
{
    unsigned ch = chnSelectEncoder.getValue(); // get the currently active channel
    unsigned d = generator.getDutyCycle(ch) + encDelta * 5;
    generator.setDutyCycle(ch, d);

    printChannelInfo(ch);
     298:	b.w	19c <printChannelInfo(unsigned int)>
     29c:	vmov	s15, r1
     2a0:	vldr	s14, [pc, #40]	; 2cc <onDutyCycleChanged(int, int)+0x6c>
     2a4:	mov	r3, r1
     2a6:	vcvt.f32.s32	s15, s15
     2aa:	vmul.f32	s15, s15, s14
     2ae:	vcvt.s32.f32	s15, s15
     2b2:	vmov	r1, s15
     2b6:	b.n	28c <onDutyCycleChanged(int, int)+0x2c>
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
     2b8:	movs	r1, #0
     2ba:	mov	r3, r1
     2bc:	b.n	28c <onDutyCycleChanged(int, int)+0x2c>
      return channel[ch].getFrequency();
    }

    unsigned getDutyCycle(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     2be:	bl	bc <FreqGen_t::panic()>
     2c2:	nop
     2c4:	.word	0x2000116c
     2c8:	.word	0x200006f4
     2cc:	.word	0x4023d70a

000002d0 <onChannelChanged(int, int)>:
      return channel[ch].getDutyCycle();
    }

    uint8_t getPin(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     2d0:	ldr	r3, [pc, #40]	; (2fc <onChannelChanged(int, int)+0x2c>)
     2d2:	ldr	r2, [r3, #96]	; 0x60
     2d4:	cmp	r0, r2
}

void onChannelChanged(int encVal, int encDelta)
{
     2d6:	push	{r4, lr}
     2d8:	bcs.n	2f6 <onChannelChanged(int, int)+0x26>
      return channel[ch].getPin();
     2da:	add.w	r2, r0, r0, lsl #1
     2de:	mov	r4, r0
    Serial.printf("\nSetup pin %u\n", generator.getPin(encVal));
     2e0:	ldr	r1, [pc, #28]	; (300 <onChannelChanged(int, int)+0x30>)
     2e2:	ldr	r0, [pc, #32]	; (304 <onChannelChanged(int, int)+0x34>)
     2e4:	ldrb.w	r2, [r3, r2, lsl #2]
     2e8:	bl	2328 <Print::printf(char const*, ...)>
    printChannelInfo(encVal);
     2ec:	mov	r0, r4
}
     2ee:	ldmia.w	sp!, {r4, lr}
}

void onChannelChanged(int encVal, int encDelta)
{
    Serial.printf("\nSetup pin %u\n", generator.getPin(encVal));
    printChannelInfo(encVal);
     2f2:	b.w	19c <printChannelInfo(unsigned int)>
      return channel[ch].getDutyCycle();
    }

    uint8_t getPin(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     2f6:	mov	r0, r3
     2f8:	bl	bc <FreqGen_t::panic()>
     2fc:	.word	0x200006f4
     300:	.word	0x20000034
     304:	.word	0x2000078c

00000308 <setup>:
Encoder frequencyEncoder;
Encoder dutyCycleEncoder;
Encoder chnSelectEncoder;

void setup()
{
     308:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     30c:	ldr	r1, [pc, #52]	; (344 <setup+0x3c>)
     30e:	sub	sp, #60	; 0x3c
     310:	ldr	r2, [pc, #52]	; (348 <setup+0x40>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     312:	ldr	r0, [pc, #56]	; (34c <setup+0x44>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     314:	ldr	r5, [pc, #56]	; (350 <setup+0x48>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     316:	ldrb	r3, [r1, #0]
     318:	cmp	r3, #0
     31a:	beq.w	616 <setup+0x30e>
     31e:	ldrb	r3, [r0, #0]
     320:	lsls	r3, r3, #31
     322:	bpl.w	616 <setup+0x30e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     326:	ldr	r3, [r2, #0]
     328:	ldr	r4, [r5, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     32a:	subs	r3, r3, r4
     32c:	cmp	r3, #14
     32e:	bls.w	616 <setup+0x30e>
     332:	ldr	r4, [pc, #32]	; (354 <setup+0x4c>)
     334:	movs	r0, #9
     336:	ldr	r6, [pc, #32]	; (358 <setup+0x50>)
void Channel::setPin(uint8_t p)
{
    pin = p;
    analogWrite(pin, 0); // switch off
    frequency = 0;
    dutyCycle = 50;
     338:	mov.w	r8, #50	; 0x32
     33c:	ldr	r3, [r4, #96]	; 0x60
     33e:	add.w	r7, r6, #20
     342:	b.n	360 <setup+0x58>
     344:	.word	0x20001418
     348:	.word	0x20001424
     34c:	.word	0x20001348
     350:	.word	0x200014ac
     354:	.word	0x200006f4
     358:	.word	0x20000000
     35c:	ldr.w	r0, [r6, #4]!
      }
    }

    void addChannels(int pin)
    {
      if (usedChannels >= nrOfChannels || pin > CORE_NUM_DIGITAL) panic();
     360:	cmp	r0, #40	; 0x28
     362:	bgt.w	636 <setup+0x32e>
     366:	cmp	r3, #7
     368:	ite	ls
     36a:	movls	r5, #0
     36c:	movhi	r5, #1
     36e:	cmp	r5, #0
     370:	bne.w	636 <setup+0x32e>

      channel[usedChannels].setPin(pin);
     374:	uxtb	r2, r0
};

void Channel::setPin(uint8_t p)
{
    pin = p;
    analogWrite(pin, 0); // switch off
     376:	mov	r1, r5
    unsigned frequency = 50;
};

void Channel::setPin(uint8_t p)
{
    pin = p;
     378:	add.w	r3, r3, r3, lsl #1
    analogWrite(pin, 0); // switch off
     37c:	mov	r0, r2
    unsigned frequency = 50;
};

void Channel::setPin(uint8_t p)
{
    pin = p;
     37e:	strb.w	r2, [r4, r3, lsl #2]
     382:	add.w	r9, r4, r3, lsl #2
    analogWrite(pin, 0); // switch off
     386:	bl	1db0 <analogWrite>
      usedChannels++;
     38a:	ldr	r2, [r4, #96]	; 0x60
  public:
    static constexpr unsigned nrOfChannels = 8;

    void addOutputPins(std::initializer_list<int> pins)
    {
      for (auto pin : pins) {
     38c:	cmp	r6, r7
    frequency = 0;
     38e:	str.w	r5, [r9, #8]
    void addChannels(int pin)
    {
      if (usedChannels >= nrOfChannels || pin > CORE_NUM_DIGITAL) panic();

      channel[usedChannels].setPin(pin);
      usedChannels++;
     392:	add.w	r3, r2, #1
    dutyCycle = 50;
     396:	str.w	r8, [r9, #4]
     39a:	str	r3, [r4, #96]	; 0x60
  public:
    static constexpr unsigned nrOfChannels = 8;

    void addOutputPins(std::initializer_list<int> pins)
    {
      for (auto pin : pins) {
     39c:	bne.n	35c <setup+0x54>
        attachCallback(cb);
    }

    void Encoder::begin(int pinA, int pinB, CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     39e:	ldr	r7, [pc, #668]	; (63c <setup+0x334>)
        pinMode(pinA, inputMode);
     3a0:	movs	r1, #2
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     3a2:	ldr	r3, [pc, #668]	; (640 <setup+0x338>)
     3a4:	mov	r0, r5
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     3a6:	ldr.w	r9, [pc, #704]	; 668 <setup+0x360>
	    _M_manager = &_My_handler::_M_manager;
     3aa:	ldr.w	r8, [pc, #704]	; 66c <setup+0x364>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     3ae:	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     3b0:	str.w	r9, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
     3b4:	str.w	r8, [sp, #16]
        attachCallback(cb);
    }

    void Encoder::begin(int pinA, int pinB, CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     3b8:	str	r5, [r7, #44]	; 0x2c
        pinMode(pinA, inputMode);
     3ba:	bl	1b00 <pinMode>

        this->pinB = pinB;
     3be:	movs	r3, #1
        pinMode(pinB, inputMode);
     3c0:	movs	r1, #2
     3c2:	mov	r0, r3
    void Encoder::begin(int pinA, int pinB, CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
        pinMode(pinA, inputMode);

        this->pinB = pinB;
     3c4:	str	r3, [r7, #48]	; 0x30
        pinMode(pinB, inputMode);
     3c6:	bl	1b00 <pinMode>

        setCountMode(countMode);
     3ca:	mov	r1, r5
     3cc:	mov	r0, r7
     3ce:	bl	6f8 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)>
static inline uint8_t digitalReadFast(uint8_t pin) __attribute__((always_inline, unused));
static inline uint8_t digitalReadFast(uint8_t pin)
{
	if (__builtin_constant_p(pin)) {
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
     3d2:	mov.w	r3, #1107296256	; 0x42000000
        EncoderBase::begin(digitalReadFast(pinA), digitalReadFast(pinB)); // set start state
     3d6:	mov	r0, r7
     3d8:	ldr	r1, [r3, #8]
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
     3da:	ldr	r2, [r3, #8]
     3dc:	ubfx	r1, r1, #3, #1
     3e0:	ubfx	r2, r2, #2, #1
     3e4:	bl	760 <EncoderTool::EncoderBase::begin(unsigned long, unsigned long)>
     3e8:	ldr	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     3ea:	str	r5, [sp, #32]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     3ec:	cmp	r3, #0
     3ee:	beq.w	622 <setup+0x31a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     3f2:	movs	r2, #2
     3f4:	add	r1, sp, #8
     3f6:	add	r0, sp, #24
     3f8:	blx	r3
	  _M_invoker = __x._M_invoker;
     3fa:	ldr	r2, [sp, #20]
	  _M_manager = __x._M_manager;
     3fc:	ldr	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     3fe:	str	r5, [sp, #48]	; 0x30
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     400:	str	r2, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
     402:	str	r3, [sp, #32]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     404:	cmp	r3, #0
     406:	beq.w	622 <setup+0x31a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     40a:	add	r5, sp, #40	; 0x28
     40c:	add	r1, sp, #24
     40e:	movs	r2, #2
     410:	mov	r0, r5
     412:	blx	r3
	  _M_invoker = __x._M_invoker;
     414:	ldr	r1, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
     416:	ldr	r2, [sp, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     418:	ldr.w	sl, [r7, #32]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     41c:	mov	r6, sp
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
     41e:	str	r2, [r7, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     420:	ldr	r3, [pc, #544]	; (644 <setup+0x33c>)
     422:	ldr	r2, [r7, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
     424:	str	r1, [r7, #36]	; 0x24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     426:	ldmia.w	r5, {r0, r1}
     42a:	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
     42e:	ldmia.w	r3, {r0, r1}
     432:	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
     436:	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     43a:	str.w	sl, [sp, #48]	; 0x30
     43e:	str	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
     440:	stmia.w	r3, {r0, r1}

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     444:	cmp.w	sl, #0
     448:	beq.n	452 <setup+0x14a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     44a:	movs	r2, #3
     44c:	mov	r1, r5
     44e:	mov	r0, r5
     450:	blx	sl

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     452:	ldr	r3, [sp, #32]
     454:	cbz	r3, 45e <setup+0x156>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     456:	add	r1, sp, #24
     458:	movs	r2, #3
     45a:	mov	r0, r1
     45c:	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     45e:	ldr	r3, [sp, #16]
     460:	cbz	r3, 46a <setup+0x162>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     462:	add	r1, sp, #8
     464:	movs	r2, #3
     466:	mov	r0, r1
     468:	blx	r3
        attachCallback(cb);
    }

    void Encoder::begin(int pinA, int pinB, CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     46a:	mov.w	sl, #2
     46e:	ldr	r7, [pc, #472]	; (648 <setup+0x340>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     470:	ldr	r3, [pc, #472]	; (64c <setup+0x344>)
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     472:	mov.w	fp, #0
        pinMode(pinA, inputMode);
     476:	mov	r1, sl
     478:	mov	r0, sl
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     47a:	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     47c:	str.w	r9, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
     480:	str.w	r8, [sp, #16]
        attachCallback(cb);
    }

    void Encoder::begin(int pinA, int pinB, CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     484:	str.w	sl, [r7, #44]	; 0x2c
        pinMode(pinA, inputMode);
     488:	bl	1b00 <pinMode>

        this->pinB = pinB;
     48c:	movs	r3, #3
        pinMode(pinB, inputMode);
     48e:	mov	r1, sl
     490:	mov	r0, r3
    void Encoder::begin(int pinA, int pinB, CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
        pinMode(pinA, inputMode);

        this->pinB = pinB;
     492:	str	r3, [r7, #48]	; 0x30
        pinMode(pinB, inputMode);
     494:	bl	1b00 <pinMode>

        setCountMode(countMode);
     498:	mov	r1, fp
     49a:	mov	r0, r7
     49c:	bl	6f8 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)>
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
     4a0:	ldr	r3, [pc, #428]	; (650 <setup+0x348>)
        EncoderBase::begin(digitalReadFast(pinA), digitalReadFast(pinB)); // set start state
     4a2:	mov	r0, r7
     4a4:	ldr	r1, [r3, #8]
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
     4a6:	ldr	r2, [r3, #8]
     4a8:	ubfx	r1, r1, #4, #1
     4ac:	ubfx	r2, r2, #5, #1
     4b0:	bl	760 <EncoderTool::EncoderBase::begin(unsigned long, unsigned long)>
     4b4:	ldr	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     4b6:	str.w	fp, [sp, #32]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     4ba:	cmp	r3, #0
     4bc:	beq.w	630 <setup+0x328>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     4c0:	mov	r2, sl
     4c2:	add	r1, sp, #8
     4c4:	add	r0, sp, #24
     4c6:	blx	r3
	  _M_invoker = __x._M_invoker;
     4c8:	ldr	r2, [sp, #20]
	  _M_manager = __x._M_manager;
     4ca:	ldr	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     4cc:	str.w	fp, [sp, #48]	; 0x30
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     4d0:	str	r2, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
     4d2:	str	r3, [sp, #32]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     4d4:	cmp	r3, #0
     4d6:	beq.w	630 <setup+0x328>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     4da:	mov	r2, sl
     4dc:	add	r1, sp, #24
     4de:	mov	r0, r5
     4e0:	blx	r3
	  _M_invoker = __x._M_invoker;
     4e2:	ldr	r1, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
     4e4:	ldr	r2, [sp, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     4e6:	ldr.w	sl, [r7, #32]
     4ea:	ldr	r3, [pc, #360]	; (654 <setup+0x34c>)
      __b = _GLIBCXX_MOVE(__tmp);
     4ec:	str	r2, [r7, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     4ee:	ldr	r2, [r7, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
     4f0:	str	r1, [r7, #36]	; 0x24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     4f2:	ldmia.w	r5, {r0, r1}
     4f6:	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
     4fa:	ldmia.w	r3, {r0, r1}
     4fe:	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
     502:	ldmia.w	r6, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     506:	str.w	sl, [sp, #48]	; 0x30
     50a:	str	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
     50c:	stmia.w	r3, {r0, r1}

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     510:	cmp.w	sl, #0
     514:	beq.n	51e <setup+0x216>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     516:	movs	r2, #3
     518:	mov	r1, r5
     51a:	mov	r0, r5
     51c:	blx	sl

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     51e:	ldr	r3, [sp, #32]
     520:	cbz	r3, 52a <setup+0x222>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     522:	add	r1, sp, #24
     524:	movs	r2, #3
     526:	mov	r0, r1
     528:	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     52a:	ldr	r3, [sp, #16]
     52c:	cbz	r3, 536 <setup+0x22e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     52e:	add	r1, sp, #8
     530:	movs	r2, #3
     532:	mov	r0, r1
     534:	blx	r3
        attachCallback(cb);
    }

    void Encoder::begin(int pinA, int pinB, CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     536:	movs	r3, #4
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     538:	ldr	r2, [pc, #284]	; (658 <setup+0x350>)
     53a:	ldr	r7, [pc, #288]	; (65c <setup+0x354>)
        pinMode(pinA, inputMode);
     53c:	movs	r1, #2
     53e:	mov	r0, r3
     540:	str	r2, [sp, #8]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
     542:	str.w	r8, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     546:	mov.w	r8, #0
        attachCallback(cb);
    }

    void Encoder::begin(int pinA, int pinB, CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     54a:	str	r3, [r7, #44]	; 0x2c
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     54c:	str.w	r9, [sp, #20]
        pinMode(pinA, inputMode);
     550:	bl	1b00 <pinMode>

        this->pinB = pinB;
     554:	movs	r3, #5
        pinMode(pinB, inputMode);
     556:	movs	r1, #2
     558:	mov	r0, r3
    void Encoder::begin(int pinA, int pinB, CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
        pinMode(pinA, inputMode);

        this->pinB = pinB;
     55a:	str	r3, [r7, #48]	; 0x30
        pinMode(pinB, inputMode);
     55c:	bl	1b00 <pinMode>

        setCountMode(countMode);
     560:	mov	r1, r8
     562:	mov	r0, r7
     564:	bl	6f8 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)>
		} else if (pin == 4) {
			return (CORE_PIN4_PINREG & CORE_PIN4_BITMASK) ? 1 : 0;
     568:	ldr	r3, [pc, #228]	; (650 <setup+0x348>)
        EncoderBase::begin(digitalReadFast(pinA), digitalReadFast(pinB)); // set start state
     56a:	mov	r0, r7
     56c:	ldr	r1, [r3, #8]
		} else if (pin == 5) {
			return (CORE_PIN5_PINREG & CORE_PIN5_BITMASK) ? 1 : 0;
     56e:	ldr	r2, [r3, #8]
     570:	ubfx	r1, r1, #6, #1
     574:	ubfx	r2, r2, #8, #1
     578:	bl	760 <EncoderTool::EncoderBase::begin(unsigned long, unsigned long)>
     57c:	ldr	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     57e:	str.w	r8, [sp, #32]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     582:	cmp	r3, #0
     584:	beq.n	62a <setup+0x322>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     586:	movs	r2, #2
     588:	add	r1, sp, #8
     58a:	add	r0, sp, #24
     58c:	blx	r3
	  _M_invoker = __x._M_invoker;
     58e:	ldr	r2, [sp, #20]
	  _M_manager = __x._M_manager;
     590:	ldr	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     592:	str.w	r8, [sp, #48]	; 0x30
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     596:	str	r2, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
     598:	str	r3, [sp, #32]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     59a:	cmp	r3, #0
     59c:	beq.n	62a <setup+0x322>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     59e:	add	r1, sp, #24
     5a0:	movs	r2, #2
     5a2:	mov	r0, r5
     5a4:	blx	r3
	  _M_invoker = __x._M_invoker;
     5a6:	ldr	r1, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
     5a8:	ldr	r2, [sp, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     5aa:	ldr.w	r8, [r7, #32]
     5ae:	ldr	r3, [pc, #176]	; (660 <setup+0x358>)
      __b = _GLIBCXX_MOVE(__tmp);
     5b0:	str	r2, [r7, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     5b2:	ldr	r2, [r7, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
     5b4:	str	r1, [r7, #36]	; 0x24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     5b6:	ldmia.w	r5, {r0, r1}
     5ba:	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
     5be:	ldmia.w	r3, {r0, r1}
     5c2:	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
     5c6:	ldmia.w	r6, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     5ca:	str.w	r8, [sp, #48]	; 0x30
     5ce:	str	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
     5d0:	stmia.w	r3, {r0, r1}

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     5d4:	cmp.w	r8, #0
     5d8:	beq.n	5e2 <setup+0x2da>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     5da:	movs	r2, #3
     5dc:	mov	r1, r5
     5de:	mov	r0, r5
     5e0:	blx	r8

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     5e2:	ldr	r3, [sp, #32]
     5e4:	cbz	r3, 5ee <setup+0x2e6>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     5e6:	add	r1, sp, #24
     5e8:	movs	r2, #3
     5ea:	mov	r0, r1
     5ec:	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     5ee:	ldr	r3, [sp, #16]
     5f0:	cbz	r3, 5fa <setup+0x2f2>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     5f2:	add	r1, sp, #8
     5f4:	movs	r2, #3
     5f6:	mov	r0, r1
     5f8:	blx	r3
    generator.addOutputPins({9, 10, 11, 12, 14, 15}); // define up to 8 output pins (here for a T4.0)

    chnSelectEncoder.begin(0, 1, onChannelChanged);                 // encoder to select current channel on pin 0/1 using onChannelChanged callback
    frequencyEncoder.begin(2, 3, onFrequencyChanged);               // encoder to select freqency
    dutyCycleEncoder.begin(4, 5, onDutyCycleChanged);               // encoder to select duty cylce
    chnSelectEncoder.setLimits(0, generator.getNrOfChannels() - 1); // limit channel encoder range to actual number of defined channels
     5fa:	movs	r3, #0
     5fc:	ldr	r2, [r4, #96]	; 0x60
     5fe:	ldr	r0, [pc, #60]	; (63c <setup+0x334>)
     600:	mov	r1, r3
     602:	subs	r2, #1
     604:	bl	744 <EncoderTool::EncoderBase::setLimits(long, long, bool)>

    onChannelChanged(0, 0); // print some info at startup
     608:	movs	r1, #0
     60a:	mov	r0, r1
     60c:	bl	2d0 <onChannelChanged(int, int)>
}
     610:	add	sp, #60	; 0x3c
     612:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     616:	ldr	r3, [r2, #0]
Encoder dutyCycleEncoder;
Encoder chnSelectEncoder;

void setup()
{
    while (!Serial && millis() < 1000) {} // wait for USB to connect
     618:	cmp.w	r3, #1000	; 0x3e8
     61c:	bcc.w	316 <setup+0xe>
     620:	b.n	332 <setup+0x2a>
     622:	ldr	r1, [sp, #52]	; 0x34
Encoder frequencyEncoder;
Encoder dutyCycleEncoder;
Encoder chnSelectEncoder;

void setup()
{
     624:	movs	r2, #0
     626:	add	r5, sp, #40	; 0x28
     628:	b.n	418 <setup+0x110>
     62a:	ldr	r1, [sp, #52]	; 0x34
     62c:	movs	r2, #0
     62e:	b.n	5aa <setup+0x2a2>
     630:	ldr	r1, [sp, #52]	; 0x34
     632:	movs	r2, #0
     634:	b.n	4e6 <setup+0x1de>
      }
    }

    void addChannels(int pin)
    {
      if (usedChannels >= nrOfChannels || pin > CORE_NUM_DIGITAL) panic();
     636:	ldr	r0, [pc, #44]	; (664 <setup+0x35c>)
     638:	bl	bc <FreqGen_t::panic()>
     63c:	.word	0x2000116c
     640:	.word	0x000002d1
     644:	.word	0x20001184
     648:	.word	0x200011a0
     64c:	.word	0x000001d9
     650:	.word	0x4200c000
     654:	.word	0x200011b8
     658:	.word	0x00000261
     65c:	.word	0x200011d4
     660:	.word	0x200011ec
     664:	.word	0x200006f4
     668:	.word	0x0000007d
     66c:	.word	0x0000008d

00000670 <_GLOBAL__sub_I_generator>:

void onChannelChanged(int encVal, int encDelta)
{
    Serial.printf("\nSetup pin %u\n", generator.getPin(encVal));
    printChannelInfo(encVal);
}
     670:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    };

    class EncoderBase
    {
     public:
        EncoderBase() = default;
     674:	movs	r4, #0
     676:	ldr	r3, [pc, #104]	; (6e0 <_GLOBAL__sub_I_generator+0x70>)
void onFrequencyChanged(int encVal, int encDelta);
void onChannelChanged(int encVal, int encDelta);
void onDutyCycleChanged(int encVal, int encDelta);

FreqGen_t generator;
Encoder frequencyEncoder;
     678:	ldr.w	r9, [pc, #116]	; 6f0 <_GLOBAL__sub_I_generator+0x80>
     67c:	mov.w	r7, #2147483648	; 0x80000000
     680:	ldr.w	r8, [pc, #112]	; 6f4 <_GLOBAL__sub_I_generator+0x84>
     684:	mvn.w	r6, #2147483648	; 0x80000000
     688:	ldr	r5, [pc, #88]	; (6e4 <_GLOBAL__sub_I_generator+0x74>)
     68a:	mov	r2, r9
     68c:	mov	r1, r8
     68e:	str	r4, [r3, #0]
     690:	strb	r4, [r3, #12]
     692:	mov	r0, r3
     694:	str	r4, [r3, #16]
     696:	strb	r4, [r3, #20]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     698:	str	r4, [r3, #32]
     69a:	str	r7, [r3, #4]
     69c:	str	r6, [r3, #8]
     69e:	str	r5, [r3, #40]	; 0x28
     6a0:	bl	2754 <__aeabi_atexit>
     6a4:	ldr	r3, [pc, #64]	; (6e8 <_GLOBAL__sub_I_generator+0x78>)
Encoder dutyCycleEncoder;
     6a6:	mov	r2, r9
     6a8:	mov	r1, r8
     6aa:	str	r6, [r3, #8]
     6ac:	mov	r0, r3
     6ae:	strb	r4, [r3, #12]
     6b0:	str	r4, [r3, #16]
     6b2:	strb	r4, [r3, #20]
     6b4:	str	r4, [r3, #32]
     6b6:	str	r5, [r3, #40]	; 0x28
     6b8:	stmia.w	r3, {r4, r7}
     6bc:	bl	2754 <__aeabi_atexit>
     6c0:	ldr	r3, [pc, #40]	; (6ec <_GLOBAL__sub_I_generator+0x7c>)
Encoder chnSelectEncoder;
     6c2:	mov	r2, r9
     6c4:	mov	r1, r8
     6c6:	mov	r0, r3
     6c8:	str	r6, [r3, #8]
     6ca:	strb	r4, [r3, #12]
     6cc:	str	r4, [r3, #16]
     6ce:	strb	r4, [r3, #20]
     6d0:	str	r4, [r3, #32]
     6d2:	str	r5, [r3, #40]	; 0x28
     6d4:	stmia.w	r3, {r4, r7}

void onChannelChanged(int encVal, int encDelta)
{
    Serial.printf("\nSetup pin %u\n", generator.getPin(encVal));
    printChannelInfo(encVal);
}
     6d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
void onDutyCycleChanged(int encVal, int encDelta);

FreqGen_t generator;
Encoder frequencyEncoder;
Encoder dutyCycleEncoder;
Encoder chnSelectEncoder;
     6dc:	b.w	2754 <__aeabi_atexit>
     6e0:	.word	0x200011a0
     6e4:	.word	0x2000007c
     6e8:	.word	0x200011d4
     6ec:	.word	0x2000116c
     6f0:	.word	0x200006f0
     6f4:	.word	0x000000a5

000006f8 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)>:

namespace EncoderTool
{
    EncoderBase& EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
     6f8:	cmp	r1, #3
     6fa:	bhi.n	72c <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x34>
     6fc:	tbb	[pc, r1]
     700:	.word	0x02070c11
            case CountMode::half:
                stateMachine = &stateMachineHalf;
                invert = 0b00;
                break;
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
     704:	ldr	r2, [pc, #48]	; (738 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x40>)
                invert = 0b01;
     706:	movs	r3, #1
            case CountMode::half:
                stateMachine = &stateMachineHalf;
                invert = 0b00;
                break;
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
     708:	str	r2, [r0, #40]	; 0x28
                invert = 0b01;
     70a:	str	r3, [r0, #16]
                break;
     70c:	bx	lr
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
                invert = 0b00;
                break;
            case CountMode::half:
                stateMachine = &stateMachineHalf;
     70e:	ldr	r2, [pc, #40]	; (738 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x40>)
                invert = 0b00;
     710:	movs	r3, #0
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
                invert = 0b00;
                break;
            case CountMode::half:
                stateMachine = &stateMachineHalf;
     712:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     714:	str	r3, [r0, #16]
                break;
     716:	bx	lr
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
                invert = 0b11;
                break;
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
     718:	ldr	r2, [pc, #32]	; (73c <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x44>)
                invert = 0b00;
     71a:	movs	r3, #0
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
                invert = 0b11;
                break;
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
     71c:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     71e:	str	r3, [r0, #16]
                break;
     720:	bx	lr
    EncoderBase& EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
        {
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
     722:	ldr	r2, [pc, #24]	; (73c <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x44>)
                invert = 0b11;
     724:	movs	r3, #3
    EncoderBase& EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
        {
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
     726:	str	r2, [r0, #40]	; 0x28
                invert = 0b11;
     728:	str	r3, [r0, #16]
                break;
     72a:	bx	lr
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
                invert = 0b01;
                break;
            default:
                stateMachine = &stateMachineFull;
     72c:	ldr	r2, [pc, #16]	; (740 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x48>)
                invert = 0b00;
     72e:	movs	r3, #0
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
                invert = 0b01;
                break;
            default:
                stateMachine = &stateMachineFull;
     730:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     732:	str	r3, [r0, #16]
        }
        return *this;
    }
     734:	bx	lr
     736:	nop
     738:	.word	0x20000060
     73c:	.word	0x20000044
     740:	.word	0x2000007c

00000744 <EncoderTool::EncoderBase::setLimits(long, long, bool)>:

    EncoderBase& EncoderBase::setLimits(int32_t min, int32_t max, bool periodic)
    {
        if(min < max)
     744:	cmp	r1, r2
     746:	blt.n	756 <EncoderTool::EncoderBase::setLimits(long, long, bool)+0x12>
            this->maxVal = max;
            this->periodic = periodic;
        }
        else
        {
            this->minVal = INT32_MIN;
     748:	mov.w	r2, #2147483648	; 0x80000000
            this->maxVal = INT32_MAX;
     74c:	mvn.w	r3, #2147483648	; 0x80000000
            this->maxVal = max;
            this->periodic = periodic;
        }
        else
        {
            this->minVal = INT32_MIN;
     750:	str	r2, [r0, #4]
            this->maxVal = INT32_MAX;
     752:	str	r3, [r0, #8]
        }
        return *this;
    }
     754:	bx	lr

    EncoderBase& EncoderBase::setLimits(int32_t min, int32_t max, bool periodic)
    {
        if(min < max)
        {
            this->minVal = min;
     756:	str	r1, [r0, #4]
            this->maxVal = max;
     758:	str	r2, [r0, #8]
            this->periodic = periodic;
     75a:	strb	r3, [r0, #12]
     75c:	bx	lr
     75e:	nop

00000760 <EncoderTool::EncoderBase::begin(unsigned long, unsigned long)>:
    };


    void EncoderBase::begin(uint32_t phaseA, uint32_t phaseB)
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
     760:	orr.w	r1, r2, r1, lsl #1
     764:	ldr	r3, [r0, #16]
     766:	eors	r3, r1
     768:	strb	r3, [r0, #20]
     76a:	bx	lr

0000076c <EncoderTool::EncoderBase::update(unsigned long, unsigned long)>:
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     76c:	mov	r3, r0
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     76e:	orr.w	r1, r2, r1, lsl #1
     772:	ldr	r0, [r0, #16]
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     774:	push	{r4, r5, lr}
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     776:	ldr	r4, [r3, #40]	; 0x28
     778:	eors	r0, r1
     77a:	ldrb	r5, [r3, #20]
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     77c:	sub	sp, #36	; 0x24
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     77e:	add.w	r4, r4, r5, lsl #2
     782:	ldrb	r2, [r4, r0]
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state
     784:	and.w	r1, r2, #15
    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
     788:	and.w	r2, r2, #240	; 0xf0
        curState &=  0x0F;                                  // remove the direction info from state

        if(direction == UP)
     78c:	cmp	r2, #16
    {
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state
     78e:	strb	r1, [r3, #20]

        if(direction == UP)
     790:	beq.n	7cc <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x60>
            }
            value = maxVal;
            return false;
        }

        if (direction == DOWN)
     792:	cmp	r2, #32
     794:	beq.n	79e <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x32>
        if (direction == ERR)
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
     796:	movs	r4, #0
    }
     798:	mov	r0, r4
     79a:	add	sp, #36	; 0x24
     79c:	pop	{r4, r5, pc}
            return false;
        }

        if (direction == DOWN)
        {
            if (value > minVal)  // minVal = INT_MIN if no limits set
     79e:	ldr	r2, [r3, #0]
     7a0:	ldr	r1, [r3, #4]
     7a2:	cmp	r2, r1
     7a4:	ble.n	81e <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0xb2>
            {
                value--;
     7a6:	subs	r1, r2, #1
                if (callback != nullptr) callback(value, -1);
     7a8:	ldr	r2, [r3, #32]

        if (direction == DOWN)
        {
            if (value > minVal)  // minVal = INT_MIN if no limits set
            {
                value--;
     7aa:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, -1);
     7ac:	cbz	r2, 7c4 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     7ae:	mov.w	r4, #4294967295
     7b2:	add	r2, sp, #32
     7b4:	str	r1, [sp, #16]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
     7b6:	add.w	r0, r3, #24
     7ba:	str.w	r4, [r2, #-12]!
     7be:	add	r1, sp, #16
     7c0:	ldr	r3, [r3, #36]	; 0x24
     7c2:	blx	r3
                return true;
     7c4:	movs	r4, #1
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     7c6:	mov	r0, r4
     7c8:	add	sp, #36	; 0x24
     7ca:	pop	{r4, r5, pc}
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
     7cc:	ldr	r2, [r3, #0]
     7ce:	ldr	r1, [r3, #8]
     7d0:	cmp	r2, r1
     7d2:	blt.n	7fa <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x8e>
            {
                value++;
                if (callback != nullptr) callback(value, +1);
                return true;
            }
            if (periodic)       // if periodic, wrap to minVal, else stop counting
     7d4:	ldrb	r4, [r3, #12]
     7d6:	cmp	r4, #0
     7d8:	beq.n	844 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0xd8>
            {
                value = minVal;
     7da:	ldr	r1, [r3, #4]
                if (callback != nullptr) callback(value, +1);
     7dc:	ldr	r2, [r3, #32]
                if (callback != nullptr) callback(value, +1);
                return true;
            }
            if (periodic)       // if periodic, wrap to minVal, else stop counting
            {
                value = minVal;
     7de:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, +1);
     7e0:	cmp	r2, #0
     7e2:	beq.n	7c4 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     7e4:	movs	r5, #1
     7e6:	add	r2, sp, #32
     7e8:	str	r1, [sp, #8]
     7ea:	add.w	r0, r3, #24
     7ee:	str.w	r5, [r2, #-20]!
     7f2:	add	r1, sp, #8
     7f4:	ldr	r3, [r3, #36]	; 0x24
     7f6:	blx	r3
     7f8:	b.n	798 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x2c>

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
            {
                value++;
     7fa:	adds	r1, r2, #1
                if (callback != nullptr) callback(value, +1);
     7fc:	ldr	r2, [r3, #32]

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
            {
                value++;
     7fe:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, +1);
     800:	cmp	r2, #0
     802:	beq.n	7c4 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     804:	movs	r4, #1
     806:	add	r2, sp, #32
     808:	str	r1, [sp, #0]
     80a:	add.w	r0, r3, #24
     80e:	str.w	r4, [r2, #-28]!
     812:	mov	r1, sp
     814:	ldr	r3, [r3, #36]	; 0x24
     816:	blx	r3
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     818:	mov	r0, r4
     81a:	add	sp, #36	; 0x24
     81c:	pop	{r4, r5, pc}
            {
                value--;
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            if (periodic)        // if periodic, wrap to maxVal, else stop counting
     81e:	ldrb	r4, [r3, #12]
     820:	cbz	r4, 844 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0xd8>
            {
                value = maxVal;
     822:	ldr	r1, [r3, #8]
                if (callback != nullptr) callback(value, -1);
     824:	ldr	r2, [r3, #32]
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            if (periodic)        // if periodic, wrap to maxVal, else stop counting
            {
                value = maxVal;
     826:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, -1);
     828:	cmp	r2, #0
     82a:	beq.n	7c4 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     82c:	mov.w	r5, #4294967295
     830:	add	r2, sp, #32
     832:	str	r1, [sp, #24]
     834:	add.w	r0, r3, #24
     838:	str.w	r5, [r2, #-4]!
     83c:	add	r1, sp, #24
     83e:	ldr	r3, [r3, #36]	; 0x24
     840:	blx	r3
     842:	b.n	798 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x2c>
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     844:	mov	r0, r4
            {
                value = maxVal;
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            value = minVal;
     846:	str	r1, [r3, #0]
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     848:	add	sp, #36	; 0x24
     84a:	pop	{r4, r5, pc}

0000084c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     84c:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     84e:	ldr	r1, [pc, #80]	; (8a0 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     850:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     854:	ldr	r5, [pc, #76]	; (8a4 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     856:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     858:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     85c:	ldr	r6, [pc, #72]	; (8a8 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     85e:	ldr	r2, [pc, #76]	; (8ac <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     860:	add.w	r5, r5, r0, lsl #5
     864:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     866:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     868:	mov	r0, r5
     86a:	ldrh	r2, [r6, #0]
     86c:	bl	180c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     870:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     872:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     876:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
     878:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     87c:	ldr	r2, [pc, #48]	; (8b0 <rx_queue_transfer+0x64>)
     87e:	str	r3, [r2, #0]
		location += 32;
     880:	adds	r3, #32
	} while (location < end_addr);
     882:	cmp	r1, r3
     884:	bhi.n	87e <rx_queue_transfer+0x32>
	asm("dsb");
     886:	dsb	sy
	asm("isb");
     88a:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     88e:	movs	r0, #3
     890:	mov	r1, r5
     892:	bl	1864 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     896:	ldr	r3, [pc, #28]	; (8b4 <rx_queue_transfer+0x68>)
     898:	mov.w	r2, #131072	; 0x20000
     89c:	str	r2, [r3, #0]
     89e:	pop	{r3, r4, r5, r6, r7, pc}
     8a0:	.word	0x20200000
     8a4:	.word	0x20001220
     8a8:	.word	0x2000132e
     8ac:	.word	0xe000e18c
     8b0:	.word	0xe000ef5c
     8b4:	.word	0xe000e10c

000008b8 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     8b8:	ldr	r2, [pc, #144]	; (94c <rx_event+0x94>)
     8ba:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
     8bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     8c0:	ubfx	r3, r3, #16, #15
     8c4:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
     8c6:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     8c8:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     8ca:	cmp	r4, #0
     8cc:	ble.n	940 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
     8ce:	ldr	r1, [pc, #128]	; (950 <rx_event+0x98>)
		if (head != rx_tail) {
     8d0:	ldr	r2, [pc, #128]	; (954 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     8d2:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
     8d4:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     8d6:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     8d8:	ldr	r0, [pc, #124]	; (958 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
     8da:	ldr	r6, [pc, #128]	; (95c <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
     8dc:	cmp	r3, r2
     8de:	beq.n	8f0 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     8e0:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     8e4:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     8e8:	rsb	r2, r7, #512	; 0x200
     8ec:	cmp	r4, r2
     8ee:	bls.n	916 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     8f0:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
     8f2:	movs	r2, #0
     8f4:	ldr	r7, [pc, #104]	; (960 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     8f6:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
     8f8:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
     8fc:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
     900:	ldr	r6, [pc, #96]	; (964 <rx_event+0xac>)
     902:	ite	ls
     904:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     906:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
     908:	strb	r2, [r1, #0]
		rx_available += len;
     90a:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
     90c:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
     90e:	add	r4, r2
     910:	str	r4, [r6, #0]
     912:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     916:	ldr	r3, [pc, #80]	; (968 <rx_event+0xb0>)
     918:	add.w	r0, r7, r8, lsl #9
     91c:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     91e:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     920:	add.w	r1, r3, r5, lsl #9
     924:	add	r0, r3
     926:	bl	235c <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
     92a:	ldr	r2, [pc, #56]	; (964 <rx_event+0xac>)
				rx_queue_transfer(i);
     92c:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     92e:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     932:	ldr	r3, [r2, #0]
     934:	add	r4, r3
     936:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     938:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
     93c:	b.w	84c <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     940:	mov	r0, r5
	}
}
     942:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     946:	b.w	84c <rx_queue_transfer>
     94a:	nop
     94c:	.word	0x2000132e
     950:	.word	0x20001344
     954:	.word	0x20001320
     958:	.word	0x20001324
     95c:	.word	0x20001330
     960:	.word	0x20001208
     964:	.word	0x20001340
     968:	.word	0x20200000

0000096c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     96c:	ldr	r3, [pc, #120]	; (9e8 <usb_serial_flush_callback+0x7c>)
     96e:	ldrb	r2, [r3, #0]
     970:	cbnz	r2, 98a <usb_serial_flush_callback+0x1e>
     972:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
     976:	ldr	r2, [pc, #116]	; (9ec <usb_serial_flush_callback+0x80>)
     978:	ldrb	r2, [r2, #0]
     97a:	cbz	r2, 98a <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
     97c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
     980:	ldr	r5, [pc, #108]	; (9f0 <usb_serial_flush_callback+0x84>)
     982:	ldrh	r2, [r5, #0]
     984:	cbnz	r2, 98c <usb_serial_flush_callback+0x20>
     986:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     98a:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     98c:	ldr	r6, [pc, #100]	; (9f4 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     98e:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     992:	ldr	r7, [pc, #100]	; (9f8 <usb_serial_flush_callback+0x8c>)
     994:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     996:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     998:	ldr	r4, [pc, #96]	; (9fc <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     99a:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     99e:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     9a2:	mov	r0, r7
     9a4:	mov	r1, r4
     9a6:	bl	180c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     9aa:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     9ae:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
     9b2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     9b6:	ldr	r3, [pc, #72]	; (a00 <usb_serial_flush_callback+0x94>)
     9b8:	str	r1, [r3, #0]
		location += 32;
     9ba:	adds	r1, #32
	} while (location < end_addr);
     9bc:	cmp	r2, r1
     9be:	bhi.n	9b8 <usb_serial_flush_callback+0x4c>
	asm("dsb");
     9c0:	dsb	sy
	asm("isb");
     9c4:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     9c8:	movs	r0, #4
     9ca:	mov	r1, r7
     9cc:	bl	183c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     9d0:	ldrb	r3, [r6, #0]
     9d2:	ldr	r2, [pc, #32]	; (9f4 <usb_serial_flush_callback+0x88>)
     9d4:	adds	r3, #1
     9d6:	uxtb	r3, r3
     9d8:	cmp	r3, #3
     9da:	it	hi
     9dc:	movhi	r3, #0
     9de:	strb	r3, [r2, #0]
	tx_available = 0;
     9e0:	movs	r3, #0
     9e2:	strh	r3, [r5, #0]
     9e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     9e8:	.word	0x2000121a
     9ec:	.word	0x20001418
     9f0:	.word	0x20001346
     9f4:	.word	0x2000121b
     9f8:	.word	0x20001360
     9fc:	.word	0x20201000
     a00:	.word	0xe000ef70

00000a04 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
     a04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a08:	sub	sp, #20
     a0a:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     a0c:	str	r1, [sp, #4]
     a0e:	cmp	r1, #0
     a10:	beq.w	b58 <usb_serial_write.part.1+0x154>
     a14:	movs	r3, #0
     a16:	ldr.w	r8, [pc, #348]	; b74 <usb_serial_write.part.1+0x170>
     a1a:	ldr.w	r9, [pc, #332]	; b68 <usb_serial_write.part.1+0x164>
     a1e:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
     a20:	ldr	r6, [pc, #312]	; (b5c <usb_serial_write.part.1+0x158>)
     a22:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     a26:	ldr.w	sl, [pc, #336]	; b78 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
     a2a:	ldr.w	fp, [pc, #336]	; b7c <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
     a2e:	ldr	r2, [pc, #304]	; (b60 <usb_serial_write.part.1+0x15c>)
     a30:	ldrb	r4, [r2, #0]
     a32:	ldr	r2, [pc, #304]	; (b64 <usb_serial_write.part.1+0x160>)
     a34:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     a38:	cmp	r3, #0
     a3a:	bne.n	b1a <usb_serial_write.part.1+0x116>
     a3c:	mov	r5, r3
     a3e:	mov	r4, r3
     a40:	b.n	a6c <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     a42:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
     a46:	cbnz	r4, a4a <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
     a48:	ldr	r5, [r6, #0]
     a4a:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     a4c:	cmp	r3, #0
     a4e:	bne.n	b0e <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
     a50:	ldr	r3, [r6, #0]
     a52:	subs	r3, r3, r5
     a54:	cmp	r3, #120	; 0x78
     a56:	bhi.n	b4c <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     a58:	ldrb.w	r3, [sl]
     a5c:	cmp	r3, #0
     a5e:	beq.n	b0e <usb_serial_write.part.1+0x10a>
			yield();
     a60:	bl	2198 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     a64:	ldrh.w	r3, [r8]
     a68:	cmp	r3, #0
     a6a:	bne.n	b16 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
     a6c:	mov	r0, r7
     a6e:	bl	1888 <usb_transfer_status>
			if (!(status & 0x80)) {
     a72:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     a76:	ldr	r2, [pc, #240]	; (b68 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
     a78:	bne.n	a42 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     a7a:	mov.w	r3, #2048	; 0x800
     a7e:	ldr	r2, [pc, #224]	; (b60 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
     a80:	strb.w	r0, [r9]
     a84:	ldrb	r4, [r2, #0]
     a86:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     a88:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     a8c:	lsls	r4, r4, #11
		if (size >= tx_available) {
     a8e:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     a90:	ldr	r1, [pc, #216]	; (b6c <usb_serial_write.part.1+0x168>)
     a92:	add	r0, r4
		if (size >= tx_available) {
     a94:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     a96:	add	r0, r1
		if (size >= tx_available) {
     a98:	bcc.n	b22 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     a9a:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
     a9c:	ldr	r1, [sp, #8]
     a9e:	bl	235c <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
     aa2:	movs	r3, #0
     aa4:	mov	r1, r4
     aa6:	mov.w	r2, #2048	; 0x800
     aaa:	mov	r0, r7
     aac:	bl	180c <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     ab0:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     ab4:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
     ab8:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     abc:	str.w	r3, [fp]
		location += 32;
     ac0:	adds	r3, #32
	} while (location < end_addr);
     ac2:	cmp	r4, r3
     ac4:	bhi.n	abc <usb_serial_write.part.1+0xb8>
	asm("dsb");
     ac6:	dsb	sy
	asm("isb");
     aca:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
     ace:	movs	r0, #4
     ad0:	mov	r1, r7
     ad2:	bl	183c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
     ad6:	ldr	r3, [pc, #136]	; (b60 <usb_serial_write.part.1+0x15c>)
     ad8:	ldr	r2, [pc, #132]	; (b60 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
     ada:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     adc:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     ade:	ldr	r0, [pc, #144]	; (b70 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     ae0:	adds	r3, #1
     ae2:	uxtb	r3, r3
     ae4:	cmp	r3, #3
     ae6:	it	hi
     ae8:	movhi	r3, #0
     aea:	strb	r3, [r2, #0]
			size -= tx_available;
     aec:	ldrh.w	r2, [r8]
			sent += tx_available;
     af0:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
     af2:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
     af6:	add	r3, r2
     af8:	str	r3, [sp, #0]
			data += tx_available;
     afa:	ldr	r3, [sp, #8]
     afc:	add	r3, r2
     afe:	str	r3, [sp, #8]
     b00:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     b02:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     b06:	ldr	r1, [sp, #4]
     b08:	subs	r2, r1, r2
     b0a:	str	r2, [sp, #4]
     b0c:	bne.n	a2e <usb_serial_write.part.1+0x2a>
     b0e:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     b10:	add	sp, #20
     b12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b16:	ldr	r2, [pc, #72]	; (b60 <usb_serial_write.part.1+0x15c>)
     b18:	ldrb	r4, [r2, #0]
     b1a:	mov	r2, r3
     b1c:	rsb	r0, r3, #2048	; 0x800
     b20:	b.n	a8c <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
     b22:	ldr	r4, [sp, #4]
     b24:	ldr	r1, [sp, #8]
     b26:	mov	r2, r4
     b28:	str	r3, [sp, #12]
     b2a:	bl	235c <memcpy>
			tx_available -= size;
     b2e:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     b30:	ldr	r2, [pc, #60]	; (b70 <usb_serial_write.part.1+0x16c>)
     b32:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
     b36:	subs	r3, r3, r4
     b38:	strh.w	r3, [r8]
     b3c:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     b3e:	str.w	r1, [r2, #132]	; 0x84
     b42:	mov	r0, r3
     b44:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     b46:	add	sp, #20
     b48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     b4c:	movs	r3, #1
				return sent;
     b4e:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     b50:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     b52:	add	sp, #20
     b54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     b58:	ldr	r0, [sp, #4]
     b5a:	b.n	b10 <usb_serial_write.part.1+0x10c>
     b5c:	.word	0x20001424
     b60:	.word	0x2000121b
     b64:	.word	0x20001360
     b68:	.word	0x20001345
     b6c:	.word	0x20201000
     b70:	.word	0x402e0000
     b74:	.word	0x20001346
     b78:	.word	0x20001418
     b7c:	.word	0xe000ef70

00000b80 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
     b80:	bx	lr
     b82:	nop

00000b84 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     b84:	ldr	r3, [pc, #196]	; (c4c <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
     b86:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     b8a:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
     b8c:	ldr	r7, [pc, #192]	; (c50 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     b8e:	cmp	r3, #0
     b90:	beq.n	c3c <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
     b92:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
     b96:	ldr.w	r8, [pc, #236]	; c84 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
     b9a:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
     b9c:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     ba0:	movs	r1, #0
     ba2:	movs	r2, #128	; 0x80
     ba4:	ldr	r0, [pc, #172]	; (c54 <usb_serial_configure+0xd0>)
	tx_head = 0;
     ba6:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     ba8:	ldr	r6, [pc, #172]	; (c58 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     baa:	bl	2e3c <memset>
	tx_head = 0;
     bae:	ldr	r4, [pc, #172]	; (c5c <usb_serial_configure+0xd8>)
	tx_available = 0;
     bb0:	ldr	r3, [pc, #172]	; (c60 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
     bb2:	mov	r1, r5
     bb4:	mov.w	r2, #256	; 0x100
     bb8:	ldr	r0, [pc, #168]	; (c64 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
     bba:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     bbc:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
     bbe:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     bc0:	bl	2e3c <memset>
	memset(rx_count, 0, sizeof(rx_count));
     bc4:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     bc6:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     bc8:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     bca:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     bcc:	str	r5, [r6, #8]
     bce:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     bd0:	ldr	r1, [pc, #148]	; (c68 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     bd2:	ldr	r6, [pc, #152]	; (c6c <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
     bd4:	ldr	r0, [pc, #152]	; (c70 <usb_serial_configure+0xec>)
	rx_available = 0;
     bd6:	ldr.w	lr, [pc, #176]	; c88 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     bda:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     bdc:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
     bde:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     be0:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     be2:	str	r5, [r6, #0]
     be4:	str	r5, [r6, #4]
     be6:	str	r5, [r6, #8]
     be8:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
     bea:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     bee:	bl	17a4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
     bf2:	ldrh.w	r1, [r8]
     bf6:	mov	r2, r5
     bf8:	ldr	r3, [pc, #120]	; (c74 <usb_serial_configure+0xf0>)
     bfa:	movs	r0, #3
     bfc:	bl	1740 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
     c00:	mov	r3, r5
     c02:	ldrh	r1, [r7, #0]
     c04:	movs	r2, #1
     c06:	movs	r0, #4
     c08:	bl	17a4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     c0c:	mov	r0, r4
     c0e:	adds	r4, #1
     c10:	bl	84c <rx_queue_transfer>
     c14:	cmp	r4, #8
     c16:	bne.n	c0c <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
     c18:	ldr	r3, [pc, #92]	; (c78 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
     c1a:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     c1c:	ldr	r0, [pc, #92]	; (c7c <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
     c1e:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     c20:	ldr	r4, [pc, #92]	; (c80 <usb_serial_configure+0xfc>)
     c22:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
     c24:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
     c28:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
     c2c:	ldr.w	r2, [r3, #328]	; 0x148
     c30:	orr.w	r2, r2, #16777216	; 0x1000000
     c34:	str.w	r2, [r3, #328]	; 0x148
     c38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     c3c:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
     c3e:	ldr.w	r8, [pc, #68]	; c84 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     c42:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
     c44:	strh.w	r3, [r8]
     c48:	b.n	ba0 <usb_serial_configure+0x1c>
     c4a:	nop
     c4c:	.word	0x200013f0
     c50:	.word	0x20001218
     c54:	.word	0x20001360
     c58:	.word	0x20001330
     c5c:	.word	0x2000121b
     c60:	.word	0x20001346
     c64:	.word	0x20001220
     c68:	.word	0x20001344
     c6c:	.word	0x20001208
     c70:	.word	0x20001320
     c74:	.word	0x000008b9
     c78:	.word	0x402e0000
     c7c:	.word	0x200013e0
     c80:	.word	0x0000096d
     c84:	.word	0x2000132e
     c88:	.word	0x20001340

00000c8c <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     c8c:	ldr	r3, [pc, #196]	; (d54 <usb_serial_read+0xc8>)
     c8e:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     c92:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     c96:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     c98:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     c9a:	ldr	r3, [pc, #188]	; (d58 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     c9c:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     c9e:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     ca0:	cmp	r1, #0
     ca2:	beq.n	d4c <usb_serial_read+0xc0>
     ca4:	ldr	r3, [pc, #180]	; (d5c <usb_serial_read+0xd0>)
     ca6:	uxtb	r4, r4
     ca8:	ldrb	r3, [r3, #0]
     caa:	cmp	r4, r3
     cac:	beq.n	d50 <usb_serial_read+0xc4>
     cae:	mov	sl, r0
     cb0:	movs	r7, #0
     cb2:	ldr.w	fp, [pc, #192]	; d74 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
     cb6:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     cb8:	ldr	r3, [pc, #164]	; (d60 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
     cba:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     cbe:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     cc0:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     cc2:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
     cc4:	ldr	r3, [pc, #156]	; (d64 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     cc6:	it	cs
     cc8:	movcs	r4, #0
		uint32_t i = rx_list[tail];
     cca:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     ccc:	ldr	r3, [pc, #144]	; (d60 <usb_serial_read+0xd4>)
     cce:	ldrh.w	lr, [r3, r5, lsl #1]
     cd2:	ldr	r3, [pc, #148]	; (d68 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     cd4:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     cd8:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     cdc:	ldr	r3, [pc, #140]	; (d6c <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     cde:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     ce2:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     ce4:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     ce6:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
     ce8:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     cea:	bcs.n	d20 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
     cec:	add.w	r1, lr, r5, lsl #9
     cf0:	mov	r2, r8
     cf2:	add	r1, r3
     cf4:	bl	235c <memcpy>
			rx_available -= len;
			rx_index[i] += len;
     cf8:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     cfa:	ldr.w	r1, [fp]
     cfe:	mov	r0, r9
			rx_index[i] += len;
     d00:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     d04:	rsb	r1, r8, r1
			rx_index[i] += len;
     d08:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     d0a:	str.w	r1, [fp]
			rx_index[i] += len;
     d0e:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
     d12:	ldr	r3, [pc, #92]	; (d70 <usb_serial_read+0xe4>)
     d14:	mov.w	r2, #131072	; 0x20000
     d18:	str	r2, [r3, #0]
	return count;
}
     d1a:	add	sp, #12
     d1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     d20:	bl	235c <memcpy>
			p += avail;
			rx_available -= avail;
     d24:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     d28:	uxtb	r3, r4
			rx_queue_transfer(i);
     d2a:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
     d2c:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
     d2e:	add	sl, r6
			rx_available -= avail;
     d30:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     d34:	ldr	r2, [pc, #32]	; (d58 <usb_serial_read+0xcc>)
     d36:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
     d38:	bl	84c <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     d3c:	cmp	r9, r7
     d3e:	bls.n	d48 <usb_serial_read+0xbc>
     d40:	ldr	r3, [pc, #24]	; (d5c <usb_serial_read+0xd0>)
     d42:	ldrb	r3, [r3, #0]
     d44:	cmp	r4, r3
     d46:	bne.n	cb6 <usb_serial_read+0x2a>
     d48:	mov	r0, r7
     d4a:	b.n	d12 <usb_serial_read+0x86>
     d4c:	mov	r0, r1
     d4e:	b.n	d12 <usb_serial_read+0x86>
     d50:	movs	r0, #0
     d52:	b.n	d12 <usb_serial_read+0x86>
     d54:	.word	0xe000e18c
     d58:	.word	0x20001320
     d5c:	.word	0x20001344
     d60:	.word	0x20001208
     d64:	.word	0x20001324
     d68:	.word	0x20001330
     d6c:	.word	0x20200000
     d70:	.word	0xe000e10c
     d74:	.word	0x20001340

00000d78 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     d78:	ldr	r3, [pc, #44]	; (da8 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
     d7a:	ldr	r2, [pc, #48]	; (dac <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     d7c:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
     d7e:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     d80:	uxtb	r3, r3
	if (tail == rx_head) return -1;
     d82:	cmp	r3, r2
     d84:	beq.n	da2 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
     d86:	adds	r3, #1
	uint32_t i = rx_list[tail];
     d88:	ldr	r0, [pc, #36]	; (db0 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     d8a:	ldr	r2, [pc, #40]	; (db4 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     d8c:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     d8e:	ldr	r1, [pc, #40]	; (db8 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     d90:	it	cs
     d92:	movcs	r3, #0
	uint32_t i = rx_list[tail];
     d94:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     d96:	ldrh.w	r1, [r1, r3, lsl #1]
     d9a:	add.w	r3, r2, r3, lsl #9
     d9e:	ldrb	r0, [r3, r1]
     da0:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
     da2:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
     da6:	bx	lr
     da8:	.word	0x20001320
     dac:	.word	0x20001344
     db0:	.word	0x20001324
     db4:	.word	0x20200000
     db8:	.word	0x20001208

00000dbc <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
     dbc:	ldr	r3, [pc, #4]	; (dc4 <usb_serial_available+0x8>)
     dbe:	ldr	r0, [r3, #0]
}
     dc0:	bx	lr
     dc2:	nop
     dc4:	.word	0x20001340

00000dc8 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
     dc8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
     dcc:	ldr	r6, [pc, #84]	; (e24 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
     dce:	ldr	r5, [pc, #88]	; (e28 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     dd0:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
     dd2:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     dd4:	uxtb	r4, r4
	while (tail != rx_head) {
     dd6:	cmp	r4, r3
     dd8:	beq.n	e1e <usb_serial_flush_input+0x56>
     dda:	ldr.w	r9, [pc, #84]	; e30 <usb_serial_flush_input+0x68>
     dde:	ldr.w	fp, [pc, #84]	; e34 <usb_serial_flush_input+0x6c>
     de2:	ldr.w	r8, [pc, #84]	; e38 <usb_serial_flush_input+0x70>
     de6:	ldr	r7, [pc, #68]	; (e2c <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
     de8:	adds	r4, #1
     dea:	cmp	r4, #8
     dec:	uxtb.w	sl, r4
     df0:	bls.n	df6 <usb_serial_flush_input+0x2e>
     df2:	movs	r4, #0
     df4:	mov	sl, r4
		uint32_t i = rx_list[tail];
     df6:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
     dfa:	ldr.w	r2, [fp]
     dfe:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
     e02:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
     e04:	ldrh.w	r1, [r7, r1, lsl #1]
     e08:	subs	r3, r3, r1
     e0a:	subs	r3, r2, r3
     e0c:	str.w	r3, [fp]
		rx_queue_transfer(i);
     e10:	bl	84c <rx_queue_transfer>
		rx_tail = tail;
     e14:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
     e18:	ldrb	r3, [r5, #0]
     e1a:	cmp	r4, r3
     e1c:	bne.n	de8 <usb_serial_flush_input+0x20>
     e1e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e22:	nop
     e24:	.word	0x20001320
     e28:	.word	0x20001344
     e2c:	.word	0x20001208
     e30:	.word	0x20001324
     e34:	.word	0x20001340
     e38:	.word	0x20001330

00000e3c <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     e3c:	push	{lr}
     e3e:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
     e40:	movs	r1, #1
     e42:	add.w	r0, sp, #7
     e46:	bl	c8c <usb_serial_read>
     e4a:	cbz	r0, e56 <usb_serial_getchar+0x1a>
     e4c:	ldrb.w	r0, [sp, #7]
	return -1;
}
     e50:	add	sp, #12
     e52:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
     e56:	mov.w	r0, #4294967295
     e5a:	b.n	e50 <usb_serial_getchar+0x14>

00000e5c <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     e5c:	ldr	r3, [pc, #36]	; (e84 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     e5e:	push	{lr}
     e60:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     e62:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     e64:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     e68:	cbnz	r3, e74 <usb_serial_putchar+0x18>
     e6a:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
     e6e:	add	sp, #12
     e70:	ldr.w	pc, [sp], #4
     e74:	movs	r1, #1
     e76:	add.w	r0, sp, #7
     e7a:	bl	a04 <usb_serial_write.part.1>
     e7e:	add	sp, #12
     e80:	ldr.w	pc, [sp], #4
     e84:	.word	0x20001418

00000e88 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     e88:	ldr	r3, [pc, #16]	; (e9c <usb_serial_write+0x14>)
     e8a:	ldrb	r3, [r3, #0]
     e8c:	and.w	r2, r3, #255	; 0xff
     e90:	cbz	r3, e96 <usb_serial_write+0xe>
     e92:	b.w	a04 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     e96:	mov	r0, r2
     e98:	bx	lr
     e9a:	nop
     e9c:	.word	0x20001418

00000ea0 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
     ea0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     ea4:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
     ea6:	ldr.w	r8, [pc, #64]	; ee8 <usb_serial_write_buffer_free+0x48>
     eaa:	movs	r3, #1
     eac:	ldr	r5, [pc, #48]	; (ee0 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
     eae:	mov	r7, r4
     eb0:	ldr	r6, [pc, #48]	; (ee4 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
     eb2:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     eb6:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     eb8:	mov	r0, r5
     eba:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     ebc:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     ebe:	add.w	r4, r4, #1
		if (i == tx_head) continue;
     ec2:	beq.n	ed0 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     ec4:	bl	1888 <usb_transfer_status>
     ec8:	lsls	r3, r0, #24
     eca:	it	pl
     ecc:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     ed0:	cmp	r4, #4
     ed2:	bne.n	eb6 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     ed4:	movs	r3, #0
	return sum;
}
     ed6:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     ed8:	strb.w	r3, [r8]
	return sum;
}
     edc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ee0:	.word	0x20001360
     ee4:	.word	0x2000121b
     ee8:	.word	0x2000121a

00000eec <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
     eec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
     ef0:	ldr	r3, [pc, #124]	; (f70 <usb_serial_flush_output+0x84>)
     ef2:	ldrb	r3, [r3, #0]
     ef4:	cbz	r3, efc <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
     ef6:	ldr	r5, [pc, #124]	; (f74 <usb_serial_flush_output+0x88>)
     ef8:	ldrh	r2, [r5, #0]
     efa:	cbnz	r2, f00 <usb_serial_flush_output+0x14>
     efc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     f00:	ldr.w	r8, [pc, #132]	; f88 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     f04:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     f08:	ldr	r6, [pc, #108]	; (f78 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     f0a:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
     f0e:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     f12:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     f14:	ldr	r4, [pc, #100]	; (f7c <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     f16:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     f18:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     f1c:	ldr	r7, [pc, #96]	; (f80 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     f1e:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     f22:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     f24:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     f28:	mov	r1, r4
     f2a:	bl	180c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     f2e:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     f32:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
     f36:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     f3a:	ldr	r3, [pc, #72]	; (f84 <usb_serial_flush_output+0x98>)
     f3c:	str	r1, [r3, #0]
		location += 32;
     f3e:	adds	r1, #32
	} while (location < end_addr);
     f40:	cmp	r2, r1
     f42:	bhi.n	f3c <usb_serial_flush_output+0x50>
	asm("dsb");
     f44:	dsb	sy
	asm("isb");
     f48:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     f4c:	movs	r0, #4
     f4e:	mov	r1, r6
     f50:	bl	183c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     f54:	ldrb.w	r3, [r8]
     f58:	ldr	r2, [pc, #44]	; (f88 <usb_serial_flush_output+0x9c>)
     f5a:	adds	r3, #1
     f5c:	uxtb	r3, r3
     f5e:	cmp	r3, #3
     f60:	it	hi
     f62:	movhi	r3, #0
     f64:	strb	r3, [r2, #0]
	tx_available = 0;
     f66:	movs	r3, #0
     f68:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
     f6a:	strb	r3, [r7, #0]
     f6c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     f70:	.word	0x20001418
     f74:	.word	0x20001346
     f78:	.word	0x20001360
     f7c:	.word	0x20201000
     f80:	.word	0x2000121a
     f84:	.word	0xe000ef70
     f88:	.word	0x2000121b

00000f8c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     f8c:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
     f8e:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     f90:	cbz	r3, f9a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     f92:	ldr	r3, [r2, #4]
     f94:	orr.w	r3, r3, #32768	; 0x8000
     f98:	str	r3, [r2, #4]
	}
	__disable_irq();
     f9a:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     f9c:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     f9e:	cbz	r4, fd8 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     fa0:	ldr	r3, [pc, #80]	; (ff4 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
     fa2:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     fa4:	ldr.w	r4, [r3, #432]	; 0x1b0
     fa8:	tst	r4, r1
     faa:	bne.n	fec <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
     fac:	ldr	r5, [pc, #72]	; (ff8 <schedule_transfer+0x6c>)
     fae:	ldr	r7, [r5, #0]
     fb0:	b.n	fbc <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     fb2:	ldr	r4, [r5, #0]
     fb4:	subs	r4, r4, r7
     fb6:	cmp.w	r4, #2400	; 0x960
     fba:	bcs.n	fd4 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     fbc:	ldr.w	r4, [r3, #320]	; 0x140
     fc0:	orr.w	r4, r4, #16384	; 0x4000
     fc4:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     fc8:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     fcc:	ldr.w	r4, [r3, #320]	; 0x140
     fd0:	lsls	r4, r4, #17
     fd2:	bpl.n	fb2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     fd4:	tst	r1, r6
     fd6:	bne.n	fec <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
     fd8:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
     fda:	ldr	r4, [pc, #24]	; (ff4 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
     fdc:	str	r2, [r0, #8]
	endpoint->status = 0;
     fde:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
     fe0:	ldr.w	r3, [r4, #432]	; 0x1b0
     fe4:	orrs	r1, r3
     fe6:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     fea:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
     fec:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     fee:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     ff0:	pop	{r4, r5, r6, r7}
     ff2:	bx	lr
     ff4:	.word	0x402e0000
     ff8:	.word	0xe0001004

00000ffc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     ffc:	push	{r4, r5, r6, lr}
     ffe:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1000:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    1002:	cbz	r0, 102a <run_callbacks+0x2e>
    1004:	mov	r2, r0
    1006:	movs	r4, #0
    1008:	b.n	1012 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    100a:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    100c:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    100e:	cmp	r2, #1
    1010:	beq.n	102c <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    1012:	ldr	r3, [r2, #4]
    1014:	ands.w	r3, r3, #128	; 0x80
    1018:	beq.n	100a <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    101a:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    101c:	cbz	r4, 102a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    101e:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    1020:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    1022:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1024:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    1026:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1028:	bne.n	101e <run_callbacks+0x22>
    102a:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    102c:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    102e:	str	r3, [r6, #52]	; 0x34
			break;
    1030:	b.n	101c <run_callbacks+0x20>
    1032:	nop

00001034 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1034:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    1036:	cbnz	r1, 1072 <endpoint0_transmit.constprop.1+0x3e>
    1038:	ldr	r4, [pc, #132]	; (10c0 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    103a:	ldr	r1, [pc, #136]	; (10c4 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    103c:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    103e:	ldr	r3, [pc, #136]	; (10c8 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1040:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1042:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1046:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1048:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    104a:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    104c:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    104e:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    1050:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1052:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1056:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    105a:	ldr	r5, [pc, #112]	; (10cc <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    105c:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1060:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    1062:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1066:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    1068:	ldr.w	r3, [r2, #432]	; 0x1b0
    106c:	cmp	r3, #0
    106e:	bne.n	1068 <endpoint0_transmit.constprop.1+0x34>
}
    1070:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1072:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1074:	ldr	r3, [pc, #88]	; (10d0 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1076:	ldr	r5, [pc, #80]	; (10c8 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1078:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    107a:	ldr	r4, [pc, #68]	; (10c0 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    107c:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1080:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1082:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1084:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1086:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    108a:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    108c:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1090:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1092:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1096:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    109a:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    109e:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    10a0:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    10a2:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    10a6:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    10aa:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    10ae:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    10b0:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    10b2:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    10b6:	ldr.w	r3, [r2, #432]	; 0x1b0
    10ba:	cmp	r3, #0
    10bc:	bne.n	10b6 <endpoint0_transmit.constprop.1+0x82>
    10be:	b.n	103a <endpoint0_transmit.constprop.1+0x6>
    10c0:	.word	0x20003000
    10c4:	.word	0x20002020
    10c8:	.word	0x402e0000
    10cc:	.word	0x200013f4
    10d0:	.word	0x20002000

000010d4 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    10d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    10d8:	ldr	r4, [pc, #688]	; (138c <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    10da:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    10dc:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    10e0:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    10e4:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    10e8:	beq.n	11a8 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    10ea:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    10ee:	cmp	r3, #0
    10f0:	beq.n	119e <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    10f2:	mov.w	fp, #65537	; 0x10001
    10f6:	ldr.w	r9, [pc, #700]	; 13b4 <isr+0x2e0>
    10fa:	ldr	r6, [pc, #660]	; (1390 <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    10fc:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    10fe:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    1100:	str.w	r3, [r4, #428]	; 0x1ac
    1104:	ldr	r0, [r6, #40]	; 0x28
    1106:	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1108:	ldr.w	r3, [r4, #320]	; 0x140
    110c:	orr.w	r3, r3, #8192	; 0x2000
    1110:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    1114:	ldr.w	r3, [r4, #320]	; 0x140
    1118:	lsls	r7, r3, #18
    111a:	bpl.n	1108 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    111c:	ldr.w	r3, [r5, #320]	; 0x140
    1120:	bic.w	r3, r3, #8192	; 0x2000
    1124:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1128:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    112c:	ldr.w	r3, [r4, #436]	; 0x1b4
    1130:	ands.w	r3, r3, #65537	; 0x10001
    1134:	bne.n	112c <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1136:	uxth	r1, r0
    1138:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    113c:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1140:	cmp	r1, r7
    1142:	bhi.w	12ae <isr+0x1da>
    1146:	cmp.w	r1, #1664	; 0x680
    114a:	bcs.w	1520 <isr+0x44c>
    114e:	cmp.w	r1, #258	; 0x102
    1152:	beq.w	142c <isr+0x358>
    1156:	bhi.w	133a <isr+0x266>
    115a:	cmp	r1, #128	; 0x80
    115c:	beq.w	1412 <isr+0x33e>
    1160:	cmp	r1, #130	; 0x82
    1162:	bne.w	132a <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1166:	uxth	r2, r2
    1168:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    116c:	cmp	r1, #7
    116e:	bhi.w	132a <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1172:	lsls	r1, r1, #2
    1174:	ldr	r0, [pc, #540]	; (1394 <isr+0x2c0>)
		reply_buffer[0] = 0;
    1176:	ldr	r7, [pc, #544]	; (1398 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1178:	add	r0, r1
    117a:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    117c:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    117e:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    1180:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1182:	bpl.w	159e <isr+0x4ca>
    1186:	lsls	r2, r1, #15
    1188:	bpl.n	118e <isr+0xba>
			reply_buffer[0] = 1;
    118a:	movs	r3, #1
    118c:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    118e:	movs	r1, #2
    1190:	ldr	r0, [pc, #516]	; (1398 <isr+0x2c4>)
    1192:	bl	1034 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1196:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    119a:	cmp	r3, #0
    119c:	bne.n	1100 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    119e:	ldr	r2, [pc, #492]	; (138c <isr+0x2b8>)
    11a0:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    11a4:	cmp	r3, #0
    11a6:	bne.n	124a <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    11a8:	tst.w	r8, #64	; 0x40
    11ac:	beq.n	11e0 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    11ae:	ldr	r3, [pc, #476]	; (138c <isr+0x2b8>)
    11b0:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    11b4:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    11b6:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    11ba:	ldr.w	r1, [r3, #444]	; 0x1bc
    11be:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    11c2:	ldr.w	r4, [r2, #432]	; 0x1b0
    11c6:	ldr	r3, [pc, #452]	; (138c <isr+0x2b8>)
    11c8:	cmp	r4, #0
    11ca:	bne.n	11c2 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    11cc:	mov.w	r2, #4294967295
    11d0:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    11d4:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    11d8:	bl	b80 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    11dc:	ldr	r3, [pc, #444]	; (139c <isr+0x2c8>)
    11de:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    11e0:	tst.w	r8, #16777216	; 0x1000000
    11e4:	beq.n	11ee <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    11e6:	ldr	r3, [pc, #440]	; (13a0 <isr+0x2cc>)
    11e8:	ldr	r3, [r3, #0]
    11ea:	cbz	r3, 11ee <isr+0x11a>
    11ec:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    11ee:	tst.w	r8, #33554432	; 0x2000000
    11f2:	beq.n	11fc <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    11f4:	ldr	r3, [pc, #428]	; (13a4 <isr+0x2d0>)
    11f6:	ldr	r3, [r3, #0]
    11f8:	cbz	r3, 11fc <isr+0x128>
    11fa:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    11fc:	tst.w	r8, #4
    1200:	beq.n	1214 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1202:	ldr	r3, [pc, #392]	; (138c <isr+0x2b8>)
    1204:	ldr.w	r3, [r3, #388]	; 0x184
    1208:	ands.w	r3, r3, #512	; 0x200
    120c:	beq.n	12a8 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    120e:	ldr	r3, [pc, #408]	; (13a8 <isr+0x2d4>)
    1210:	movs	r2, #1
    1212:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1214:	ldr	r3, [pc, #372]	; (138c <isr+0x2b8>)
    1216:	ldr.w	r2, [r3, #328]	; 0x148
    121a:	lsls	r2, r2, #24
    121c:	bpl.n	1244 <isr+0x170>
    121e:	tst.w	r8, #128	; 0x80
    1222:	beq.n	1244 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    1224:	ldr	r1, [pc, #388]	; (13ac <isr+0x2d8>)
    1226:	ldrb	r2, [r1, #0]
    1228:	cbz	r2, 1244 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    122a:	subs	r2, #1
    122c:	uxtb	r2, r2
    122e:	strb	r2, [r1, #0]
    1230:	cbnz	r2, 1244 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    1232:	ldr	r1, [pc, #380]	; (13b0 <isr+0x2dc>)
    1234:	ldrb	r2, [r1, #0]
    1236:	and.w	r2, r2, #251	; 0xfb
    123a:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    123c:	cmp	r2, #0
    123e:	beq.w	16a6 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    1242:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    1244:	add	sp, #12
    1246:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    124a:	ldr	r1, [pc, #360]	; (13b4 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    124c:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1250:	ldr	r0, [r1, #0]
    1252:	tst	r3, r0
    1254:	bne.w	1624 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    1258:	ldr	r2, [pc, #320]	; (139c <isr+0x2c8>)
    125a:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    125c:	ands	r5, r3
    125e:	beq.n	11a8 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    1260:	lsrs	r7, r5, #16
    1262:	beq.n	1284 <isr+0x1b0>
    1264:	ldr	r6, [pc, #296]	; (1390 <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    1266:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    126a:	rbit	r4, r7
    126e:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1272:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    1276:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    127a:	adds	r0, #64	; 0x40
    127c:	bl	ffc <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    1280:	bics	r7, r4
    1282:	bne.n	126a <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    1284:	uxth	r5, r5
				while(rx) {
    1286:	cmp	r5, #0
    1288:	beq.n	11a8 <isr+0xd4>
    128a:	ldr	r6, [pc, #260]	; (1390 <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    128c:	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    128e:	rbit	r4, r5
    1292:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    1296:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    129a:	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    129e:	bl	ffc <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    12a2:	bics	r5, r4
    12a4:	bne.n	128e <isr+0x1ba>
    12a6:	b.n	11a8 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    12a8:	ldr	r2, [pc, #252]	; (13a8 <isr+0x2d4>)
    12aa:	strb	r3, [r2, #0]
    12ac:	b.n	1214 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    12ae:	movw	r7, #8225	; 0x2021
    12b2:	cmp	r1, r7
    12b4:	beq.n	1322 <isr+0x24e>
    12b6:	bhi.w	13cc <isr+0x2f8>
    12ba:	cmp.w	r1, #2176	; 0x880
    12be:	beq.w	1504 <isr+0x430>
    12c2:	cmp.w	r1, #2304	; 0x900
    12c6:	bne.n	132a <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    12c8:	ubfx	r0, r0, #16, #8
    12cc:	ldr	r2, [pc, #232]	; (13b8 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    12ce:	ldr	r1, [pc, #236]	; (13bc <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    12d0:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    12d2:	ldr	r7, [pc, #236]	; (13c0 <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    12d4:	ldr	r2, [pc, #236]	; (13c4 <isr+0x2f0>)
    12d6:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    12d8:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    12dc:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    12e0:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    12e4:	bl	b84 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    12e8:	ldr	r2, [pc, #220]	; (13c8 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    12ea:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    12ec:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    12ee:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    12f0:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    12f2:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    12f4:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    12f6:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    12f8:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    12fc:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1300:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1302:	orr.w	r2, r1, #65536	; 0x10000
    1306:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    130a:	ldr	r2, [pc, #168]	; (13b4 <isr+0x2e0>)
    130c:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    130e:	ldr.w	r3, [r4, #432]	; 0x1b0
    1312:	cmp	r3, #0
    1314:	bne.n	130e <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1316:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    131a:	cmp	r3, #0
    131c:	bne.w	1100 <isr+0x2c>
    1320:	b.n	119e <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    1322:	lsrs	r1, r2, #16
    1324:	cmp	r1, #7
    1326:	beq.w	15a6 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    132a:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    132e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1332:	cmp	r3, #0
    1334:	bne.w	1100 <isr+0x2c>
    1338:	b.n	119e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    133a:	movw	r7, #770	; 0x302
    133e:	cmp	r1, r7
    1340:	beq.w	14a4 <isr+0x3d0>
    1344:	cmp.w	r1, #1280	; 0x500
    1348:	bne.n	132a <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    134a:	ldr	r2, [pc, #124]	; (13c8 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    134c:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    134e:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1350:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1352:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1354:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1356:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1358:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    135c:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1360:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1362:	orr.w	r3, r1, #65536	; 0x10000
    1366:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    136a:	ldr.w	r3, [r4, #432]	; 0x1b0
    136e:	cmp	r3, #0
    1370:	bne.n	136a <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1372:	lsrs	r3, r0, #16
    1374:	lsls	r3, r3, #25
    1376:	orr.w	r3, r3, #16777216	; 0x1000000
    137a:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    137e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1382:	cmp	r3, #0
    1384:	bne.w	1100 <isr+0x2c>
    1388:	b.n	119e <isr+0xca>
    138a:	nop
    138c:	.word	0x402e0000
    1390:	.word	0x20003000
    1394:	.word	0x402e01c0
    1398:	.word	0x20001408
    139c:	.word	0x200013e4
    13a0:	.word	0x200013e0
    13a4:	.word	0x200013ec
    13a8:	.word	0x200013f0
    13ac:	.word	0x200013f8
    13b0:	.word	0x200013e8
    13b4:	.word	0x200013f4
    13b8:	.word	0x20001418
    13bc:	.word	0x000200c8
    13c0:	.word	0x00cc0002
    13c4:	.word	0x00c80002
    13c8:	.word	0x20002020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    13cc:	movw	r3, #8737	; 0x2221
    13d0:	cmp	r1, r3
    13d2:	beq.n	148c <isr+0x3b8>
    13d4:	movw	r3, #8993	; 0x2321
    13d8:	cmp	r1, r3
    13da:	bne.n	132a <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    13dc:	ldr	r3, [pc, #724]	; (16b4 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    13de:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    13e0:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    13e2:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    13e4:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    13e6:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    13e8:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    13ea:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    13ec:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    13f0:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    13f4:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    13f6:	orr.w	r3, r2, #65536	; 0x10000
    13fa:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    13fe:	ldr.w	r3, [r4, #432]	; 0x1b0
    1402:	cmp	r3, #0
    1404:	bne.n	13fe <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1406:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    140a:	cmp	r3, #0
    140c:	bne.w	1100 <isr+0x2c>
    1410:	b.n	119e <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1412:	ldr	r2, [pc, #676]	; (16b8 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    1414:	movs	r1, #2
    1416:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1418:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    141a:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    141c:	bl	1034 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1420:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1424:	cmp	r3, #0
    1426:	bne.w	1100 <isr+0x2c>
    142a:	b.n	119e <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    142c:	uxth	r2, r2
    142e:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1432:	cmp	r3, #7
    1434:	bhi.w	132a <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1438:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    143c:	mov.w	r3, r3, lsl #2
    1440:	ldr	r2, [pc, #632]	; (16bc <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1442:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1446:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    144a:	add	r2, r3
    144c:	ldr	r3, [r2, #0]
    144e:	ite	ne
    1450:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1454:	biceq.w	r3, r3, #1
    1458:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    145a:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    145c:	ldr	r3, [pc, #596]	; (16b4 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    145e:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1460:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1462:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1464:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1466:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    146a:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    146e:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1470:	orr.w	r3, r2, #65536	; 0x10000
    1474:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1478:	ldr.w	r3, [r4, #432]	; 0x1b0
    147c:	cmp	r3, #0
    147e:	bne.n	1478 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1480:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1484:	cmp	r3, #0
    1486:	bne.w	1100 <isr+0x2c>
    148a:	b.n	119e <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    148c:	uxth	r2, r2
    148e:	cmp	r2, #0
    1490:	bne.n	13dc <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1492:	ldr	r3, [pc, #556]	; (16c0 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    1494:	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1498:	ldr	r2, [pc, #552]	; (16c4 <isr+0x5f0>)
    149a:	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    149c:	ldr	r3, [pc, #552]	; (16c8 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    149e:	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    14a0:	strb	r0, [r3, #0]
    14a2:	b.n	13dc <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    14a4:	uxth	r2, r2
    14a6:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    14aa:	cmp	r3, #7
    14ac:	bhi.w	132a <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    14b0:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    14b4:	mov.w	r3, r3, lsl #2
    14b8:	ldr	r2, [pc, #512]	; (16bc <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    14ba:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    14be:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    14c2:	add	r2, r3
    14c4:	ldr	r3, [r2, #0]
    14c6:	ite	ne
    14c8:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    14cc:	orreq.w	r3, r3, #1
    14d0:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14d2:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    14d4:	ldr	r3, [pc, #476]	; (16b4 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    14d6:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    14d8:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    14da:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14dc:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    14de:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    14e2:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    14e6:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    14e8:	orr.w	r3, r2, #65536	; 0x10000
    14ec:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    14f0:	ldr.w	r3, [r4, #432]	; 0x1b0
    14f4:	cmp	r3, #0
    14f6:	bne.n	14f0 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    14f8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    14fc:	cmp	r3, #0
    14fe:	bne.w	1100 <isr+0x2c>
    1502:	b.n	119e <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1504:	ldr	r2, [pc, #452]	; (16cc <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1506:	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1508:	ldr	r3, [pc, #428]	; (16b8 <isr+0x5e4>)
    150a:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    150c:	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    150e:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1510:	bl	1034 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1514:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1518:	cmp	r3, #0
    151a:	bne.w	1100 <isr+0x2c>
    151e:	b.n	119e <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1520:	ldr	r3, [pc, #428]	; (16d0 <isr+0x5fc>)
    1522:	ldr	r1, [r3, #4]
    1524:	cmp	r1, #0
    1526:	beq.w	132a <isr+0x256>
    152a:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    152c:	uxth.w	lr, r2
    1530:	b.n	153c <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1532:	adds	r3, #12
    1534:	ldr	r1, [r3, #4]
    1536:	cmp	r1, #0
    1538:	beq.w	132a <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    153c:	ldrh	r7, [r3, #0]
    153e:	cmp	r7, r0
    1540:	bne.n	1532 <isr+0x45e>
    1542:	ldrh	r7, [r3, #2]
    1544:	cmp	r7, lr
    1546:	bne.n	1532 <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    1548:	lsrs	r7, r0, #8
    154a:	cmp	r7, #3
    154c:	beq.w	1722 <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    1550:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1552:	lsrs	r2, r2, #16
    1554:	cmp	r3, r2
    1556:	it	cs
    1558:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    155a:	cmp.w	r0, #512	; 0x200
    155e:	beq.w	1704 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    1562:	cmp.w	r0, #1792	; 0x700
    1566:	beq.w	1680 <isr+0x5ac>
    156a:	ldr	r7, [pc, #360]	; (16d4 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    156c:	mov	r2, r3
    156e:	str	r3, [sp, #4]
    1570:	mov	r0, r7
    1572:	bl	235c <memcpy>
    1576:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1578:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    157c:	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    157e:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1582:	ldr	r1, [pc, #340]	; (16d8 <isr+0x604>)
    1584:	str	r2, [r1, #0]
		location += 32;
    1586:	adds	r2, #32
	} while (location < end_addr);
    1588:	cmp	r7, r2
    158a:	bhi.n	1582 <isr+0x4ae>
	asm("dsb");
    158c:	dsb	sy
	asm("isb");
    1590:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1594:	ldr	r0, [pc, #316]	; (16d4 <isr+0x600>)
    1596:	mov	r1, r3
    1598:	bl	1034 <endpoint0_transmit.constprop.1>
    159c:	b.n	1196 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    159e:	lsls	r3, r1, #31
    15a0:	bpl.w	118e <isr+0xba>
    15a4:	b.n	118a <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    15a6:	ldr	r7, [pc, #308]	; (16dc <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    15a8:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    15ac:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    15ae:	ldr	r1, [pc, #304]	; (16e0 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    15b0:	ldr	r3, [pc, #304]	; (16e4 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    15b2:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    15b4:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    15b8:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    15ba:	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    15bc:	ldr	r1, [pc, #296]	; (16e8 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    15be:	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    15c2:	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    15c4:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    15c8:	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    15cc:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    15ce:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    15d2:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    15d6:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    15da:	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    15de:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    15e0:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    15e4:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    15e6:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    15e8:	ldr.w	r3, [r4, #432]	; 0x1b0
    15ec:	cmp	r3, #0
    15ee:	bne.n	15e8 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    15f0:	ldr	r2, [pc, #192]	; (16b4 <isr+0x5e0>)
    15f2:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15f4:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    15f8:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15fa:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    15fc:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1600:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1602:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1604:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1608:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    160c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    160e:	orr.w	r3, r1, r0
    1612:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1616:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    161a:	ldr.w	r3, [r4, #432]	; 0x1b0
    161e:	cmp	r3, #0
    1620:	bne.n	161a <isr+0x546>
    1622:	b.n	1196 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1624:	ldr	r0, [pc, #180]	; (16dc <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1626:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    162a:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    162c:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    162e:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1630:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1632:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1634:	bne.w	1258 <isr+0x184>
    1638:	uxth	r1, r0
    163a:	cmp	r1, #0
    163c:	bne.w	1258 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1640:	ldr	r1, [pc, #164]	; (16e8 <isr+0x614>)
    1642:	ldr	r4, [pc, #168]	; (16ec <isr+0x618>)
    1644:	ldmia	r1, {r0, r1}
    1646:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1648:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    164a:	str	r0, [r4, #0]
    164c:	strh	r1, [r4, #4]
    164e:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1650:	bne.w	1258 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    1654:	cpsid	i
	sof_usage |= (1 << interface);
    1656:	ldr	r0, [pc, #152]	; (16f0 <isr+0x61c>)
    1658:	ldrb	r1, [r0, #0]
    165a:	orr.w	r1, r1, #4
    165e:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1660:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1664:	lsls	r0, r1, #24
    1666:	bmi.n	1676 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1668:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    166c:	movs	r0, #128	; 0x80
    166e:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1672:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    1676:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1678:	ldr	r2, [pc, #120]	; (16f4 <isr+0x620>)
    167a:	movs	r1, #80	; 0x50
    167c:	strb	r1, [r2, #0]
    167e:	b.n	1258 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1680:	ldr	r0, [pc, #116]	; (16f8 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1682:	mov	r2, r3
    1684:	ldr	r7, [pc, #76]	; (16d4 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1686:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    168a:	ldr	r1, [pc, #112]	; (16fc <isr+0x628>)
    168c:	ldr	r0, [pc, #112]	; (1700 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    168e:	str	r3, [sp, #4]
    1690:	cmp.w	lr, #0
    1694:	it	eq
    1696:	moveq	r1, r0
    1698:	mov	r0, r7
    169a:	bl	235c <memcpy>
					usb_descriptor_buffer[1] = 7;
    169e:	movs	r2, #7
    16a0:	ldr	r3, [sp, #4]
    16a2:	strb	r2, [r7, #1]
    16a4:	b.n	1578 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    16a6:	ldr.w	r2, [r3, #328]	; 0x148
    16aa:	bic.w	r2, r2, #128	; 0x80
    16ae:	str.w	r2, [r3, #328]	; 0x148
    16b2:	b.n	1242 <isr+0x16e>
    16b4:	.word	0x20002020
    16b8:	.word	0x20001408
    16bc:	.word	0x402e01c0
    16c0:	.word	0x20001424
    16c4:	.word	0x200014ac
    16c8:	.word	0x20001348
    16cc:	.word	0x20001418
    16d0:	.word	0x20000098
    16d4:	.word	0x20203000
    16d8:	.word	0xe000ef70
    16dc:	.word	0x20001400
    16e0:	.word	0x00070080
    16e4:	.word	0x20002000
    16e8:	.word	0x20001410
    16ec:	.word	0x200014a4
    16f0:	.word	0x200013e8
    16f4:	.word	0x200013f8
    16f8:	.word	0x200013f0
    16fc:	.word	0x60001694
    1700:	.word	0x600016d8

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    1704:	ldr	r0, [pc, #40]	; (1730 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1706:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1708:	ldr	r1, [pc, #40]	; (1734 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    170a:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    170c:	ldr	r0, [pc, #40]	; (1738 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    170e:	str	r3, [sp, #4]
    1710:	cmp	r7, #0
    1712:	it	eq
    1714:	moveq	r1, r0
    1716:	ldr	r0, [pc, #36]	; (173c <isr+0x668>)
    1718:	bl	235c <memcpy>
    171c:	ldr	r7, [pc, #28]	; (173c <isr+0x668>)
    171e:	ldr	r3, [sp, #4]
    1720:	b.n	1578 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1722:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    1724:	ldrb	r3, [r1, #0]
    1726:	cmp	r3, r2
    1728:	it	cs
    172a:	movcs	r3, r2
    172c:	b.n	1562 <isr+0x48e>
    172e:	nop
    1730:	.word	0x200013f0
    1734:	.word	0x600016d8
    1738:	.word	0x60001694
    173c:	.word	0x20203000

00001740 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1740:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1742:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1746:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    174a:	ite	ne
    174c:	movne	r7, #0
    174e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1752:	cmp	r2, #2
    1754:	bls.n	175a <usb_config_rx+0x1a>
    1756:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    175a:	mov.w	sl, r0, lsl #7
    175e:	ldr.w	r9, [pc, #64]	; 17a0 <usb_config_rx+0x60>
    1762:	mov	r5, r1
    1764:	mov	r4, r0
    1766:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    176a:	movs	r1, #0
    176c:	movs	r2, #64	; 0x40
    176e:	mov	r8, r3
    1770:	mov	r0, r6
    1772:	bl	2e3c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1776:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1778:	orr.w	r1, r7, r5, lsl #16
    177c:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1780:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1784:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1786:	cmp.w	r8, #0
    178a:	beq.n	1756 <usb_config_rx+0x16>
    178c:	ldr	r3, [pc, #12]	; (179c <usb_config_rx+0x5c>)
    178e:	lsls	r0, r4
    1790:	ldr	r4, [r3, #0]
    1792:	orrs	r0, r4
    1794:	str	r0, [r3, #0]
    1796:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    179a:	nop
    179c:	.word	0x200013e4
    17a0:	.word	0x20003000

000017a4 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    17a4:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    17a6:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    17aa:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    17ae:	ite	ne
    17b0:	movne	r7, #0
    17b2:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    17b6:	cmp	r2, #2
    17b8:	bls.n	17be <usb_config_tx+0x1a>
    17ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    17be:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    17c0:	lsls	r5, r0, #7
    17c2:	ldr.w	r9, [pc, #68]	; 1808 <usb_config_tx+0x64>
    17c6:	mov	r8, r1
    17c8:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    17ca:	movs	r1, #0
    17cc:	mov	r4, r0
    17ce:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    17d0:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    17d4:	mov	r0, sl
    17d6:	bl	2e3c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    17da:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    17dc:	orr.w	r1, r7, r8, lsl #16
    17e0:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    17e4:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    17e8:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    17ec:	cmp	r6, #0
    17ee:	beq.n	17ba <usb_config_tx+0x16>
    17f0:	add.w	r0, r4, #16
    17f4:	ldr	r3, [pc, #12]	; (1804 <usb_config_tx+0x60>)
    17f6:	lsls	r2, r0
    17f8:	ldr	r0, [r3, #0]
    17fa:	orrs	r2, r0
    17fc:	str	r2, [r3, #0]
    17fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1802:	nop
    1804:	.word	0x200013e4
    1808:	.word	0x20003000

0000180c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    180c:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    180e:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1810:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1812:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    1816:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1818:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    181a:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    181c:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1820:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    1824:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1828:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    182c:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    182e:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1830:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    1832:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1834:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    1836:	pop	{r4, r5, r6, r7}
    1838:	bx	lr
    183a:	nop

0000183c <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    183c:	subs	r3, r0, #2
    183e:	cmp	r3, #2
    1840:	bls.n	1844 <usb_transmit+0x8>
    1842:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1844:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1846:	ldr	r3, [pc, #24]	; (1860 <usb_transmit+0x24>)
    1848:	add.w	r4, r0, #16
    184c:	movs	r5, #1
    184e:	mov	r2, r1
    1850:	add.w	r0, r3, r0, lsl #7
    1854:	lsl.w	r1, r5, r4
}
    1858:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    185a:	b.w	f8c <schedule_transfer>
    185e:	nop
    1860:	.word	0x20003040

00001864 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1864:	subs	r3, r0, #2
    1866:	cmp	r3, #2
    1868:	bls.n	186c <usb_receive+0x8>
    186a:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    186c:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    186e:	ldr	r3, [pc, #20]	; (1884 <usb_receive+0x20>)
    1870:	movs	r4, #1
    1872:	mov	r2, r1
    1874:	lsl.w	r1, r4, r0
    1878:	add.w	r0, r3, r0, lsl #7
}
    187c:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1880:	b.w	f8c <schedule_transfer>
    1884:	.word	0x20003000

00001888 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1888:	ldr	r0, [r0, #4]
#endif
}
    188a:	bx	lr

0000188c <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    188c:	cmp	r0, #0
    188e:	beq.n	1940 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1890:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    1892:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1896:	sub	sp, #20
    1898:	mov	fp, r0
    189a:	ldr	r4, [pc, #168]	; (1944 <delay+0xb8>)
    189c:	ldr	r5, [pc, #168]	; (1948 <delay+0xbc>)
    189e:	ldr	r6, [pc, #172]	; (194c <delay+0xc0>)
    18a0:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    18a4:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    18a8:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    18aa:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    18ac:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    18b0:	cmp	r1, #0
    18b2:	bne.n	18a4 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    18b4:	ldr	r7, [pc, #152]	; (1950 <delay+0xc4>)
    18b6:	strd	r8, r9, [sp, #8]
    18ba:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    18bc:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18be:	ldr	r2, [pc, #148]	; (1954 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    18c0:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    18c4:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18c6:	ldr	r2, [r2, #0]
    18c8:	movs	r7, #1
    18ca:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    18ce:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18d2:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    18d4:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18d6:	cmp	r3, r1
    18d8:	it	eq
    18da:	cmpeq	r2, r8
    18dc:	ite	cs
    18de:	movcs	sl, r8
    18e0:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    18e2:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    18e6:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    18ea:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    18ec:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    18ee:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    18f2:	cmp	r3, #0
    18f4:	bne.n	18e6 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    18f6:	ldr	r0, [sp, #4]
    18f8:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    18fa:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18fc:	ldr	r0, [pc, #84]	; (1954 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    18fe:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1902:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1904:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1908:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    190c:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1910:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1914:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    1916:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1918:	cmp	r1, r3
    191a:	it	eq
    191c:	cmpeq	r0, r8
    191e:	ite	cs
    1920:	movcs	r3, r8
    1922:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1924:	add	r2, r3
    1926:	cmp	r2, lr
    1928:	bcc.n	193a <delay+0xae>
			if (--msec == 0) return;
    192a:	subs.w	fp, fp, #1
			start += 1000;
    192e:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    1932:	bne.n	18e6 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    1934:	add	sp, #20
    1936:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    193a:	bl	2198 <yield>
	}
    193e:	b.n	18e6 <delay+0x5a>
    1940:	bx	lr
    1942:	nop
    1944:	.word	0x20003280
    1948:	.word	0x20001424
    194c:	.word	0x2000141c
    1950:	.word	0xe0001004
    1954:	.word	0x20001420

00001958 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1958:	ldr	r2, [pc, #72]	; (19a4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    195a:	ldr	r3, [pc, #76]	; (19a8 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    195c:	ldr.w	r0, [r2, #544]	; 0x220
    1960:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1964:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    1966:	push	{r4, lr}
    1968:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    196a:	bhi.n	1972 <usb_init_serialnumber+0x1a>
    196c:	add.w	r0, r0, r0, lsl #2
    1970:	lsls	r0, r0, #1
    1972:	ldr	r4, [pc, #56]	; (19ac <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    1974:	add	r1, sp, #4
    1976:	movs	r2, #10
    1978:	bl	1a8c <ultoa>
    197c:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    197e:	movs	r3, #0
    1980:	mov	r0, r4
		char c = buf[i];
    1982:	ldrb.w	r2, [r1], #1
    1986:	adds	r3, #1
		if (!c) break;
    1988:	cbz	r2, 199a <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    198a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    198c:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1990:	bne.n	1982 <usb_init_serialnumber+0x2a>
    1992:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1994:	strb	r3, [r4, #0]
}
    1996:	add	sp, #16
    1998:	pop	{r4, pc}
    199a:	lsls	r3, r3, #1
    199c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    199e:	strb	r3, [r4, #0]
}
    19a0:	add	sp, #16
    19a2:	pop	{r4, pc}
    19a4:	.word	0x401f4400
    19a8:	.word	0x0098967f
    19ac:	.word	0x2000076c

000019b0 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    19b0:	movs	r0, #4
    19b2:	mov	r1, lr
    19b4:	tst	r0, r1
    19b6:	beq.n	19c0 <_MSP>
    19b8:	mrs	r0, PSP
    19bc:	b.w	19d0 <HardFault_HandlerC>

000019c0 <_MSP>:
    19c0:	mrs	r0, MSP
    19c4:	b.w	19d0 <HardFault_HandlerC>

000019c8 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    19c8:	bx	lr
    19ca:	nop

000019cc <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    19cc:	bx	lr
    19ce:	nop

000019d0 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    19d0:	ldr	r3, [pc, #108]	; (1a40 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    19d2:	movs	r1, #5
    19d4:	ldr	r2, [pc, #108]	; (1a44 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    19d6:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    19d8:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    19da:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    19de:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    19e0:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    19e4:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    19e6:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    19e8:	ldr	r4, [pc, #92]	; (1a48 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    19ea:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    19ec:	ldr	r0, [pc, #92]	; (1a4c <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    19ee:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    19f0:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    19f4:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    19f8:	ldr	r3, [r4, #0]
    19fa:	cmp	r3, r0
    19fc:	bls.n	1a04 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    19fe:	ldr	r0, [pc, #80]	; (1a50 <HardFault_HandlerC+0x80>)
    1a00:	bl	2490 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1a04:	ldr	r5, [pc, #56]	; (1a40 <HardFault_HandlerC+0x70>)
    1a06:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1a08:	movs	r0, #0
    1a0a:	ldr	r2, [pc, #72]	; (1a54 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1a0c:	ldr	r1, [pc, #72]	; (1a58 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1a0e:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1a12:	str	r0, [sp, #4]
    1a14:	ldr	r3, [sp, #4]
    1a16:	cmp	r3, r2
    1a18:	bhi.n	1a26 <HardFault_HandlerC+0x56>
    1a1a:	ldr	r3, [sp, #4]
    1a1c:	adds	r3, #1
    1a1e:	str	r3, [sp, #4]
    1a20:	ldr	r3, [sp, #4]
    1a22:	cmp	r3, r2
    1a24:	bls.n	1a1a <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1a26:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1a2a:	str	r0, [sp, #4]
    1a2c:	ldr	r3, [sp, #4]
    1a2e:	cmp	r3, r1
    1a30:	bhi.n	1a0e <HardFault_HandlerC+0x3e>
    1a32:	ldr	r3, [sp, #4]
    1a34:	adds	r3, #1
    1a36:	str	r3, [sp, #4]
    1a38:	ldr	r3, [sp, #4]
    1a3a:	cmp	r3, r1
    1a3c:	bls.n	1a32 <HardFault_HandlerC+0x62>
    1a3e:	b.n	1a0e <HardFault_HandlerC+0x3e>
    1a40:	.word	0x401bc000
    1a44:	.word	0x401f8000
    1a48:	.word	0x200007a0
    1a4c:	.word	0x23c345ff
    1a50:	.word	0x11e1a300
    1a54:	.word	0x000f423f
    1a58:	.word	0x0089543f

00001a5c <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    1a5c:	ldr	r2, [pc, #36]	; (1a84 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    1a5e:	push	{r3, lr}
        char *prev = __brkval;
    1a60:	ldr	r3, [r2, #0]
        if (incr != 0) {
    1a62:	cbz	r0, 1a6e <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    1a64:	add	r0, r3
    1a66:	ldr	r1, [pc, #32]	; (1a88 <_sbrk+0x2c>)
    1a68:	cmp	r0, r1
    1a6a:	bhi.n	1a72 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    1a6c:	str	r0, [r2, #0]
        }
        return prev;
}
    1a6e:	mov	r0, r3
    1a70:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    1a72:	bl	276c <__errno>
    1a76:	movs	r2, #12
                        return (void *)-1;
    1a78:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    1a7c:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    1a7e:	mov	r0, r3
    1a80:	pop	{r3, pc}
    1a82:	nop
    1a84:	.word	0x20000784
    1a88:	.word	0x20280000

00001a8c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1a8c:	push	{r4, r5, r6, r7}
    1a8e:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    1a90:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1a92:	mov	r7, r6
    1a94:	b.n	1a98 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    1a96:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    1a98:	udiv	r3, r0, r2
    1a9c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1aa0:	add.w	r4, r0, #55	; 0x37
    1aa4:	cmp	r0, #9
    1aa6:	add.w	r0, r0, #48	; 0x30
    1aaa:	uxtb	r4, r4
    1aac:	it	ls
    1aae:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    1ab0:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1ab2:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    1ab6:	cmp	r3, #0
    1ab8:	bne.n	1a96 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    1aba:	adds	r2, r1, r5
    1abc:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    1abe:	cbz	r5, 1ad4 <ultoa+0x48>
    1ac0:	adds	r3, #1
		t = buf[j];
    1ac2:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    1ac6:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1ac8:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    1aca:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1acc:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    1ace:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1ad2:	blt.n	1ac0 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    1ad4:	mov	r0, r1
    1ad6:	pop	{r4, r5, r6, r7}
    1ad8:	bx	lr
    1ada:	nop

00001adc <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    1adc:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    1ade:	ldr	r2, [pc, #24]	; (1af8 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    1ae0:	movs	r1, #7
    1ae2:	ldr	r3, [pc, #24]	; (1afc <Panic_Temp_isr+0x20>)
    1ae4:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    1ae6:	ldr	r3, [r2, #56]	; 0x38
    1ae8:	orr.w	r3, r3, #64	; 0x40
    1aec:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    1aee:	dsb	sy
  while (1) asm ("wfi");
    1af2:	wfi
    1af4:	b.n	1af2 <Panic_Temp_isr+0x16>
    1af6:	nop
    1af8:	.word	0x400d4000
    1afc:	.word	0x400ac000

00001b00 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    1b00:	cmp	r0, #39	; 0x27
    1b02:	bhi.n	1b3e <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    1b04:	lsls	r0, r0, #4
    1b06:	ldr	r2, [pc, #104]	; (1b70 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1b08:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    1b0a:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1b0e:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    1b10:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1b12:	beq.n	1b40 <pinMode+0x40>
    1b14:	cmp	r1, #4
    1b16:	beq.n	1b40 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1b18:	ldr	r4, [r3, #12]
    1b1a:	ldr	r2, [r0, #4]
    1b1c:	bic.w	r2, r2, r4
    1b20:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1b22:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    1b24:	cbz	r1, 1b62 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    1b26:	cmp	r1, #2
    1b28:	beq.n	1b68 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1b2a:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1b2c:	ldr	r3, [r3, #4]
}
    1b2e:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1b32:	ite	eq
    1b34:	ldreq	r1, [pc, #60]	; (1b74 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1b36:	ldrne	r1, [pc, #64]	; (1b78 <pinMode+0x78>)
    1b38:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    1b3a:	movs	r2, #21
    1b3c:	str	r2, [r3, #0]
}
    1b3e:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1b40:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    1b42:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1b44:	ldr	r4, [r0, #4]
    1b46:	orr.w	r2, r2, r4
    1b4a:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1b4c:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    1b4e:	beq.n	1b62 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    1b50:	movw	r1, #2104	; 0x838
    1b54:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1b56:	ldr	r3, [r3, #4]
    1b58:	movs	r2, #21
}
    1b5a:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1b5e:	str	r2, [r3, #0]
}
    1b60:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1b62:	movs	r1, #56	; 0x38
    1b64:	str	r1, [r2, #0]
    1b66:	b.n	1b56 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1b68:	ldr	r1, [pc, #16]	; (1b7c <pinMode+0x7c>)
    1b6a:	str	r1, [r2, #0]
    1b6c:	b.n	1b56 <pinMode+0x56>
    1b6e:	nop
    1b70:	.word	0x20000104
    1b74:	.word	0x00013038
    1b78:	.word	0x00010038
    1b7c:	.word	0x0001f038

00001b80 <flexpwmWrite>:


#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
    1b80:	push	{r4, r5, r6, r7, lr}
	uint16_t mask = 1 << submodule;
	uint32_t modulo = p->SM[submodule].VAL1;
    1b82:	add.w	r6, r1, r1, lsl #1
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    1b86:	ldr	r4, [pc, #164]	; (1c2c <flexpwmWrite+0xac>)

#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
    1b88:	movs	r5, #1
	uint32_t modulo = p->SM[submodule].VAL1;
    1b8a:	add.w	r6, r0, r6, lsl #5
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    1b8e:	ldrb.w	ip, [r4]

#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
    1b92:	lsl.w	r1, r5, r1
	uint32_t modulo = p->SM[submodule].VAL1;
    1b96:	ldrh	r4, [r6, #14]

#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
    1b98:	uxth.w	lr, r1
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1b9c:	ldrh.w	r5, [r0, #392]	; 0x188
#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
	uint32_t modulo = p->SM[submodule].VAL1;
    1ba0:	uxth	r4, r4
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1ba2:	mov.w	r7, lr, lsl #4

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
	uint32_t modulo = p->SM[submodule].VAL1;
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    1ba6:	mla	r3, r4, r3, r3
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1baa:	uxth	r5, r5
    1bac:	and.w	r7, r7, #240	; 0xf0

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
	uint32_t modulo = p->SM[submodule].VAL1;
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    1bb0:	lsr.w	r3, r3, ip
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1bb4:	orrs	r5, r7
    1bb6:	cmp	r3, r4
    1bb8:	strh.w	r5, [r0, #392]	; 0x188
    1bbc:	it	cs
    1bbe:	movcs	r3, r4
	switch (channel) {
    1bc0:	cmp	r2, #1
    1bc2:	beq.n	1c0a <flexpwmWrite+0x8a>
    1bc4:	bcc.n	1bf2 <flexpwmWrite+0x72>
    1bc6:	cmp	r2, #2
    1bc8:	beq.n	1bdc <flexpwmWrite+0x5c>
    1bca:	and.w	r1, r1, #15
	  case 2: // B
		p->SM[submodule].VAL5 = cval;
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
		//printf(" write channel B\n");
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    1bce:	ldrh.w	r3, [r0, #392]	; 0x188
    1bd2:	uxth	r3, r3
    1bd4:	orrs	r1, r3
    1bd6:	strh.w	r1, [r0, #392]	; 0x188
    1bda:	pop	{r4, r5, r6, r7, pc}
		p->SM[submodule].VAL3 = cval;
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
		//printf(" write channel A\n");
		break;
	  case 2: // B
		p->SM[submodule].VAL5 = cval;
    1bdc:	uxth	r3, r3
    1bde:	and.w	r1, r1, #15
    1be2:	strh	r3, [r6, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
    1be4:	ldrh.w	r3, [r0, #384]	; 0x180
    1be8:	uxth	r3, r3
    1bea:	orrs	r7, r3
    1bec:	strh.w	r7, [r0, #384]	; 0x180
    1bf0:	b.n	1bce <flexpwmWrite+0x4e>
	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	switch (channel) {
	  case 0: // X
		p->SM[submodule].VAL0 = modulo - cval;
    1bf2:	subs	r3, r4, r3
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    1bf4:	and.w	r1, r1, #15
	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	switch (channel) {
	  case 0: // X
		p->SM[submodule].VAL0 = modulo - cval;
    1bf8:	uxth	r3, r3
    1bfa:	strh	r3, [r6, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    1bfc:	ldrh.w	r3, [r0, #384]	; 0x180
    1c00:	uxth	r3, r3
    1c02:	orrs	r3, r1
    1c04:	strh.w	r3, [r0, #384]	; 0x180
		//printf(" write channel X\n");
		break;
    1c08:	b.n	1bce <flexpwmWrite+0x4e>
	  case 1: // A
		p->SM[submodule].VAL3 = cval;
    1c0a:	uxth	r3, r3
    1c0c:	and.w	r1, r1, #15
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    1c10:	mov.w	lr, lr, lsl #8
		p->SM[submodule].VAL0 = modulo - cval;
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
		//printf(" write channel X\n");
		break;
	  case 1: // A
		p->SM[submodule].VAL3 = cval;
    1c14:	strh	r3, [r6, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    1c16:	ldrh.w	r3, [r0, #384]	; 0x180
    1c1a:	and.w	lr, lr, #3840	; 0xf00
    1c1e:	uxth	r3, r3
    1c20:	orr.w	lr, lr, r3
    1c24:	strh.w	lr, [r0, #384]	; 0x180
		//printf(" write channel A\n");
		break;
    1c28:	b.n	1bce <flexpwmWrite+0x4e>
    1c2a:	nop
    1c2c:	.word	0x20000788

00001c30 <flexpwmFrequency>:
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
    1c30:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
    1c34:	mov.w	lr, r1, lsl #1
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    1c38:	ldr	r2, [pc, #224]	; (1d1c <flexpwmFrequency+0xec>)
    1c3a:	vmov.f32	s14, #96	; 0x3f000000  0.5
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
    1c3e:	mov.w	ip, #1
	uint32_t olddiv = p->SM[submodule].VAL1;
    1c42:	add.w	r3, lr, r1
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
    1c46:	lsl.w	r7, ip, r1
	uint32_t olddiv = p->SM[submodule].VAL1;
    1c4a:	add.w	r3, r0, r3, lsl #5
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
    1c4e:	uxth	r6, r7
	uint32_t olddiv = p->SM[submodule].VAL1;
    1c50:	ldrh	r3, [r3, #14]
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    1c52:	vldr	s15, [r2]
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
    1c56:	uxth	r5, r3
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    1c58:	vcvt.f32.u32	s15, s15
    1c5c:	vdiv.f32	s0, s15, s0
    1c60:	vadd.f32	s0, s0, s14
    1c64:	vcvt.u32.f32	s15, s0
    1c68:	vmov	r3, s15
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
    1c6c:	cmp.w	r3, #65536	; 0x10000
    1c70:	bcc.n	1d10 <flexpwmFrequency+0xe0>
    1c72:	movs	r2, #0
    1c74:	movw	r4, #65535	; 0xffff
    1c78:	b.n	1c7e <flexpwmFrequency+0x4e>
    1c7a:	cmp	r2, #6
    1c7c:	bhi.n	1c86 <flexpwmFrequency+0x56>
		newdiv = newdiv >> 1;
    1c7e:	lsrs	r3, r3, #1
		prescale = prescale + 1;
    1c80:	adds	r2, #1
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
    1c82:	cmp	r3, r4
    1c84:	bhi.n	1c7a <flexpwmFrequency+0x4a>
		newdiv = newdiv >> 1;
		prescale = prescale + 1;
	}
	if (newdiv > 65535) {
    1c86:	cmp.w	r3, #65536	; 0x10000
    1c8a:	mov.w	r2, r2, lsl #4
    1c8e:	bcs.n	1d00 <flexpwmFrequency+0xd0>
    1c90:	orr.w	r2, r2, #1024	; 0x400
    1c94:	uxth	r2, r2
    1c96:	add.w	ip, r3, #4294967295
    1c9a:	uxth.w	ip, ip
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1c9e:	ldrh.w	r8, [r0, #392]	; 0x188
    1ca2:	lsls	r6, r6, #4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    1ca4:	and.w	r4, r7, #15
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    1ca8:	add	r1, lr
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1caa:	uxtb	r6, r6
    1cac:	uxth.w	r7, r8
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    1cb0:	add.w	r1, r0, r1, lsl #5
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1cb4:	orrs	r6, r7
    1cb6:	strh.w	r6, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    1cba:	strh	r2, [r1, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
    1cbc:	strh.w	ip, [r1, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
    1cc0:	ldrh	r2, [r1, #10]
    1cc2:	uxth	r2, r2
    1cc4:	mul.w	r2, r3, r2
    1cc8:	udiv	r2, r2, r5
    1ccc:	uxth	r2, r2
    1cce:	strh	r2, [r1, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
    1cd0:	ldrh	r2, [r1, #22]
    1cd2:	uxth	r2, r2
    1cd4:	mul.w	r2, r3, r2
    1cd8:	udiv	r2, r2, r5
    1cdc:	uxth	r2, r2
    1cde:	strh	r2, [r1, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
    1ce0:	ldrh	r2, [r1, #30]
    1ce2:	uxth	r2, r2
    1ce4:	mul.w	r3, r3, r2
    1ce8:	udiv	r3, r3, r5
    1cec:	uxth	r3, r3
    1cee:	strh	r3, [r1, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    1cf0:	ldrh.w	r3, [r0, #392]	; 0x188
    1cf4:	uxth	r3, r3
    1cf6:	orrs	r4, r3
    1cf8:	strh.w	r4, [r0, #392]	; 0x188
    1cfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d00:	orr.w	r2, r2, #1024	; 0x400
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
		newdiv = newdiv >> 1;
		prescale = prescale + 1;
	}
	if (newdiv > 65535) {
    1d04:	movw	ip, #65534	; 0xfffe
		newdiv = 65535;
    1d08:	movw	r3, #65535	; 0xffff
    1d0c:	uxth	r2, r2
    1d0e:	b.n	1c9e <flexpwmFrequency+0x6e>
	} else if (newdiv < 2) {
    1d10:	cmp	r3, #1
    1d12:	mov.w	r2, #1024	; 0x400
    1d16:	bhi.n	1c96 <flexpwmFrequency+0x66>
		newdiv = 2;
    1d18:	movs	r3, #2
    1d1a:	b.n	1c9e <flexpwmFrequency+0x6e>
    1d1c:	.word	0x2000079c

00001d20 <quadtimerFrequency>:
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    1d20:	ldr	r3, [pc, #136]	; (1dac <quadtimerFrequency+0x8c>)
    1d22:	vmov.f32	s14, #96	; 0x3f000000  0.5
    1d26:	vldr	s15, [r3]
    1d2a:	vcvt.f32.u32	s15, s15
	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
    1d2e:	push	{r4, r5}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    1d30:	vdiv.f32	s0, s15, s0
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    1d34:	movw	r4, #65534	; 0xfffe
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    1d38:	vadd.f32	s0, s0, s14
    1d3c:	vcvt.u32.f32	s15, s0
    1d40:	vmov	r3, s15
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    1d44:	cmp	r3, r4
    1d46:	bls.n	1d9e <quadtimerFrequency+0x7e>
    1d48:	movs	r2, #0
    1d4a:	b.n	1d50 <quadtimerFrequency+0x30>
    1d4c:	cmp	r2, #6
    1d4e:	bhi.n	1d58 <quadtimerFrequency+0x38>
		newdiv = newdiv >> 1; 
    1d50:	lsrs	r3, r3, #1
		prescale = prescale + 1;
    1d52:	adds	r2, #1
void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    1d54:	cmp	r3, r4
    1d56:	bhi.n	1d4c <quadtimerFrequency+0x2c>
    1d58:	adds	r2, #8
		newdiv = newdiv >> 1; 
		prescale = prescale + 1;
	}
	if (newdiv > 65534) {
    1d5a:	movw	r5, #65534	; 0xfffe
    1d5e:	movw	r4, #8230	; 0x2026
    1d62:	lsls	r2, r2, #9
    1d64:	cmp	r3, r5
    1d66:	and.w	r2, r2, #7680	; 0x1e00
		newdiv = 65534;
    1d6a:	it	hi
    1d6c:	movhi	r3, r5
    1d6e:	orrs	r4, r2
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    1d70:	add.w	r1, r0, r1, lsl #5
    1d74:	ldrh	r5, [r1, #16]
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    1d76:	ldrh	r2, [r1, #6]
		newdiv = 65534;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    1d78:	uxth	r5, r5
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    1d7a:	uxth	r2, r2
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    1d7c:	mul.w	r0, r5, r3
    1d80:	rsb	r2, r2, #65537	; 0x10001
    1d84:	add	r2, r5
    1d86:	udiv	r2, r0, r2
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
    1d8a:	subs	r3, r3, r2
	p->CH[submodule].CMPLD1 = high;
    1d8c:	uxth	r2, r2
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
    1d8e:	rsb	r3, r3, #1
    1d92:	uxth	r3, r3
    1d94:	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
    1d96:	strh	r2, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    1d98:	strh	r4, [r1, #12]
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
}
    1d9a:	pop	{r4, r5}
    1d9c:	bx	lr
		newdiv = newdiv >> 1; 
		prescale = prescale + 1;
	}
	if (newdiv > 65534) {
		newdiv = 65534;
	} else if (newdiv < 2) {
    1d9e:	cmp	r3, #1
    1da0:	movw	r4, #12326	; 0x3026
		newdiv = 2;
    1da4:	it	ls
    1da6:	movls	r3, #2
    1da8:	b.n	1d70 <quadtimerFrequency+0x50>
    1daa:	nop
    1dac:	.word	0x2000079c

00001db0 <analogWrite>:

void analogWrite(uint8_t pin, int val)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
    1db0:	cmp	r0, #39	; 0x27
    1db2:	bhi.n	1dce <analogWrite+0x1e>
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
    1db4:	ldr	r2, [pc, #164]	; (1e5c <analogWrite+0xac>)
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
}

void analogWrite(uint8_t pin, int val)
{
    1db6:	push	{r3, r4, r5, r6, r7, lr}
    1db8:	mov	r4, r0
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
    1dba:	sxth	r0, r0
	if (info->type == 1) {
    1dbc:	ldrb.w	r6, [r2, r0, lsl #2]
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
    1dc0:	add.w	r5, r2, r0, lsl #2
	if (info->type == 1) {
    1dc4:	cmp	r6, #1
    1dc6:	beq.n	1dd0 <analogWrite+0x20>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
    1dc8:	cmp	r6, #2
    1dca:	beq.n	1dfa <analogWrite+0x4a>
    1dcc:	pop	{r3, r4, r5, r6, r7, pc}
    1dce:	bx	lr
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
    1dd0:	ldrb	r2, [r5, #1]
    1dd2:	ubfx	r3, r2, #4, #2
    1dd6:	cmp	r3, #3
    1dd8:	beq.n	1e50 <analogWrite+0xa0>
    1dda:	ldr	r0, [pc, #132]	; (1e60 <analogWrite+0xb0>)
    1ddc:	ldr.w	r0, [r0, r3, lsl #2]
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
    1de0:	uxth	r3, r1
    1de2:	and.w	r1, r2, #3
    1de6:	ldrb	r2, [r5, #2]
    1de8:	bl	1b80 <flexpwmWrite>
		}
		quadtimerWrite(qtimer, info->module & 0x03, val);
	} else {
		return;
	}
	*(portConfigRegister(pin)) = info->muxval;
    1dec:	ldr	r0, [pc, #116]	; (1e64 <analogWrite+0xb4>)
    1dee:	ldrb	r2, [r5, #3]
    1df0:	add.w	r0, r0, r4, lsl #4
    1df4:	ldr	r3, [r0, #4]
    1df6:	str	r2, [r3, #0]
    1df8:	pop	{r3, r4, r5, r6, r7, pc}
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    1dfa:	ldrb	r6, [r5, #1]
    1dfc:	ubfx	r3, r6, #4, #2
    1e00:	cmp	r3, #3
    1e02:	beq.n	1e54 <analogWrite+0xa4>
    1e04:	ldr	r2, [pc, #96]	; (1e68 <analogWrite+0xb8>)
    1e06:	ldr.w	lr, [r2, r3, lsl #2]
    1e0a:	and.w	r6, r6, #3
}

void quadtimerWrite(IMXRT_TMR_t *p, unsigned int submodule, uint16_t val)
{
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    1e0e:	ldr	r3, [pc, #92]	; (1e6c <analogWrite+0xbc>)
    1e10:	uxth	r1, r1
    1e12:	add.w	r7, lr, r6, lsl #5
    1e16:	ldrb.w	ip, [r3]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void quadtimerWrite(IMXRT_TMR_t *p, unsigned int submodule, uint16_t val)
{
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    1e1a:	lsls	r6, r6, #5
    1e1c:	ldrh	r2, [r7, #6]
    1e1e:	add.w	r3, lr, r6
	//printf(" high=%lu\n", high);
	uint32_t low = modulo - high; // low must 2 or higher
	//printf(" low=%lu\n", low);

	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
    1e22:	add	r6, lr
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void quadtimerWrite(IMXRT_TMR_t *p, unsigned int submodule, uint16_t val)
{
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    1e24:	uxth	r2, r2
    1e26:	ldrh	r0, [r3, #16]
    1e28:	rsb	r2, r2, #65537	; 0x10001
    1e2c:	uxtah	r2, r2, r0
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    1e30:	subs	r0, r2, #1
    1e32:	mul.w	r3, r0, r1
    1e36:	lsr.w	r3, r3, ip
	if (high >= modulo - 1) high = modulo - 2;
    1e3a:	cmp	r0, r3
    1e3c:	it	ls
    1e3e:	subls	r3, r2, #2
	//printf(" modulo=%lu\n", modulo);
	//printf(" high=%lu\n", high);
	uint32_t low = modulo - high; // low must 2 or higher
	//printf(" low=%lu\n", low);

	p->CH[submodule].LOAD = 65537 - low;
    1e40:	subs	r2, r2, r3
	p->CH[submodule].CMPLD1 = high;
    1e42:	uxth	r3, r3
	//printf(" modulo=%lu\n", modulo);
	//printf(" high=%lu\n", high);
	uint32_t low = modulo - high; // low must 2 or higher
	//printf(" low=%lu\n", low);

	p->CH[submodule].LOAD = 65537 - low;
    1e44:	rsb	r2, r2, #1
    1e48:	uxth	r2, r2
    1e4a:	strh	r2, [r7, #6]
	p->CH[submodule].CMPLD1 = high;
    1e4c:	strh	r3, [r6, #16]
    1e4e:	b.n	1dec <analogWrite+0x3c>
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
    1e50:	ldr	r0, [pc, #28]	; (1e70 <analogWrite+0xc0>)
    1e52:	b.n	1de0 <analogWrite+0x30>
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    1e54:	ldr.w	lr, [pc, #28]	; 1e74 <analogWrite+0xc4>
    1e58:	b.n	1e0a <analogWrite+0x5a>
    1e5a:	nop
    1e5c:	.word	0x20000384
    1e60:	.word	0x20000424
    1e64:	.word	0x20000104
    1e68:	.word	0x20000430
    1e6c:	.word	0x20000788
    1e70:	.word	0x403e8000
    1e74:	.word	0x401e8000

00001e78 <analogWriteFrequency>:

void analogWriteFrequency(uint8_t pin, float frequency)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
    1e78:	cmp	r0, #39	; 0x27
    1e7a:	bhi.n	1e90 <analogWriteFrequency+0x18>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
    1e7c:	sxth	r0, r0
    1e7e:	ldr	r3, [pc, #76]	; (1ecc <analogWriteFrequency+0x54>)
	if (info->type == 1) {
    1e80:	ldrb.w	r2, [r3, r0, lsl #2]
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
    1e84:	add.w	r3, r3, r0, lsl #2
	if (info->type == 1) {
    1e88:	cmp	r2, #1
    1e8a:	beq.n	1e92 <analogWriteFrequency+0x1a>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
    1e8c:	cmp	r2, #2
    1e8e:	beq.n	1eac <analogWriteFrequency+0x34>
    1e90:	bx	lr
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
    1e92:	ldrb	r1, [r3, #1]
    1e94:	ubfx	r2, r1, #4, #2
    1e98:	cmp	r2, #3
    1e9a:	beq.n	1ec4 <analogWriteFrequency+0x4c>
    1e9c:	ldr	r0, [pc, #48]	; (1ed0 <analogWriteFrequency+0x58>)
    1e9e:	ldr.w	r0, [r0, r2, lsl #2]
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    1ea2:	ldrb	r2, [r3, #2]
    1ea4:	and.w	r1, r1, #3
    1ea8:	b.w	1c30 <flexpwmFrequency>
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    1eac:	ldrb	r1, [r3, #1]
    1eae:	ubfx	r3, r1, #4, #2
    1eb2:	cmp	r3, #3
    1eb4:	beq.n	1ec8 <analogWriteFrequency+0x50>
    1eb6:	ldr	r2, [pc, #28]	; (1ed4 <analogWriteFrequency+0x5c>)
    1eb8:	ldr.w	r0, [r2, r3, lsl #2]
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
    1ebc:	and.w	r1, r1, #3
    1ec0:	b.w	1d20 <quadtimerFrequency>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
    1ec4:	ldr	r0, [pc, #16]	; (1ed8 <analogWriteFrequency+0x60>)
    1ec6:	b.n	1ea2 <analogWriteFrequency+0x2a>
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    1ec8:	ldr	r0, [pc, #16]	; (1edc <analogWriteFrequency+0x64>)
    1eca:	b.n	1ebc <analogWriteFrequency+0x44>
    1ecc:	.word	0x20000384
    1ed0:	.word	0x20000424
    1ed4:	.word	0x20000430
    1ed8:	.word	0x403e8000
    1edc:	.word	0x401e8000

00001ee0 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1ee0:	ldr	r0, [pc, #656]	; (2174 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1ee2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1ee6:	ldr	r3, [pc, #656]	; (2178 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1ee8:	ldr	r2, [r0, #120]	; 0x78
    1eea:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    1eee:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1ef0:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1ef2:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1ef4:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1ef8:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1efc:	ldr	r4, [pc, #636]	; (217c <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1efe:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1f02:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1f04:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1f08:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1f0a:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1f0c:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1f10:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1f14:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1f18:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1f1c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1f20:	ldrh.w	r0, [r3, #392]	; 0x188
    1f24:	uxth	r0, r0
    1f26:	orr.w	r0, r0, #240	; 0xf0
    1f2a:	strh.w	r0, [r3, #392]	; 0x188
    1f2e:	add.w	r0, r1, r1, lsl #1
    1f32:	ldr	r3, [pc, #580]	; (2178 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    1f34:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1f36:	movs	r5, #0
    1f38:	lsls	r0, r0, #5
    1f3a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1f3c:	cmp	r1, #4
    1f3e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1f40:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1f44:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    1f46:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1f48:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1f4a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1f4c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1f4e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1f50:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1f52:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1f54:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1f56:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1f58:	bne.n	1f2e <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1f5a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1f5e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1f62:	ldr	r3, [pc, #540]	; (2180 <pwm_init+0x2a0>)
    1f64:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1f68:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1f6a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1f6c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1f70:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1f72:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1f76:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1f7a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1f7e:	ldrh.w	r0, [r4, #392]	; 0x188
    1f82:	uxth	r0, r0
    1f84:	orr.w	r0, r0, #3840	; 0xf00
    1f88:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1f8c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1f90:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1f94:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1f98:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1f9c:	ldrh.w	r0, [r3, #392]	; 0x188
    1fa0:	uxth	r0, r0
    1fa2:	orr.w	r0, r0, #240	; 0xf0
    1fa6:	strh.w	r0, [r3, #392]	; 0x188
    1faa:	add.w	r0, r1, r1, lsl #1
    1fae:	ldr	r3, [pc, #464]	; (2180 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    1fb0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1fb2:	movs	r5, #0
    1fb4:	lsls	r0, r0, #5
    1fb6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1fb8:	cmp	r1, #4
    1fba:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1fbc:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1fbe:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1fc2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1fc4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1fc6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1fc8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1fca:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1fcc:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1fce:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1fd0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1fd2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1fd4:	bne.n	1faa <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1fd6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1fda:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1fde:	ldr	r3, [pc, #420]	; (2184 <pwm_init+0x2a4>)
    1fe0:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1fe4:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1fe6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1fe8:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1fec:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1fee:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1ff2:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1ff6:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1ffa:	ldrh.w	r0, [r4, #392]	; 0x188
    1ffe:	uxth	r0, r0
    2000:	orr.w	r0, r0, #3840	; 0xf00
    2004:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2008:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    200c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2010:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2014:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2018:	ldrh.w	r0, [r3, #392]	; 0x188
    201c:	uxth	r0, r0
    201e:	orr.w	r0, r0, #240	; 0xf0
    2022:	strh.w	r0, [r3, #392]	; 0x188
    2026:	add.w	r0, r1, r1, lsl #1
    202a:	ldr	r3, [pc, #344]	; (2184 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    202c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    202e:	movs	r5, #0
    2030:	lsls	r0, r0, #5
    2032:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2034:	cmp	r1, #4
    2036:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2038:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    203a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    203e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2040:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2042:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2044:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2046:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2048:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    204a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    204c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    204e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2050:	bne.n	2026 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2052:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2056:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    205a:	ldr	r3, [pc, #300]	; (2188 <pwm_init+0x2a8>)
    205c:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2060:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2062:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2064:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2068:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    206a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    206e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2072:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2076:	ldrh.w	r0, [r4, #392]	; 0x188
    207a:	uxth	r0, r0
    207c:	orr.w	r0, r0, #3840	; 0xf00
    2080:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2084:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2088:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    208c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2090:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2094:	ldrh.w	r0, [r3, #392]	; 0x188
    2098:	uxth	r0, r0
    209a:	orr.w	r0, r0, #240	; 0xf0
    209e:	strh.w	r0, [r3, #392]	; 0x188
    20a2:	add.w	r0, r1, r1, lsl #1
    20a6:	ldr	r3, [pc, #224]	; (2188 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    20a8:	adds	r1, #1
    20aa:	lsls	r0, r0, #5
    20ac:	mov	r4, r3
    20ae:	cmp	r1, #4
    20b0:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    20b2:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    20b4:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    20b8:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    20ba:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    20bc:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    20be:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    20c0:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    20c2:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    20c4:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    20c6:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    20c8:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    20ca:	bne.n	20a2 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    20cc:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    20d0:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    20d2:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    20d4:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    20d8:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    20da:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    20de:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    20e0:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    20e4:	orrs	r3, r7
    20e6:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    20ea:	ldrh.w	r3, [r4, #392]	; 0x188
    20ee:	uxth	r3, r3
    20f0:	orr.w	r3, r3, #3840	; 0xf00
    20f4:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    20f8:	lsls	r0, r2, #5
    20fa:	ldr	r3, [pc, #144]	; (218c <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    20fc:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    20fe:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2100:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2102:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2104:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2106:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2108:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    210a:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    210e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2110:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2112:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2114:	bne.n	20f8 <pwm_init+0x218>
    2116:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2118:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    211a:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    211e:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2122:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2124:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2128:	lsls	r0, r2, #5
    212a:	ldr	r3, [pc, #100]	; (2190 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    212c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    212e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2130:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2132:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2134:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2136:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2138:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    213a:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    213c:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    213e:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2140:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2142:	bne.n	2128 <pwm_init+0x248>
    2144:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2146:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2148:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    214c:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2150:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2152:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2156:	lsls	r0, r2, #5
    2158:	ldr	r3, [pc, #56]	; (2194 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    215a:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    215c:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    215e:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2160:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2162:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2164:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2166:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2168:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    216a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    216c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    216e:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2170:	bne.n	2156 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    2172:	pop	{r4, r5, r6, r7, pc}
    2174:	.word	0x400fc000
    2178:	.word	0x403dc000
    217c:	.word	0xfc030000
    2180:	.word	0x403e0000
    2184:	.word	0x403e4000
    2188:	.word	0x403e8000
    218c:	.word	0x401dc000
    2190:	.word	0x401e0000
    2194:	.word	0x401e4000

00002198 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2198:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    219c:	ldr	r6, [pc, #200]	; (2268 <yield+0xd0>)
    219e:	ldrb	r3, [r6, #0]
    21a0:	cbz	r3, 21c8 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    21a2:	ldr	r7, [pc, #200]	; (226c <yield+0xd4>)
    21a4:	ldrb	r2, [r7, #0]
    21a6:	cbnz	r2, 21c8 <yield+0x30>
	running = 1;
    21a8:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    21aa:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    21ac:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    21ae:	bmi.n	2220 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    21b0:	lsls	r2, r3, #30
    21b2:	bmi.n	21e8 <yield+0x50>

	running = 0;
    21b4:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    21b6:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    21b8:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    21ba:	bpl.n	21c8 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    21bc:	ldr	r3, [pc, #176]	; (2270 <yield+0xd8>)
    21be:	ldr	r2, [r3, #0]
    21c0:	cbz	r2, 21c8 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    21c2:	mrs	r2, IPSR
		if (ipsr != 0) return;
    21c6:	cbz	r2, 21cc <yield+0x34>
    21c8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    21cc:	mrs	r0, PRIMASK
		__disable_irq();
    21d0:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    21d2:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    21d4:	cbz	r2, 21de <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    21d6:	ldr	r4, [pc, #156]	; (2274 <yield+0xdc>)
    21d8:	ldrb	r1, [r4, #0]
    21da:	cmp	r1, #0
    21dc:	beq.n	223e <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    21de:	cmp	r0, #0
    21e0:	bne.n	21c8 <yield+0x30>
    21e2:	cpsie	i
    21e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    21e8:	ldr.w	r8, [pc, #148]	; 2280 <yield+0xe8>
    21ec:	ldrb.w	r2, [r8]
    21f0:	cmp	r2, #0
    21f2:	beq.n	21b4 <yield+0x1c>
    21f4:	movs	r4, #0
    21f6:	ldr.w	r9, [pc, #140]	; 2284 <yield+0xec>
    21fa:	b.n	2208 <yield+0x70>
    21fc:	adds	r4, #1
    21fe:	ldrb.w	r3, [r8]
    2202:	uxtb	r4, r4
    2204:	cmp	r3, r4
    2206:	bls.n	2230 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    2208:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    220c:	ldr	r3, [r5, #0]
    220e:	mov	r0, r5
    2210:	ldr	r3, [r3, #16]
    2212:	blx	r3
    2214:	cmp	r0, #0
    2216:	beq.n	21fc <yield+0x64>
    2218:	ldr	r3, [r5, #20]
    221a:	ldr	r3, [r3, #8]
    221c:	blx	r3
    221e:	b.n	21fc <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2220:	bl	dbc <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    2224:	cbnz	r0, 225c <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    2226:	ldr	r3, [pc, #80]	; (2278 <yield+0xe0>)
    2228:	ldrb	r3, [r3, #0]
    222a:	cbnz	r3, 2234 <yield+0x9c>
    222c:	ldrb	r3, [r6, #0]
    222e:	b.n	21b0 <yield+0x18>
    2230:	ldrb	r3, [r6, #0]
    2232:	b.n	21b4 <yield+0x1c>
    2234:	ldrb	r3, [r6, #0]
    2236:	and.w	r3, r3, #254	; 0xfe
    223a:	strb	r3, [r6, #0]
    223c:	b.n	21b0 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    223e:	movs	r6, #1
		firstYield = first->_next;
    2240:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2242:	strb	r6, [r4, #0]
		firstYield = first->_next;
    2244:	str	r5, [r3, #0]
		if (firstYield) {
    2246:	cbz	r5, 2262 <yield+0xca>
			firstYield->_prev = nullptr;
    2248:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    224a:	cbnz	r0, 224e <yield+0xb6>
    224c:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    224e:	movs	r5, #0
		(*(first->_function))(*first);
    2250:	ldr	r3, [r2, #8]
    2252:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2254:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    2256:	blx	r3
		runningFromYield = false;
    2258:	strb	r5, [r4, #0]
    225a:	b.n	21c8 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    225c:	bl	2358 <serialEvent()>
    2260:	b.n	2226 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2262:	ldr	r3, [pc, #24]	; (227c <yield+0xe4>)
    2264:	str	r5, [r3, #0]
    2266:	b.n	224a <yield+0xb2>
    2268:	.word	0x20000789
    226c:	.word	0x20001438
    2270:	.word	0x20001448
    2274:	.word	0x2000144c
    2278:	.word	0x60001726
    227c:	.word	0x20001444
    2280:	.word	0x2000146c
    2284:	.word	0x20001450

00002288 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    2288:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    228a:	mrs	r1, PRIMASK
		__disable_irq();
    228e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2290:	ldr	r4, [pc, #48]	; (22c4 <EventResponder::runFromInterrupt()+0x3c>)
    2292:	ldr	r3, [r4, #0]
		if (first) {
    2294:	cbz	r3, 22ba <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2296:	ldr	r6, [pc, #48]	; (22c8 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    2298:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    229a:	ldr	r2, [r3, #20]
    229c:	str	r2, [r4, #0]
			if (firstInterrupt) {
    229e:	cbz	r2, 22c0 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    22a0:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    22a2:	cbnz	r1, 22a6 <EventResponder::runFromInterrupt()+0x1e>
    22a4:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    22a6:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    22a8:	mov	r0, r3
    22aa:	ldr	r3, [r3, #8]
    22ac:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    22ae:	mrs	r1, PRIMASK
		__disable_irq();
    22b2:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    22b4:	ldr	r3, [r4, #0]
		if (first) {
    22b6:	cmp	r3, #0
    22b8:	bne.n	229a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    22ba:	cbnz	r1, 22be <EventResponder::runFromInterrupt()+0x36>
    22bc:	cpsie	i
    22be:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    22c0:	str	r2, [r6, #0]
    22c2:	b.n	22a2 <EventResponder::runFromInterrupt()+0x1a>
    22c4:	.word	0x2000143c
    22c8:	.word	0x20001440

000022cc <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    22cc:	b.w	2288 <EventResponder::runFromInterrupt()>

000022d0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    22d0:	ldr	r2, [pc, #16]	; (22e4 <systick_isr+0x14>)
    22d2:	ldr	r3, [pc, #20]	; (22e8 <systick_isr+0x18>)
    22d4:	ldr	r1, [r2, #0]
	systick_millis_count++;
    22d6:	ldr	r2, [pc, #20]	; (22ec <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    22d8:	str	r1, [r3, #0]
	systick_millis_count++;
    22da:	ldr	r3, [r2, #0]
    22dc:	adds	r3, #1
    22de:	str	r3, [r2, #0]
    22e0:	bx	lr
    22e2:	nop
    22e4:	.word	0xe0001004
    22e8:	.word	0x2000141c
    22ec:	.word	0x20001424

000022f0 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    22f0:	b.w	dc8 <usb_serial_flush_input>

000022f4 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    22f4:	b.w	d78 <usb_serial_peekchar>

000022f8 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    22f8:	b.w	e3c <usb_serial_getchar>

000022fc <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    22fc:	b.w	dbc <usb_serial_available>

00002300 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2300:	b.w	eec <usb_serial_flush_output>

00002304 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2304:	b.w	ea0 <usb_serial_write_buffer_free>

00002308 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2308:	mov	r0, r1
    230a:	mov	r1, r2
    230c:	b.w	e88 <usb_serial_write>

00002310 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2310:	mov	r0, r1
    2312:	b.w	e5c <usb_serial_putchar>
    2316:	nop

00002318 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    2318:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    231a:	push	{r4, lr}
    231c:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    231e:	ldr	r3, [r3, #4]
    2320:	blx	r3
	return len;
}
    2322:	mov	r0, r4
    2324:	pop	{r4, pc}
    2326:	nop

00002328 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    2328:	push	{r1, r2, r3}
    232a:	push	{lr}
    232c:	sub	sp, #8
    232e:	add	r3, sp, #12
    2330:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    2334:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    2336:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    2338:	bl	3428 <vdprintf>
#endif
}
    233c:	add	sp, #8
    233e:	ldr.w	lr, [sp], #4
    2342:	add	sp, #12
    2344:	bx	lr
    2346:	nop

00002348 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2348:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    234a:	bl	308 <setup>
	while (1) {
		loop();
    234e:	bl	e8 <loop>
		yield();
    2352:	bl	2198 <yield>
    2356:	b.n	234e <main+0x6>

00002358 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    2358:	bx	lr
    235a:	nop

0000235c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    235c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    235e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2362:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2366:	bne.n	2444 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2368:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    236a:	bcc.n	23f0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    236c:	ldr.w	r3, [r1], #4
    2370:	str.w	r3, [r0], #4
    2374:	ldr.w	r3, [r1], #4
    2378:	str.w	r3, [r0], #4
    237c:	ldr.w	r3, [r1], #4
    2380:	str.w	r3, [r0], #4
    2384:	ldr.w	r3, [r1], #4
    2388:	str.w	r3, [r0], #4
    238c:	ldr.w	r3, [r1], #4
    2390:	str.w	r3, [r0], #4
    2394:	ldr.w	r3, [r1], #4
    2398:	str.w	r3, [r0], #4
    239c:	ldr.w	r3, [r1], #4
    23a0:	str.w	r3, [r0], #4
    23a4:	ldr.w	r3, [r1], #4
    23a8:	str.w	r3, [r0], #4
    23ac:	ldr.w	r3, [r1], #4
    23b0:	str.w	r3, [r0], #4
    23b4:	ldr.w	r3, [r1], #4
    23b8:	str.w	r3, [r0], #4
    23bc:	ldr.w	r3, [r1], #4
    23c0:	str.w	r3, [r0], #4
    23c4:	ldr.w	r3, [r1], #4
    23c8:	str.w	r3, [r0], #4
    23cc:	ldr.w	r3, [r1], #4
    23d0:	str.w	r3, [r0], #4
    23d4:	ldr.w	r3, [r1], #4
    23d8:	str.w	r3, [r0], #4
    23dc:	ldr.w	r3, [r1], #4
    23e0:	str.w	r3, [r0], #4
    23e4:	ldr.w	r3, [r1], #4
    23e8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    23ec:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    23ee:	bcs.n	236c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    23f0:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    23f2:	bcc.n	2418 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    23f4:	ldr.w	r3, [r1], #4
    23f8:	str.w	r3, [r0], #4
    23fc:	ldr.w	r3, [r1], #4
    2400:	str.w	r3, [r0], #4
    2404:	ldr.w	r3, [r1], #4
    2408:	str.w	r3, [r0], #4
    240c:	ldr.w	r3, [r1], #4
    2410:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2414:	subs	r2, #16
	bhs	.Lmid_block_loop
    2416:	bcs.n	23f4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2418:	adds	r2, #12
	blo	.Lcopy_less_than_4
    241a:	bcc.n	2428 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    241c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2420:	str.w	r3, [r0], #4
	subs	r2, #4
    2424:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2426:	bcs.n	241c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2428:	adds	r2, #4
	beq	.Ldone
    242a:	beq.n	243e <memcpy+0xe2>

	lsls	r2, r2, #31
    242c:	lsls	r2, r2, #31
	itt ne
    242e:	itt	ne
	ldrbne  r3, [r1], #1
    2430:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2434:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2438:	bcc.n	243e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    243a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    243c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    243e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2440:	bx	lr
    2442:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2444:	cmp	r2, #8
	blo	.Lbyte_copy
    2446:	bcc.n	2470 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2448:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    244a:	beq.n	2368 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    244c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2450:	beq.n	2368 <memcpy+0xc>

	rsb	r3, #4
    2452:	rsb	r3, r3, #4
	subs	r2, r3
    2456:	subs	r2, r2, r3

	lsls    r3, r3, #31
    2458:	lsls	r3, r3, #31
	itt ne
    245a:	itt	ne
	ldrbne  r3, [r1], #1
    245c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2460:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2464:	bcc.n	2368 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2466:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    246a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    246e:	b.n	2368 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2470:	subs	r2, #4
	blo	.Lcopy_less_than_4
    2472:	bcc.n	2428 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2474:	subs	r2, #1
	ldrb    r3, [r1], #1
    2476:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    247a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    247e:	bcs.n	2474 <memcpy+0x118>

	ldrb	r3, [r1]
    2480:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2482:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2484:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2486:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2488:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    248a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    248c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    248e:	bx	lr

00002490 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2490:	ldr	r2, [pc, #600]	; (26ec <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2492:	ldr	r3, [pc, #604]	; (26f0 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2494:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    2496:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    249a:	ldr	r4, [pc, #600]	; (26f4 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    249c:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    24a0:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    24a2:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    24a4:	bls.n	24e0 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    24a6:	ldr	r3, [pc, #592]	; (26f8 <set_arm_clock+0x268>)
    24a8:	cmp	r0, r3
    24aa:	bls.w	26d8 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    24ae:	ldr	r3, [pc, #588]	; (26fc <set_arm_clock+0x26c>)
    24b0:	movw	r5, #1575	; 0x627
    24b4:	ldr	r7, [pc, #584]	; (2700 <set_arm_clock+0x270>)
    24b6:	add	r3, r0
    24b8:	ldr	r4, [pc, #584]	; (2704 <set_arm_clock+0x274>)
    24ba:	lsrs	r2, r3, #8
    24bc:	umull	r3, r2, r7, r2
    24c0:	lsrs	r3, r2, #7
    24c2:	add.w	r3, r3, r3, lsl #2
    24c6:	add.w	r2, r3, r3, lsl #2
    24ca:	addw	r3, r2, #1250	; 0x4e2
    24ce:	cmp	r3, r5
    24d0:	it	cs
    24d2:	movcs	r3, r5
    24d4:	sub.w	r3, r3, #800	; 0x320
    24d8:	umull	r3, r5, r4, r3
    24dc:	lsrs	r5, r5, #3
    24de:	b.n	24ea <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    24e0:	ldr	r5, [pc, #548]	; (2708 <set_arm_clock+0x278>)
    24e2:	cmp	r0, r5
    24e4:	ite	ls
    24e6:	movls	r5, #6
    24e8:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    24ea:	ldr	r2, [pc, #516]	; (26f0 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    24ec:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    24f0:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    24f4:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    24f6:	orr.w	r3, r3, #192	; 0xc0
    24fa:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    24fe:	bcs.n	2516 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2500:	ldr	r3, [pc, #496]	; (26f4 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2502:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2506:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2508:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    250a:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    250c:	ldr	r3, [r2, #0]
    250e:	cmp	r3, #0
    2510:	bge.n	250c <set_arm_clock+0x7c>
    2512:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    2516:	ands.w	r3, lr, #33554432	; 0x2000000
    251a:	bne.n	2580 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    251c:	ldr	r4, [pc, #492]	; (270c <set_arm_clock+0x27c>)
    251e:	ldr	r2, [pc, #496]	; (2710 <set_arm_clock+0x280>)
    2520:	ldr.w	ip, [r4, #16]
    2524:	mov	r4, r2
    2526:	and.w	r2, ip, r2
    252a:	cmp	r2, r4
    252c:	itet	eq
    252e:	moveq.w	r3, #402653184	; 0x18000000
    2532:	movne.w	r2, #4096	; 0x1000
    2536:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2538:	eor.w	r4, lr, r3
    253c:	tst.w	r4, #939524096	; 0x38000000
    2540:	beq.n	2554 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    2542:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    2546:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    254a:	ldr	r4, [pc, #420]	; (26f0 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    254c:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    2550:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    2554:	eor.w	r3, r1, r2
    2558:	tst.w	r3, #12288	; 0x3000
    255c:	beq.n	2570 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    255e:	ldr	r3, [pc, #400]	; (26f0 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    2560:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    2564:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2566:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    2568:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    256a:	ldr	r3, [r2, #72]	; 0x48
    256c:	lsls	r4, r3, #28
    256e:	bmi.n	256a <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    2570:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    2574:	ldr	r2, [pc, #376]	; (26f0 <set_arm_clock+0x260>)
    2576:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    257a:	ldr	r3, [r2, #72]	; 0x48
    257c:	lsls	r1, r3, #26
    257e:	bmi.n	257a <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    2580:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2582:	ldr	r4, [pc, #400]	; (2714 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    2584:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    2586:	mul.w	r3, r1, r2
    258a:	mul.w	r3, r0, r3
    258e:	cmp	r3, r4
    2590:	bhi.n	25a6 <set_arm_clock+0x116>
		if (div_arm < 8) {
    2592:	cmp	r2, #7
    2594:	bhi.w	26c2 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    2598:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    259a:	mul.w	r3, r1, r2
    259e:	mul.w	r3, r0, r3
    25a2:	cmp	r3, r4
    25a4:	bls.n	2592 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    25a6:	ldr	r0, [pc, #368]	; (2718 <set_arm_clock+0x288>)
    25a8:	ldr	r4, [pc, #368]	; (271c <set_arm_clock+0x28c>)
    25aa:	add	r0, r3
    25ac:	umull	r0, r3, r4, r0
    25b0:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    25b2:	cmp	r3, #108	; 0x6c
    25b4:	bhi.w	26ce <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    25b8:	cmp	r3, #53	; 0x35
    25ba:	bhi.w	26dc <set_arm_clock+0x24c>
    25be:	ldr.w	r8, [pc, #392]	; 2748 <set_arm_clock+0x2b8>
    25c2:	movs	r3, #54	; 0x36
    25c4:	ldr	r0, [pc, #344]	; (2720 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    25c6:	ldr.w	ip, [pc, #324]	; 270c <set_arm_clock+0x27c>
    25ca:	ldr	r4, [pc, #344]	; (2724 <set_arm_clock+0x294>)
    25cc:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    25d0:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    25d4:	and.w	r4, r9, r4
    25d8:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    25da:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    25de:	beq.n	25f8 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    25e0:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    25e4:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    25e8:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    25ea:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    25ee:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    25f2:	ldr	r3, [r4, #0]
    25f4:	cmp	r3, #0
    25f6:	bge.n	25f2 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    25f8:	ldr.w	ip, [pc, #244]	; 26f0 <set_arm_clock+0x260>
    25fc:	subs	r2, #1
    25fe:	ldr.w	r3, [ip, #16]
    2602:	and.w	r3, r3, #7
    2606:	cmp	r3, r2
    2608:	beq.n	261a <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    260a:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    260e:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2610:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2614:	ldr	r3, [r4, #72]	; 0x48
    2616:	lsls	r3, r3, #15
    2618:	bmi.n	2614 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    261a:	subs	r1, #1
    261c:	lsls	r1, r1, #10
    261e:	eor.w	r3, lr, r1
    2622:	tst.w	r3, #7168	; 0x1c00
    2626:	beq.n	2642 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    2628:	ldr	r3, [pc, #196]	; (26f0 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    262a:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    262e:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2632:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2634:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    2638:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    263c:	ldr	r3, [r2, #72]	; 0x48
    263e:	lsls	r1, r3, #30
    2640:	bmi.n	263c <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2642:	ldr	r3, [pc, #228]	; (2728 <set_arm_clock+0x298>)
    2644:	ldr	r1, [pc, #228]	; (272c <set_arm_clock+0x29c>)
    2646:	add	r3, r0
    2648:	lsrs	r3, r3, #7
    264a:	umull	r3, r1, r1, r3
    264e:	lsrs	r1, r1, #12
    2650:	cmp	r1, #4
    2652:	it	cs
    2654:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    2656:	subs	r3, r1, #1
    2658:	lsls	r3, r3, #8
    265a:	eor.w	r2, lr, r3
    265e:	tst.w	r2, #768	; 0x300
    2662:	beq.n	2674 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    2664:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2668:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    266c:	ldr	r2, [pc, #128]	; (26f0 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    266e:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2672:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2674:	ldr	r3, [pc, #120]	; (26f0 <set_arm_clock+0x260>)
    2676:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2678:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    267a:	bic.w	r4, r4, #33554432	; 0x2000000
    267e:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2680:	ldr	r3, [r2, #72]	; 0x48
    2682:	lsls	r3, r3, #26
    2684:	bmi.n	2680 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2686:	ldr	r3, [pc, #168]	; (2730 <set_arm_clock+0x2a0>)
    2688:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    268c:	ldr	r4, [pc, #164]	; (2734 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    268e:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2690:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2694:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2696:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    269a:	ldr	r4, [pc, #156]	; (2738 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    269c:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    26a0:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    26a4:	ldr	r2, [pc, #148]	; (273c <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    26a6:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    26a8:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    26aa:	bcs.n	26be <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    26ac:	ldr	r3, [pc, #68]	; (26f4 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    26ae:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    26b2:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    26b4:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    26b6:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    26b8:	ldr	r3, [r2, #0]
    26ba:	cmp	r3, #0
    26bc:	bge.n	26b8 <set_arm_clock+0x228>
	}

	return frequency;
}
    26be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    26c2:	cmp	r1, #4
    26c4:	bhi.w	25a6 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    26c8:	adds	r1, #1
				div_arm = 1;
    26ca:	movs	r2, #1
    26cc:	b.n	2586 <set_arm_clock+0xf6>
    26ce:	ldr.w	r8, [pc, #124]	; 274c <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    26d2:	movs	r3, #108	; 0x6c
    26d4:	ldr	r0, [pc, #104]	; (2740 <set_arm_clock+0x2b0>)
    26d6:	b.n	25c6 <set_arm_clock+0x136>
    26d8:	movs	r5, #18
    26da:	b.n	24ea <set_arm_clock+0x5a>
    26dc:	ldr	r0, [pc, #100]	; (2744 <set_arm_clock+0x2b4>)
    26de:	ldr.w	r8, [pc, #112]	; 2750 <set_arm_clock+0x2c0>
    26e2:	mul.w	r0, r0, r3
    26e6:	orr.w	r8, r3, r8
    26ea:	b.n	25c6 <set_arm_clock+0x136>
    26ec:	.word	0x1f78a400
    26f0:	.word	0x400fc000
    26f4:	.word	0x40080000
    26f8:	.word	0x23c34600
    26fc:	.word	0xdc3cba00
    2700:	.word	0x004cb223
    2704:	.word	0x51eb851f
    2708:	.word	0x016e3600
    270c:	.word	0x400d8000
    2710:	.word	0x80003040
    2714:	.word	0x269fb1ff
    2718:	.word	0x005b8d80
    271c:	.word	0x165e9f81
    2720:	.word	0x269fb200
    2724:	.word	0x8001307f
    2728:	.word	0x08f0d17f
    272c:	.word	0x00e5109f
    2730:	.word	0x431bde83
    2734:	.word	0x200007a0
    2738:	.word	0x2000079c
    273c:	.word	0x20001420
    2740:	.word	0x4d3f6400
    2744:	.word	0x00b71b00
    2748:	.word	0x80002036
    274c:	.word	0x8000206c
    2750:	.word	0x80002000

00002754 <__aeabi_atexit>:
    2754:	mov	r3, r1
    2756:	mov	r1, r0
    2758:	mov	r0, r3
    275a:	b.w	2760 <__cxa_atexit>
    275e:	nop

00002760 <__cxa_atexit>:
    2760:	mov	r3, r2
    2762:	mov	r2, r1
    2764:	mov	r1, r0
    2766:	movs	r0, #2
    2768:	b.w	3488 <__register_exitproc>

0000276c <__errno>:
    276c:	ldr	r3, [pc, #4]	; (2774 <__errno+0x8>)
    276e:	ldr	r0, [r3, #0]
    2770:	bx	lr
    2772:	nop
    2774:	.word	0x20000bd0

00002778 <__libc_init_array>:
    2778:	push	{r4, r5, r6, lr}
    277a:	ldr	r6, [pc, #60]	; (27b8 <__libc_init_array+0x40>)
    277c:	ldr	r5, [pc, #60]	; (27bc <__libc_init_array+0x44>)
    277e:	subs	r6, r6, r5
    2780:	asrs	r6, r6, #2
    2782:	it	ne
    2784:	movne	r4, #0
    2786:	beq.n	2794 <__libc_init_array+0x1c>
    2788:	adds	r4, #1
    278a:	ldr.w	r3, [r5], #4
    278e:	blx	r3
    2790:	cmp	r6, r4
    2792:	bne.n	2788 <__libc_init_array+0x10>
    2794:	ldr	r6, [pc, #40]	; (27c0 <__libc_init_array+0x48>)
    2796:	ldr	r5, [pc, #44]	; (27c4 <__libc_init_array+0x4c>)
    2798:	subs	r6, r6, r5
    279a:	bl	6680 <___init_veneer>
    279e:	asrs	r6, r6, #2
    27a0:	it	ne
    27a2:	movne	r4, #0
    27a4:	beq.n	27b4 <__libc_init_array+0x3c>
    27a6:	adds	r4, #1
    27a8:	ldr.w	r3, [r5], #4
    27ac:	blx	r3
    27ae:	cmp	r6, r4
    27b0:	bne.n	27a6 <__libc_init_array+0x2e>
    27b2:	pop	{r4, r5, r6, pc}
    27b4:	pop	{r4, r5, r6, pc}
    27b6:	nop
    27b8:	.word	0x60001780
    27bc:	.word	0x60001780
    27c0:	.word	0x60001788
    27c4:	.word	0x60001780

000027c8 <malloc>:
    27c8:	ldr	r3, [pc, #8]	; (27d4 <malloc+0xc>)
    27ca:	mov	r1, r0
    27cc:	ldr	r0, [r3, #0]
    27ce:	b.w	27d8 <_malloc_r>
    27d2:	nop
    27d4:	.word	0x20000bd0

000027d8 <_malloc_r>:
    27d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27dc:	add.w	r5, r1, #11
    27e0:	cmp	r5, #22
    27e2:	sub	sp, #12
    27e4:	mov	r6, r0
    27e6:	bls.w	2928 <_malloc_r+0x150>
    27ea:	bics.w	r5, r5, #7
    27ee:	bmi.w	2970 <_malloc_r+0x198>
    27f2:	cmp	r1, r5
    27f4:	bhi.w	2970 <_malloc_r+0x198>
    27f8:	bl	2ed8 <__malloc_lock>
    27fc:	cmp.w	r5, #504	; 0x1f8
    2800:	bcc.w	2d3c <_malloc_r+0x564>
    2804:	lsrs	r3, r5, #9
    2806:	beq.w	297e <_malloc_r+0x1a6>
    280a:	cmp	r3, #4
    280c:	bhi.w	2b16 <_malloc_r+0x33e>
    2810:	lsrs	r0, r5, #6
    2812:	add.w	lr, r0, #57	; 0x39
    2816:	mov.w	r3, lr, lsl #1
    281a:	adds	r0, #56	; 0x38
    281c:	ldr	r7, [pc, #784]	; (2b30 <_malloc_r+0x358>)
    281e:	add.w	r3, r7, r3, lsl #2
    2822:	sub.w	r1, r3, #8
    2826:	ldr	r4, [r3, #4]
    2828:	cmp	r1, r4
    282a:	bne.n	283c <_malloc_r+0x64>
    282c:	b.n	2988 <_malloc_r+0x1b0>
    282e:	cmp	r2, #0
    2830:	bge.w	298c <_malloc_r+0x1b4>
    2834:	ldr	r4, [r4, #12]
    2836:	cmp	r1, r4
    2838:	beq.w	2988 <_malloc_r+0x1b0>
    283c:	ldr	r3, [r4, #4]
    283e:	bic.w	r3, r3, #3
    2842:	subs	r2, r3, r5
    2844:	cmp	r2, #15
    2846:	ble.n	282e <_malloc_r+0x56>
    2848:	ldr	r1, [pc, #740]	; (2b30 <_malloc_r+0x358>)
    284a:	ldr	r4, [r7, #16]
    284c:	add.w	lr, r1, #8
    2850:	cmp	r4, lr
    2852:	beq.w	2bbc <_malloc_r+0x3e4>
    2856:	ldr	r3, [r4, #4]
    2858:	bic.w	r3, r3, #3
    285c:	subs	r2, r3, r5
    285e:	cmp	r2, #15
    2860:	bgt.w	2b96 <_malloc_r+0x3be>
    2864:	cmp	r2, #0
    2866:	str.w	lr, [r1, #20]
    286a:	str.w	lr, [r1, #16]
    286e:	bge.w	29ae <_malloc_r+0x1d6>
    2872:	cmp.w	r3, #512	; 0x200
    2876:	bcs.w	2b48 <_malloc_r+0x370>
    287a:	lsrs	r3, r3, #3
    287c:	add.w	ip, r3, #1
    2880:	movs	r2, #1
    2882:	asrs	r3, r3, #2
    2884:	lsl.w	r3, r2, r3
    2888:	ldr	r2, [r1, #4]
    288a:	ldr.w	r8, [r1, ip, lsl #3]
    288e:	str.w	r8, [r4, #8]
    2892:	add.w	r9, r1, ip, lsl #3
    2896:	orrs	r2, r3
    2898:	sub.w	r3, r9, #8
    289c:	str	r3, [r4, #12]
    289e:	str	r2, [r1, #4]
    28a0:	str.w	r4, [r1, ip, lsl #3]
    28a4:	str.w	r4, [r8, #12]
    28a8:	asrs	r3, r0, #2
    28aa:	movs	r4, #1
    28ac:	lsls	r4, r3
    28ae:	cmp	r4, r2
    28b0:	bhi.w	29c8 <_malloc_r+0x1f0>
    28b4:	tst	r4, r2
    28b6:	bne.n	28c6 <_malloc_r+0xee>
    28b8:	bic.w	r0, r0, #3
    28bc:	lsls	r4, r4, #1
    28be:	tst	r4, r2
    28c0:	add.w	r0, r0, #4
    28c4:	beq.n	28bc <_malloc_r+0xe4>
    28c6:	add.w	r9, r7, r0, lsl #3
    28ca:	mov	ip, r9
    28cc:	mov	r8, r0
    28ce:	ldr.w	r1, [ip, #12]
    28d2:	cmp	ip, r1
    28d4:	bne.n	28e6 <_malloc_r+0x10e>
    28d6:	b.n	2bc0 <_malloc_r+0x3e8>
    28d8:	cmp	r2, #0
    28da:	bge.w	2be0 <_malloc_r+0x408>
    28de:	ldr	r1, [r1, #12]
    28e0:	cmp	ip, r1
    28e2:	beq.w	2bc0 <_malloc_r+0x3e8>
    28e6:	ldr	r3, [r1, #4]
    28e8:	bic.w	r3, r3, #3
    28ec:	subs	r2, r3, r5
    28ee:	cmp	r2, #15
    28f0:	ble.n	28d8 <_malloc_r+0x100>
    28f2:	mov	r4, r1
    28f4:	ldr.w	ip, [r1, #12]
    28f8:	ldr.w	r8, [r4, #8]!
    28fc:	adds	r3, r1, r5
    28fe:	orr.w	r5, r5, #1
    2902:	str	r5, [r1, #4]
    2904:	orr.w	r1, r2, #1
    2908:	str.w	ip, [r8, #12]
    290c:	mov	r0, r6
    290e:	str.w	r8, [ip, #8]
    2912:	str	r3, [r7, #20]
    2914:	str	r3, [r7, #16]
    2916:	str.w	lr, [r3, #12]
    291a:	str.w	lr, [r3, #8]
    291e:	str	r1, [r3, #4]
    2920:	str	r2, [r3, r2]
    2922:	bl	2edc <__malloc_unlock>
    2926:	b.n	2968 <_malloc_r+0x190>
    2928:	cmp	r1, #16
    292a:	bhi.n	2970 <_malloc_r+0x198>
    292c:	bl	2ed8 <__malloc_lock>
    2930:	movs	r5, #16
    2932:	movs	r3, #6
    2934:	movs	r0, #2
    2936:	ldr	r7, [pc, #504]	; (2b30 <_malloc_r+0x358>)
    2938:	add.w	r3, r7, r3, lsl #2
    293c:	sub.w	r2, r3, #8
    2940:	ldr	r4, [r3, #4]
    2942:	cmp	r4, r2
    2944:	beq.w	2bd2 <_malloc_r+0x3fa>
    2948:	ldr	r3, [r4, #4]
    294a:	ldr	r1, [r4, #12]
    294c:	ldr	r5, [r4, #8]
    294e:	bic.w	r3, r3, #3
    2952:	add	r3, r4
    2954:	mov	r0, r6
    2956:	ldr	r2, [r3, #4]
    2958:	str	r1, [r5, #12]
    295a:	orr.w	r2, r2, #1
    295e:	str	r5, [r1, #8]
    2960:	str	r2, [r3, #4]
    2962:	bl	2edc <__malloc_unlock>
    2966:	adds	r4, #8
    2968:	mov	r0, r4
    296a:	add	sp, #12
    296c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2970:	movs	r4, #0
    2972:	movs	r3, #12
    2974:	mov	r0, r4
    2976:	str	r3, [r6, #0]
    2978:	add	sp, #12
    297a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    297e:	movs	r3, #128	; 0x80
    2980:	mov.w	lr, #64	; 0x40
    2984:	movs	r0, #63	; 0x3f
    2986:	b.n	281c <_malloc_r+0x44>
    2988:	mov	r0, lr
    298a:	b.n	2848 <_malloc_r+0x70>
    298c:	add	r3, r4
    298e:	ldr	r1, [r4, #12]
    2990:	ldr	r2, [r3, #4]
    2992:	ldr	r5, [r4, #8]
    2994:	orr.w	r2, r2, #1
    2998:	str	r1, [r5, #12]
    299a:	mov	r0, r6
    299c:	str	r5, [r1, #8]
    299e:	str	r2, [r3, #4]
    29a0:	bl	2edc <__malloc_unlock>
    29a4:	adds	r4, #8
    29a6:	mov	r0, r4
    29a8:	add	sp, #12
    29aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29ae:	add	r3, r4
    29b0:	mov	r0, r6
    29b2:	ldr	r2, [r3, #4]
    29b4:	orr.w	r2, r2, #1
    29b8:	str	r2, [r3, #4]
    29ba:	bl	2edc <__malloc_unlock>
    29be:	adds	r4, #8
    29c0:	mov	r0, r4
    29c2:	add	sp, #12
    29c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29c8:	ldr	r4, [r7, #8]
    29ca:	ldr	r3, [r4, #4]
    29cc:	bic.w	r8, r3, #3
    29d0:	cmp	r8, r5
    29d2:	bcc.n	29de <_malloc_r+0x206>
    29d4:	rsb	r3, r5, r8
    29d8:	cmp	r3, #15
    29da:	bgt.w	2af6 <_malloc_r+0x31e>
    29de:	ldr	r3, [pc, #340]	; (2b34 <_malloc_r+0x35c>)
    29e0:	ldr.w	r9, [pc, #352]	; 2b44 <_malloc_r+0x36c>
    29e4:	ldr	r2, [r3, #0]
    29e6:	ldr.w	r3, [r9]
    29ea:	adds	r3, #1
    29ec:	add	r2, r5
    29ee:	add.w	sl, r4, r8
    29f2:	beq.w	2cb6 <_malloc_r+0x4de>
    29f6:	add.w	r2, r2, #4096	; 0x1000
    29fa:	adds	r2, #15
    29fc:	bic.w	r2, r2, #4080	; 0xff0
    2a00:	bic.w	r2, r2, #15
    2a04:	mov	r1, r2
    2a06:	mov	r0, r6
    2a08:	str	r2, [sp, #4]
    2a0a:	bl	32c0 <_sbrk_r>
    2a0e:	cmp.w	r0, #4294967295
    2a12:	mov	fp, r0
    2a14:	ldr	r2, [sp, #4]
    2a16:	beq.w	2cca <_malloc_r+0x4f2>
    2a1a:	cmp	sl, r0
    2a1c:	bhi.w	2c18 <_malloc_r+0x440>
    2a20:	ldr	r3, [pc, #276]	; (2b38 <_malloc_r+0x360>)
    2a22:	ldr	r1, [r3, #0]
    2a24:	cmp	sl, fp
    2a26:	add	r1, r2
    2a28:	str	r1, [r3, #0]
    2a2a:	beq.w	2cd4 <_malloc_r+0x4fc>
    2a2e:	ldr.w	r0, [r9]
    2a32:	ldr.w	lr, [pc, #272]	; 2b44 <_malloc_r+0x36c>
    2a36:	adds	r0, #1
    2a38:	ittet	ne
    2a3a:	rsbne	sl, sl, fp
    2a3e:	addne	r1, sl
    2a40:	streq.w	fp, [lr]
    2a44:	strne	r1, [r3, #0]
    2a46:	ands.w	r1, fp, #7
    2a4a:	beq.w	2c7c <_malloc_r+0x4a4>
    2a4e:	rsb	r0, r1, #8
    2a52:	rsb	r1, r1, #4096	; 0x1000
    2a56:	add	fp, r0
    2a58:	adds	r1, #8
    2a5a:	add	r2, fp
    2a5c:	ubfx	r2, r2, #0, #12
    2a60:	rsb	r9, r2, r1
    2a64:	mov	r1, r9
    2a66:	mov	r0, r6
    2a68:	str	r3, [sp, #4]
    2a6a:	bl	32c0 <_sbrk_r>
    2a6e:	adds	r3, r0, #1
    2a70:	ldr	r3, [sp, #4]
    2a72:	beq.w	2cf4 <_malloc_r+0x51c>
    2a76:	rsb	r2, fp, r0
    2a7a:	add	r2, r9
    2a7c:	orr.w	r2, r2, #1
    2a80:	ldr	r1, [r3, #0]
    2a82:	str.w	fp, [r7, #8]
    2a86:	add	r1, r9
    2a88:	cmp	r4, r7
    2a8a:	str.w	r2, [fp, #4]
    2a8e:	str	r1, [r3, #0]
    2a90:	ldr.w	r9, [pc, #164]	; 2b38 <_malloc_r+0x360>
    2a94:	beq.n	2ac4 <_malloc_r+0x2ec>
    2a96:	cmp.w	r8, #15
    2a9a:	bls.w	2c98 <_malloc_r+0x4c0>
    2a9e:	ldr	r2, [r4, #4]
    2aa0:	sub.w	r3, r8, #12
    2aa4:	bic.w	r3, r3, #7
    2aa8:	adds	r0, r4, r3
    2aaa:	and.w	r2, r2, #1
    2aae:	mov.w	lr, #5
    2ab2:	orrs	r2, r3
    2ab4:	cmp	r3, #15
    2ab6:	str	r2, [r4, #4]
    2ab8:	str.w	lr, [r0, #4]
    2abc:	str.w	lr, [r0, #8]
    2ac0:	bhi.w	2cfc <_malloc_r+0x524>
    2ac4:	ldr	r3, [pc, #116]	; (2b3c <_malloc_r+0x364>)
    2ac6:	ldr	r4, [r7, #8]
    2ac8:	ldr	r2, [r3, #0]
    2aca:	cmp	r1, r2
    2acc:	it	hi
    2ace:	strhi	r1, [r3, #0]
    2ad0:	ldr	r3, [pc, #108]	; (2b40 <_malloc_r+0x368>)
    2ad2:	ldr	r2, [r3, #0]
    2ad4:	cmp	r1, r2
    2ad6:	ldr	r2, [r4, #4]
    2ad8:	it	hi
    2ada:	strhi	r1, [r3, #0]
    2adc:	bic.w	r2, r2, #3
    2ae0:	cmp	r5, r2
    2ae2:	sub.w	r3, r2, r5
    2ae6:	bhi.n	2aec <_malloc_r+0x314>
    2ae8:	cmp	r3, #15
    2aea:	bgt.n	2af6 <_malloc_r+0x31e>
    2aec:	mov	r0, r6
    2aee:	bl	2edc <__malloc_unlock>
    2af2:	movs	r4, #0
    2af4:	b.n	2968 <_malloc_r+0x190>
    2af6:	adds	r2, r4, r5
    2af8:	orr.w	r3, r3, #1
    2afc:	orr.w	r5, r5, #1
    2b00:	str	r5, [r4, #4]
    2b02:	mov	r0, r6
    2b04:	str	r2, [r7, #8]
    2b06:	str	r3, [r2, #4]
    2b08:	bl	2edc <__malloc_unlock>
    2b0c:	adds	r4, #8
    2b0e:	mov	r0, r4
    2b10:	add	sp, #12
    2b12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b16:	cmp	r3, #20
    2b18:	bls.n	2bfe <_malloc_r+0x426>
    2b1a:	cmp	r3, #84	; 0x54
    2b1c:	bhi.w	2c68 <_malloc_r+0x490>
    2b20:	lsrs	r0, r5, #12
    2b22:	add.w	lr, r0, #111	; 0x6f
    2b26:	mov.w	r3, lr, lsl #1
    2b2a:	adds	r0, #110	; 0x6e
    2b2c:	b.n	281c <_malloc_r+0x44>
    2b2e:	nop
    2b30:	.word	0x20000d40
    2b34:	.word	0x20001478
    2b38:	.word	0x2000147c
    2b3c:	.word	0x20001474
    2b40:	.word	0x20001470
    2b44:	.word	0x2000114c
    2b48:	lsrs	r2, r3, #9
    2b4a:	cmp	r2, #4
    2b4c:	bls.n	2c0c <_malloc_r+0x434>
    2b4e:	cmp	r2, #20
    2b50:	bhi.w	2cba <_malloc_r+0x4e2>
    2b54:	add.w	r1, r2, #92	; 0x5c
    2b58:	lsls	r1, r1, #1
    2b5a:	adds	r2, #91	; 0x5b
    2b5c:	add.w	ip, r7, r1, lsl #2
    2b60:	ldr.w	r1, [r7, r1, lsl #2]
    2b64:	ldr.w	r8, [pc, #476]	; 2d44 <_malloc_r+0x56c>
    2b68:	sub.w	ip, ip, #8
    2b6c:	cmp	ip, r1
    2b6e:	beq.w	2c82 <_malloc_r+0x4aa>
    2b72:	ldr	r2, [r1, #4]
    2b74:	bic.w	r2, r2, #3
    2b78:	cmp	r3, r2
    2b7a:	bcs.n	2b82 <_malloc_r+0x3aa>
    2b7c:	ldr	r1, [r1, #8]
    2b7e:	cmp	ip, r1
    2b80:	bne.n	2b72 <_malloc_r+0x39a>
    2b82:	ldr.w	ip, [r1, #12]
    2b86:	ldr	r2, [r7, #4]
    2b88:	str.w	ip, [r4, #12]
    2b8c:	str	r1, [r4, #8]
    2b8e:	str.w	r4, [ip, #8]
    2b92:	str	r4, [r1, #12]
    2b94:	b.n	28a8 <_malloc_r+0xd0>
    2b96:	adds	r3, r4, r5
    2b98:	orr.w	r7, r2, #1
    2b9c:	orr.w	r5, r5, #1
    2ba0:	str	r5, [r4, #4]
    2ba2:	mov	r0, r6
    2ba4:	str	r3, [r1, #20]
    2ba6:	str	r3, [r1, #16]
    2ba8:	str.w	lr, [r3, #12]
    2bac:	str.w	lr, [r3, #8]
    2bb0:	str	r7, [r3, #4]
    2bb2:	str	r2, [r3, r2]
    2bb4:	adds	r4, #8
    2bb6:	bl	2edc <__malloc_unlock>
    2bba:	b.n	2968 <_malloc_r+0x190>
    2bbc:	ldr	r2, [r1, #4]
    2bbe:	b.n	28a8 <_malloc_r+0xd0>
    2bc0:	add.w	r8, r8, #1
    2bc4:	tst.w	r8, #3
    2bc8:	add.w	ip, ip, #8
    2bcc:	bne.w	28ce <_malloc_r+0xf6>
    2bd0:	b.n	2c34 <_malloc_r+0x45c>
    2bd2:	ldr	r4, [r3, #12]
    2bd4:	cmp	r3, r4
    2bd6:	it	eq
    2bd8:	addeq	r0, #2
    2bda:	beq.w	2848 <_malloc_r+0x70>
    2bde:	b.n	2948 <_malloc_r+0x170>
    2be0:	add	r3, r1
    2be2:	mov	r4, r1
    2be4:	ldr	r2, [r3, #4]
    2be6:	ldr	r1, [r1, #12]
    2be8:	ldr.w	r5, [r4, #8]!
    2bec:	orr.w	r2, r2, #1
    2bf0:	str	r2, [r3, #4]
    2bf2:	mov	r0, r6
    2bf4:	str	r1, [r5, #12]
    2bf6:	str	r5, [r1, #8]
    2bf8:	bl	2edc <__malloc_unlock>
    2bfc:	b.n	2968 <_malloc_r+0x190>
    2bfe:	add.w	lr, r3, #92	; 0x5c
    2c02:	add.w	r0, r3, #91	; 0x5b
    2c06:	mov.w	r3, lr, lsl #1
    2c0a:	b.n	281c <_malloc_r+0x44>
    2c0c:	lsrs	r2, r3, #6
    2c0e:	add.w	r1, r2, #57	; 0x39
    2c12:	lsls	r1, r1, #1
    2c14:	adds	r2, #56	; 0x38
    2c16:	b.n	2b5c <_malloc_r+0x384>
    2c18:	cmp	r4, r7
    2c1a:	ldr	r3, [pc, #296]	; (2d44 <_malloc_r+0x56c>)
    2c1c:	beq.w	2a20 <_malloc_r+0x248>
    2c20:	ldr	r4, [r3, #8]
    2c22:	ldr	r2, [r4, #4]
    2c24:	bic.w	r2, r2, #3
    2c28:	b.n	2ae0 <_malloc_r+0x308>
    2c2a:	ldr.w	r3, [r9], #-8
    2c2e:	cmp	r9, r3
    2c30:	bne.w	2d38 <_malloc_r+0x560>
    2c34:	tst.w	r0, #3
    2c38:	add.w	r0, r0, #4294967295
    2c3c:	bne.n	2c2a <_malloc_r+0x452>
    2c3e:	ldr	r3, [r7, #4]
    2c40:	bic.w	r3, r3, r4
    2c44:	str	r3, [r7, #4]
    2c46:	lsls	r4, r4, #1
    2c48:	cmp	r4, r3
    2c4a:	bhi.w	29c8 <_malloc_r+0x1f0>
    2c4e:	cmp	r4, #0
    2c50:	beq.w	29c8 <_malloc_r+0x1f0>
    2c54:	tst	r4, r3
    2c56:	mov	r0, r8
    2c58:	bne.w	28c6 <_malloc_r+0xee>
    2c5c:	lsls	r4, r4, #1
    2c5e:	tst	r4, r3
    2c60:	add.w	r0, r0, #4
    2c64:	beq.n	2c5c <_malloc_r+0x484>
    2c66:	b.n	28c6 <_malloc_r+0xee>
    2c68:	cmp.w	r3, #340	; 0x154
    2c6c:	bhi.n	2ca0 <_malloc_r+0x4c8>
    2c6e:	lsrs	r0, r5, #15
    2c70:	add.w	lr, r0, #120	; 0x78
    2c74:	mov.w	r3, lr, lsl #1
    2c78:	adds	r0, #119	; 0x77
    2c7a:	b.n	281c <_malloc_r+0x44>
    2c7c:	mov.w	r1, #4096	; 0x1000
    2c80:	b.n	2a5a <_malloc_r+0x282>
    2c82:	movs	r1, #1
    2c84:	ldr.w	r3, [r8, #4]
    2c88:	asrs	r2, r2, #2
    2c8a:	lsl.w	r2, r1, r2
    2c8e:	orrs	r2, r3
    2c90:	str.w	r2, [r8, #4]
    2c94:	mov	r1, ip
    2c96:	b.n	2b88 <_malloc_r+0x3b0>
    2c98:	movs	r3, #1
    2c9a:	str.w	r3, [fp, #4]
    2c9e:	b.n	2aec <_malloc_r+0x314>
    2ca0:	movw	r2, #1364	; 0x554
    2ca4:	cmp	r3, r2
    2ca6:	bhi.n	2cea <_malloc_r+0x512>
    2ca8:	lsrs	r0, r5, #18
    2caa:	add.w	lr, r0, #125	; 0x7d
    2cae:	mov.w	r3, lr, lsl #1
    2cb2:	adds	r0, #124	; 0x7c
    2cb4:	b.n	281c <_malloc_r+0x44>
    2cb6:	adds	r2, #16
    2cb8:	b.n	2a04 <_malloc_r+0x22c>
    2cba:	cmp	r2, #84	; 0x54
    2cbc:	bhi.n	2d0c <_malloc_r+0x534>
    2cbe:	lsrs	r2, r3, #12
    2cc0:	add.w	r1, r2, #111	; 0x6f
    2cc4:	lsls	r1, r1, #1
    2cc6:	adds	r2, #110	; 0x6e
    2cc8:	b.n	2b5c <_malloc_r+0x384>
    2cca:	ldr	r4, [r7, #8]
    2ccc:	ldr	r2, [r4, #4]
    2cce:	bic.w	r2, r2, #3
    2cd2:	b.n	2ae0 <_malloc_r+0x308>
    2cd4:	ubfx	r0, sl, #0, #12
    2cd8:	cmp	r0, #0
    2cda:	bne.w	2a2e <_malloc_r+0x256>
    2cde:	add	r2, r8
    2ce0:	ldr	r3, [r7, #8]
    2ce2:	orr.w	r2, r2, #1
    2ce6:	str	r2, [r3, #4]
    2ce8:	b.n	2ac4 <_malloc_r+0x2ec>
    2cea:	movs	r3, #254	; 0xfe
    2cec:	mov.w	lr, #127	; 0x7f
    2cf0:	movs	r0, #126	; 0x7e
    2cf2:	b.n	281c <_malloc_r+0x44>
    2cf4:	movs	r2, #1
    2cf6:	mov.w	r9, #0
    2cfa:	b.n	2a80 <_malloc_r+0x2a8>
    2cfc:	add.w	r1, r4, #8
    2d00:	mov	r0, r6
    2d02:	bl	35c8 <_free_r>
    2d06:	ldr.w	r1, [r9]
    2d0a:	b.n	2ac4 <_malloc_r+0x2ec>
    2d0c:	cmp.w	r2, #340	; 0x154
    2d10:	bhi.n	2d1e <_malloc_r+0x546>
    2d12:	lsrs	r2, r3, #15
    2d14:	add.w	r1, r2, #120	; 0x78
    2d18:	lsls	r1, r1, #1
    2d1a:	adds	r2, #119	; 0x77
    2d1c:	b.n	2b5c <_malloc_r+0x384>
    2d1e:	movw	r1, #1364	; 0x554
    2d22:	cmp	r2, r1
    2d24:	bhi.n	2d32 <_malloc_r+0x55a>
    2d26:	lsrs	r2, r3, #18
    2d28:	add.w	r1, r2, #125	; 0x7d
    2d2c:	lsls	r1, r1, #1
    2d2e:	adds	r2, #124	; 0x7c
    2d30:	b.n	2b5c <_malloc_r+0x384>
    2d32:	movs	r1, #254	; 0xfe
    2d34:	movs	r2, #126	; 0x7e
    2d36:	b.n	2b5c <_malloc_r+0x384>
    2d38:	ldr	r3, [r7, #4]
    2d3a:	b.n	2c46 <_malloc_r+0x46e>
    2d3c:	lsrs	r0, r5, #3
    2d3e:	adds	r3, r0, #1
    2d40:	lsls	r3, r3, #1
    2d42:	b.n	2936 <_malloc_r+0x15e>
    2d44:	.word	0x20000d40

00002d48 <__ascii_mbtowc>:
    2d48:	sub	sp, #8
    2d4a:	cbz	r1, 2d60 <__ascii_mbtowc+0x18>
    2d4c:	cbz	r2, 2d66 <__ascii_mbtowc+0x1e>
    2d4e:	cbz	r3, 2d6c <__ascii_mbtowc+0x24>
    2d50:	ldrb	r3, [r2, #0]
    2d52:	str	r3, [r1, #0]
    2d54:	ldrb	r2, [r2, #0]
    2d56:	adds	r0, r2, #0
    2d58:	it	ne
    2d5a:	movne	r0, #1
    2d5c:	add	sp, #8
    2d5e:	bx	lr
    2d60:	add	r1, sp, #4
    2d62:	cmp	r2, #0
    2d64:	bne.n	2d4e <__ascii_mbtowc+0x6>
    2d66:	mov	r0, r2
    2d68:	add	sp, #8
    2d6a:	bx	lr
    2d6c:	mvn.w	r0, #1
    2d70:	b.n	2d5c <__ascii_mbtowc+0x14>
    2d72:	nop

00002d74 <memmove>:
    2d74:	cmp	r0, r1
    2d76:	push	{r4, r5, r6, r7, lr}
    2d78:	bls.n	2d96 <memmove+0x22>
    2d7a:	adds	r3, r1, r2
    2d7c:	cmp	r0, r3
    2d7e:	bcs.n	2d96 <memmove+0x22>
    2d80:	adds	r1, r0, r2
    2d82:	cmp	r2, #0
    2d84:	beq.n	2e2a <memmove+0xb6>
    2d86:	subs	r2, r3, r2
    2d88:	ldrb.w	r4, [r3, #-1]!
    2d8c:	strb.w	r4, [r1, #-1]!
    2d90:	cmp	r3, r2
    2d92:	bne.n	2d88 <memmove+0x14>
    2d94:	pop	{r4, r5, r6, r7, pc}
    2d96:	cmp	r2, #15
    2d98:	bls.n	2e2c <memmove+0xb8>
    2d9a:	orr.w	r3, r1, r0
    2d9e:	lsls	r3, r3, #30
    2da0:	bne.n	2e30 <memmove+0xbc>
    2da2:	add.w	r4, r0, #16
    2da6:	add.w	r3, r1, #16
    2daa:	mov	r5, r2
    2dac:	ldr.w	r6, [r3, #-16]
    2db0:	str.w	r6, [r4, #-16]
    2db4:	ldr.w	r6, [r3, #-12]
    2db8:	str.w	r6, [r4, #-12]
    2dbc:	ldr.w	r6, [r3, #-8]
    2dc0:	str.w	r6, [r4, #-8]
    2dc4:	subs	r5, #16
    2dc6:	ldr.w	r6, [r3, #-4]
    2dca:	str.w	r6, [r4, #-4]
    2dce:	cmp	r5, #15
    2dd0:	add.w	r3, r3, #16
    2dd4:	add.w	r4, r4, #16
    2dd8:	bhi.n	2dac <memmove+0x38>
    2dda:	sub.w	r3, r2, #16
    2dde:	bic.w	r3, r3, #15
    2de2:	and.w	lr, r2, #15
    2de6:	adds	r3, #16
    2de8:	cmp.w	lr, #3
    2dec:	add	r1, r3
    2dee:	add	r3, r0
    2df0:	bls.n	2e36 <memmove+0xc2>
    2df2:	subs	r6, r3, #4
    2df4:	mov	r5, r1
    2df6:	mov	r4, lr
    2df8:	subs	r4, #4
    2dfa:	ldr.w	r7, [r5], #4
    2dfe:	str.w	r7, [r6, #4]!
    2e02:	cmp	r4, #3
    2e04:	bhi.n	2df8 <memmove+0x84>
    2e06:	sub.w	r4, lr, #4
    2e0a:	bic.w	r4, r4, #3
    2e0e:	adds	r4, #4
    2e10:	add	r3, r4
    2e12:	add	r1, r4
    2e14:	and.w	r2, r2, #3
    2e18:	cbz	r2, 2e34 <memmove+0xc0>
    2e1a:	subs	r3, #1
    2e1c:	add	r2, r1
    2e1e:	ldrb.w	r4, [r1], #1
    2e22:	strb.w	r4, [r3, #1]!
    2e26:	cmp	r2, r1
    2e28:	bne.n	2e1e <memmove+0xaa>
    2e2a:	pop	{r4, r5, r6, r7, pc}
    2e2c:	mov	r3, r0
    2e2e:	b.n	2e18 <memmove+0xa4>
    2e30:	mov	r3, r0
    2e32:	b.n	2e1a <memmove+0xa6>
    2e34:	pop	{r4, r5, r6, r7, pc}
    2e36:	mov	r2, lr
    2e38:	b.n	2e18 <memmove+0xa4>
    2e3a:	nop

00002e3c <memset>:
    2e3c:	push	{r4, r5, r6}
    2e3e:	lsls	r4, r0, #30
    2e40:	beq.n	2ed0 <memset+0x94>
    2e42:	subs	r4, r2, #1
    2e44:	cmp	r2, #0
    2e46:	beq.n	2ecc <memset+0x90>
    2e48:	uxtb	r5, r1
    2e4a:	mov	r3, r0
    2e4c:	b.n	2e54 <memset+0x18>
    2e4e:	subs	r2, r4, #1
    2e50:	cbz	r4, 2ecc <memset+0x90>
    2e52:	mov	r4, r2
    2e54:	strb.w	r5, [r3], #1
    2e58:	lsls	r2, r3, #30
    2e5a:	bne.n	2e4e <memset+0x12>
    2e5c:	cmp	r4, #3
    2e5e:	bls.n	2ebe <memset+0x82>
    2e60:	uxtb	r5, r1
    2e62:	orr.w	r5, r5, r5, lsl #8
    2e66:	cmp	r4, #15
    2e68:	orr.w	r5, r5, r5, lsl #16
    2e6c:	bls.n	2ea2 <memset+0x66>
    2e6e:	add.w	r2, r3, #16
    2e72:	mov	r6, r4
    2e74:	subs	r6, #16
    2e76:	cmp	r6, #15
    2e78:	str.w	r5, [r2, #-16]
    2e7c:	str.w	r5, [r2, #-12]
    2e80:	str.w	r5, [r2, #-8]
    2e84:	str.w	r5, [r2, #-4]
    2e88:	add.w	r2, r2, #16
    2e8c:	bhi.n	2e74 <memset+0x38>
    2e8e:	sub.w	r2, r4, #16
    2e92:	bic.w	r2, r2, #15
    2e96:	and.w	r4, r4, #15
    2e9a:	adds	r2, #16
    2e9c:	cmp	r4, #3
    2e9e:	add	r3, r2
    2ea0:	bls.n	2ebe <memset+0x82>
    2ea2:	mov	r6, r3
    2ea4:	mov	r2, r4
    2ea6:	subs	r2, #4
    2ea8:	cmp	r2, #3
    2eaa:	str.w	r5, [r6], #4
    2eae:	bhi.n	2ea6 <memset+0x6a>
    2eb0:	subs	r2, r4, #4
    2eb2:	bic.w	r2, r2, #3
    2eb6:	adds	r2, #4
    2eb8:	add	r3, r2
    2eba:	and.w	r4, r4, #3
    2ebe:	cbz	r4, 2ecc <memset+0x90>
    2ec0:	uxtb	r1, r1
    2ec2:	add	r4, r3
    2ec4:	strb.w	r1, [r3], #1
    2ec8:	cmp	r3, r4
    2eca:	bne.n	2ec4 <memset+0x88>
    2ecc:	pop	{r4, r5, r6}
    2ece:	bx	lr
    2ed0:	mov	r4, r2
    2ed2:	mov	r3, r0
    2ed4:	b.n	2e5c <memset+0x20>
    2ed6:	nop

00002ed8 <__malloc_lock>:
    2ed8:	bx	lr
    2eda:	nop

00002edc <__malloc_unlock>:
    2edc:	bx	lr
    2ede:	nop

00002ee0 <_realloc_r>:
    2ee0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ee4:	mov	r7, r2
    2ee6:	sub	sp, #12
    2ee8:	cmp	r1, #0
    2eea:	beq.w	3070 <_realloc_r+0x190>
    2eee:	mov	r6, r1
    2ef0:	mov	r9, r0
    2ef2:	add.w	r5, r7, #11
    2ef6:	bl	2ed8 <__malloc_lock>
    2efa:	ldr.w	lr, [r6, #-4]
    2efe:	cmp	r5, #22
    2f00:	bic.w	r4, lr, #3
    2f04:	sub.w	r8, r6, #8
    2f08:	bhi.n	2f8c <_realloc_r+0xac>
    2f0a:	movs	r2, #16
    2f0c:	mov	r5, r2
    2f0e:	cmp	r7, r5
    2f10:	bhi.n	2f96 <_realloc_r+0xb6>
    2f12:	cmp	r4, r2
    2f14:	bge.n	3002 <_realloc_r+0x122>
    2f16:	ldr	r3, [pc, #804]	; (323c <_realloc_r+0x35c>)
    2f18:	ldr	r1, [r3, #8]
    2f1a:	add.w	r0, r8, r4
    2f1e:	cmp	r0, r1
    2f20:	ldr	r1, [r0, #4]
    2f22:	beq.w	30d8 <_realloc_r+0x1f8>
    2f26:	bic.w	r3, r1, #1
    2f2a:	add	r3, r0
    2f2c:	ldr	r3, [r3, #4]
    2f2e:	lsls	r3, r3, #31
    2f30:	bpl.n	302e <_realloc_r+0x14e>
    2f32:	tst.w	lr, #1
    2f36:	beq.n	2fa4 <_realloc_r+0xc4>
    2f38:	mov	r1, r7
    2f3a:	mov	r0, r9
    2f3c:	bl	27d8 <_malloc_r>
    2f40:	mov	r7, r0
    2f42:	cbz	r0, 2f7e <_realloc_r+0x9e>
    2f44:	ldr.w	r3, [r6, #-4]
    2f48:	bic.w	r3, r3, #1
    2f4c:	add	r3, r8
    2f4e:	sub.w	r2, r0, #8
    2f52:	cmp	r2, r3
    2f54:	beq.w	31e0 <_realloc_r+0x300>
    2f58:	subs	r2, r4, #4
    2f5a:	cmp	r2, #36	; 0x24
    2f5c:	bhi.w	31c2 <_realloc_r+0x2e2>
    2f60:	cmp	r2, #19
    2f62:	bhi.w	316e <_realloc_r+0x28e>
    2f66:	mov	r3, r0
    2f68:	mov	r2, r6
    2f6a:	ldr	r1, [r2, #0]
    2f6c:	str	r1, [r3, #0]
    2f6e:	ldr	r1, [r2, #4]
    2f70:	str	r1, [r3, #4]
    2f72:	ldr	r2, [r2, #8]
    2f74:	str	r2, [r3, #8]
    2f76:	mov	r1, r6
    2f78:	mov	r0, r9
    2f7a:	bl	35c8 <_free_r>
    2f7e:	mov	r0, r9
    2f80:	bl	2edc <__malloc_unlock>
    2f84:	mov	r0, r7
    2f86:	add	sp, #12
    2f88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f8c:	bic.w	r5, r5, #7
    2f90:	cmp	r5, #0
    2f92:	mov	r2, r5
    2f94:	bge.n	2f0e <_realloc_r+0x2e>
    2f96:	movs	r3, #12
    2f98:	movs	r0, #0
    2f9a:	str.w	r3, [r9]
    2f9e:	add	sp, #12
    2fa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fa4:	ldr.w	r3, [r6, #-8]
    2fa8:	rsb	sl, r3, r8
    2fac:	ldr.w	r3, [sl, #4]
    2fb0:	bic.w	ip, r3, #3
    2fb4:	add.w	r3, r4, ip
    2fb8:	cmp	r3, r2
    2fba:	blt.n	2f38 <_realloc_r+0x58>
    2fbc:	mov	r7, sl
    2fbe:	ldr.w	r1, [sl, #12]
    2fc2:	ldr.w	r0, [r7, #8]!
    2fc6:	subs	r2, r4, #4
    2fc8:	cmp	r2, #36	; 0x24
    2fca:	str	r1, [r0, #12]
    2fcc:	str	r0, [r1, #8]
    2fce:	bhi.w	3200 <_realloc_r+0x320>
    2fd2:	cmp	r2, #19
    2fd4:	bls.w	31fc <_realloc_r+0x31c>
    2fd8:	ldr	r1, [r6, #0]
    2fda:	str.w	r1, [sl, #8]
    2fde:	ldr	r1, [r6, #4]
    2fe0:	str.w	r1, [sl, #12]
    2fe4:	cmp	r2, #27
    2fe6:	bhi.w	3240 <_realloc_r+0x360>
    2fea:	adds	r6, #8
    2fec:	add.w	r2, sl, #16
    2ff0:	ldr	r1, [r6, #0]
    2ff2:	str	r1, [r2, #0]
    2ff4:	ldr	r1, [r6, #4]
    2ff6:	str	r1, [r2, #4]
    2ff8:	ldr	r1, [r6, #8]
    2ffa:	str	r1, [r2, #8]
    2ffc:	mov	r6, r7
    2ffe:	mov	r4, r3
    3000:	mov	r8, sl
    3002:	subs	r3, r4, r5
    3004:	cmp	r3, #15
    3006:	bhi.n	3044 <_realloc_r+0x164>
    3008:	ldr.w	r3, [r8, #4]
    300c:	and.w	r3, r3, #1
    3010:	orrs	r3, r4
    3012:	add	r4, r8
    3014:	str.w	r3, [r8, #4]
    3018:	ldr	r3, [r4, #4]
    301a:	orr.w	r3, r3, #1
    301e:	str	r3, [r4, #4]
    3020:	mov	r0, r9
    3022:	bl	2edc <__malloc_unlock>
    3026:	mov	r0, r6
    3028:	add	sp, #12
    302a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    302e:	bic.w	r1, r1, #3
    3032:	add	r1, r4
    3034:	cmp	r1, r2
    3036:	blt.n	307c <_realloc_r+0x19c>
    3038:	ldr	r3, [r0, #12]
    303a:	ldr	r2, [r0, #8]
    303c:	mov	r4, r1
    303e:	str	r3, [r2, #12]
    3040:	str	r2, [r3, #8]
    3042:	b.n	3002 <_realloc_r+0x122>
    3044:	ldr.w	r2, [r8, #4]
    3048:	add.w	r1, r8, r5
    304c:	and.w	r2, r2, #1
    3050:	orrs	r5, r2
    3052:	orr.w	r2, r3, #1
    3056:	add	r3, r1
    3058:	str.w	r5, [r8, #4]
    305c:	str	r2, [r1, #4]
    305e:	ldr	r2, [r3, #4]
    3060:	orr.w	r2, r2, #1
    3064:	adds	r1, #8
    3066:	str	r2, [r3, #4]
    3068:	mov	r0, r9
    306a:	bl	35c8 <_free_r>
    306e:	b.n	3020 <_realloc_r+0x140>
    3070:	mov	r1, r2
    3072:	add	sp, #12
    3074:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3078:	b.w	27d8 <_malloc_r>
    307c:	tst.w	lr, #1
    3080:	bne.w	2f38 <_realloc_r+0x58>
    3084:	ldr.w	r3, [r6, #-8]
    3088:	rsb	sl, r3, r8
    308c:	ldr.w	r3, [sl, #4]
    3090:	bic.w	ip, r3, #3
    3094:	add.w	lr, r1, ip
    3098:	cmp	lr, r2
    309a:	blt.n	2fb4 <_realloc_r+0xd4>
    309c:	ldr	r3, [r0, #12]
    309e:	ldr	r2, [r0, #8]
    30a0:	mov	r7, sl
    30a2:	str	r3, [r2, #12]
    30a4:	str	r2, [r3, #8]
    30a6:	ldr.w	r1, [r7, #8]!
    30aa:	ldr.w	r3, [sl, #12]
    30ae:	str	r3, [r1, #12]
    30b0:	subs	r2, r4, #4
    30b2:	cmp	r2, #36	; 0x24
    30b4:	str	r1, [r3, #8]
    30b6:	bhi.w	31ec <_realloc_r+0x30c>
    30ba:	cmp	r2, #19
    30bc:	bls.n	3184 <_realloc_r+0x2a4>
    30be:	ldr	r3, [r6, #0]
    30c0:	str.w	r3, [sl, #8]
    30c4:	ldr	r3, [r6, #4]
    30c6:	str.w	r3, [sl, #12]
    30ca:	cmp	r2, #27
    30cc:	bhi.w	3210 <_realloc_r+0x330>
    30d0:	adds	r6, #8
    30d2:	add.w	r3, sl, #16
    30d6:	b.n	3186 <_realloc_r+0x2a6>
    30d8:	bic.w	fp, r1, #3
    30dc:	add	fp, r4
    30de:	add.w	r0, r5, #16
    30e2:	cmp	fp, r0
    30e4:	bge.n	319a <_realloc_r+0x2ba>
    30e6:	tst.w	lr, #1
    30ea:	bne.w	2f38 <_realloc_r+0x58>
    30ee:	ldr.w	r1, [r6, #-8]
    30f2:	rsb	sl, r1, r8
    30f6:	ldr.w	r1, [sl, #4]
    30fa:	bic.w	ip, r1, #3
    30fe:	add	fp, ip
    3100:	cmp	r0, fp
    3102:	bgt.w	2fb4 <_realloc_r+0xd4>
    3106:	mov	r7, sl
    3108:	ldr.w	r1, [sl, #12]
    310c:	ldr.w	r0, [r7, #8]!
    3110:	subs	r2, r4, #4
    3112:	cmp	r2, #36	; 0x24
    3114:	str	r1, [r0, #12]
    3116:	str	r0, [r1, #8]
    3118:	bhi.w	3284 <_realloc_r+0x3a4>
    311c:	cmp	r2, #19
    311e:	bls.w	326c <_realloc_r+0x38c>
    3122:	ldr	r1, [r6, #0]
    3124:	str.w	r1, [sl, #8]
    3128:	ldr	r1, [r6, #4]
    312a:	str.w	r1, [sl, #12]
    312e:	cmp	r2, #27
    3130:	bhi.w	3292 <_realloc_r+0x3b2>
    3134:	adds	r6, #8
    3136:	add.w	r2, sl, #16
    313a:	ldr	r1, [r6, #0]
    313c:	str	r1, [r2, #0]
    313e:	ldr	r1, [r6, #4]
    3140:	str	r1, [r2, #4]
    3142:	ldr	r1, [r6, #8]
    3144:	str	r1, [r2, #8]
    3146:	add.w	r1, sl, r5
    314a:	rsb	r2, r5, fp
    314e:	orr.w	r2, r2, #1
    3152:	str	r1, [r3, #8]
    3154:	str	r2, [r1, #4]
    3156:	ldr.w	r3, [sl, #4]
    315a:	and.w	r3, r3, #1
    315e:	orrs	r5, r3
    3160:	mov	r0, r9
    3162:	str.w	r5, [sl, #4]
    3166:	bl	2edc <__malloc_unlock>
    316a:	mov	r0, r7
    316c:	b.n	3028 <_realloc_r+0x148>
    316e:	ldr	r3, [r6, #0]
    3170:	str	r3, [r0, #0]
    3172:	ldr	r3, [r6, #4]
    3174:	str	r3, [r0, #4]
    3176:	cmp	r2, #27
    3178:	bhi.n	31ca <_realloc_r+0x2ea>
    317a:	add.w	r3, r0, #8
    317e:	add.w	r2, r6, #8
    3182:	b.n	2f6a <_realloc_r+0x8a>
    3184:	mov	r3, r7
    3186:	ldr	r2, [r6, #0]
    3188:	str	r2, [r3, #0]
    318a:	ldr	r2, [r6, #4]
    318c:	str	r2, [r3, #4]
    318e:	ldr	r2, [r6, #8]
    3190:	str	r2, [r3, #8]
    3192:	mov	r6, r7
    3194:	mov	r4, lr
    3196:	mov	r8, sl
    3198:	b.n	3002 <_realloc_r+0x122>
    319a:	add.w	r1, r8, r5
    319e:	rsb	fp, r5, fp
    31a2:	orr.w	r2, fp, #1
    31a6:	str	r1, [r3, #8]
    31a8:	str	r2, [r1, #4]
    31aa:	ldr.w	r3, [r6, #-4]
    31ae:	and.w	r3, r3, #1
    31b2:	orrs	r5, r3
    31b4:	mov	r0, r9
    31b6:	str.w	r5, [r6, #-4]
    31ba:	bl	2edc <__malloc_unlock>
    31be:	mov	r0, r6
    31c0:	b.n	3028 <_realloc_r+0x148>
    31c2:	mov	r1, r6
    31c4:	bl	2d74 <memmove>
    31c8:	b.n	2f76 <_realloc_r+0x96>
    31ca:	ldr	r3, [r6, #8]
    31cc:	str	r3, [r0, #8]
    31ce:	ldr	r3, [r6, #12]
    31d0:	str	r3, [r0, #12]
    31d2:	cmp	r2, #36	; 0x24
    31d4:	beq.n	3228 <_realloc_r+0x348>
    31d6:	add.w	r3, r0, #16
    31da:	add.w	r2, r6, #16
    31de:	b.n	2f6a <_realloc_r+0x8a>
    31e0:	ldr.w	r3, [r0, #-4]
    31e4:	bic.w	r3, r3, #3
    31e8:	add	r4, r3
    31ea:	b.n	3002 <_realloc_r+0x122>
    31ec:	mov	r1, r6
    31ee:	mov	r0, r7
    31f0:	mov	r4, lr
    31f2:	mov	r8, sl
    31f4:	bl	2d74 <memmove>
    31f8:	mov	r6, r7
    31fa:	b.n	3002 <_realloc_r+0x122>
    31fc:	mov	r2, r7
    31fe:	b.n	2ff0 <_realloc_r+0x110>
    3200:	mov	r1, r6
    3202:	mov	r0, r7
    3204:	mov	r4, r3
    3206:	mov	r8, sl
    3208:	bl	2d74 <memmove>
    320c:	mov	r6, r7
    320e:	b.n	3002 <_realloc_r+0x122>
    3210:	ldr	r3, [r6, #8]
    3212:	str.w	r3, [sl, #16]
    3216:	ldr	r3, [r6, #12]
    3218:	str.w	r3, [sl, #20]
    321c:	cmp	r2, #36	; 0x24
    321e:	beq.n	3258 <_realloc_r+0x378>
    3220:	adds	r6, #16
    3222:	add.w	r3, sl, #24
    3226:	b.n	3186 <_realloc_r+0x2a6>
    3228:	ldr	r3, [r6, #16]
    322a:	str	r3, [r0, #16]
    322c:	ldr	r3, [r6, #20]
    322e:	str	r3, [r0, #20]
    3230:	add.w	r2, r6, #24
    3234:	add.w	r3, r0, #24
    3238:	b.n	2f6a <_realloc_r+0x8a>
    323a:	nop
    323c:	.word	0x20000d40
    3240:	ldr	r1, [r6, #8]
    3242:	str.w	r1, [sl, #16]
    3246:	ldr	r1, [r6, #12]
    3248:	str.w	r1, [sl, #20]
    324c:	cmp	r2, #36	; 0x24
    324e:	beq.n	3270 <_realloc_r+0x390>
    3250:	adds	r6, #16
    3252:	add.w	r2, sl, #24
    3256:	b.n	2ff0 <_realloc_r+0x110>
    3258:	ldr	r3, [r6, #16]
    325a:	str.w	r3, [sl, #24]
    325e:	ldr	r3, [r6, #20]
    3260:	str.w	r3, [sl, #28]
    3264:	adds	r6, #24
    3266:	add.w	r3, sl, #32
    326a:	b.n	3186 <_realloc_r+0x2a6>
    326c:	mov	r2, r7
    326e:	b.n	313a <_realloc_r+0x25a>
    3270:	ldr	r2, [r6, #16]
    3272:	str.w	r2, [sl, #24]
    3276:	ldr	r2, [r6, #20]
    3278:	str.w	r2, [sl, #28]
    327c:	adds	r6, #24
    327e:	add.w	r2, sl, #32
    3282:	b.n	2ff0 <_realloc_r+0x110>
    3284:	mov	r1, r6
    3286:	mov	r0, r7
    3288:	str	r3, [sp, #4]
    328a:	bl	2d74 <memmove>
    328e:	ldr	r3, [sp, #4]
    3290:	b.n	3146 <_realloc_r+0x266>
    3292:	ldr	r1, [r6, #8]
    3294:	str.w	r1, [sl, #16]
    3298:	ldr	r1, [r6, #12]
    329a:	str.w	r1, [sl, #20]
    329e:	cmp	r2, #36	; 0x24
    32a0:	beq.n	32aa <_realloc_r+0x3ca>
    32a2:	adds	r6, #16
    32a4:	add.w	r2, sl, #24
    32a8:	b.n	313a <_realloc_r+0x25a>
    32aa:	ldr	r2, [r6, #16]
    32ac:	str.w	r2, [sl, #24]
    32b0:	ldr	r2, [r6, #20]
    32b2:	str.w	r2, [sl, #28]
    32b6:	adds	r6, #24
    32b8:	add.w	r2, sl, #32
    32bc:	b.n	313a <_realloc_r+0x25a>
    32be:	nop

000032c0 <_sbrk_r>:
    32c0:	push	{r3, r4, r5, lr}
    32c2:	ldr	r4, [pc, #28]	; (32e0 <_sbrk_r+0x20>)
    32c4:	movs	r3, #0
    32c6:	mov	r5, r0
    32c8:	mov	r0, r1
    32ca:	str	r3, [r4, #0]
    32cc:	bl	1a5c <_sbrk>
    32d0:	adds	r3, r0, #1
    32d2:	beq.n	32d6 <_sbrk_r+0x16>
    32d4:	pop	{r3, r4, r5, pc}
    32d6:	ldr	r3, [r4, #0]
    32d8:	cmp	r3, #0
    32da:	beq.n	32d4 <_sbrk_r+0x14>
    32dc:	str	r3, [r5, #0]
    32de:	pop	{r3, r4, r5, pc}
    32e0:	.word	0x200036c0
	...

00003300 <strlen>:
    3300:	pld	[r0]
    3304:	strd	r4, r5, [sp, #-8]!
    3308:	bic.w	r1, r0, #7
    330c:	mvn.w	ip, #0
    3310:	ands.w	r4, r0, #7
    3314:	pld	[r1, #32]
    3318:	bne.w	33ae <strlen+0xae>
    331c:	mov.w	r4, #0
    3320:	mvn.w	r0, #7
    3324:	ldrd	r2, r3, [r1]
    3328:	pld	[r1, #64]	; 0x40
    332c:	add.w	r0, r0, #8
    3330:	uadd8	r2, r2, ip
    3334:	sel	r2, r4, ip
    3338:	uadd8	r3, r3, ip
    333c:	sel	r3, r2, ip
    3340:	cbnz	r3, 3396 <strlen+0x96>
    3342:	ldrd	r2, r3, [r1, #8]
    3346:	uadd8	r2, r2, ip
    334a:	add.w	r0, r0, #8
    334e:	sel	r2, r4, ip
    3352:	uadd8	r3, r3, ip
    3356:	sel	r3, r2, ip
    335a:	cbnz	r3, 3396 <strlen+0x96>
    335c:	ldrd	r2, r3, [r1, #16]
    3360:	uadd8	r2, r2, ip
    3364:	add.w	r0, r0, #8
    3368:	sel	r2, r4, ip
    336c:	uadd8	r3, r3, ip
    3370:	sel	r3, r2, ip
    3374:	cbnz	r3, 3396 <strlen+0x96>
    3376:	ldrd	r2, r3, [r1, #24]
    337a:	add.w	r1, r1, #32
    337e:	uadd8	r2, r2, ip
    3382:	add.w	r0, r0, #8
    3386:	sel	r2, r4, ip
    338a:	uadd8	r3, r3, ip
    338e:	sel	r3, r2, ip
    3392:	cmp	r3, #0
    3394:	beq.n	3324 <strlen+0x24>
    3396:	cmp	r2, #0
    3398:	itt	eq
    339a:	addeq	r0, #4
    339c:	moveq	r2, r3
    339e:	rev	r2, r2
    33a0:	clz	r2, r2
    33a4:	ldrd	r4, r5, [sp], #8
    33a8:	add.w	r0, r0, r2, lsr #3
    33ac:	bx	lr
    33ae:	ldrd	r2, r3, [r1]
    33b2:	and.w	r5, r4, #3
    33b6:	rsb	r0, r4, #0
    33ba:	mov.w	r5, r5, lsl #3
    33be:	tst.w	r4, #4
    33c2:	pld	[r1, #64]	; 0x40
    33c6:	lsl.w	r5, ip, r5
    33ca:	orn	r2, r2, r5
    33ce:	itt	ne
    33d0:	ornne	r3, r3, r5
    33d4:	movne	r2, ip
    33d6:	mov.w	r4, #0
    33da:	b.n	3330 <strlen+0x30>

000033dc <_vdprintf_r>:
    33dc:	push	{r4, r5, r6, r7, lr}
    33de:	sub.w	sp, sp, #532	; 0x214
    33e2:	add	r5, sp, #16
    33e4:	str	r3, [sp, #0]
    33e6:	mov	r7, r1
    33e8:	mov	r3, r2
    33ea:	mov.w	r4, #512	; 0x200
    33ee:	add	r2, sp, #12
    33f0:	mov	r1, r5
    33f2:	str	r4, [sp, #12]
    33f4:	mov	r6, r0
    33f6:	bl	3e84 <_vasnprintf_r>
    33fa:	cbz	r0, 3420 <_vdprintf_r+0x44>
    33fc:	mov	r4, r0
    33fe:	mov	r2, r0
    3400:	mov	r1, r7
    3402:	ldr	r3, [sp, #12]
    3404:	mov	r0, r6
    3406:	bl	345c <_write_r>
    340a:	cmp	r4, r5
    340c:	str	r0, [sp, #12]
    340e:	beq.n	341a <_vdprintf_r+0x3e>
    3410:	mov	r0, r6
    3412:	mov	r1, r4
    3414:	bl	35c8 <_free_r>
    3418:	ldr	r0, [sp, #12]
    341a:	add.w	sp, sp, #532	; 0x214
    341e:	pop	{r4, r5, r6, r7, pc}
    3420:	mov.w	r0, #4294967295
    3424:	b.n	341a <_vdprintf_r+0x3e>
    3426:	nop

00003428 <vdprintf>:
    3428:	push	{r4}
    342a:	ldr	r4, [pc, #16]	; (343c <vdprintf+0x14>)
    342c:	mov	r3, r2
    342e:	mov	r2, r1
    3430:	mov	r1, r0
    3432:	ldr	r0, [r4, #0]
    3434:	ldr.w	r4, [sp], #4
    3438:	b.w	33dc <_vdprintf_r>
    343c:	.word	0x20000bd0

00003440 <__ascii_wctomb>:
    3440:	cbz	r1, 344c <__ascii_wctomb+0xc>
    3442:	cmp	r2, #255	; 0xff
    3444:	bhi.n	3450 <__ascii_wctomb+0x10>
    3446:	strb	r2, [r1, #0]
    3448:	movs	r0, #1
    344a:	bx	lr
    344c:	mov	r0, r1
    344e:	bx	lr
    3450:	movs	r3, #138	; 0x8a
    3452:	str	r3, [r0, #0]
    3454:	mov.w	r0, #4294967295
    3458:	bx	lr
    345a:	nop

0000345c <_write_r>:
    345c:	push	{r4, r5, r6, lr}
    345e:	mov	r5, r1
    3460:	ldr	r4, [pc, #32]	; (3484 <_write_r+0x28>)
    3462:	mov	r1, r2
    3464:	mov	r6, r0
    3466:	mov	r2, r3
    3468:	mov	r0, r5
    346a:	movs	r3, #0
    346c:	str	r3, [r4, #0]
    346e:	bl	2318 <_write>
    3472:	adds	r3, r0, #1
    3474:	beq.n	3478 <_write_r+0x1c>
    3476:	pop	{r4, r5, r6, pc}
    3478:	ldr	r3, [r4, #0]
    347a:	cmp	r3, #0
    347c:	beq.n	3476 <_write_r+0x1a>
    347e:	str	r3, [r6, #0]
    3480:	pop	{r4, r5, r6, pc}
    3482:	nop
    3484:	.word	0x200036c0

00003488 <__register_exitproc>:
    3488:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    348c:	ldr	r4, [pc, #148]	; (3524 <__register_exitproc+0x9c>)
    348e:	ldr	r5, [r4, #0]
    3490:	ldr.w	r4, [r5, #328]	; 0x148
    3494:	mov	r6, r0
    3496:	mov	r8, r1
    3498:	mov	sl, r2
    349a:	mov	r9, r3
    349c:	cbz	r4, 3510 <__register_exitproc+0x88>
    349e:	ldr	r0, [r4, #4]
    34a0:	cmp	r0, #31
    34a2:	bgt.n	34d4 <__register_exitproc+0x4c>
    34a4:	adds	r3, r0, #1
    34a6:	cbz	r6, 34c6 <__register_exitproc+0x3e>
    34a8:	add.w	r5, r4, r0, lsl #2
    34ac:	movs	r2, #1
    34ae:	str.w	sl, [r5, #136]	; 0x88
    34b2:	ldr.w	r1, [r4, #392]	; 0x188
    34b6:	lsls	r2, r0
    34b8:	orrs	r1, r2
    34ba:	cmp	r6, #2
    34bc:	str.w	r1, [r4, #392]	; 0x188
    34c0:	str.w	r9, [r5, #264]	; 0x108
    34c4:	beq.n	3504 <__register_exitproc+0x7c>
    34c6:	adds	r0, #2
    34c8:	str	r3, [r4, #4]
    34ca:	str.w	r8, [r4, r0, lsl #2]
    34ce:	movs	r0, #0
    34d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    34d4:	ldr	r3, [pc, #80]	; (3528 <__register_exitproc+0xa0>)
    34d6:	cbz	r3, 351a <__register_exitproc+0x92>
    34d8:	mov.w	r0, #400	; 0x190
    34dc:	bl	27c8 <malloc>
    34e0:	mov	r4, r0
    34e2:	cbz	r0, 351a <__register_exitproc+0x92>
    34e4:	ldr.w	r3, [r5, #328]	; 0x148
    34e8:	movs	r7, #0
    34ea:	stmia.w	r0, {r3, r7}
    34ee:	str.w	r4, [r5, #328]	; 0x148
    34f2:	mov	r0, r7
    34f4:	movs	r3, #1
    34f6:	str.w	r7, [r4, #392]	; 0x188
    34fa:	str.w	r7, [r4, #396]	; 0x18c
    34fe:	cmp	r6, #0
    3500:	beq.n	34c6 <__register_exitproc+0x3e>
    3502:	b.n	34a8 <__register_exitproc+0x20>
    3504:	ldr.w	r1, [r4, #396]	; 0x18c
    3508:	orrs	r2, r1
    350a:	str.w	r2, [r4, #396]	; 0x18c
    350e:	b.n	34c6 <__register_exitproc+0x3e>
    3510:	add.w	r4, r5, #332	; 0x14c
    3514:	str.w	r4, [r5, #328]	; 0x148
    3518:	b.n	349e <__register_exitproc+0x16>
    351a:	mov.w	r0, #4294967295
    351e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3522:	nop
    3524:	.word	0x20000464
    3528:	.word	0x000027c9

0000352c <_malloc_trim_r>:
    352c:	push	{r3, r4, r5, r6, r7, lr}
    352e:	ldr	r7, [pc, #140]	; (35bc <_malloc_trim_r+0x90>)
    3530:	mov	r4, r1
    3532:	mov	r6, r0
    3534:	bl	2ed8 <__malloc_lock>
    3538:	ldr	r3, [r7, #8]
    353a:	ldr	r5, [r3, #4]
    353c:	bic.w	r5, r5, #3
    3540:	subs	r1, r5, r4
    3542:	addw	r1, r1, #4079	; 0xfef
    3546:	bic.w	r1, r1, #4080	; 0xff0
    354a:	bic.w	r1, r1, #15
    354e:	sub.w	r4, r1, #4096	; 0x1000
    3552:	cmp.w	r4, #4096	; 0x1000
    3556:	blt.n	3568 <_malloc_trim_r+0x3c>
    3558:	movs	r1, #0
    355a:	mov	r0, r6
    355c:	bl	32c0 <_sbrk_r>
    3560:	ldr	r3, [r7, #8]
    3562:	add	r3, r5
    3564:	cmp	r0, r3
    3566:	beq.n	3572 <_malloc_trim_r+0x46>
    3568:	mov	r0, r6
    356a:	bl	2edc <__malloc_unlock>
    356e:	movs	r0, #0
    3570:	pop	{r3, r4, r5, r6, r7, pc}
    3572:	negs	r1, r4
    3574:	mov	r0, r6
    3576:	bl	32c0 <_sbrk_r>
    357a:	adds	r0, #1
    357c:	beq.n	359a <_malloc_trim_r+0x6e>
    357e:	ldr	r3, [pc, #64]	; (35c0 <_malloc_trim_r+0x94>)
    3580:	ldr	r2, [r7, #8]
    3582:	ldr	r1, [r3, #0]
    3584:	subs	r5, r5, r4
    3586:	orr.w	r5, r5, #1
    358a:	mov	r0, r6
    358c:	subs	r1, r1, r4
    358e:	str	r5, [r2, #4]
    3590:	str	r1, [r3, #0]
    3592:	bl	2edc <__malloc_unlock>
    3596:	movs	r0, #1
    3598:	pop	{r3, r4, r5, r6, r7, pc}
    359a:	movs	r1, #0
    359c:	mov	r0, r6
    359e:	bl	32c0 <_sbrk_r>
    35a2:	ldr	r2, [r7, #8]
    35a4:	subs	r3, r0, r2
    35a6:	cmp	r3, #15
    35a8:	ble.n	3568 <_malloc_trim_r+0x3c>
    35aa:	ldr	r4, [pc, #24]	; (35c4 <_malloc_trim_r+0x98>)
    35ac:	ldr	r1, [pc, #16]	; (35c0 <_malloc_trim_r+0x94>)
    35ae:	ldr	r4, [r4, #0]
    35b0:	orr.w	r3, r3, #1
    35b4:	subs	r0, r0, r4
    35b6:	str	r3, [r2, #4]
    35b8:	str	r0, [r1, #0]
    35ba:	b.n	3568 <_malloc_trim_r+0x3c>
    35bc:	.word	0x20000d40
    35c0:	.word	0x2000147c
    35c4:	.word	0x2000114c

000035c8 <_free_r>:
    35c8:	cmp	r1, #0
    35ca:	beq.n	3658 <_free_r+0x90>
    35cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35d0:	mov	r5, r1
    35d2:	mov	r8, r0
    35d4:	bl	2ed8 <__malloc_lock>
    35d8:	ldr.w	r7, [r5, #-4]
    35dc:	ldr	r1, [pc, #424]	; (3788 <_free_r+0x1c0>)
    35de:	bic.w	r3, r7, #1
    35e2:	sub.w	r4, r5, #8
    35e6:	adds	r2, r4, r3
    35e8:	ldr	r6, [r1, #8]
    35ea:	ldr	r0, [r2, #4]
    35ec:	cmp	r2, r6
    35ee:	bic.w	r0, r0, #3
    35f2:	beq.n	36ba <_free_r+0xf2>
    35f4:	lsls	r6, r7, #31
    35f6:	str	r0, [r2, #4]
    35f8:	bmi.n	3612 <_free_r+0x4a>
    35fa:	ldr.w	r7, [r5, #-8]
    35fe:	subs	r4, r4, r7
    3600:	add.w	lr, r1, #8
    3604:	ldr	r5, [r4, #8]
    3606:	cmp	r5, lr
    3608:	add	r3, r7
    360a:	beq.n	36ec <_free_r+0x124>
    360c:	ldr	r7, [r4, #12]
    360e:	str	r7, [r5, #12]
    3610:	str	r5, [r7, #8]
    3612:	adds	r5, r2, r0
    3614:	ldr	r5, [r5, #4]
    3616:	lsls	r5, r5, #31
    3618:	bpl.n	36a0 <_free_r+0xd8>
    361a:	orr.w	r2, r3, #1
    361e:	str	r2, [r4, #4]
    3620:	str	r3, [r4, r3]
    3622:	cmp.w	r3, #512	; 0x200
    3626:	bcs.n	365a <_free_r+0x92>
    3628:	lsrs	r3, r3, #3
    362a:	adds	r2, r3, #1
    362c:	ldr	r5, [r1, #4]
    362e:	ldr.w	r7, [r1, r2, lsl #3]
    3632:	str	r7, [r4, #8]
    3634:	movs	r0, #1
    3636:	asrs	r3, r3, #2
    3638:	lsl.w	r3, r0, r3
    363c:	add.w	r0, r1, r2, lsl #3
    3640:	orrs	r5, r3
    3642:	subs	r0, #8
    3644:	str	r0, [r4, #12]
    3646:	str	r5, [r1, #4]
    3648:	str.w	r4, [r1, r2, lsl #3]
    364c:	str	r4, [r7, #12]
    364e:	mov	r0, r8
    3650:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3654:	b.w	2edc <__malloc_unlock>
    3658:	bx	lr
    365a:	lsrs	r2, r3, #9
    365c:	cmp	r2, #4
    365e:	bhi.n	3708 <_free_r+0x140>
    3660:	lsrs	r2, r3, #6
    3662:	add.w	r7, r2, #57	; 0x39
    3666:	lsls	r7, r7, #1
    3668:	add.w	r5, r2, #56	; 0x38
    366c:	add.w	r0, r1, r7, lsl #2
    3670:	ldr.w	r2, [r1, r7, lsl #2]
    3674:	ldr	r1, [pc, #272]	; (3788 <_free_r+0x1c0>)
    3676:	subs	r0, #8
    3678:	cmp	r0, r2
    367a:	beq.n	3718 <_free_r+0x150>
    367c:	ldr	r1, [r2, #4]
    367e:	bic.w	r1, r1, #3
    3682:	cmp	r3, r1
    3684:	bcs.n	368c <_free_r+0xc4>
    3686:	ldr	r2, [r2, #8]
    3688:	cmp	r0, r2
    368a:	bne.n	367c <_free_r+0xb4>
    368c:	ldr	r0, [r2, #12]
    368e:	str	r0, [r4, #12]
    3690:	str	r2, [r4, #8]
    3692:	str	r4, [r0, #8]
    3694:	str	r4, [r2, #12]
    3696:	mov	r0, r8
    3698:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    369c:	b.w	2edc <__malloc_unlock>
    36a0:	ldr	r5, [r2, #8]
    36a2:	ldr	r7, [pc, #232]	; (378c <_free_r+0x1c4>)
    36a4:	cmp	r5, r7
    36a6:	add	r3, r0
    36a8:	beq.n	372a <_free_r+0x162>
    36aa:	ldr	r0, [r2, #12]
    36ac:	str	r0, [r5, #12]
    36ae:	orr.w	r2, r3, #1
    36b2:	str	r5, [r0, #8]
    36b4:	str	r2, [r4, #4]
    36b6:	str	r3, [r4, r3]
    36b8:	b.n	3622 <_free_r+0x5a>
    36ba:	lsls	r7, r7, #31
    36bc:	add	r3, r0
    36be:	bmi.n	36d0 <_free_r+0x108>
    36c0:	ldr.w	r2, [r5, #-8]
    36c4:	subs	r4, r4, r2
    36c6:	add	r3, r2
    36c8:	ldr	r0, [r4, #8]
    36ca:	ldr	r2, [r4, #12]
    36cc:	str	r2, [r0, #12]
    36ce:	str	r0, [r2, #8]
    36d0:	ldr	r2, [pc, #188]	; (3790 <_free_r+0x1c8>)
    36d2:	ldr	r2, [r2, #0]
    36d4:	orr.w	r0, r3, #1
    36d8:	cmp	r3, r2
    36da:	str	r0, [r4, #4]
    36dc:	str	r4, [r1, #8]
    36de:	bcc.n	364e <_free_r+0x86>
    36e0:	ldr	r3, [pc, #176]	; (3794 <_free_r+0x1cc>)
    36e2:	mov	r0, r8
    36e4:	ldr	r1, [r3, #0]
    36e6:	bl	352c <_malloc_trim_r>
    36ea:	b.n	364e <_free_r+0x86>
    36ec:	adds	r1, r2, r0
    36ee:	ldr	r1, [r1, #4]
    36f0:	lsls	r1, r1, #31
    36f2:	bmi.n	377e <_free_r+0x1b6>
    36f4:	ldr	r1, [r2, #8]
    36f6:	ldr	r2, [r2, #12]
    36f8:	str	r2, [r1, #12]
    36fa:	add	r3, r0
    36fc:	orr.w	r0, r3, #1
    3700:	str	r1, [r2, #8]
    3702:	str	r0, [r4, #4]
    3704:	str	r3, [r4, r3]
    3706:	b.n	364e <_free_r+0x86>
    3708:	cmp	r2, #20
    370a:	bhi.n	373c <_free_r+0x174>
    370c:	add.w	r7, r2, #92	; 0x5c
    3710:	lsls	r7, r7, #1
    3712:	add.w	r5, r2, #91	; 0x5b
    3716:	b.n	366c <_free_r+0xa4>
    3718:	asrs	r2, r5, #2
    371a:	ldr	r3, [r1, #4]
    371c:	movs	r5, #1
    371e:	lsl.w	r2, r5, r2
    3722:	orrs	r3, r2
    3724:	str	r3, [r1, #4]
    3726:	mov	r2, r0
    3728:	b.n	368e <_free_r+0xc6>
    372a:	orr.w	r2, r3, #1
    372e:	str	r4, [r1, #20]
    3730:	str	r4, [r1, #16]
    3732:	str	r5, [r4, #12]
    3734:	str	r5, [r4, #8]
    3736:	str	r2, [r4, #4]
    3738:	str	r3, [r4, r3]
    373a:	b.n	364e <_free_r+0x86>
    373c:	cmp	r2, #84	; 0x54
    373e:	bhi.n	374e <_free_r+0x186>
    3740:	lsrs	r2, r3, #12
    3742:	add.w	r7, r2, #111	; 0x6f
    3746:	lsls	r7, r7, #1
    3748:	add.w	r5, r2, #110	; 0x6e
    374c:	b.n	366c <_free_r+0xa4>
    374e:	cmp.w	r2, #340	; 0x154
    3752:	bhi.n	3762 <_free_r+0x19a>
    3754:	lsrs	r2, r3, #15
    3756:	add.w	r7, r2, #120	; 0x78
    375a:	lsls	r7, r7, #1
    375c:	add.w	r5, r2, #119	; 0x77
    3760:	b.n	366c <_free_r+0xa4>
    3762:	movw	r0, #1364	; 0x554
    3766:	cmp	r2, r0
    3768:	bhi.n	3778 <_free_r+0x1b0>
    376a:	lsrs	r2, r3, #18
    376c:	add.w	r7, r2, #125	; 0x7d
    3770:	lsls	r7, r7, #1
    3772:	add.w	r5, r2, #124	; 0x7c
    3776:	b.n	366c <_free_r+0xa4>
    3778:	movs	r7, #254	; 0xfe
    377a:	movs	r5, #126	; 0x7e
    377c:	b.n	366c <_free_r+0xa4>
    377e:	orr.w	r2, r3, #1
    3782:	str	r2, [r4, #4]
    3784:	str	r3, [r4, r3]
    3786:	b.n	364e <_free_r+0x86>
    3788:	.word	0x20000d40
    378c:	.word	0x20000d48
    3790:	.word	0x20001148
    3794:	.word	0x20001478

00003798 <_localeconv_r>:
    3798:	ldr	r2, [pc, #16]	; (37ac <_localeconv_r+0x14>)
    379a:	ldr	r3, [pc, #20]	; (37b0 <_localeconv_r+0x18>)
    379c:	ldr	r2, [r2, #0]
    379e:	ldr	r0, [r2, #52]	; 0x34
    37a0:	cmp	r0, #0
    37a2:	it	eq
    37a4:	moveq	r0, r3
    37a6:	adds	r0, #240	; 0xf0
    37a8:	bx	lr
    37aa:	nop
    37ac:	.word	0x20000bd0
    37b0:	.word	0x20000bd4
	...

000037c0 <memchr>:
    37c0:	and.w	r1, r1, #255	; 0xff
    37c4:	cmp	r2, #16
    37c6:	blt.n	3820 <memchr+0x60>
    37c8:	tst.w	r0, #7
    37cc:	beq.n	37e0 <memchr+0x20>
    37ce:	ldrb.w	r3, [r0], #1
    37d2:	subs	r2, #1
    37d4:	cmp	r3, r1
    37d6:	beq.n	3834 <memchr+0x74>
    37d8:	tst.w	r0, #7
    37dc:	cbz	r2, 3830 <memchr+0x70>
    37de:	bne.n	37ce <memchr+0xe>
    37e0:	push	{r4, r5, r6, r7}
    37e2:	orr.w	r1, r1, r1, lsl #8
    37e6:	orr.w	r1, r1, r1, lsl #16
    37ea:	bic.w	r4, r2, #7
    37ee:	mvns.w	r7, #0
    37f2:	movs	r3, #0
    37f4:	ldrd	r5, r6, [r0], #8
    37f8:	subs	r4, #8
    37fa:	eor.w	r5, r5, r1
    37fe:	eor.w	r6, r6, r1
    3802:	uadd8	r5, r5, r7
    3806:	sel	r5, r3, r7
    380a:	uadd8	r6, r6, r7
    380e:	sel	r6, r5, r7
    3812:	cbnz	r6, 3838 <memchr+0x78>
    3814:	bne.n	37f4 <memchr+0x34>
    3816:	pop	{r4, r5, r6, r7}
    3818:	and.w	r1, r1, #255	; 0xff
    381c:	and.w	r2, r2, #7
    3820:	cbz	r2, 3830 <memchr+0x70>
    3822:	ldrb.w	r3, [r0], #1
    3826:	subs	r2, #1
    3828:	eor.w	r3, r3, r1
    382c:	cbz	r3, 3834 <memchr+0x74>
    382e:	bne.n	3822 <memchr+0x62>
    3830:	movs	r0, #0
    3832:	bx	lr
    3834:	subs	r0, #1
    3836:	bx	lr
    3838:	cmp	r5, #0
    383a:	itte	eq
    383c:	moveq	r5, r6
    383e:	subeq	r0, #3
    3840:	subne	r0, #7
    3842:	tst.w	r5, #1
    3846:	bne.n	3858 <memchr+0x98>
    3848:	adds	r0, #1
    384a:	tst.w	r5, #256	; 0x100
    384e:	ittt	eq
    3850:	addeq	r0, #1
    3852:	tsteq.w	r5, #98304	; 0x18000
    3856:	addeq	r0, #1
    3858:	pop	{r4, r5, r6, r7}
    385a:	subs	r0, #1
    385c:	bx	lr
    385e:	nop

00003860 <_Balloc>:
    3860:	ldr	r3, [r0, #76]	; 0x4c
    3862:	push	{r4, r5, r6, lr}
    3864:	mov	r5, r0
    3866:	mov	r4, r1
    3868:	cbz	r3, 387e <_Balloc+0x1e>
    386a:	ldr.w	r0, [r3, r4, lsl #2]
    386e:	cbz	r0, 3892 <_Balloc+0x32>
    3870:	ldr	r2, [r0, #0]
    3872:	str.w	r2, [r3, r4, lsl #2]
    3876:	movs	r3, #0
    3878:	str	r3, [r0, #16]
    387a:	str	r3, [r0, #12]
    387c:	pop	{r4, r5, r6, pc}
    387e:	movs	r2, #33	; 0x21
    3880:	movs	r1, #4
    3882:	bl	3ee4 <_calloc_r>
    3886:	str	r0, [r5, #76]	; 0x4c
    3888:	mov	r3, r0
    388a:	cmp	r0, #0
    388c:	bne.n	386a <_Balloc+0xa>
    388e:	movs	r0, #0
    3890:	pop	{r4, r5, r6, pc}
    3892:	movs	r1, #1
    3894:	lsl.w	r6, r1, r4
    3898:	adds	r2, r6, #5
    389a:	mov	r0, r5
    389c:	lsls	r2, r2, #2
    389e:	bl	3ee4 <_calloc_r>
    38a2:	cmp	r0, #0
    38a4:	beq.n	388e <_Balloc+0x2e>
    38a6:	str	r4, [r0, #4]
    38a8:	str	r6, [r0, #8]
    38aa:	b.n	3876 <_Balloc+0x16>

000038ac <_Bfree>:
    38ac:	cbz	r1, 38bc <_Bfree+0x10>
    38ae:	ldr	r3, [r0, #76]	; 0x4c
    38b0:	ldr	r2, [r1, #4]
    38b2:	ldr.w	r0, [r3, r2, lsl #2]
    38b6:	str	r0, [r1, #0]
    38b8:	str.w	r1, [r3, r2, lsl #2]
    38bc:	bx	lr
    38be:	nop

000038c0 <__multadd>:
    38c0:	push	{r4, r5, r6, r7, lr}
    38c2:	ldr	r4, [r1, #16]
    38c4:	sub	sp, #12
    38c6:	mov	r5, r1
    38c8:	mov	r6, r0
    38ca:	add.w	lr, r1, #20
    38ce:	movs	r7, #0
    38d0:	ldr.w	r0, [lr]
    38d4:	uxth	r1, r0
    38d6:	mla	r1, r2, r1, r3
    38da:	lsrs	r3, r1, #16
    38dc:	lsrs	r0, r0, #16
    38de:	mla	r3, r2, r0, r3
    38e2:	uxth	r1, r1
    38e4:	adds	r7, #1
    38e6:	add.w	r1, r1, r3, lsl #16
    38ea:	cmp	r4, r7
    38ec:	str.w	r1, [lr], #4
    38f0:	mov.w	r3, r3, lsr #16
    38f4:	bgt.n	38d0 <__multadd+0x10>
    38f6:	cbz	r3, 3908 <__multadd+0x48>
    38f8:	ldr	r2, [r5, #8]
    38fa:	cmp	r4, r2
    38fc:	bge.n	390e <__multadd+0x4e>
    38fe:	add.w	r2, r5, r4, lsl #2
    3902:	adds	r4, #1
    3904:	str	r3, [r2, #20]
    3906:	str	r4, [r5, #16]
    3908:	mov	r0, r5
    390a:	add	sp, #12
    390c:	pop	{r4, r5, r6, r7, pc}
    390e:	ldr	r1, [r5, #4]
    3910:	str	r3, [sp, #4]
    3912:	adds	r1, #1
    3914:	mov	r0, r6
    3916:	bl	3860 <_Balloc>
    391a:	ldr	r2, [r5, #16]
    391c:	adds	r2, #2
    391e:	add.w	r1, r5, #12
    3922:	mov	r7, r0
    3924:	lsls	r2, r2, #2
    3926:	adds	r0, #12
    3928:	bl	235c <memcpy>
    392c:	ldr	r2, [r6, #76]	; 0x4c
    392e:	ldr	r1, [r5, #4]
    3930:	ldr	r3, [sp, #4]
    3932:	ldr.w	r0, [r2, r1, lsl #2]
    3936:	str	r0, [r5, #0]
    3938:	str.w	r5, [r2, r1, lsl #2]
    393c:	mov	r5, r7
    393e:	b.n	38fe <__multadd+0x3e>

00003940 <__hi0bits>:
    3940:	lsrs	r3, r0, #16
    3942:	lsls	r3, r3, #16
    3944:	cbnz	r3, 3974 <__hi0bits+0x34>
    3946:	lsls	r0, r0, #16
    3948:	movs	r3, #16
    394a:	tst.w	r0, #4278190080	; 0xff000000
    394e:	itt	eq
    3950:	lsleq	r0, r0, #8
    3952:	addeq	r3, #8
    3954:	tst.w	r0, #4026531840	; 0xf0000000
    3958:	itt	eq
    395a:	lsleq	r0, r0, #4
    395c:	addeq	r3, #4
    395e:	tst.w	r0, #3221225472	; 0xc0000000
    3962:	itt	eq
    3964:	lsleq	r0, r0, #2
    3966:	addeq	r3, #2
    3968:	cmp	r0, #0
    396a:	blt.n	397c <__hi0bits+0x3c>
    396c:	lsls	r2, r0, #1
    396e:	bmi.n	3978 <__hi0bits+0x38>
    3970:	movs	r0, #32
    3972:	bx	lr
    3974:	movs	r3, #0
    3976:	b.n	394a <__hi0bits+0xa>
    3978:	adds	r0, r3, #1
    397a:	bx	lr
    397c:	mov	r0, r3
    397e:	bx	lr

00003980 <__lo0bits>:
    3980:	ldr	r3, [r0, #0]
    3982:	ands.w	r2, r3, #7
    3986:	beq.n	3998 <__lo0bits+0x18>
    3988:	lsls	r1, r3, #31
    398a:	bmi.n	39ce <__lo0bits+0x4e>
    398c:	lsls	r2, r3, #30
    398e:	bmi.n	39d2 <__lo0bits+0x52>
    3990:	lsrs	r3, r3, #2
    3992:	str	r3, [r0, #0]
    3994:	movs	r0, #2
    3996:	bx	lr
    3998:	uxth	r1, r3
    399a:	cbnz	r1, 39a0 <__lo0bits+0x20>
    399c:	lsrs	r3, r3, #16
    399e:	movs	r2, #16
    39a0:	tst.w	r3, #255	; 0xff
    39a4:	itt	eq
    39a6:	lsreq	r3, r3, #8
    39a8:	addeq	r2, #8
    39aa:	lsls	r1, r3, #28
    39ac:	itt	eq
    39ae:	lsreq	r3, r3, #4
    39b0:	addeq	r2, #4
    39b2:	lsls	r1, r3, #30
    39b4:	itt	eq
    39b6:	lsreq	r3, r3, #2
    39b8:	addeq	r2, #2
    39ba:	lsls	r1, r3, #31
    39bc:	bmi.n	39c8 <__lo0bits+0x48>
    39be:	lsrs	r3, r3, #1
    39c0:	bne.n	39c6 <__lo0bits+0x46>
    39c2:	movs	r0, #32
    39c4:	bx	lr
    39c6:	adds	r2, #1
    39c8:	str	r3, [r0, #0]
    39ca:	mov	r0, r2
    39cc:	bx	lr
    39ce:	movs	r0, #0
    39d0:	bx	lr
    39d2:	lsrs	r3, r3, #1
    39d4:	str	r3, [r0, #0]
    39d6:	movs	r0, #1
    39d8:	bx	lr
    39da:	nop

000039dc <__i2b>:
    39dc:	push	{r4, lr}
    39de:	mov	r4, r1
    39e0:	movs	r1, #1
    39e2:	bl	3860 <_Balloc>
    39e6:	movs	r2, #1
    39e8:	str	r4, [r0, #20]
    39ea:	str	r2, [r0, #16]
    39ec:	pop	{r4, pc}
    39ee:	nop

000039f0 <__multiply>:
    39f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39f4:	ldr	r5, [r1, #16]
    39f6:	ldr	r7, [r2, #16]
    39f8:	cmp	r5, r7
    39fa:	sub	sp, #12
    39fc:	mov	r4, r1
    39fe:	mov	r6, r2
    3a00:	bge.n	3a0c <__multiply+0x1c>
    3a02:	mov	r2, r5
    3a04:	mov	r4, r6
    3a06:	mov	r5, r7
    3a08:	mov	r6, r1
    3a0a:	mov	r7, r2
    3a0c:	ldr	r3, [r4, #8]
    3a0e:	ldr	r1, [r4, #4]
    3a10:	add.w	r8, r5, r7
    3a14:	cmp	r8, r3
    3a16:	it	gt
    3a18:	addgt	r1, #1
    3a1a:	bl	3860 <_Balloc>
    3a1e:	add.w	ip, r0, #20
    3a22:	add.w	r9, ip, r8, lsl #2
    3a26:	cmp	ip, r9
    3a28:	str	r0, [sp, #0]
    3a2a:	bcs.n	3a38 <__multiply+0x48>
    3a2c:	mov	r3, ip
    3a2e:	movs	r1, #0
    3a30:	str.w	r1, [r3], #4
    3a34:	cmp	r9, r3
    3a36:	bhi.n	3a30 <__multiply+0x40>
    3a38:	add.w	r2, r6, #20
    3a3c:	add.w	sl, r2, r7, lsl #2
    3a40:	add.w	r3, r4, #20
    3a44:	cmp	r2, sl
    3a46:	add.w	lr, r3, r5, lsl #2
    3a4a:	bcs.n	3af6 <__multiply+0x106>
    3a4c:	str.w	r9, [sp, #4]
    3a50:	mov	r9, r3
    3a52:	ldr.w	r3, [r2], #4
    3a56:	uxth.w	fp, r3
    3a5a:	cmp.w	fp, #0
    3a5e:	beq.n	3aa2 <__multiply+0xb2>
    3a60:	movs	r0, #0
    3a62:	mov	r7, r9
    3a64:	mov	r6, ip
    3a66:	mov	r5, r0
    3a68:	b.n	3a6c <__multiply+0x7c>
    3a6a:	mov	r6, r3
    3a6c:	ldr.w	r4, [r7], #4
    3a70:	ldr	r0, [r6, #0]
    3a72:	uxth	r1, r4
    3a74:	uxth	r3, r0
    3a76:	mla	r1, fp, r1, r3
    3a7a:	lsrs	r4, r4, #16
    3a7c:	lsrs	r0, r0, #16
    3a7e:	adds	r3, r1, r5
    3a80:	mla	r0, fp, r4, r0
    3a84:	add.w	r0, r0, r3, lsr #16
    3a88:	uxth	r1, r3
    3a8a:	mov	r3, r6
    3a8c:	orr.w	r1, r1, r0, lsl #16
    3a90:	cmp	lr, r7
    3a92:	mov.w	r5, r0, lsr #16
    3a96:	str.w	r1, [r3], #4
    3a9a:	bhi.n	3a6a <__multiply+0x7a>
    3a9c:	str	r5, [r6, #4]
    3a9e:	ldr.w	r3, [r2, #-4]
    3aa2:	movs.w	fp, r3, lsr #16
    3aa6:	beq.n	3aea <__multiply+0xfa>
    3aa8:	ldr.w	r3, [ip]
    3aac:	mov	r7, ip
    3aae:	mov	r0, r3
    3ab0:	mov	r5, r9
    3ab2:	movs	r1, #0
    3ab4:	b.n	3ab8 <__multiply+0xc8>
    3ab6:	mov	r7, r6
    3ab8:	ldrh	r4, [r5, #0]
    3aba:	lsrs	r0, r0, #16
    3abc:	mla	r0, fp, r4, r0
    3ac0:	add	r1, r0
    3ac2:	uxth	r4, r3
    3ac4:	mov	r6, r7
    3ac6:	orr.w	r3, r4, r1, lsl #16
    3aca:	str.w	r3, [r6], #4
    3ace:	ldr	r0, [r7, #4]
    3ad0:	ldr.w	r4, [r5], #4
    3ad4:	uxth	r3, r0
    3ad6:	lsrs	r4, r4, #16
    3ad8:	mla	r4, fp, r4, r3
    3adc:	add.w	r3, r4, r1, lsr #16
    3ae0:	cmp	lr, r5
    3ae2:	mov.w	r1, r3, lsr #16
    3ae6:	bhi.n	3ab6 <__multiply+0xc6>
    3ae8:	str	r3, [r7, #4]
    3aea:	cmp	sl, r2
    3aec:	add.w	ip, ip, #4
    3af0:	bhi.n	3a52 <__multiply+0x62>
    3af2:	ldr.w	r9, [sp, #4]
    3af6:	cmp.w	r8, #0
    3afa:	ble.n	3b14 <__multiply+0x124>
    3afc:	ldr.w	r3, [r9, #-4]
    3b00:	sub.w	r9, r9, #4
    3b04:	cbz	r3, 3b0e <__multiply+0x11e>
    3b06:	b.n	3b14 <__multiply+0x124>
    3b08:	ldr.w	r3, [r9, #-4]!
    3b0c:	cbnz	r3, 3b14 <__multiply+0x124>
    3b0e:	subs.w	r8, r8, #1
    3b12:	bne.n	3b08 <__multiply+0x118>
    3b14:	ldr	r0, [sp, #0]
    3b16:	str.w	r8, [r0, #16]
    3b1a:	add	sp, #12
    3b1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003b20 <__pow5mult>:
    3b20:	ands.w	r3, r2, #3
    3b24:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b28:	mov	r4, r2
    3b2a:	mov	r7, r0
    3b2c:	bne.n	3b8c <__pow5mult+0x6c>
    3b2e:	mov	r6, r1
    3b30:	asrs	r4, r4, #2
    3b32:	beq.n	3b6e <__pow5mult+0x4e>
    3b34:	ldr	r5, [r7, #72]	; 0x48
    3b36:	cbz	r5, 3b9e <__pow5mult+0x7e>
    3b38:	lsls	r3, r4, #31
    3b3a:	mov.w	r8, #0
    3b3e:	bmi.n	3b4e <__pow5mult+0x2e>
    3b40:	asrs	r4, r4, #1
    3b42:	beq.n	3b6e <__pow5mult+0x4e>
    3b44:	ldr	r0, [r5, #0]
    3b46:	cbz	r0, 3b74 <__pow5mult+0x54>
    3b48:	mov	r5, r0
    3b4a:	lsls	r3, r4, #31
    3b4c:	bpl.n	3b40 <__pow5mult+0x20>
    3b4e:	mov	r2, r5
    3b50:	mov	r1, r6
    3b52:	mov	r0, r7
    3b54:	bl	39f0 <__multiply>
    3b58:	cbz	r6, 3b88 <__pow5mult+0x68>
    3b5a:	ldr	r2, [r6, #4]
    3b5c:	ldr	r3, [r7, #76]	; 0x4c
    3b5e:	asrs	r4, r4, #1
    3b60:	ldr.w	r1, [r3, r2, lsl #2]
    3b64:	str	r1, [r6, #0]
    3b66:	str.w	r6, [r3, r2, lsl #2]
    3b6a:	mov	r6, r0
    3b6c:	bne.n	3b44 <__pow5mult+0x24>
    3b6e:	mov	r0, r6
    3b70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b74:	mov	r2, r5
    3b76:	mov	r1, r5
    3b78:	mov	r0, r7
    3b7a:	bl	39f0 <__multiply>
    3b7e:	str	r0, [r5, #0]
    3b80:	str.w	r8, [r0]
    3b84:	mov	r5, r0
    3b86:	b.n	3b4a <__pow5mult+0x2a>
    3b88:	mov	r6, r0
    3b8a:	b.n	3b40 <__pow5mult+0x20>
    3b8c:	subs	r2, r3, #1
    3b8e:	ldr	r5, [pc, #44]	; (3bbc <__pow5mult+0x9c>)
    3b90:	movs	r3, #0
    3b92:	ldr.w	r2, [r5, r2, lsl #2]
    3b96:	bl	38c0 <__multadd>
    3b9a:	mov	r6, r0
    3b9c:	b.n	3b30 <__pow5mult+0x10>
    3b9e:	movs	r1, #1
    3ba0:	mov	r0, r7
    3ba2:	bl	3860 <_Balloc>
    3ba6:	movw	r1, #625	; 0x271
    3baa:	movs	r2, #1
    3bac:	movs	r3, #0
    3bae:	str	r1, [r0, #20]
    3bb0:	str	r2, [r0, #16]
    3bb2:	mov	r5, r0
    3bb4:	str	r0, [r7, #72]	; 0x48
    3bb6:	str	r3, [r0, #0]
    3bb8:	b.n	3b38 <__pow5mult+0x18>
    3bba:	nop
    3bbc:	.word	0x20000670

00003bc0 <__lshift>:
    3bc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3bc4:	mov	r9, r2
    3bc6:	ldr	r2, [r1, #16]
    3bc8:	ldr	r3, [r1, #8]
    3bca:	mov.w	r4, r9, asr #5
    3bce:	add.w	r8, r4, r2
    3bd2:	add.w	r5, r8, #1
    3bd6:	cmp	r5, r3
    3bd8:	mov	r6, r1
    3bda:	mov	sl, r0
    3bdc:	ldr	r1, [r1, #4]
    3bde:	ble.n	3bea <__lshift+0x2a>
    3be0:	lsls	r3, r3, #1
    3be2:	cmp	r5, r3
    3be4:	add.w	r1, r1, #1
    3be8:	bgt.n	3be0 <__lshift+0x20>
    3bea:	mov	r0, sl
    3bec:	bl	3860 <_Balloc>
    3bf0:	cmp	r4, #0
    3bf2:	add.w	r2, r0, #20
    3bf6:	ble.n	3c6a <__lshift+0xaa>
    3bf8:	add.w	r3, r2, r4, lsl #2
    3bfc:	movs	r1, #0
    3bfe:	str.w	r1, [r2], #4
    3c02:	cmp	r3, r2
    3c04:	bne.n	3bfe <__lshift+0x3e>
    3c06:	ldr	r4, [r6, #16]
    3c08:	add.w	r1, r6, #20
    3c0c:	ands.w	r9, r9, #31
    3c10:	add.w	lr, r1, r4, lsl #2
    3c14:	beq.n	3c5a <__lshift+0x9a>
    3c16:	rsb	r2, r9, #32
    3c1a:	movs	r4, #0
    3c1c:	ldr	r7, [r1, #0]
    3c1e:	lsl.w	ip, r7, r9
    3c22:	orr.w	r4, ip, r4
    3c26:	mov	ip, r3
    3c28:	str.w	r4, [r3], #4
    3c2c:	ldr.w	r4, [r1], #4
    3c30:	cmp	lr, r1
    3c32:	lsr.w	r4, r4, r2
    3c36:	bhi.n	3c1c <__lshift+0x5c>
    3c38:	str.w	r4, [ip, #4]
    3c3c:	cbz	r4, 3c42 <__lshift+0x82>
    3c3e:	add.w	r5, r8, #2
    3c42:	ldr.w	r3, [sl, #76]	; 0x4c
    3c46:	ldr	r2, [r6, #4]
    3c48:	subs	r5, #1
    3c4a:	ldr.w	r1, [r3, r2, lsl #2]
    3c4e:	str	r5, [r0, #16]
    3c50:	str	r1, [r6, #0]
    3c52:	str.w	r6, [r3, r2, lsl #2]
    3c56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c5a:	subs	r3, #4
    3c5c:	ldr.w	r2, [r1], #4
    3c60:	str.w	r2, [r3, #4]!
    3c64:	cmp	lr, r1
    3c66:	bhi.n	3c5c <__lshift+0x9c>
    3c68:	b.n	3c42 <__lshift+0x82>
    3c6a:	mov	r3, r2
    3c6c:	b.n	3c06 <__lshift+0x46>
    3c6e:	nop

00003c70 <__mcmp>:
    3c70:	ldr	r2, [r0, #16]
    3c72:	ldr	r3, [r1, #16]
    3c74:	subs	r2, r2, r3
    3c76:	bne.n	3ca0 <__mcmp+0x30>
    3c78:	lsls	r3, r3, #2
    3c7a:	adds	r0, #20
    3c7c:	adds	r1, #20
    3c7e:	add	r1, r3
    3c80:	push	{r4}
    3c82:	add	r3, r0
    3c84:	b.n	3c8a <__mcmp+0x1a>
    3c86:	cmp	r0, r3
    3c88:	bcs.n	3ca4 <__mcmp+0x34>
    3c8a:	ldr.w	r4, [r3, #-4]!
    3c8e:	ldr.w	r2, [r1, #-4]!
    3c92:	cmp	r4, r2
    3c94:	beq.n	3c86 <__mcmp+0x16>
    3c96:	bcc.n	3cac <__mcmp+0x3c>
    3c98:	movs	r0, #1
    3c9a:	ldr.w	r4, [sp], #4
    3c9e:	bx	lr
    3ca0:	mov	r0, r2
    3ca2:	bx	lr
    3ca4:	movs	r0, #0
    3ca6:	ldr.w	r4, [sp], #4
    3caa:	bx	lr
    3cac:	mov.w	r0, #4294967295
    3cb0:	b.n	3c9a <__mcmp+0x2a>
    3cb2:	nop

00003cb4 <__mdiff>:
    3cb4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3cb8:	ldr	r3, [r1, #16]
    3cba:	mov	r7, r1
    3cbc:	ldr	r1, [r2, #16]
    3cbe:	subs	r3, r3, r1
    3cc0:	cmp	r3, #0
    3cc2:	mov	r8, r2
    3cc4:	bne.n	3cf6 <__mdiff+0x42>
    3cc6:	lsls	r1, r1, #2
    3cc8:	add.w	r2, r7, #20
    3ccc:	add.w	r5, r8, #20
    3cd0:	adds	r3, r2, r1
    3cd2:	add	r1, r5
    3cd4:	b.n	3cda <__mdiff+0x26>
    3cd6:	cmp	r2, r3
    3cd8:	bcs.n	3d98 <__mdiff+0xe4>
    3cda:	ldr.w	r6, [r3, #-4]!
    3cde:	ldr.w	r4, [r1, #-4]!
    3ce2:	cmp	r6, r4
    3ce4:	beq.n	3cd6 <__mdiff+0x22>
    3ce6:	bcs.n	3daa <__mdiff+0xf6>
    3ce8:	mov	r3, r7
    3cea:	mov	r4, r2
    3cec:	mov	r7, r8
    3cee:	mov.w	r9, #1
    3cf2:	mov	r8, r3
    3cf4:	b.n	3d04 <__mdiff+0x50>
    3cf6:	blt.n	3db4 <__mdiff+0x100>
    3cf8:	add.w	r5, r7, #20
    3cfc:	add.w	r4, r2, #20
    3d00:	mov.w	r9, #0
    3d04:	ldr	r1, [r7, #4]
    3d06:	bl	3860 <_Balloc>
    3d0a:	ldr.w	r3, [r8, #16]
    3d0e:	ldr	r6, [r7, #16]
    3d10:	str.w	r9, [r0, #12]
    3d14:	add.w	ip, r4, r3, lsl #2
    3d18:	mov	lr, r4
    3d1a:	add.w	r7, r5, r6, lsl #2
    3d1e:	add.w	r4, r0, #20
    3d22:	movs	r3, #0
    3d24:	ldr.w	r1, [lr], #4
    3d28:	ldr.w	r8, [r5], #4
    3d2c:	uxth	r2, r1
    3d2e:	uxtah	r3, r3, r8
    3d32:	lsrs	r1, r1, #16
    3d34:	subs	r2, r3, r2
    3d36:	rsb	r3, r1, r8, lsr #16
    3d3a:	add.w	r3, r3, r2, asr #16
    3d3e:	uxth	r2, r2
    3d40:	orr.w	r2, r2, r3, lsl #16
    3d44:	cmp	ip, lr
    3d46:	str.w	r2, [r4], #4
    3d4a:	mov.w	r3, r3, asr #16
    3d4e:	bhi.n	3d24 <__mdiff+0x70>
    3d50:	cmp	r7, r5
    3d52:	bls.n	3d84 <__mdiff+0xd0>
    3d54:	mov	ip, r4
    3d56:	mov	r1, r5
    3d58:	ldr.w	lr, [r1], #4
    3d5c:	uxtah	r2, r3, lr
    3d60:	asrs	r3, r2, #16
    3d62:	add.w	r3, r3, lr, lsr #16
    3d66:	uxth	r2, r2
    3d68:	orr.w	r2, r2, r3, lsl #16
    3d6c:	cmp	r7, r1
    3d6e:	str.w	r2, [ip], #4
    3d72:	mov.w	r3, r3, asr #16
    3d76:	bhi.n	3d58 <__mdiff+0xa4>
    3d78:	mvns	r5, r5
    3d7a:	add	r5, r7
    3d7c:	bic.w	r5, r5, #3
    3d80:	adds	r5, #4
    3d82:	add	r4, r5
    3d84:	subs	r4, #4
    3d86:	cbnz	r2, 3d92 <__mdiff+0xde>
    3d88:	ldr.w	r3, [r4, #-4]!
    3d8c:	subs	r6, #1
    3d8e:	cmp	r3, #0
    3d90:	beq.n	3d88 <__mdiff+0xd4>
    3d92:	str	r6, [r0, #16]
    3d94:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d98:	movs	r1, #0
    3d9a:	bl	3860 <_Balloc>
    3d9e:	movs	r2, #1
    3da0:	movs	r3, #0
    3da2:	str	r2, [r0, #16]
    3da4:	str	r3, [r0, #20]
    3da6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3daa:	mov	r4, r5
    3dac:	mov.w	r9, #0
    3db0:	mov	r5, r2
    3db2:	b.n	3d04 <__mdiff+0x50>
    3db4:	mov	r3, r7
    3db6:	add.w	r4, r7, #20
    3dba:	add.w	r5, r8, #20
    3dbe:	mov	r7, r8
    3dc0:	mov.w	r9, #1
    3dc4:	mov	r8, r3
    3dc6:	b.n	3d04 <__mdiff+0x50>

00003dc8 <__d2b>:
    3dc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3dcc:	vmov	r6, r7, d0
    3dd0:	sub	sp, #12
    3dd2:	mov	r8, r1
    3dd4:	movs	r1, #1
    3dd6:	mov	r4, r7
    3dd8:	ubfx	r5, r7, #20, #11
    3ddc:	mov	r7, r2
    3dde:	bl	3860 <_Balloc>
    3de2:	ubfx	r4, r4, #0, #20
    3de6:	mov	r9, r0
    3de8:	cbz	r5, 3dee <__d2b+0x26>
    3dea:	orr.w	r4, r4, #1048576	; 0x100000
    3dee:	str	r4, [sp, #4]
    3df0:	cbz	r6, 3e3a <__d2b+0x72>
    3df2:	add	r0, sp, #8
    3df4:	str.w	r6, [r0, #-8]!
    3df8:	bl	3980 <__lo0bits>
    3dfc:	cmp	r0, #0
    3dfe:	bne.n	3e6a <__d2b+0xa2>
    3e00:	ldmia.w	sp, {r2, r3}
    3e04:	str.w	r2, [r9, #20]
    3e08:	cmp	r3, #0
    3e0a:	ite	eq
    3e0c:	moveq	r1, #1
    3e0e:	movne	r1, #2
    3e10:	str.w	r3, [r9, #24]
    3e14:	str.w	r1, [r9, #16]
    3e18:	cbnz	r5, 3e52 <__d2b+0x8a>
    3e1a:	add.w	r3, r9, r1, lsl #2
    3e1e:	subw	r0, r0, #1074	; 0x432
    3e22:	str.w	r0, [r8]
    3e26:	ldr	r0, [r3, #16]
    3e28:	bl	3940 <__hi0bits>
    3e2c:	rsb	r0, r0, r1, lsl #5
    3e30:	str	r0, [r7, #0]
    3e32:	mov	r0, r9
    3e34:	add	sp, #12
    3e36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3e3a:	add	r0, sp, #4
    3e3c:	bl	3980 <__lo0bits>
    3e40:	ldr	r3, [sp, #4]
    3e42:	str.w	r3, [r9, #20]
    3e46:	movs	r1, #1
    3e48:	adds	r0, #32
    3e4a:	str.w	r1, [r9, #16]
    3e4e:	cmp	r5, #0
    3e50:	beq.n	3e1a <__d2b+0x52>
    3e52:	subw	r5, r5, #1075	; 0x433
    3e56:	add	r5, r0
    3e58:	rsb	r0, r0, #53	; 0x35
    3e5c:	str.w	r5, [r8]
    3e60:	str	r0, [r7, #0]
    3e62:	mov	r0, r9
    3e64:	add	sp, #12
    3e66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3e6a:	ldmia.w	sp, {r2, r3}
    3e6e:	rsb	r1, r0, #32
    3e72:	lsl.w	r1, r3, r1
    3e76:	orrs	r2, r1
    3e78:	lsrs	r3, r0
    3e7a:	str	r3, [sp, #4]
    3e7c:	str.w	r2, [r9, #20]
    3e80:	b.n	3e08 <__d2b+0x40>
    3e82:	nop

00003e84 <_vasnprintf_r>:
    3e84:	push	{r4, r5, r6, lr}
    3e86:	mov	r5, r2
    3e88:	sub	sp, #104	; 0x68
    3e8a:	ldr	r4, [r2, #0]
    3e8c:	cbz	r1, 3e92 <_vasnprintf_r+0xe>
    3e8e:	cmp	r4, #0
    3e90:	bne.n	3ec8 <_vasnprintf_r+0x44>
    3e92:	movs	r4, #0
    3e94:	mov.w	r2, #648	; 0x288
    3e98:	strh.w	r2, [sp, #12]
    3e9c:	str	r4, [sp, #0]
    3e9e:	str	r4, [sp, #16]
    3ea0:	mov	r2, r3
    3ea2:	movw	r6, #65535	; 0xffff
    3ea6:	ldr	r3, [sp, #120]	; 0x78
    3ea8:	str	r4, [sp, #8]
    3eaa:	mov	r1, sp
    3eac:	str	r4, [sp, #20]
    3eae:	strh.w	r6, [sp, #14]
    3eb2:	bl	4cf8 <_svfprintf_r>
    3eb6:	cmp	r0, #0
    3eb8:	blt.n	3ede <_vasnprintf_r+0x5a>
    3eba:	ldr	r3, [sp, #0]
    3ebc:	str	r0, [r5, #0]
    3ebe:	movs	r2, #0
    3ec0:	strb	r2, [r3, #0]
    3ec2:	ldr	r0, [sp, #16]
    3ec4:	add	sp, #104	; 0x68
    3ec6:	pop	{r4, r5, r6, pc}
    3ec8:	mov.w	r2, #1544	; 0x608
    3ecc:	str	r1, [sp, #0]
    3ece:	str	r1, [sp, #16]
    3ed0:	strh.w	r2, [sp, #12]
    3ed4:	bge.n	3ea0 <_vasnprintf_r+0x1c>
    3ed6:	movs	r3, #139	; 0x8b
    3ed8:	str	r3, [r0, #0]
    3eda:	movs	r0, #0
    3edc:	b.n	3ec4 <_vasnprintf_r+0x40>
    3ede:	movs	r0, #0
    3ee0:	b.n	3ec4 <_vasnprintf_r+0x40>
    3ee2:	nop

00003ee4 <_calloc_r>:
    3ee4:	push	{r4, lr}
    3ee6:	mul.w	r1, r2, r1
    3eea:	bl	27d8 <_malloc_r>
    3eee:	mov	r4, r0
    3ef0:	cbz	r0, 3f2a <_calloc_r+0x46>
    3ef2:	ldr.w	r2, [r0, #-4]
    3ef6:	bic.w	r2, r2, #3
    3efa:	subs	r2, #4
    3efc:	cmp	r2, #36	; 0x24
    3efe:	bhi.n	3f32 <_calloc_r+0x4e>
    3f00:	cmp	r2, #19
    3f02:	bls.n	3f2e <_calloc_r+0x4a>
    3f04:	movs	r3, #0
    3f06:	cmp	r2, #27
    3f08:	str	r3, [r0, #0]
    3f0a:	str	r3, [r0, #4]
    3f0c:	bls.n	3f3c <_calloc_r+0x58>
    3f0e:	cmp	r2, #36	; 0x24
    3f10:	str	r3, [r0, #8]
    3f12:	str	r3, [r0, #12]
    3f14:	iteee	ne
    3f16:	addne.w	r2, r0, #16
    3f1a:	streq	r3, [r0, #16]
    3f1c:	streq	r3, [r0, #20]
    3f1e:	addeq.w	r2, r0, #24
    3f22:	movs	r3, #0
    3f24:	str	r3, [r2, #0]
    3f26:	str	r3, [r2, #4]
    3f28:	str	r3, [r2, #8]
    3f2a:	mov	r0, r4
    3f2c:	pop	{r4, pc}
    3f2e:	mov	r2, r0
    3f30:	b.n	3f22 <_calloc_r+0x3e>
    3f32:	movs	r1, #0
    3f34:	bl	2e3c <memset>
    3f38:	mov	r0, r4
    3f3a:	pop	{r4, pc}
    3f3c:	add.w	r2, r0, #8
    3f40:	b.n	3f22 <_calloc_r+0x3e>
    3f42:	nop

00003f44 <quorem>:
    3f44:	ldr	r2, [r0, #16]
    3f46:	ldr	r3, [r1, #16]
    3f48:	cmp	r3, r2
    3f4a:	bgt.w	4068 <quorem+0x124>
    3f4e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f52:	add.w	r8, r3, #4294967295
    3f56:	add.w	r7, r1, #20
    3f5a:	add.w	fp, r0, #20
    3f5e:	ldr.w	r2, [r7, r8, lsl #2]
    3f62:	ldr.w	r3, [fp, r8, lsl #2]
    3f66:	mov.w	r4, r8, lsl #2
    3f6a:	sub	sp, #12
    3f6c:	adds	r2, #1
    3f6e:	udiv	r9, r3, r2
    3f72:	add.w	r3, fp, r4
    3f76:	str	r4, [sp, #0]
    3f78:	add.w	sl, r7, r4
    3f7c:	str	r3, [sp, #4]
    3f7e:	cmp.w	r9, #0
    3f82:	beq.n	3ff8 <quorem+0xb4>
    3f84:	movs	r5, #0
    3f86:	mov	ip, r7
    3f88:	mov	lr, fp
    3f8a:	mov	r3, r5
    3f8c:	ldr.w	r6, [ip], #4
    3f90:	ldr.w	r2, [lr]
    3f94:	uxth	r4, r6
    3f96:	mla	r5, r9, r4, r5
    3f9a:	lsrs	r6, r6, #16
    3f9c:	lsrs	r4, r5, #16
    3f9e:	mla	r4, r9, r6, r4
    3fa2:	uxth	r5, r5
    3fa4:	subs	r3, r3, r5
    3fa6:	uxth	r6, r4
    3fa8:	uxtah	r3, r3, r2
    3fac:	rsb	r6, r6, r2, lsr #16
    3fb0:	add.w	r6, r6, r3, asr #16
    3fb4:	uxth	r3, r3
    3fb6:	orr.w	r3, r3, r6, lsl #16
    3fba:	cmp	sl, ip
    3fbc:	str.w	r3, [lr], #4
    3fc0:	mov.w	r5, r4, lsr #16
    3fc4:	mov.w	r3, r6, asr #16
    3fc8:	bcs.n	3f8c <quorem+0x48>
    3fca:	ldr	r3, [sp, #0]
    3fcc:	ldr.w	r3, [fp, r3]
    3fd0:	cbnz	r3, 3ff8 <quorem+0xb4>
    3fd2:	ldr	r4, [sp, #4]
    3fd4:	subs	r3, r4, #4
    3fd6:	cmp	fp, r3
    3fd8:	bcs.n	3ff4 <quorem+0xb0>
    3fda:	ldr.w	r3, [r4, #-4]
    3fde:	cbnz	r3, 3ff4 <quorem+0xb0>
    3fe0:	sub.w	r3, r4, #8
    3fe4:	b.n	3fec <quorem+0xa8>
    3fe6:	ldr	r2, [r3, #0]
    3fe8:	subs	r3, #4
    3fea:	cbnz	r2, 3ff4 <quorem+0xb0>
    3fec:	cmp	fp, r3
    3fee:	add.w	r8, r8, #4294967295
    3ff2:	bcc.n	3fe6 <quorem+0xa2>
    3ff4:	str.w	r8, [r0, #16]
    3ff8:	mov	r4, r0
    3ffa:	bl	3c70 <__mcmp>
    3ffe:	cmp	r0, #0
    4000:	blt.n	4060 <quorem+0x11c>
    4002:	add.w	r9, r9, #1
    4006:	mov	r5, fp
    4008:	movs	r3, #0
    400a:	ldr.w	r1, [r7], #4
    400e:	ldr	r0, [r5, #0]
    4010:	uxth	r2, r1
    4012:	subs	r2, r3, r2
    4014:	lsrs	r1, r1, #16
    4016:	uxtah	r2, r2, r0
    401a:	rsb	r3, r1, r0, lsr #16
    401e:	add.w	r3, r3, r2, asr #16
    4022:	uxth	r1, r2
    4024:	orr.w	r1, r1, r3, lsl #16
    4028:	cmp	sl, r7
    402a:	str.w	r1, [r5], #4
    402e:	mov.w	r3, r3, asr #16
    4032:	bcs.n	400a <quorem+0xc6>
    4034:	ldr.w	r2, [fp, r8, lsl #2]
    4038:	add.w	r3, fp, r8, lsl #2
    403c:	cbnz	r2, 4060 <quorem+0x11c>
    403e:	subs	r2, r3, #4
    4040:	cmp	fp, r2
    4042:	bcs.n	405c <quorem+0x118>
    4044:	ldr.w	r2, [r3, #-4]
    4048:	cbnz	r2, 405c <quorem+0x118>
    404a:	subs	r3, #8
    404c:	b.n	4054 <quorem+0x110>
    404e:	ldr	r2, [r3, #0]
    4050:	subs	r3, #4
    4052:	cbnz	r2, 405c <quorem+0x118>
    4054:	cmp	fp, r3
    4056:	add.w	r8, r8, #4294967295
    405a:	bcc.n	404e <quorem+0x10a>
    405c:	str.w	r8, [r4, #16]
    4060:	mov	r0, r9
    4062:	add	sp, #12
    4064:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4068:	movs	r0, #0
    406a:	bx	lr
    406c:	movs	r0, r0
	...

00004070 <_dtoa_r>:
    4070:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4074:	vmov	r6, r7, d0
    4078:	sub	sp, #76	; 0x4c
    407a:	ldr	r5, [r0, #64]	; 0x40
    407c:	str	r1, [sp, #4]
    407e:	mov	r4, r0
    4080:	mov	r8, r2
    4082:	str	r3, [sp, #16]
    4084:	vmov	sl, s0
    4088:	mov	fp, r7
    408a:	cbz	r5, 40a0 <_dtoa_r+0x30>
    408c:	ldr	r2, [r0, #68]	; 0x44
    408e:	str	r2, [r5, #4]
    4090:	movs	r3, #1
    4092:	lsls	r3, r2
    4094:	str	r3, [r5, #8]
    4096:	mov	r1, r5
    4098:	bl	38ac <_Bfree>
    409c:	movs	r3, #0
    409e:	str	r3, [r4, #64]	; 0x40
    40a0:	cmp.w	fp, #0
    40a4:	mov	r6, fp
    40a6:	blt.n	4112 <_dtoa_r+0xa2>
    40a8:	ldr	r2, [sp, #112]	; 0x70
    40aa:	movs	r3, #0
    40ac:	str	r3, [r2, #0]
    40ae:	ldr	r3, [pc, #784]	; (43c0 <_dtoa_r+0x350>)
    40b0:	mov	r2, r3
    40b2:	ands	r3, r6
    40b4:	cmp	r3, r2
    40b6:	beq.n	40e4 <_dtoa_r+0x74>
    40b8:	vmov	d7, sl, fp
    40bc:	vcmp.f64	d7, #0.0
    40c0:	vmrs	APSR_nzcv, fpscr
    40c4:	strd	sl, fp, [sp, #8]
    40c8:	bne.n	4120 <_dtoa_r+0xb0>
    40ca:	ldr	r2, [sp, #16]
    40cc:	movs	r3, #1
    40ce:	str	r3, [r2, #0]
    40d0:	ldr	r3, [sp, #116]	; 0x74
    40d2:	cmp	r3, #0
    40d4:	beq.w	4246 <_dtoa_r+0x1d6>
    40d8:	ldr	r0, [pc, #744]	; (43c4 <_dtoa_r+0x354>)
    40da:	str	r0, [r3, #0]
    40dc:	subs	r0, #1
    40de:	add	sp, #76	; 0x4c
    40e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40e4:	ldr	r2, [sp, #16]
    40e6:	movw	r3, #9999	; 0x270f
    40ea:	str	r3, [r2, #0]
    40ec:	cmp.w	sl, #0
    40f0:	beq.w	4218 <_dtoa_r+0x1a8>
    40f4:	ldr	r0, [pc, #720]	; (43c8 <_dtoa_r+0x358>)
    40f6:	ldr	r3, [sp, #116]	; 0x74
    40f8:	cmp	r3, #0
    40fa:	beq.n	40de <_dtoa_r+0x6e>
    40fc:	ldrb	r3, [r0, #3]
    40fe:	cmp	r3, #0
    4100:	beq.w	424a <_dtoa_r+0x1da>
    4104:	add.w	r3, r0, #8
    4108:	ldr	r2, [sp, #116]	; 0x74
    410a:	str	r3, [r2, #0]
    410c:	add	sp, #76	; 0x4c
    410e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4112:	ldr	r2, [sp, #112]	; 0x70
    4114:	movs	r3, #1
    4116:	bic.w	r6, fp, #2147483648	; 0x80000000
    411a:	str	r3, [r2, #0]
    411c:	mov	fp, r6
    411e:	b.n	40ae <_dtoa_r+0x3e>
    4120:	add	r1, sp, #68	; 0x44
    4122:	add	r2, sp, #64	; 0x40
    4124:	vldr	d0, [sp, #8]
    4128:	mov	r0, r4
    412a:	bl	3dc8 <__d2b>
    412e:	lsrs	r1, r6, #20
    4130:	str	r0, [sp, #28]
    4132:	bne.n	422a <_dtoa_r+0x1ba>
    4134:	ldr	r0, [sp, #64]	; 0x40
    4136:	ldr	r1, [sp, #68]	; 0x44
    4138:	add	r1, r0
    413a:	addw	r3, r1, #1074	; 0x432
    413e:	cmp	r3, #32
    4140:	ble.w	45c6 <_dtoa_r+0x556>
    4144:	rsb	r3, r3, #64	; 0x40
    4148:	addw	r2, r1, #1042	; 0x412
    414c:	lsls	r6, r3
    414e:	lsr.w	r3, sl, r2
    4152:	orrs	r3, r6
    4154:	vmov	s15, r3
    4158:	vcvt.f64.u32	d7, s15
    415c:	movs	r5, #1
    415e:	vmov	r2, r3, d7
    4162:	subs	r1, #1
    4164:	sub.w	r3, r3, #32505856	; 0x1f00000
    4168:	str	r5, [sp, #40]	; 0x28
    416a:	vmov	d7, r2, r3
    416e:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    4172:	vldr	d4, [pc, #564]	; 43a8 <_dtoa_r+0x338>
    4176:	vsub.f64	d6, d7, d6
    417a:	vldr	d7, [pc, #564]	; 43b0 <_dtoa_r+0x340>
    417e:	vldr	d5, [pc, #568]	; 43b8 <_dtoa_r+0x348>
    4182:	vfma.f64	d7, d6, d4
    4186:	vmov	s13, r1
    418a:	vcvt.f64.s32	d6, s13
    418e:	vfma.f64	d7, d6, d5
    4192:	vcvt.s32.f64	s13, d7
    4196:	vcmpe.f64	d7, #0.0
    419a:	vmrs	APSR_nzcv, fpscr
    419e:	vstr	s13, [sp, #8]
    41a2:	bmi.w	43de <_dtoa_r+0x36e>
    41a6:	ldr	r5, [sp, #8]
    41a8:	cmp	r5, #22
    41aa:	bhi.w	43d8 <_dtoa_r+0x368>
    41ae:	ldr	r3, [pc, #540]	; (43cc <_dtoa_r+0x35c>)
    41b0:	add.w	r3, r3, r5, lsl #3
    41b4:	vldr	d7, [r3]
    41b8:	vmov	d6, sl, fp
    41bc:	vcmpe.f64	d7, d6
    41c0:	vmrs	APSR_nzcv, fpscr
    41c4:	ble.w	45d4 <_dtoa_r+0x564>
    41c8:	subs	r3, r5, #1
    41ca:	str	r3, [sp, #8]
    41cc:	movs	r3, #0
    41ce:	str	r3, [sp, #48]	; 0x30
    41d0:	subs	r1, r0, r1
    41d2:	subs.w	r9, r1, #1
    41d6:	bmi.w	4408 <_dtoa_r+0x398>
    41da:	movs	r3, #0
    41dc:	str	r3, [sp, #24]
    41de:	ldr	r3, [sp, #8]
    41e0:	cmp	r3, #0
    41e2:	blt.w	43f6 <_dtoa_r+0x386>
    41e6:	add	r9, r3
    41e8:	str	r3, [sp, #44]	; 0x2c
    41ea:	movs	r3, #0
    41ec:	str	r3, [sp, #20]
    41ee:	ldr	r3, [sp, #4]
    41f0:	cmp	r3, #9
    41f2:	bhi.n	424e <_dtoa_r+0x1de>
    41f4:	cmp	r3, #5
    41f6:	ble.w	4cb8 <_dtoa_r+0xc48>
    41fa:	subs	r3, #4
    41fc:	str	r3, [sp, #4]
    41fe:	movs	r3, #0
    4200:	str	r3, [sp, #56]	; 0x38
    4202:	ldr	r3, [sp, #4]
    4204:	subs	r3, #2
    4206:	cmp	r3, #3
    4208:	bhi.w	4cca <_dtoa_r+0xc5a>
    420c:	tbh	[pc, r3, lsl #1]
    4210:	.word	0x01e502a9
    4214:	.word	0x03c802b5
    4218:	ldr	r3, [pc, #428]	; (43c8 <_dtoa_r+0x358>)
    421a:	ldr	r2, [pc, #436]	; (43d0 <_dtoa_r+0x360>)
    421c:	ubfx	r0, r6, #0, #20
    4220:	cmp	r0, #0
    4222:	ite	ne
    4224:	movne	r0, r3
    4226:	moveq	r0, r2
    4228:	b.n	40f6 <_dtoa_r+0x86>
    422a:	ldrd	r2, r3, [sp, #8]
    422e:	ubfx	r0, r3, #0, #20
    4232:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    4236:	movs	r5, #0
    4238:	subw	r1, r1, #1023	; 0x3ff
    423c:	orr.w	r3, r3, #3145728	; 0x300000
    4240:	ldr	r0, [sp, #64]	; 0x40
    4242:	str	r5, [sp, #40]	; 0x28
    4244:	b.n	416a <_dtoa_r+0xfa>
    4246:	ldr	r0, [pc, #396]	; (43d4 <_dtoa_r+0x364>)
    4248:	b.n	40de <_dtoa_r+0x6e>
    424a:	adds	r3, r0, #3
    424c:	b.n	4108 <_dtoa_r+0x98>
    424e:	movs	r1, #0
    4250:	str	r1, [r4, #68]	; 0x44
    4252:	mov	r0, r4
    4254:	mov	r8, r1
    4256:	str	r1, [sp, #4]
    4258:	bl	3860 <_Balloc>
    425c:	mov.w	r7, #4294967295
    4260:	movs	r3, #1
    4262:	str	r0, [sp, #32]
    4264:	str	r0, [r4, #64]	; 0x40
    4266:	str	r7, [sp, #52]	; 0x34
    4268:	str	r3, [sp, #36]	; 0x24
    426a:	ldr	r3, [sp, #68]	; 0x44
    426c:	cmp	r3, #0
    426e:	blt.n	4366 <_dtoa_r+0x2f6>
    4270:	ldr	r2, [sp, #8]
    4272:	cmp	r2, #14
    4274:	bgt.n	4366 <_dtoa_r+0x2f6>
    4276:	ldr	r3, [pc, #340]	; (43cc <_dtoa_r+0x35c>)
    4278:	cmp.w	r8, #0
    427c:	add.w	r3, r3, r2, lsl #3
    4280:	vldr	d4, [r3]
    4284:	blt.w	4790 <_dtoa_r+0x720>
    4288:	vneg.f64	d2, d4
    428c:	vmov	d7, sl, fp
    4290:	vdiv.f64	d6, d7, d4
    4294:	vcvt.s32.f64	s12, d6
    4298:	ldr	r2, [sp, #32]
    429a:	vmov	r3, s12
    429e:	cmp	r7, #1
    42a0:	add.w	r3, r3, #48	; 0x30
    42a4:	vcvt.f64.s32	d5, s12
    42a8:	add.w	fp, r2, #1
    42ac:	strb	r3, [r2, #0]
    42ae:	vfma.f64	d7, d2, d5
    42b2:	beq.n	42fa <_dtoa_r+0x28a>
    42b4:	vmov.f64	d3, #36	; 0x41200000  10.0
    42b8:	vmul.f64	d7, d7, d3
    42bc:	vcmp.f64	d7, #0.0
    42c0:	vmrs	APSR_nzcv, fpscr
    42c4:	beq.n	433c <_dtoa_r+0x2cc>
    42c6:	ldr	r2, [sp, #32]
    42c8:	b.n	42d8 <_dtoa_r+0x268>
    42ca:	vmul.f64	d7, d7, d3
    42ce:	vcmp.f64	d7, #0.0
    42d2:	vmrs	APSR_nzcv, fpscr
    42d6:	beq.n	433c <_dtoa_r+0x2cc>
    42d8:	vdiv.f64	d6, d7, d4
    42dc:	vcvt.s32.f64	s12, d6
    42e0:	vmov	r3, s12
    42e4:	adds	r3, #48	; 0x30
    42e6:	strb.w	r3, [fp], #1
    42ea:	rsb	r3, r2, fp
    42ee:	cmp	r3, r7
    42f0:	vcvt.f64.s32	d5, s12
    42f4:	vfma.f64	d7, d2, d5
    42f8:	bne.n	42ca <_dtoa_r+0x25a>
    42fa:	vadd.f64	d7, d7, d7
    42fe:	vcmpe.f64	d4, d7
    4302:	vmrs	APSR_nzcv, fpscr
    4306:	bmi.n	431a <_dtoa_r+0x2aa>
    4308:	vcmp.f64	d4, d7
    430c:	vmrs	APSR_nzcv, fpscr
    4310:	bne.n	433c <_dtoa_r+0x2cc>
    4312:	vmov	r3, s12
    4316:	lsls	r3, r3, #31
    4318:	bpl.n	433c <_dtoa_r+0x2cc>
    431a:	ldrb.w	r0, [fp, #-1]
    431e:	ldr	r2, [sp, #32]
    4320:	add.w	r3, fp, #4294967295
    4324:	b.n	4330 <_dtoa_r+0x2c0>
    4326:	cmp	r2, r3
    4328:	beq.w	4af6 <_dtoa_r+0xa86>
    432c:	ldrb.w	r0, [r3, #-1]!
    4330:	cmp	r0, #57	; 0x39
    4332:	add.w	fp, r3, #1
    4336:	beq.n	4326 <_dtoa_r+0x2b6>
    4338:	adds	r0, #1
    433a:	strb	r0, [r3, #0]
    433c:	ldr	r1, [sp, #28]
    433e:	mov	r0, r4
    4340:	bl	38ac <_Bfree>
    4344:	movs	r2, #0
    4346:	ldr	r3, [sp, #8]
    4348:	strb.w	r2, [fp]
    434c:	ldr	r2, [sp, #16]
    434e:	adds	r3, #1
    4350:	str	r3, [r2, #0]
    4352:	ldr	r3, [sp, #116]	; 0x74
    4354:	cmp	r3, #0
    4356:	beq.w	4a26 <_dtoa_r+0x9b6>
    435a:	ldr	r0, [sp, #32]
    435c:	str.w	fp, [r3]
    4360:	add	sp, #76	; 0x4c
    4362:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4366:	ldr	r2, [sp, #36]	; 0x24
    4368:	cmp	r2, #0
    436a:	beq.n	4414 <_dtoa_r+0x3a4>
    436c:	ldr	r2, [sp, #4]
    436e:	cmp	r2, #1
    4370:	ble.w	47d0 <_dtoa_r+0x760>
    4374:	ldr	r1, [sp, #20]
    4376:	subs	r2, r7, #1
    4378:	cmp	r1, r2
    437a:	blt.w	4a2c <_dtoa_r+0x9bc>
    437e:	subs	r3, r1, r2
    4380:	str	r3, [sp, #56]	; 0x38
    4382:	cmp	r7, #0
    4384:	ldr	r3, [sp, #24]
    4386:	blt.w	4bd2 <_dtoa_r+0xb62>
    438a:	str	r3, [sp, #40]	; 0x28
    438c:	mov	r3, r7
    438e:	ldr	r2, [sp, #24]
    4390:	movs	r1, #1
    4392:	add	r2, r3
    4394:	mov	r0, r4
    4396:	str	r2, [sp, #24]
    4398:	add	r9, r3
    439a:	bl	39dc <__i2b>
    439e:	mov	r6, r0
    43a0:	b.n	441e <_dtoa_r+0x3ae>
    43a2:	nop
    43a4:	nop.w
    43a8:	.word	0x636f4361
    43ac:	.word	0x3fd287a7
    43b0:	.word	0x8b60c8b3
    43b4:	.word	0x3fc68a28
    43b8:	.word	0x509f79fb
    43bc:	.word	0x3fd34413
    43c0:	.word	0x7ff00000
    43c4:	.word	0x2000068d
    43c8:	.word	0x20000688
    43cc:	.word	0x20000580
    43d0:	.word	0x2000067c
    43d4:	.word	0x2000068c
    43d8:	movs	r3, #1
    43da:	str	r3, [sp, #48]	; 0x30
    43dc:	b.n	41d0 <_dtoa_r+0x160>
    43de:	vcvt.f64.s32	d6, s13
    43e2:	vcmp.f64	d7, d6
    43e6:	vmrs	APSR_nzcv, fpscr
    43ea:	beq.w	41a6 <_dtoa_r+0x136>
    43ee:	ldr	r3, [sp, #8]
    43f0:	subs	r3, #1
    43f2:	str	r3, [sp, #8]
    43f4:	b.n	41a6 <_dtoa_r+0x136>
    43f6:	ldr	r2, [sp, #24]
    43f8:	ldr	r3, [sp, #8]
    43fa:	subs	r2, r2, r3
    43fc:	negs	r3, r3
    43fe:	str	r3, [sp, #20]
    4400:	movs	r3, #0
    4402:	str	r2, [sp, #24]
    4404:	str	r3, [sp, #44]	; 0x2c
    4406:	b.n	41ee <_dtoa_r+0x17e>
    4408:	rsb	r3, r9, #0
    440c:	str	r3, [sp, #24]
    440e:	mov.w	r9, #0
    4412:	b.n	41de <_dtoa_r+0x16e>
    4414:	ldr	r3, [sp, #20]
    4416:	str	r3, [sp, #56]	; 0x38
    4418:	ldr	r6, [sp, #36]	; 0x24
    441a:	ldr	r3, [sp, #24]
    441c:	str	r3, [sp, #40]	; 0x28
    441e:	ldr	r1, [sp, #40]	; 0x28
    4420:	mov	r3, r1
    4422:	cbz	r1, 443e <_dtoa_r+0x3ce>
    4424:	cmp.w	r9, #0
    4428:	ble.n	443e <_dtoa_r+0x3ce>
    442a:	cmp	r1, r9
    442c:	ldr	r2, [sp, #24]
    442e:	it	ge
    4430:	movge	r3, r9
    4432:	subs	r2, r2, r3
    4434:	str	r2, [sp, #24]
    4436:	subs	r2, r1, r3
    4438:	str	r2, [sp, #40]	; 0x28
    443a:	rsb	r9, r3, r9
    443e:	ldr	r3, [sp, #20]
    4440:	cmp	r3, #0
    4442:	ble.w	4946 <_dtoa_r+0x8d6>
    4446:	ldr	r2, [sp, #36]	; 0x24
    4448:	cmp	r2, #0
    444a:	beq.w	4782 <_dtoa_r+0x712>
    444e:	ldr	r2, [sp, #56]	; 0x38
    4450:	cmp	r2, #0
    4452:	beq.w	4782 <_dtoa_r+0x712>
    4456:	mov	r1, r6
    4458:	mov	r0, r4
    445a:	bl	3b20 <__pow5mult>
    445e:	ldr	r2, [sp, #28]
    4460:	mov	r1, r0
    4462:	mov	r6, r0
    4464:	mov	r0, r4
    4466:	bl	39f0 <__multiply>
    446a:	ldr	r1, [sp, #28]
    446c:	mov	r5, r0
    446e:	mov	r0, r4
    4470:	bl	38ac <_Bfree>
    4474:	ldr	r3, [sp, #20]
    4476:	ldr	r2, [sp, #56]	; 0x38
    4478:	subs	r3, r3, r2
    447a:	str	r3, [sp, #20]
    447c:	bne.w	4780 <_dtoa_r+0x710>
    4480:	movs	r1, #1
    4482:	mov	r0, r4
    4484:	bl	39dc <__i2b>
    4488:	ldr	r3, [sp, #44]	; 0x2c
    448a:	str	r0, [sp, #20]
    448c:	cmp	r3, #0
    448e:	beq.w	47ea <_dtoa_r+0x77a>
    4492:	mov	r1, r0
    4494:	mov	r2, r3
    4496:	mov	r0, r4
    4498:	bl	3b20 <__pow5mult>
    449c:	ldr	r3, [sp, #4]
    449e:	str	r0, [sp, #20]
    44a0:	cmp	r3, #1
    44a2:	ble.w	49a6 <_dtoa_r+0x936>
    44a6:	movs	r3, #0
    44a8:	str	r3, [sp, #28]
    44aa:	ldr	r2, [sp, #20]
    44ac:	ldr	r3, [r2, #16]
    44ae:	add.w	r3, r2, r3, lsl #2
    44b2:	ldr	r0, [r3, #16]
    44b4:	bl	3940 <__hi0bits>
    44b8:	rsb	r0, r0, #32
    44bc:	add	r0, r9
    44be:	ands.w	r0, r0, #31
    44c2:	beq.w	47e6 <_dtoa_r+0x776>
    44c6:	rsb	r3, r0, #32
    44ca:	cmp	r3, #4
    44cc:	ble.w	4cc0 <_dtoa_r+0xc50>
    44d0:	rsb	r0, r0, #28
    44d4:	ldr	r3, [sp, #24]
    44d6:	add	r3, r0
    44d8:	str	r3, [sp, #24]
    44da:	ldr	r3, [sp, #40]	; 0x28
    44dc:	add	r3, r0
    44de:	str	r3, [sp, #40]	; 0x28
    44e0:	add	r9, r0
    44e2:	ldr	r3, [sp, #24]
    44e4:	cmp	r3, #0
    44e6:	ble.n	44f4 <_dtoa_r+0x484>
    44e8:	mov	r1, r5
    44ea:	mov	r2, r3
    44ec:	mov	r0, r4
    44ee:	bl	3bc0 <__lshift>
    44f2:	mov	r5, r0
    44f4:	cmp.w	r9, #0
    44f8:	ble.n	4506 <_dtoa_r+0x496>
    44fa:	mov	r2, r9
    44fc:	ldr	r1, [sp, #20]
    44fe:	mov	r0, r4
    4500:	bl	3bc0 <__lshift>
    4504:	str	r0, [sp, #20]
    4506:	ldr	r3, [sp, #48]	; 0x30
    4508:	cmp	r3, #0
    450a:	bne.w	4910 <_dtoa_r+0x8a0>
    450e:	cmp	r7, #0
    4510:	ble.w	4954 <_dtoa_r+0x8e4>
    4514:	ldr	r3, [sp, #36]	; 0x24
    4516:	cmp	r3, #0
    4518:	bne.w	4812 <_dtoa_r+0x7a2>
    451c:	ldr.w	fp, [sp, #32]
    4520:	ldr.w	sl, [sp, #20]
    4524:	mov	r8, fp
    4526:	b.n	452e <_dtoa_r+0x4be>
    4528:	bl	38c0 <__multadd>
    452c:	mov	r5, r0
    452e:	mov	r1, sl
    4530:	mov	r0, r5
    4532:	bl	3f44 <quorem>
    4536:	add.w	r9, r0, #48	; 0x30
    453a:	strb.w	r9, [r8], #1
    453e:	rsb	r3, fp, r8
    4542:	cmp	r3, r7
    4544:	mov.w	r2, #10
    4548:	mov.w	r3, #0
    454c:	mov	r1, r5
    454e:	mov	r0, r4
    4550:	blt.n	4528 <_dtoa_r+0x4b8>
    4552:	ldr	r3, [sp, #32]
    4554:	cmp	r7, #1
    4556:	ite	ge
    4558:	addge	r3, r3, r7
    455a:	addlt	r3, #1
    455c:	mov	fp, r3
    455e:	mov.w	sl, #0
    4562:	mov	r1, r5
    4564:	movs	r2, #1
    4566:	mov	r0, r4
    4568:	bl	3bc0 <__lshift>
    456c:	ldr	r1, [sp, #20]
    456e:	str	r0, [sp, #28]
    4570:	bl	3c70 <__mcmp>
    4574:	cmp	r0, #0
    4576:	ble.w	4a92 <_dtoa_r+0xa22>
    457a:	ldrb.w	r2, [fp, #-1]
    457e:	ldr	r1, [sp, #32]
    4580:	add.w	r3, fp, #4294967295
    4584:	b.n	4590 <_dtoa_r+0x520>
    4586:	cmp	r3, r1
    4588:	beq.w	4992 <_dtoa_r+0x922>
    458c:	ldrb.w	r2, [r3, #-1]!
    4590:	cmp	r2, #57	; 0x39
    4592:	add.w	fp, r3, #1
    4596:	beq.n	4586 <_dtoa_r+0x516>
    4598:	adds	r2, #1
    459a:	strb	r2, [r3, #0]
    459c:	ldr	r1, [sp, #20]
    459e:	mov	r0, r4
    45a0:	bl	38ac <_Bfree>
    45a4:	cmp	r6, #0
    45a6:	beq.w	433c <_dtoa_r+0x2cc>
    45aa:	cmp.w	sl, #0
    45ae:	beq.n	45bc <_dtoa_r+0x54c>
    45b0:	cmp	sl, r6
    45b2:	beq.n	45bc <_dtoa_r+0x54c>
    45b4:	mov	r1, sl
    45b6:	mov	r0, r4
    45b8:	bl	38ac <_Bfree>
    45bc:	mov	r1, r6
    45be:	mov	r0, r4
    45c0:	bl	38ac <_Bfree>
    45c4:	b.n	433c <_dtoa_r+0x2cc>
    45c6:	rsb	r3, r3, #32
    45ca:	lsl.w	r3, sl, r3
    45ce:	vmov	s15, r3
    45d2:	b.n	4158 <_dtoa_r+0xe8>
    45d4:	movs	r3, #0
    45d6:	str	r3, [sp, #48]	; 0x30
    45d8:	b.n	41d0 <_dtoa_r+0x160>
    45da:	movs	r3, #0
    45dc:	str	r3, [sp, #36]	; 0x24
    45de:	ldr	r3, [sp, #8]
    45e0:	add	r3, r8
    45e2:	adds	r7, r3, #1
    45e4:	cmp	r7, #0
    45e6:	str	r3, [sp, #52]	; 0x34
    45e8:	ble.w	4a46 <_dtoa_r+0x9d6>
    45ec:	mov	r6, r7
    45ee:	mov	r5, r7
    45f0:	movs	r1, #0
    45f2:	cmp	r6, #23
    45f4:	str	r1, [r4, #68]	; 0x44
    45f6:	bls.n	460e <_dtoa_r+0x59e>
    45f8:	movs	r2, #1
    45fa:	movs	r3, #4
    45fc:	lsls	r3, r3, #1
    45fe:	add.w	r0, r3, #20
    4602:	cmp	r0, r6
    4604:	mov	r1, r2
    4606:	add.w	r2, r2, #1
    460a:	bls.n	45fc <_dtoa_r+0x58c>
    460c:	str	r1, [r4, #68]	; 0x44
    460e:	mov	r0, r4
    4610:	bl	3860 <_Balloc>
    4614:	cmp	r5, #14
    4616:	str	r0, [sp, #32]
    4618:	str	r0, [r4, #64]	; 0x40
    461a:	bhi.w	426a <_dtoa_r+0x1fa>
    461e:	ldr	r3, [sp, #56]	; 0x38
    4620:	cmp	r3, #0
    4622:	beq.w	426a <_dtoa_r+0x1fa>
    4626:	ldr	r1, [sp, #8]
    4628:	cmp	r1, #0
    462a:	strd	sl, fp, [sp, #56]	; 0x38
    462e:	ble.w	4ab4 <_dtoa_r+0xa44>
    4632:	ldr	r3, [pc, #792]	; (494c <_dtoa_r+0x8dc>)
    4634:	and.w	r2, r1, #15
    4638:	add.w	r2, r3, r2, lsl #3
    463c:	asrs	r3, r1, #4
    463e:	lsls	r6, r3, #27
    4640:	vldr	d6, [r2]
    4644:	bpl.w	4a3e <_dtoa_r+0x9ce>
    4648:	ldr	r2, [pc, #772]	; (4950 <_dtoa_r+0x8e0>)
    464a:	vldr	d7, [r2, #32]
    464e:	vmov	d4, sl, fp
    4652:	and.w	r3, r3, #15
    4656:	movs	r1, #3
    4658:	vdiv.f64	d5, d4, d7
    465c:	cbz	r3, 4676 <_dtoa_r+0x606>
    465e:	ldr	r2, [pc, #752]	; (4950 <_dtoa_r+0x8e0>)
    4660:	lsls	r5, r3, #31
    4662:	bpl.n	466e <_dtoa_r+0x5fe>
    4664:	vldr	d7, [r2]
    4668:	adds	r1, #1
    466a:	vmul.f64	d6, d6, d7
    466e:	asrs	r3, r3, #1
    4670:	add.w	r2, r2, #8
    4674:	bne.n	4660 <_dtoa_r+0x5f0>
    4676:	vdiv.f64	d4, d5, d6
    467a:	ldr	r3, [sp, #48]	; 0x30
    467c:	cbz	r3, 468e <_dtoa_r+0x61e>
    467e:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4682:	vcmpe.f64	d4, d7
    4686:	vmrs	APSR_nzcv, fpscr
    468a:	bmi.w	4bfc <_dtoa_r+0xb8c>
    468e:	vmov	s15, r1
    4692:	vcvt.f64.s32	d6, s15
    4696:	vmov.f64	d7, #28	; 0x40e00000  7.0
    469a:	vfma.f64	d7, d6, d4
    469e:	vmov	r2, r3, d7
    46a2:	sub.w	r3, r3, #54525952	; 0x3400000
    46a6:	cmp	r7, #0
    46a8:	beq.w	49f8 <_dtoa_r+0x988>
    46ac:	ldr	r6, [sp, #8]
    46ae:	mov	r1, r7
    46b0:	ldr	r0, [sp, #36]	; 0x24
    46b2:	cmp	r0, #0
    46b4:	beq.w	4b52 <_dtoa_r+0xae2>
    46b8:	vmov.f64	d3, #96	; 0x3f000000  0.5
    46bc:	ldr	r0, [pc, #652]	; (494c <_dtoa_r+0x8dc>)
    46be:	ldr	r5, [sp, #32]
    46c0:	add.w	r0, r0, r1, lsl #3
    46c4:	vldr	d6, [r0, #-8]
    46c8:	vcvt.s32.f64	s14, d4
    46cc:	vdiv.f64	d5, d3, d6
    46d0:	vmov	r0, s14
    46d4:	vmov	d6, r2, r3
    46d8:	adds	r0, #48	; 0x30
    46da:	uxtb	r0, r0
    46dc:	vsub.f64	d5, d5, d6
    46e0:	vcvt.f64.s32	d7, s14
    46e4:	vsub.f64	d7, d4, d7
    46e8:	vcmpe.f64	d5, d7
    46ec:	vmrs	APSR_nzcv, fpscr
    46f0:	strb	r0, [r5, #0]
    46f2:	add.w	fp, r5, #1
    46f6:	bgt.n	475e <_dtoa_r+0x6ee>
    46f8:	vmov.f64	d3, #112	; 0x3f800000  1.0
    46fc:	vsub.f64	d6, d3, d7
    4700:	vcmpe.f64	d5, d6
    4704:	vmrs	APSR_nzcv, fpscr
    4708:	bgt.w	4c68 <_dtoa_r+0xbf8>
    470c:	cmp	r1, #1
    470e:	ble.w	4aac <_dtoa_r+0xa3c>
    4712:	vmov.f64	d4, #36	; 0x41200000  10.0
    4716:	ldr	r3, [sp, #32]
    4718:	add	r1, r3
    471a:	b.n	4732 <_dtoa_r+0x6c2>
    471c:	vsub.f64	d6, d3, d7
    4720:	vcmpe.f64	d6, d5
    4724:	vmrs	APSR_nzcv, fpscr
    4728:	bmi.w	4c68 <_dtoa_r+0xbf8>
    472c:	cmp	fp, r1
    472e:	beq.w	4aac <_dtoa_r+0xa3c>
    4732:	vmul.f64	d7, d7, d4
    4736:	vmul.f64	d5, d5, d4
    473a:	vcvt.s32.f64	s12, d7
    473e:	vmov	r3, s12
    4742:	add.w	r0, r3, #48	; 0x30
    4746:	uxtb	r0, r0
    4748:	vcvt.f64.s32	d6, s12
    474c:	vsub.f64	d7, d7, d6
    4750:	vcmpe.f64	d7, d5
    4754:	vmrs	APSR_nzcv, fpscr
    4758:	strb.w	r0, [fp], #1
    475c:	bpl.n	471c <_dtoa_r+0x6ac>
    475e:	str	r6, [sp, #8]
    4760:	b.n	433c <_dtoa_r+0x2cc>
    4762:	movs	r3, #0
    4764:	str	r3, [sp, #36]	; 0x24
    4766:	cmp.w	r8, #0
    476a:	ble.w	4a4e <_dtoa_r+0x9de>
    476e:	mov	r6, r8
    4770:	mov	r5, r8
    4772:	str.w	r8, [sp, #52]	; 0x34
    4776:	mov	r7, r8
    4778:	b.n	45f0 <_dtoa_r+0x580>
    477a:	movs	r3, #1
    477c:	str	r3, [sp, #36]	; 0x24
    477e:	b.n	4766 <_dtoa_r+0x6f6>
    4780:	str	r5, [sp, #28]
    4782:	ldr	r2, [sp, #20]
    4784:	ldr	r1, [sp, #28]
    4786:	mov	r0, r4
    4788:	bl	3b20 <__pow5mult>
    478c:	mov	r5, r0
    478e:	b.n	4480 <_dtoa_r+0x410>
    4790:	cmp	r7, #0
    4792:	bgt.w	4288 <_dtoa_r+0x218>
    4796:	bne.w	4a1e <_dtoa_r+0x9ae>
    479a:	vmov.f64	d7, #20	; 0x40a00000  5.0
    479e:	vmul.f64	d4, d4, d7
    47a2:	vmov	d7, sl, fp
    47a6:	vcmpe.f64	d4, d7
    47aa:	vmrs	APSR_nzcv, fpscr
    47ae:	mov	r6, r7
    47b0:	str	r7, [sp, #20]
    47b2:	blt.w	4980 <_dtoa_r+0x910>
    47b6:	mvn.w	r3, r8
    47ba:	ldr.w	fp, [sp, #32]
    47be:	str	r3, [sp, #8]
    47c0:	ldr	r1, [sp, #20]
    47c2:	mov	r0, r4
    47c4:	bl	38ac <_Bfree>
    47c8:	cmp	r6, #0
    47ca:	beq.w	433c <_dtoa_r+0x2cc>
    47ce:	b.n	45bc <_dtoa_r+0x54c>
    47d0:	ldr	r2, [sp, #40]	; 0x28
    47d2:	cmp	r2, #0
    47d4:	beq.w	4bdc <_dtoa_r+0xb6c>
    47d8:	ldr	r2, [sp, #20]
    47da:	str	r2, [sp, #56]	; 0x38
    47dc:	ldr	r2, [sp, #24]
    47de:	str	r2, [sp, #40]	; 0x28
    47e0:	addw	r3, r3, #1075	; 0x433
    47e4:	b.n	438e <_dtoa_r+0x31e>
    47e6:	movs	r0, #28
    47e8:	b.n	44d4 <_dtoa_r+0x464>
    47ea:	ldr	r3, [sp, #4]
    47ec:	cmp	r3, #1
    47ee:	ble.w	4c72 <_dtoa_r+0xc02>
    47f2:	ldr	r3, [sp, #44]	; 0x2c
    47f4:	str	r3, [sp, #28]
    47f6:	movs	r0, #1
    47f8:	b.n	44bc <_dtoa_r+0x44c>
    47fa:	mov	r1, r6
    47fc:	movs	r3, #0
    47fe:	movs	r2, #10
    4800:	mov	r0, r4
    4802:	bl	38c0 <__multadd>
    4806:	ldr	r3, [sp, #52]	; 0x34
    4808:	cmp	r3, #0
    480a:	mov	r6, r0
    480c:	ble.w	4caa <_dtoa_r+0xc3a>
    4810:	mov	r7, r3
    4812:	ldr	r3, [sp, #40]	; 0x28
    4814:	cmp	r3, #0
    4816:	ble.n	4824 <_dtoa_r+0x7b4>
    4818:	mov	r1, r6
    481a:	mov	r2, r3
    481c:	mov	r0, r4
    481e:	bl	3bc0 <__lshift>
    4822:	mov	r6, r0
    4824:	ldr	r3, [sp, #28]
    4826:	cmp	r3, #0
    4828:	bne.w	4b08 <_dtoa_r+0xa98>
    482c:	mov	r8, r6
    482e:	ldr	r3, [sp, #32]
    4830:	subs	r7, #1
    4832:	adds	r2, r3, r7
    4834:	str	r2, [sp, #36]	; 0x24
    4836:	and.w	r2, sl, #1
    483a:	str	r2, [sp, #40]	; 0x28
    483c:	mov	r7, r3
    483e:	ldr.w	fp, [sp, #20]
    4842:	mov	r0, r5
    4844:	mov	r1, fp
    4846:	bl	3f44 <quorem>
    484a:	mov	r1, r6
    484c:	mov	sl, r0
    484e:	mov	r0, r5
    4850:	bl	3c70 <__mcmp>
    4854:	mov	r2, r8
    4856:	mov	r1, fp
    4858:	mov	r9, r0
    485a:	mov	r0, r4
    485c:	bl	3cb4 <__mdiff>
    4860:	ldr	r3, [r0, #12]
    4862:	mov	fp, r0
    4864:	add.w	r2, sl, #48	; 0x30
    4868:	cmp	r3, #0
    486a:	bne.n	4900 <_dtoa_r+0x890>
    486c:	mov	r1, r0
    486e:	mov	r0, r5
    4870:	str	r2, [sp, #28]
    4872:	bl	3c70 <__mcmp>
    4876:	mov	r1, fp
    4878:	str	r0, [sp, #24]
    487a:	mov	r0, r4
    487c:	bl	38ac <_Bfree>
    4880:	ldr	r3, [sp, #24]
    4882:	ldr	r2, [sp, #28]
    4884:	cbnz	r3, 4892 <_dtoa_r+0x822>
    4886:	ldr	r1, [sp, #4]
    4888:	cbnz	r1, 4892 <_dtoa_r+0x822>
    488a:	ldr	r1, [sp, #40]	; 0x28
    488c:	cmp	r1, #0
    488e:	beq.w	4c7c <_dtoa_r+0xc0c>
    4892:	cmp.w	r9, #0
    4896:	blt.w	4a58 <_dtoa_r+0x9e8>
    489a:	bne.n	48a8 <_dtoa_r+0x838>
    489c:	ldr	r1, [sp, #4]
    489e:	cbnz	r1, 48a8 <_dtoa_r+0x838>
    48a0:	ldr	r1, [sp, #40]	; 0x28
    48a2:	cmp	r1, #0
    48a4:	beq.w	4a58 <_dtoa_r+0x9e8>
    48a8:	cmp	r3, #0
    48aa:	bgt.w	4b30 <_dtoa_r+0xac0>
    48ae:	ldr	r3, [sp, #36]	; 0x24
    48b0:	strb	r2, [r7, #0]
    48b2:	add.w	r9, r7, #1
    48b6:	cmp	r7, r3
    48b8:	mov	fp, r9
    48ba:	beq.w	4b4a <_dtoa_r+0xada>
    48be:	mov	r1, r5
    48c0:	movs	r3, #0
    48c2:	movs	r2, #10
    48c4:	mov	r0, r4
    48c6:	bl	38c0 <__multadd>
    48ca:	cmp	r6, r8
    48cc:	mov	r5, r0
    48ce:	mov	r1, r6
    48d0:	mov.w	r3, #0
    48d4:	mov.w	r2, #10
    48d8:	mov	r0, r4
    48da:	beq.n	48f4 <_dtoa_r+0x884>
    48dc:	bl	38c0 <__multadd>
    48e0:	mov	r1, r8
    48e2:	mov	r6, r0
    48e4:	movs	r3, #0
    48e6:	movs	r2, #10
    48e8:	mov	r0, r4
    48ea:	bl	38c0 <__multadd>
    48ee:	mov	r7, r9
    48f0:	mov	r8, r0
    48f2:	b.n	483e <_dtoa_r+0x7ce>
    48f4:	bl	38c0 <__multadd>
    48f8:	mov	r7, r9
    48fa:	mov	r6, r0
    48fc:	mov	r8, r0
    48fe:	b.n	483e <_dtoa_r+0x7ce>
    4900:	mov	r1, r0
    4902:	mov	r0, r4
    4904:	str	r2, [sp, #24]
    4906:	bl	38ac <_Bfree>
    490a:	movs	r3, #1
    490c:	ldr	r2, [sp, #24]
    490e:	b.n	4892 <_dtoa_r+0x822>
    4910:	ldr	r1, [sp, #20]
    4912:	mov	r0, r5
    4914:	bl	3c70 <__mcmp>
    4918:	cmp	r0, #0
    491a:	bge.w	450e <_dtoa_r+0x49e>
    491e:	mov	r1, r5
    4920:	ldr	r5, [sp, #8]
    4922:	movs	r3, #0
    4924:	subs	r5, #1
    4926:	movs	r2, #10
    4928:	mov	r0, r4
    492a:	str	r5, [sp, #8]
    492c:	bl	38c0 <__multadd>
    4930:	ldr	r3, [sp, #36]	; 0x24
    4932:	mov	r5, r0
    4934:	cmp	r3, #0
    4936:	bne.w	47fa <_dtoa_r+0x78a>
    493a:	ldr	r3, [sp, #52]	; 0x34
    493c:	cmp	r3, #0
    493e:	ble.w	4c9c <_dtoa_r+0xc2c>
    4942:	mov	r7, r3
    4944:	b.n	451c <_dtoa_r+0x4ac>
    4946:	ldr	r5, [sp, #28]
    4948:	b.n	4480 <_dtoa_r+0x410>
    494a:	nop
    494c:	.word	0x20000580
    4950:	.word	0x20000648
    4954:	ldr	r3, [sp, #4]
    4956:	cmp	r3, #2
    4958:	ble.w	4514 <_dtoa_r+0x4a4>
    495c:	cmp	r7, #0
    495e:	bne.w	4c34 <_dtoa_r+0xbc4>
    4962:	mov	r3, r7
    4964:	ldr	r1, [sp, #20]
    4966:	movs	r2, #5
    4968:	mov	r0, r4
    496a:	bl	38c0 <__multadd>
    496e:	mov	r1, r0
    4970:	str	r0, [sp, #20]
    4972:	mov	r0, r5
    4974:	bl	3c70 <__mcmp>
    4978:	cmp	r0, #0
    497a:	str	r5, [sp, #28]
    497c:	ble.w	47b6 <_dtoa_r+0x746>
    4980:	ldr	r2, [sp, #8]
    4982:	ldr	r1, [sp, #32]
    4984:	movs	r3, #49	; 0x31
    4986:	adds	r2, #1
    4988:	str	r2, [sp, #8]
    498a:	strb	r3, [r1, #0]
    498c:	add.w	fp, r1, #1
    4990:	b.n	47c0 <_dtoa_r+0x750>
    4992:	ldr	r2, [sp, #8]
    4994:	adds	r2, #1
    4996:	str	r2, [sp, #8]
    4998:	ldr	r2, [sp, #32]
    499a:	movs	r3, #49	; 0x31
    499c:	strb	r3, [r2, #0]
    499e:	b.n	459c <_dtoa_r+0x52c>
    49a0:	movs	r3, #1
    49a2:	str	r3, [sp, #36]	; 0x24
    49a4:	b.n	45de <_dtoa_r+0x56e>
    49a6:	cmp.w	sl, #0
    49aa:	bne.w	44a6 <_dtoa_r+0x436>
    49ae:	ubfx	r3, fp, #0, #20
    49b2:	cmp	r3, #0
    49b4:	bne.w	4bee <_dtoa_r+0xb7e>
    49b8:	bic.w	r3, fp, #2147483648	; 0x80000000
    49bc:	lsrs	r3, r3, #20
    49be:	lsls	r3, r3, #20
    49c0:	cmp	r3, #0
    49c2:	beq.w	4c6e <_dtoa_r+0xbfe>
    49c6:	ldr	r3, [sp, #24]
    49c8:	adds	r3, #1
    49ca:	str	r3, [sp, #24]
    49cc:	movs	r3, #1
    49ce:	add.w	r9, r9, #1
    49d2:	str	r3, [sp, #28]
    49d4:	ldr	r3, [sp, #44]	; 0x2c
    49d6:	movs	r0, #1
    49d8:	cmp	r3, #0
    49da:	beq.w	44bc <_dtoa_r+0x44c>
    49de:	b.n	44aa <_dtoa_r+0x43a>
    49e0:	vmov	s15, r1
    49e4:	vcvt.f64.s32	d6, s15
    49e8:	vmov.f64	d7, #28	; 0x40e00000  7.0
    49ec:	vfma.f64	d7, d4, d6
    49f0:	vmov	r2, r3, d7
    49f4:	sub.w	r3, r3, #54525952	; 0x3400000
    49f8:	vmov	d6, r2, r3
    49fc:	vmov.f64	d7, #20	; 0x40a00000  5.0
    4a00:	vsub.f64	d7, d4, d7
    4a04:	vcmpe.f64	d7, d6
    4a08:	vmrs	APSR_nzcv, fpscr
    4a0c:	bgt.w	4bca <_dtoa_r+0xb5a>
    4a10:	vneg.f64	d6, d6
    4a14:	vcmpe.f64	d7, d6
    4a18:	vmrs	APSR_nzcv, fpscr
    4a1c:	bpl.n	4aac <_dtoa_r+0xa3c>
    4a1e:	movs	r3, #0
    4a20:	str	r3, [sp, #20]
    4a22:	mov	r6, r3
    4a24:	b.n	47b6 <_dtoa_r+0x746>
    4a26:	ldr	r0, [sp, #32]
    4a28:	b.w	40de <_dtoa_r+0x6e>
    4a2c:	ldr	r3, [sp, #20]
    4a2e:	ldr	r1, [sp, #44]	; 0x2c
    4a30:	str	r2, [sp, #20]
    4a32:	subs	r3, r2, r3
    4a34:	add	r1, r3
    4a36:	movs	r3, #0
    4a38:	str	r1, [sp, #44]	; 0x2c
    4a3a:	str	r3, [sp, #56]	; 0x38
    4a3c:	b.n	4382 <_dtoa_r+0x312>
    4a3e:	vldr	d5, [sp, #56]	; 0x38
    4a42:	movs	r1, #2
    4a44:	b.n	465c <_dtoa_r+0x5ec>
    4a46:	mov	r5, r7
    4a48:	movs	r1, #0
    4a4a:	str	r1, [r4, #68]	; 0x44
    4a4c:	b.n	460e <_dtoa_r+0x59e>
    4a4e:	movs	r5, #1
    4a50:	str	r5, [sp, #52]	; 0x34
    4a52:	mov	r7, r5
    4a54:	mov	r8, r5
    4a56:	b.n	4a48 <_dtoa_r+0x9d8>
    4a58:	cmp	r3, #0
    4a5a:	mov	r9, r2
    4a5c:	ble.n	4a82 <_dtoa_r+0xa12>
    4a5e:	mov	r1, r5
    4a60:	movs	r2, #1
    4a62:	mov	r0, r4
    4a64:	bl	3bc0 <__lshift>
    4a68:	ldr	r1, [sp, #20]
    4a6a:	mov	r5, r0
    4a6c:	bl	3c70 <__mcmp>
    4a70:	cmp	r0, #0
    4a72:	ble.w	4c8e <_dtoa_r+0xc1e>
    4a76:	cmp.w	r9, #57	; 0x39
    4a7a:	beq.w	4c38 <_dtoa_r+0xbc8>
    4a7e:	add.w	r9, sl, #49	; 0x31
    4a82:	mov	sl, r6
    4a84:	strb.w	r9, [r7]
    4a88:	add.w	fp, r7, #1
    4a8c:	mov	r6, r8
    4a8e:	str	r5, [sp, #28]
    4a90:	b.n	459c <_dtoa_r+0x52c>
    4a92:	bne.n	4a9e <_dtoa_r+0xa2e>
    4a94:	tst.w	r9, #1
    4a98:	beq.n	4a9e <_dtoa_r+0xa2e>
    4a9a:	b.n	457a <_dtoa_r+0x50a>
    4a9c:	mov	fp, r2
    4a9e:	ldrb.w	r3, [fp, #-1]
    4aa2:	cmp	r3, #48	; 0x30
    4aa4:	add.w	r2, fp, #4294967295
    4aa8:	beq.n	4a9c <_dtoa_r+0xa2c>
    4aaa:	b.n	459c <_dtoa_r+0x52c>
    4aac:	ldrd	sl, fp, [sp, #56]	; 0x38
    4ab0:	b.w	426a <_dtoa_r+0x1fa>
    4ab4:	ldr	r3, [sp, #8]
    4ab6:	negs	r3, r3
    4ab8:	cmp	r3, #0
    4aba:	beq.w	4bf4 <_dtoa_r+0xb84>
    4abe:	ldr	r2, [pc, #556]	; (4cec <_dtoa_r+0xc7c>)
    4ac0:	and.w	r1, r3, #15
    4ac4:	add.w	r2, r2, r1, lsl #3
    4ac8:	vldr	d7, [r2]
    4acc:	vldr	d6, [sp, #56]	; 0x38
    4ad0:	asrs	r3, r3, #4
    4ad2:	vmul.f64	d4, d6, d7
    4ad6:	beq.w	4ca6 <_dtoa_r+0xc36>
    4ada:	ldr	r2, [pc, #532]	; (4cf0 <_dtoa_r+0xc80>)
    4adc:	movs	r1, #2
    4ade:	lsls	r0, r3, #31
    4ae0:	bpl.n	4aec <_dtoa_r+0xa7c>
    4ae2:	vldr	d7, [r2]
    4ae6:	adds	r1, #1
    4ae8:	vmul.f64	d4, d4, d7
    4aec:	asrs	r3, r3, #1
    4aee:	add.w	r2, r2, #8
    4af2:	bne.n	4ade <_dtoa_r+0xa6e>
    4af4:	b.n	467a <_dtoa_r+0x60a>
    4af6:	ldr	r1, [sp, #32]
    4af8:	movs	r2, #48	; 0x30
    4afa:	strb	r2, [r1, #0]
    4afc:	ldr	r2, [sp, #8]
    4afe:	ldrb.w	r0, [fp, #-1]
    4b02:	adds	r2, #1
    4b04:	str	r2, [sp, #8]
    4b06:	b.n	4338 <_dtoa_r+0x2c8>
    4b08:	ldr	r1, [r6, #4]
    4b0a:	mov	r0, r4
    4b0c:	bl	3860 <_Balloc>
    4b10:	ldr	r3, [r6, #16]
    4b12:	adds	r2, r3, #2
    4b14:	mov	r8, r0
    4b16:	lsls	r2, r2, #2
    4b18:	add.w	r1, r6, #12
    4b1c:	adds	r0, #12
    4b1e:	bl	235c <memcpy>
    4b22:	mov	r1, r8
    4b24:	movs	r2, #1
    4b26:	mov	r0, r4
    4b28:	bl	3bc0 <__lshift>
    4b2c:	mov	r8, r0
    4b2e:	b.n	482e <_dtoa_r+0x7be>
    4b30:	cmp	r2, #57	; 0x39
    4b32:	beq.w	4c38 <_dtoa_r+0xbc8>
    4b36:	add.w	r9, r2, #1
    4b3a:	mov	sl, r6
    4b3c:	strb.w	r9, [r7]
    4b40:	add.w	fp, r7, #1
    4b44:	mov	r6, r8
    4b46:	str	r5, [sp, #28]
    4b48:	b.n	459c <_dtoa_r+0x52c>
    4b4a:	mov	sl, r6
    4b4c:	mov	r9, r2
    4b4e:	mov	r6, r8
    4b50:	b.n	4562 <_dtoa_r+0x4f2>
    4b52:	ldr	r0, [pc, #408]	; (4cec <_dtoa_r+0xc7c>)
    4b54:	vcvt.s32.f64	s12, d4
    4b58:	subs	r5, r1, #1
    4b5a:	add.w	r0, r0, r5, lsl #3
    4b5e:	vmov	d7, r2, r3
    4b62:	vldr	d3, [r0]
    4b66:	vmov	r3, s12
    4b6a:	vmul.f64	d3, d3, d7
    4b6e:	ldr	r0, [sp, #32]
    4b70:	adds	r3, #48	; 0x30
    4b72:	cmp	r1, #1
    4b74:	vcvt.f64.s32	d6, s12
    4b78:	strb	r3, [r0, #0]
    4b7a:	add.w	fp, r0, #1
    4b7e:	vsub.f64	d7, d4, d6
    4b82:	beq.n	4bae <_dtoa_r+0xb3e>
    4b84:	vmov.f64	d5, #36	; 0x41200000  10.0
    4b88:	ldr	r3, [sp, #32]
    4b8a:	add	r1, r3
    4b8c:	mov	r3, fp
    4b8e:	vmul.f64	d7, d7, d5
    4b92:	vcvt.s32.f64	s12, d7
    4b96:	vmov	r2, s12
    4b9a:	adds	r2, #48	; 0x30
    4b9c:	strb.w	r2, [r3], #1
    4ba0:	cmp	r1, r3
    4ba2:	vcvt.f64.s32	d6, s12
    4ba6:	vsub.f64	d7, d7, d6
    4baa:	bne.n	4b8e <_dtoa_r+0xb1e>
    4bac:	add	fp, r5
    4bae:	vmov.f64	d6, #96	; 0x3f000000  0.5
    4bb2:	vadd.f64	d5, d3, d6
    4bb6:	vcmpe.f64	d5, d7
    4bba:	vmrs	APSR_nzcv, fpscr
    4bbe:	bpl.n	4c48 <_dtoa_r+0xbd8>
    4bc0:	str	r6, [sp, #8]
    4bc2:	ldrb.w	r0, [fp, #-1]
    4bc6:	b.w	431e <_dtoa_r+0x2ae>
    4bca:	movs	r3, #0
    4bcc:	str	r3, [sp, #20]
    4bce:	mov	r6, r3
    4bd0:	b.n	4980 <_dtoa_r+0x910>
    4bd2:	subs	r3, r3, r7
    4bd4:	str	r3, [sp, #40]	; 0x28
    4bd6:	movs	r3, #0
    4bd8:	b.w	438e <_dtoa_r+0x31e>
    4bdc:	ldr	r2, [sp, #20]
    4bde:	ldr	r3, [sp, #64]	; 0x40
    4be0:	str	r2, [sp, #56]	; 0x38
    4be2:	ldr	r2, [sp, #24]
    4be4:	str	r2, [sp, #40]	; 0x28
    4be6:	rsb	r3, r3, #54	; 0x36
    4bea:	b.w	438e <_dtoa_r+0x31e>
    4bee:	movs	r3, #0
    4bf0:	str	r3, [sp, #28]
    4bf2:	b.n	49d4 <_dtoa_r+0x964>
    4bf4:	vldr	d4, [sp, #56]	; 0x38
    4bf8:	movs	r1, #2
    4bfa:	b.n	467a <_dtoa_r+0x60a>
    4bfc:	cmp	r7, #0
    4bfe:	beq.w	49e0 <_dtoa_r+0x970>
    4c02:	ldr	r0, [sp, #52]	; 0x34
    4c04:	cmp	r0, #0
    4c06:	ble.w	4aac <_dtoa_r+0xa3c>
    4c0a:	vmov.f64	d5, #36	; 0x41200000  10.0
    4c0e:	vmov.f64	d7, #28	; 0x40e00000  7.0
    4c12:	adds	r1, #1
    4c14:	vmov	s13, r1
    4c18:	vmul.f64	d4, d4, d5
    4c1c:	ldr	r3, [sp, #8]
    4c1e:	vcvt.f64.s32	d6, s13
    4c22:	subs	r6, r3, #1
    4c24:	vfma.f64	d7, d4, d6
    4c28:	vmov	r2, r3, d7
    4c2c:	mov	r1, r0
    4c2e:	sub.w	r3, r3, #54525952	; 0x3400000
    4c32:	b.n	46b0 <_dtoa_r+0x640>
    4c34:	str	r5, [sp, #28]
    4c36:	b.n	47b6 <_dtoa_r+0x746>
    4c38:	movs	r2, #57	; 0x39
    4c3a:	mov	sl, r6
    4c3c:	str	r5, [sp, #28]
    4c3e:	mov	r6, r8
    4c40:	strb	r2, [r7, #0]
    4c42:	add.w	fp, r7, #1
    4c46:	b.n	457e <_dtoa_r+0x50e>
    4c48:	vsub.f64	d6, d6, d3
    4c4c:	vcmpe.f64	d6, d7
    4c50:	vmrs	APSR_nzcv, fpscr
    4c54:	bgt.n	4c5a <_dtoa_r+0xbea>
    4c56:	b.n	4aac <_dtoa_r+0xa3c>
    4c58:	mov	fp, r2
    4c5a:	ldrb.w	r3, [fp, #-1]
    4c5e:	cmp	r3, #48	; 0x30
    4c60:	add.w	r2, fp, #4294967295
    4c64:	beq.n	4c58 <_dtoa_r+0xbe8>
    4c66:	b.n	475e <_dtoa_r+0x6ee>
    4c68:	str	r6, [sp, #8]
    4c6a:	b.w	431e <_dtoa_r+0x2ae>
    4c6e:	str	r3, [sp, #28]
    4c70:	b.n	49d4 <_dtoa_r+0x964>
    4c72:	cmp.w	sl, #0
    4c76:	bne.w	47f2 <_dtoa_r+0x782>
    4c7a:	b.n	49ae <_dtoa_r+0x93e>
    4c7c:	cmp	r2, #57	; 0x39
    4c7e:	mov	fp, r9
    4c80:	mov	r9, r2
    4c82:	beq.n	4c38 <_dtoa_r+0xbc8>
    4c84:	cmp.w	fp, #0
    4c88:	bgt.w	4a7e <_dtoa_r+0xa0e>
    4c8c:	b.n	4a82 <_dtoa_r+0xa12>
    4c8e:	bne.w	4a82 <_dtoa_r+0xa12>
    4c92:	tst.w	r9, #1
    4c96:	beq.w	4a82 <_dtoa_r+0xa12>
    4c9a:	b.n	4a76 <_dtoa_r+0xa06>
    4c9c:	ldr	r3, [sp, #4]
    4c9e:	cmp	r3, #2
    4ca0:	bgt.n	4cb4 <_dtoa_r+0xc44>
    4ca2:	ldr	r7, [sp, #52]	; 0x34
    4ca4:	b.n	451c <_dtoa_r+0x4ac>
    4ca6:	movs	r1, #2
    4ca8:	b.n	467a <_dtoa_r+0x60a>
    4caa:	ldr	r3, [sp, #4]
    4cac:	cmp	r3, #2
    4cae:	bgt.n	4cb4 <_dtoa_r+0xc44>
    4cb0:	ldr	r7, [sp, #52]	; 0x34
    4cb2:	b.n	4812 <_dtoa_r+0x7a2>
    4cb4:	ldr	r7, [sp, #52]	; 0x34
    4cb6:	b.n	495c <_dtoa_r+0x8ec>
    4cb8:	movs	r3, #1
    4cba:	str	r3, [sp, #56]	; 0x38
    4cbc:	b.w	4202 <_dtoa_r+0x192>
    4cc0:	beq.w	44e2 <_dtoa_r+0x472>
    4cc4:	rsb	r0, r0, #60	; 0x3c
    4cc8:	b.n	44d4 <_dtoa_r+0x464>
    4cca:	movs	r5, #0
    4ccc:	str	r5, [r4, #68]	; 0x44
    4cce:	mov	r1, r5
    4cd0:	mov	r0, r4
    4cd2:	bl	3860 <_Balloc>
    4cd6:	mov.w	r7, #4294967295
    4cda:	movs	r3, #1
    4cdc:	str	r0, [sp, #32]
    4cde:	mov	r8, r5
    4ce0:	str	r0, [r4, #64]	; 0x40
    4ce2:	str	r7, [sp, #52]	; 0x34
    4ce4:	str	r3, [sp, #36]	; 0x24
    4ce6:	b.w	426a <_dtoa_r+0x1fa>
    4cea:	nop
    4cec:	.word	0x20000580
    4cf0:	.word	0x20000648
    4cf4:	.word	0x00000000

00004cf8 <_svfprintf_r>:
    4cf8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4cfc:	vpush	{d8-d10}
    4d00:	sub	sp, #228	; 0xe4
    4d02:	mov	r4, r1
    4d04:	str	r1, [sp, #12]
    4d06:	mov	sl, r2
    4d08:	str	r3, [sp, #36]	; 0x24
    4d0a:	str	r0, [sp, #20]
    4d0c:	bl	3798 <_localeconv_r>
    4d10:	ldr	r3, [r0, #0]
    4d12:	str	r3, [sp, #64]	; 0x40
    4d14:	mov	r0, r3
    4d16:	bl	3300 <strlen>
    4d1a:	ldrh	r3, [r4, #12]
    4d1c:	str	r0, [sp, #60]	; 0x3c
    4d1e:	lsls	r1, r3, #24
    4d20:	bpl.n	4d2a <_svfprintf_r+0x32>
    4d22:	ldr	r3, [r4, #16]
    4d24:	cmp	r3, #0
    4d26:	beq.w	5e24 <_svfprintf_r+0x112c>
    4d2a:	movs	r3, #0
    4d2c:	vldr	d8, [pc, #656]	; 4fc0 <_svfprintf_r+0x2c8>
    4d30:	vldr	d9, [pc, #660]	; 4fc8 <_svfprintf_r+0x2d0>
    4d34:	str	r3, [sp, #52]	; 0x34
    4d36:	str	r3, [sp, #116]	; 0x74
    4d38:	str	r3, [sp, #112]	; 0x70
    4d3a:	str	r3, [sp, #68]	; 0x44
    4d3c:	str	r3, [sp, #24]
    4d3e:	add	r3, sp, #160	; 0xa0
    4d40:	str	r3, [sp, #108]	; 0x6c
    4d42:	mov	r9, r3
    4d44:	ldrb.w	r3, [sl]
    4d48:	mov	r4, sl
    4d4a:	cbz	r3, 4d88 <_svfprintf_r+0x90>
    4d4c:	cmp	r3, #37	; 0x25
    4d4e:	bne.n	4d56 <_svfprintf_r+0x5e>
    4d50:	b.n	4d88 <_svfprintf_r+0x90>
    4d52:	cmp	r3, #37	; 0x25
    4d54:	beq.n	4d5e <_svfprintf_r+0x66>
    4d56:	ldrb.w	r3, [r4, #1]!
    4d5a:	cmp	r3, #0
    4d5c:	bne.n	4d52 <_svfprintf_r+0x5a>
    4d5e:	rsb	r5, sl, r4
    4d62:	cbz	r5, 4d88 <_svfprintf_r+0x90>
    4d64:	ldr	r3, [sp, #112]	; 0x70
    4d66:	ldr	r2, [sp, #116]	; 0x74
    4d68:	str.w	sl, [r9]
    4d6c:	adds	r3, #1
    4d6e:	add	r2, r5
    4d70:	cmp	r3, #7
    4d72:	str.w	r5, [r9, #4]
    4d76:	str	r2, [sp, #116]	; 0x74
    4d78:	str	r3, [sp, #112]	; 0x70
    4d7a:	bgt.w	4ec4 <_svfprintf_r+0x1cc>
    4d7e:	add.w	r9, r9, #8
    4d82:	ldr	r3, [sp, #24]
    4d84:	add	r3, r5
    4d86:	str	r3, [sp, #24]
    4d88:	ldrb	r3, [r4, #0]
    4d8a:	cmp	r3, #0
    4d8c:	beq.w	4ed6 <_svfprintf_r+0x1de>
    4d90:	movs	r3, #0
    4d92:	mov	r2, r3
    4d94:	strb.w	r3, [sp, #79]	; 0x4f
    4d98:	mov	r1, r3
    4d9a:	str	r3, [sp, #28]
    4d9c:	mov	fp, r3
    4d9e:	mov.w	r8, #4294967295
    4da2:	ldrb	r3, [r4, #1]
    4da4:	add.w	sl, r4, #1
    4da8:	mov	r5, r8
    4daa:	add.w	sl, sl, #1
    4dae:	sub.w	r0, r3, #32
    4db2:	cmp	r0, #88	; 0x58
    4db4:	bhi.w	55a8 <_svfprintf_r+0x8b0>
    4db8:	tbh	[pc, r0, lsl #1]
    4dbc:	.word	0x03f60363
    4dc0:	.word	0x036b03f6
    4dc4:	.word	0x03f603f6
    4dc8:	.word	0x03f603f6
    4dcc:	.word	0x03f603f6
    4dd0:	.word	0x037e0370
    4dd4:	.word	0x005d03f6
    4dd8:	.word	0x03f600df
    4ddc:	.word	0x010c00fb
    4de0:	.word	0x010c010c
    4de4:	.word	0x010c010c
    4de8:	.word	0x010c010c
    4dec:	.word	0x010c010c
    4df0:	.word	0x03f603f6
    4df4:	.word	0x03f603f6
    4df8:	.word	0x03f603f6
    4dfc:	.word	0x03f603f6
    4e00:	.word	0x03f603f6
    4e04:	.word	0x015e011c
    4e08:	.word	0x015e03f6
    4e0c:	.word	0x03f603f6
    4e10:	.word	0x03f603f6
    4e14:	.word	0x03f602a1
    4e18:	.word	0x02a603f6
    4e1c:	.word	0x03f603f6
    4e20:	.word	0x03f603f6
    4e24:	.word	0x02d803f6
    4e28:	.word	0x03f603f6
    4e2c:	.word	0x03f60305
    4e30:	.word	0x03f603f6
    4e34:	.word	0x03f603f6
    4e38:	.word	0x03f603f6
    4e3c:	.word	0x03f603f6
    4e40:	.word	0x034303f6
    4e44:	.word	0x015e0356
    4e48:	.word	0x015e015e
    4e4c:	.word	0x0356035e
    4e50:	.word	0x03f603f6
    4e54:	.word	0x03f603a4
    4e58:	.word	0x00a203b1
    4e5c:	.word	0x03c30062
    4e60:	.word	0x03c803f6
    4e64:	.word	0x038303f6
    4e68:	.word	0x03f603f6
    4e6c:	.short	0x038b
    4e6e:	ldr	r0, [sp, #28]
    4e70:	str	r3, [sp, #36]	; 0x24
    4e72:	negs	r0, r0
    4e74:	str	r0, [sp, #28]
    4e76:	orr.w	fp, fp, #4
    4e7a:	ldrb.w	r3, [sl]
    4e7e:	b.n	4daa <_svfprintf_r+0xb2>
    4e80:	mov	r8, r5
    4e82:	ldr	r0, [sp, #36]	; 0x24
    4e84:	movs	r1, #0
    4e86:	movs	r3, #48	; 0x30
    4e88:	movs	r2, #120	; 0x78
    4e8a:	cmp	r8, r1
    4e8c:	strb.w	r3, [sp, #80]	; 0x50
    4e90:	ldr	r4, [r0, #0]
    4e92:	strb.w	r2, [sp, #81]	; 0x51
    4e96:	add.w	r7, r0, #4
    4e9a:	mov.w	r5, #0
    4e9e:	strb.w	r1, [sp, #79]	; 0x4f
    4ea2:	orr.w	r3, fp, #2
    4ea6:	blt.w	55e2 <_svfprintf_r+0x8ea>
    4eaa:	bic.w	r3, fp, #128	; 0x80
    4eae:	orr.w	fp, r3, #2
    4eb2:	orrs.w	r3, r4, r5
    4eb6:	str	r7, [sp, #36]	; 0x24
    4eb8:	beq.w	558e <_svfprintf_r+0x896>
    4ebc:	mov	r7, r1
    4ebe:	str	r2, [sp, #48]	; 0x30
    4ec0:	ldr	r0, [pc, #268]	; (4fd0 <_svfprintf_r+0x2d8>)
    4ec2:	b.n	5422 <_svfprintf_r+0x72a>
    4ec4:	add	r2, sp, #108	; 0x6c
    4ec6:	ldr	r1, [sp, #12]
    4ec8:	ldr	r0, [sp, #20]
    4eca:	bl	6268 <__ssprint_r>
    4ece:	cbnz	r0, 4ee4 <_svfprintf_r+0x1ec>
    4ed0:	add.w	r9, sp, #160	; 0xa0
    4ed4:	b.n	4d82 <_svfprintf_r+0x8a>
    4ed6:	ldr	r3, [sp, #116]	; 0x74
    4ed8:	cbz	r3, 4ee4 <_svfprintf_r+0x1ec>
    4eda:	ldr	r0, [sp, #20]
    4edc:	ldr	r1, [sp, #12]
    4ede:	add	r2, sp, #108	; 0x6c
    4ee0:	bl	6268 <__ssprint_r>
    4ee4:	ldr	r3, [sp, #12]
    4ee6:	ldrh	r3, [r3, #12]
    4ee8:	tst.w	r3, #64	; 0x40
    4eec:	ldr	r3, [sp, #24]
    4eee:	it	ne
    4ef0:	movne.w	r3, #4294967295
    4ef4:	mov	r0, r3
    4ef6:	add	sp, #228	; 0xe4
    4ef8:	vpop	{d8-d10}
    4efc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f00:	str	r3, [sp, #48]	; 0x30
    4f02:	mov	r8, r5
    4f04:	cmp	r2, #0
    4f06:	bne.w	623e <_svfprintf_r+0x1546>
    4f0a:	ands.w	r3, fp, #32
    4f0e:	beq.w	531e <_svfprintf_r+0x626>
    4f12:	ldr	r7, [sp, #36]	; 0x24
    4f14:	adds	r7, #7
    4f16:	bic.w	r3, r7, #7
    4f1a:	movs	r7, #0
    4f1c:	add.w	r2, r3, #8
    4f20:	cmp	r8, r7
    4f22:	str	r2, [sp, #36]	; 0x24
    4f24:	ldrd	r4, r5, [r3]
    4f28:	strb.w	r7, [sp, #79]	; 0x4f
    4f2c:	blt.w	5bec <_svfprintf_r+0xef4>
    4f30:	orrs.w	r3, r4, r5
    4f34:	bic.w	fp, fp, #128	; 0x80
    4f38:	beq.w	55d2 <_svfprintf_r+0x8da>
    4f3c:	add	r6, sp, #160	; 0xa0
    4f3e:	lsrs	r2, r4, #3
    4f40:	orr.w	r2, r2, r5, lsl #29
    4f44:	lsrs	r1, r5, #3
    4f46:	and.w	r3, r4, #7
    4f4a:	mov	r5, r1
    4f4c:	mov	r4, r2
    4f4e:	adds	r3, #48	; 0x30
    4f50:	orrs.w	r2, r4, r5
    4f54:	strb.w	r3, [r6, #-1]!
    4f58:	bne.n	4f3e <_svfprintf_r+0x246>
    4f5a:	tst.w	fp, #1
    4f5e:	beq.w	53b0 <_svfprintf_r+0x6b8>
    4f62:	cmp	r3, #48	; 0x30
    4f64:	beq.w	53b0 <_svfprintf_r+0x6b8>
    4f68:	movs	r2, #48	; 0x30
    4f6a:	subs	r3, r6, #1
    4f6c:	strb.w	r2, [r6, #-1]
    4f70:	add	r2, sp, #160	; 0xa0
    4f72:	subs	r2, r2, r3
    4f74:	str	r2, [sp, #32]
    4f76:	mov	r6, r3
    4f78:	b.n	53b6 <_svfprintf_r+0x6be>
    4f7a:	ldrb.w	r3, [sl]
    4f7e:	cmp	r3, #42	; 0x2a
    4f80:	add.w	r4, sl, #1
    4f84:	beq.w	61e6 <_svfprintf_r+0x14ee>
    4f88:	sub.w	r0, r3, #48	; 0x30
    4f8c:	cmp	r0, #9
    4f8e:	it	ls
    4f90:	movls	r5, #0
    4f92:	bhi.w	6140 <_svfprintf_r+0x1448>
    4f96:	ldrb.w	r3, [r4], #1
    4f9a:	add.w	r5, r5, r5, lsl #2
    4f9e:	add.w	r5, r0, r5, lsl #1
    4fa2:	sub.w	r0, r3, #48	; 0x30
    4fa6:	cmp	r0, #9
    4fa8:	bls.n	4f96 <_svfprintf_r+0x29e>
    4faa:	orr.w	r5, r5, r5, asr #31
    4fae:	mov	sl, r4
    4fb0:	b.n	4dae <_svfprintf_r+0xb6>
    4fb2:	orr.w	fp, fp, #128	; 0x80
    4fb6:	ldrb.w	r3, [sl]
    4fba:	b.n	4daa <_svfprintf_r+0xb2>
    4fbc:	nop.w
	...
    4fc8:	.word	0xffffffff
    4fcc:	.word	0x7fefffff
    4fd0:	.word	0x200006c4
    4fd4:	sub.w	r0, r3, #48	; 0x30
    4fd8:	movs	r3, #0
    4fda:	mov	r4, r3
    4fdc:	ldrb.w	r3, [sl], #1
    4fe0:	add.w	r4, r4, r4, lsl #2
    4fe4:	add.w	r4, r0, r4, lsl #1
    4fe8:	sub.w	r0, r3, #48	; 0x30
    4fec:	cmp	r0, #9
    4fee:	bls.n	4fdc <_svfprintf_r+0x2e4>
    4ff0:	str	r4, [sp, #28]
    4ff2:	b.n	4dae <_svfprintf_r+0xb6>
    4ff4:	str	r3, [sp, #48]	; 0x30
    4ff6:	mov	r8, r5
    4ff8:	cmp	r2, #0
    4ffa:	bne.w	6256 <_svfprintf_r+0x155e>
    4ffe:	orr.w	fp, fp, #16
    5002:	tst.w	fp, #32
    5006:	beq.w	5a10 <_svfprintf_r+0xd18>
    500a:	ldr	r7, [sp, #36]	; 0x24
    500c:	adds	r7, #7
    500e:	bic.w	r7, r7, #7
    5012:	ldrd	r2, r3, [r7]
    5016:	add.w	r1, r7, #8
    501a:	str	r1, [sp, #36]	; 0x24
    501c:	mov	r4, r2
    501e:	mov	r5, r3
    5020:	cmp	r2, #0
    5022:	sbcs.w	r3, r3, #0
    5026:	blt.w	5a98 <_svfprintf_r+0xda0>
    502a:	cmp.w	r8, #0
    502e:	ldrb.w	r7, [sp, #79]	; 0x4f
    5032:	blt.w	53a0 <_svfprintf_r+0x6a8>
    5036:	orrs.w	r3, r4, r5
    503a:	bic.w	fp, fp, #128	; 0x80
    503e:	beq.w	582e <_svfprintf_r+0xb36>
    5042:	cmp	r5, #0
    5044:	it	eq
    5046:	cmpeq	r4, #10
    5048:	bcc.w	53a8 <_svfprintf_r+0x6b0>
    504c:	add	r6, sp, #160	; 0xa0
    504e:	mov	r0, r4
    5050:	mov	r1, r5
    5052:	movs	r2, #10
    5054:	movs	r3, #0
    5056:	bl	6368 <__aeabi_uldivmod>
    505a:	adds	r2, #48	; 0x30
    505c:	strb.w	r2, [r6, #-1]!
    5060:	mov	r0, r4
    5062:	mov	r1, r5
    5064:	movs	r3, #0
    5066:	movs	r2, #10
    5068:	bl	6368 <__aeabi_uldivmod>
    506c:	mov	r4, r0
    506e:	mov	r5, r1
    5070:	orrs.w	r3, r4, r5
    5074:	bne.n	504e <_svfprintf_r+0x356>
    5076:	b.n	53b0 <_svfprintf_r+0x6b8>
    5078:	str	r3, [sp, #48]	; 0x30
    507a:	mov	r8, r5
    507c:	cmp	r2, #0
    507e:	bne.w	624e <_svfprintf_r+0x1556>
    5082:	ldr	r7, [sp, #36]	; 0x24
    5084:	tst.w	fp, #8
    5088:	add.w	r7, r7, #7
    508c:	beq.w	5d10 <_svfprintf_r+0x1018>
    5090:	bic.w	r3, r7, #7
    5094:	vldr	d8, [r3]
    5098:	add.w	r2, r3, #8
    509c:	str	r2, [sp, #36]	; 0x24
    509e:	vabs.f64	d7, d8
    50a2:	vcmp.f64	d7, d9
    50a6:	vmrs	APSR_nzcv, fpscr
    50aa:	ble.w	5c26 <_svfprintf_r+0xf2e>
    50ae:	vcmpe.f64	d8, #0.0
    50b2:	vmrs	APSR_nzcv, fpscr
    50b6:	bmi.w	604e <_svfprintf_r+0x1356>
    50ba:	ldrb.w	r7, [sp, #79]	; 0x4f
    50be:	ldr	r6, [pc, #668]	; (535c <_svfprintf_r+0x664>)
    50c0:	ldr	r3, [pc, #668]	; (5360 <_svfprintf_r+0x668>)
    50c2:	ldr	r1, [sp, #48]	; 0x30
    50c4:	movs	r2, #3
    50c6:	mov.w	r8, #0
    50ca:	str	r2, [sp, #16]
    50cc:	bic.w	fp, fp, #128	; 0x80
    50d0:	cmp	r1, #71	; 0x47
    50d2:	it	le
    50d4:	movle	r6, r3
    50d6:	str	r2, [sp, #32]
    50d8:	str.w	r8, [sp, #56]	; 0x38
    50dc:	cbz	r7, 50e4 <_svfprintf_r+0x3ec>
    50de:	ldr	r3, [sp, #16]
    50e0:	adds	r3, #1
    50e2:	str	r3, [sp, #16]
    50e4:	ands.w	r3, fp, #2
    50e8:	str	r3, [sp, #40]	; 0x28
    50ea:	beq.n	50f2 <_svfprintf_r+0x3fa>
    50ec:	ldr	r3, [sp, #16]
    50ee:	adds	r3, #2
    50f0:	str	r3, [sp, #16]
    50f2:	ands.w	r3, fp, #132	; 0x84
    50f6:	str	r3, [sp, #44]	; 0x2c
    50f8:	bne.w	55fc <_svfprintf_r+0x904>
    50fc:	ldr	r3, [sp, #28]
    50fe:	ldr	r2, [sp, #16]
    5100:	subs	r4, r3, r2
    5102:	cmp	r4, #0
    5104:	ble.w	55fc <_svfprintf_r+0x904>
    5108:	cmp	r4, #16
    510a:	ldr	r1, [sp, #116]	; 0x74
    510c:	ldr	r2, [sp, #112]	; 0x70
    510e:	ldr	r7, [pc, #596]	; (5364 <_svfprintf_r+0x66c>)
    5110:	ble.n	515a <_svfprintf_r+0x462>
    5112:	mov	r0, r9
    5114:	movs	r5, #16
    5116:	mov	r9, r8
    5118:	mov	r8, r6
    511a:	ldr	r6, [sp, #20]
    511c:	b.n	5128 <_svfprintf_r+0x430>
    511e:	subs	r4, #16
    5120:	cmp	r4, #16
    5122:	add.w	r0, r0, #8
    5126:	ble.n	5154 <_svfprintf_r+0x45c>
    5128:	adds	r2, #1
    512a:	adds	r1, #16
    512c:	cmp	r2, #7
    512e:	str	r1, [sp, #116]	; 0x74
    5130:	str	r2, [sp, #112]	; 0x70
    5132:	str	r7, [r0, #0]
    5134:	str	r5, [r0, #4]
    5136:	ble.n	511e <_svfprintf_r+0x426>
    5138:	add	r2, sp, #108	; 0x6c
    513a:	ldr	r1, [sp, #12]
    513c:	mov	r0, r6
    513e:	bl	6268 <__ssprint_r>
    5142:	cmp	r0, #0
    5144:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5148:	subs	r4, #16
    514a:	cmp	r4, #16
    514c:	ldr	r1, [sp, #116]	; 0x74
    514e:	ldr	r2, [sp, #112]	; 0x70
    5150:	add	r0, sp, #160	; 0xa0
    5152:	bgt.n	5128 <_svfprintf_r+0x430>
    5154:	mov	r6, r8
    5156:	mov	r8, r9
    5158:	mov	r9, r0
    515a:	adds	r2, #1
    515c:	adds	r3, r4, r1
    515e:	cmp	r2, #7
    5160:	str	r3, [sp, #116]	; 0x74
    5162:	str	r2, [sp, #112]	; 0x70
    5164:	str.w	r7, [r9]
    5168:	str.w	r4, [r9, #4]
    516c:	bgt.w	5934 <_svfprintf_r+0xc3c>
    5170:	ldrb.w	r7, [sp, #79]	; 0x4f
    5174:	add.w	r9, r9, #8
    5178:	cbz	r7, 5198 <_svfprintf_r+0x4a0>
    517a:	ldr	r2, [sp, #112]	; 0x70
    517c:	adds	r2, #1
    517e:	adds	r3, #1
    5180:	add.w	r0, sp, #79	; 0x4f
    5184:	movs	r1, #1
    5186:	cmp	r2, #7
    5188:	str	r3, [sp, #116]	; 0x74
    518a:	str	r2, [sp, #112]	; 0x70
    518c:	stmia.w	r9, {r0, r1}
    5190:	bgt.w	5852 <_svfprintf_r+0xb5a>
    5194:	add.w	r9, r9, #8
    5198:	ldr	r2, [sp, #40]	; 0x28
    519a:	cbz	r2, 51b8 <_svfprintf_r+0x4c0>
    519c:	ldr	r2, [sp, #112]	; 0x70
    519e:	adds	r2, #1
    51a0:	adds	r3, #2
    51a2:	add	r0, sp, #80	; 0x50
    51a4:	movs	r1, #2
    51a6:	cmp	r2, #7
    51a8:	str	r3, [sp, #116]	; 0x74
    51aa:	str	r2, [sp, #112]	; 0x70
    51ac:	stmia.w	r9, {r0, r1}
    51b0:	bgt.w	586a <_svfprintf_r+0xb72>
    51b4:	add.w	r9, r9, #8
    51b8:	ldr	r2, [sp, #44]	; 0x2c
    51ba:	cmp	r2, #128	; 0x80
    51bc:	beq.w	56bc <_svfprintf_r+0x9c4>
    51c0:	ldr	r2, [sp, #32]
    51c2:	rsb	r4, r2, r8
    51c6:	cmp	r4, #0
    51c8:	ble.n	5234 <_svfprintf_r+0x53c>
    51ca:	cmp	r4, #16
    51cc:	ldr	r2, [sp, #112]	; 0x70
    51ce:	ldr	r7, [pc, #408]	; (5368 <_svfprintf_r+0x670>)
    51d0:	ble.n	521a <_svfprintf_r+0x522>
    51d2:	mov	r1, r9
    51d4:	mov.w	r8, #16
    51d8:	mov	r9, r6
    51da:	ldr	r5, [sp, #20]
    51dc:	ldr	r6, [sp, #12]
    51de:	b.n	51ea <_svfprintf_r+0x4f2>
    51e0:	subs	r4, #16
    51e2:	cmp	r4, #16
    51e4:	add.w	r1, r1, #8
    51e8:	ble.n	5216 <_svfprintf_r+0x51e>
    51ea:	adds	r2, #1
    51ec:	adds	r3, #16
    51ee:	cmp	r2, #7
    51f0:	str	r3, [sp, #116]	; 0x74
    51f2:	str	r2, [sp, #112]	; 0x70
    51f4:	stmia.w	r1, {r7, r8}
    51f8:	ble.n	51e0 <_svfprintf_r+0x4e8>
    51fa:	add	r2, sp, #108	; 0x6c
    51fc:	mov	r1, r6
    51fe:	mov	r0, r5
    5200:	bl	6268 <__ssprint_r>
    5204:	cmp	r0, #0
    5206:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    520a:	subs	r4, #16
    520c:	cmp	r4, #16
    520e:	ldr	r3, [sp, #116]	; 0x74
    5210:	ldr	r2, [sp, #112]	; 0x70
    5212:	add	r1, sp, #160	; 0xa0
    5214:	bgt.n	51ea <_svfprintf_r+0x4f2>
    5216:	mov	r6, r9
    5218:	mov	r9, r1
    521a:	adds	r2, #1
    521c:	add	r3, r4
    521e:	cmp	r2, #7
    5220:	str	r3, [sp, #116]	; 0x74
    5222:	str	r2, [sp, #112]	; 0x70
    5224:	str.w	r7, [r9]
    5228:	str.w	r4, [r9, #4]
    522c:	bgt.w	583a <_svfprintf_r+0xb42>
    5230:	add.w	r9, r9, #8
    5234:	tst.w	fp, #256	; 0x100
    5238:	bne.w	5600 <_svfprintf_r+0x908>
    523c:	ldr	r2, [sp, #112]	; 0x70
    523e:	ldr	r0, [sp, #32]
    5240:	str.w	r6, [r9]
    5244:	adds	r2, #1
    5246:	add	r3, r0
    5248:	cmp	r2, #7
    524a:	str	r3, [sp, #116]	; 0x74
    524c:	str.w	r0, [r9, #4]
    5250:	str	r2, [sp, #112]	; 0x70
    5252:	bgt.w	57da <_svfprintf_r+0xae2>
    5256:	add.w	r9, r9, #8
    525a:	tst.w	fp, #4
    525e:	beq.n	52de <_svfprintf_r+0x5e6>
    5260:	ldr	r2, [sp, #28]
    5262:	ldr	r1, [sp, #16]
    5264:	subs	r4, r2, r1
    5266:	cmp	r4, #0
    5268:	ble.n	52de <_svfprintf_r+0x5e6>
    526a:	cmp	r4, #16
    526c:	ldr	r2, [sp, #112]	; 0x70
    526e:	ldr	r7, [pc, #244]	; (5364 <_svfprintf_r+0x66c>)
    5270:	ble.n	52b8 <_svfprintf_r+0x5c0>
    5272:	movs	r5, #16
    5274:	ldr	r6, [sp, #20]
    5276:	ldr.w	r8, [sp, #12]
    527a:	b.n	5286 <_svfprintf_r+0x58e>
    527c:	subs	r4, #16
    527e:	cmp	r4, #16
    5280:	add.w	r9, r9, #8
    5284:	ble.n	52b8 <_svfprintf_r+0x5c0>
    5286:	adds	r2, #1
    5288:	adds	r3, #16
    528a:	cmp	r2, #7
    528c:	str	r3, [sp, #116]	; 0x74
    528e:	str	r2, [sp, #112]	; 0x70
    5290:	str.w	r7, [r9]
    5294:	str.w	r5, [r9, #4]
    5298:	ble.n	527c <_svfprintf_r+0x584>
    529a:	add	r2, sp, #108	; 0x6c
    529c:	mov	r1, r8
    529e:	mov	r0, r6
    52a0:	bl	6268 <__ssprint_r>
    52a4:	cmp	r0, #0
    52a6:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    52aa:	subs	r4, #16
    52ac:	cmp	r4, #16
    52ae:	ldr	r3, [sp, #116]	; 0x74
    52b0:	ldr	r2, [sp, #112]	; 0x70
    52b2:	add.w	r9, sp, #160	; 0xa0
    52b6:	bgt.n	5286 <_svfprintf_r+0x58e>
    52b8:	adds	r2, #1
    52ba:	add	r3, r4
    52bc:	cmp	r2, #7
    52be:	str	r3, [sp, #116]	; 0x74
    52c0:	str	r2, [sp, #112]	; 0x70
    52c2:	str.w	r7, [r9]
    52c6:	str.w	r4, [r9, #4]
    52ca:	ble.n	52de <_svfprintf_r+0x5e6>
    52cc:	add	r2, sp, #108	; 0x6c
    52ce:	ldr	r1, [sp, #12]
    52d0:	ldr	r0, [sp, #20]
    52d2:	bl	6268 <__ssprint_r>
    52d6:	cmp	r0, #0
    52d8:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    52dc:	ldr	r3, [sp, #116]	; 0x74
    52de:	ldr	r2, [sp, #24]
    52e0:	ldr	r1, [sp, #28]
    52e2:	ldr	r0, [sp, #16]
    52e4:	cmp	r1, r0
    52e6:	ite	ge
    52e8:	addge	r2, r2, r1
    52ea:	addlt	r2, r2, r0
    52ec:	str	r2, [sp, #24]
    52ee:	cmp	r3, #0
    52f0:	bne.w	57f2 <_svfprintf_r+0xafa>
    52f4:	movs	r3, #0
    52f6:	str	r3, [sp, #112]	; 0x70
    52f8:	add.w	r9, sp, #160	; 0xa0
    52fc:	b.n	4d44 <_svfprintf_r+0x4c>
    52fe:	orr.w	fp, fp, #8
    5302:	ldrb.w	r3, [sl]
    5306:	b.n	4daa <_svfprintf_r+0xb2>
    5308:	str	r3, [sp, #48]	; 0x30
    530a:	mov	r8, r5
    530c:	cmp	r2, #0
    530e:	bne.w	6246 <_svfprintf_r+0x154e>
    5312:	orr.w	fp, fp, #16
    5316:	ands.w	r3, fp, #32
    531a:	bne.w	4f12 <_svfprintf_r+0x21a>
    531e:	ands.w	r2, fp, #16
    5322:	bne.w	5a48 <_svfprintf_r+0xd50>
    5326:	ands.w	r3, fp, #64	; 0x40
    532a:	beq.w	5a48 <_svfprintf_r+0xd50>
    532e:	ldr	r1, [sp, #36]	; 0x24
    5330:	strb.w	r2, [sp, #79]	; 0x4f
    5334:	mov	r3, r1
    5336:	cmp.w	r8, #0
    533a:	add.w	r3, r3, #4
    533e:	ldrh	r4, [r1, #0]
    5340:	mov.w	r5, #0
    5344:	blt.w	5e9e <_svfprintf_r+0x11a6>
    5348:	orrs.w	r1, r4, r5
    534c:	bic.w	fp, fp, #128	; 0x80
    5350:	str	r3, [sp, #36]	; 0x24
    5352:	beq.w	55d2 <_svfprintf_r+0x8da>
    5356:	mov	r7, r2
    5358:	b.n	4f3c <_svfprintf_r+0x244>
    535a:	nop
    535c:	.word	0x200006a4
    5360:	.word	0x200006a0
    5364:	.word	0x200006e0
    5368:	.word	0x20000690
    536c:	str	r3, [sp, #48]	; 0x30
    536e:	mov	r8, r5
    5370:	cmp	r2, #0
    5372:	bne.w	6228 <_svfprintf_r+0x1530>
    5376:	orr.w	fp, fp, #16
    537a:	ands.w	r3, fp, #32
    537e:	beq.w	5950 <_svfprintf_r+0xc58>
    5382:	ldr	r7, [sp, #36]	; 0x24
    5384:	adds	r7, #7
    5386:	bic.w	r3, r7, #7
    538a:	movs	r7, #0
    538c:	add.w	r2, r3, #8
    5390:	cmp	r8, r7
    5392:	str	r2, [sp, #36]	; 0x24
    5394:	ldrd	r4, r5, [r3]
    5398:	strb.w	r7, [sp, #79]	; 0x4f
    539c:	bge.w	5036 <_svfprintf_r+0x33e>
    53a0:	orrs.w	r3, r4, r5
    53a4:	bne.w	5042 <_svfprintf_r+0x34a>
    53a8:	add	r6, sp, #224	; 0xe0
    53aa:	adds	r4, #48	; 0x30
    53ac:	strb.w	r4, [r6, #-65]!
    53b0:	add	r3, sp, #160	; 0xa0
    53b2:	subs	r3, r3, r6
    53b4:	str	r3, [sp, #32]
    53b6:	ldr	r3, [sp, #32]
    53b8:	cmp	r3, r8
    53ba:	it	lt
    53bc:	movlt	r3, r8
    53be:	str	r3, [sp, #16]
    53c0:	movs	r3, #0
    53c2:	str	r3, [sp, #56]	; 0x38
    53c4:	b.n	50dc <_svfprintf_r+0x3e4>
    53c6:	str	r3, [sp, #48]	; 0x30
    53c8:	mov	r8, r5
    53ca:	cmp	r2, #0
    53cc:	bne.w	6220 <_svfprintf_r+0x1528>
    53d0:	tst.w	fp, #32
    53d4:	ldr	r0, [pc, #776]	; (56e0 <_svfprintf_r+0x9e8>)
    53d6:	beq.w	54e6 <_svfprintf_r+0x7ee>
    53da:	ldr	r7, [sp, #36]	; 0x24
    53dc:	adds	r7, #7
    53de:	bic.w	r3, r7, #7
    53e2:	ldrd	r4, r5, [r3]
    53e6:	add.w	r2, r3, #8
    53ea:	str	r2, [sp, #36]	; 0x24
    53ec:	ands.w	r7, fp, #1
    53f0:	beq.w	5882 <_svfprintf_r+0xb8a>
    53f4:	orrs.w	r3, r4, r5
    53f8:	beq.w	5d42 <_svfprintf_r+0x104a>
    53fc:	movs	r7, #0
    53fe:	movs	r3, #48	; 0x30
    5400:	ldrb.w	r2, [sp, #48]	; 0x30
    5404:	strb.w	r3, [sp, #80]	; 0x50
    5408:	cmp	r8, r7
    540a:	strb.w	r2, [sp, #81]	; 0x51
    540e:	strb.w	r7, [sp, #79]	; 0x4f
    5412:	orr.w	r3, fp, #2
    5416:	blt.w	6048 <_svfprintf_r+0x1350>
    541a:	bic.w	r3, fp, #128	; 0x80
    541e:	orr.w	fp, r3, #2
    5422:	add	r6, sp, #160	; 0xa0
    5424:	lsrs	r3, r4, #4
    5426:	and.w	r1, r4, #15
    542a:	orr.w	r3, r3, r5, lsl #28
    542e:	lsrs	r2, r5, #4
    5430:	mov	r4, r3
    5432:	mov	r5, r2
    5434:	ldrb	r3, [r0, r1]
    5436:	strb.w	r3, [r6, #-1]!
    543a:	orrs.w	r3, r4, r5
    543e:	bne.n	5424 <_svfprintf_r+0x72c>
    5440:	b.n	53b0 <_svfprintf_r+0x6b8>
    5442:	ldr	r1, [sp, #36]	; 0x24
    5444:	str	r3, [sp, #48]	; 0x30
    5446:	ldr	r2, [r1, #0]
    5448:	strb.w	r2, [sp, #120]	; 0x78
    544c:	movs	r3, #0
    544e:	mov	r2, r1
    5450:	mov	r7, r3
    5452:	strb.w	r3, [sp, #79]	; 0x4f
    5456:	adds	r2, #4
    5458:	movs	r3, #1
    545a:	str	r3, [sp, #16]
    545c:	mov	r8, r7
    545e:	str	r7, [sp, #56]	; 0x38
    5460:	str	r2, [sp, #36]	; 0x24
    5462:	str	r3, [sp, #32]
    5464:	add	r6, sp, #120	; 0x78
    5466:	b.n	50e4 <_svfprintf_r+0x3ec>
    5468:	str	r3, [sp, #48]	; 0x30
    546a:	mov	r8, r5
    546c:	cmp	r2, #0
    546e:	beq.w	5002 <_svfprintf_r+0x30a>
    5472:	strb.w	r1, [sp, #79]	; 0x4f
    5476:	b.n	5002 <_svfprintf_r+0x30a>
    5478:	orr.w	fp, fp, #64	; 0x40
    547c:	ldrb.w	r3, [sl]
    5480:	b.n	4daa <_svfprintf_r+0xb2>
    5482:	ldrb.w	r3, [sl]
    5486:	cmp	r1, #0
    5488:	bne.w	4daa <_svfprintf_r+0xb2>
    548c:	movs	r2, #1
    548e:	movs	r1, #32
    5490:	b.n	4daa <_svfprintf_r+0xb2>
    5492:	orr.w	fp, fp, #1
    5496:	ldrb.w	r3, [sl]
    549a:	b.n	4daa <_svfprintf_r+0xb2>
    549c:	ldr	r4, [sp, #36]	; 0x24
    549e:	ldr	r3, [r4, #0]
    54a0:	str	r3, [sp, #28]
    54a2:	mov	r0, r3
    54a4:	cmp	r0, #0
    54a6:	mov	r3, r4
    54a8:	add.w	r3, r3, #4
    54ac:	blt.w	4e6e <_svfprintf_r+0x176>
    54b0:	str	r3, [sp, #36]	; 0x24
    54b2:	ldrb.w	r3, [sl]
    54b6:	b.n	4daa <_svfprintf_r+0xb2>
    54b8:	ldrb.w	r3, [sl]
    54bc:	movs	r2, #1
    54be:	movs	r1, #43	; 0x2b
    54c0:	b.n	4daa <_svfprintf_r+0xb2>
    54c2:	str	r3, [sp, #48]	; 0x30
    54c4:	mov	r8, r5
    54c6:	cmp	r2, #0
    54c8:	beq.w	537a <_svfprintf_r+0x682>
    54cc:	strb.w	r1, [sp, #79]	; 0x4f
    54d0:	b.n	537a <_svfprintf_r+0x682>
    54d2:	str	r3, [sp, #48]	; 0x30
    54d4:	mov	r8, r5
    54d6:	cmp	r2, #0
    54d8:	bne.w	6230 <_svfprintf_r+0x1538>
    54dc:	tst.w	fp, #32
    54e0:	ldr	r0, [pc, #512]	; (56e4 <_svfprintf_r+0x9ec>)
    54e2:	bne.w	53da <_svfprintf_r+0x6e2>
    54e6:	ldr	r2, [sp, #36]	; 0x24
    54e8:	tst.w	fp, #16
    54ec:	mov	r3, r2
    54ee:	bne.w	5a74 <_svfprintf_r+0xd7c>
    54f2:	tst.w	fp, #64	; 0x40
    54f6:	beq.w	5a74 <_svfprintf_r+0xd7c>
    54fa:	adds	r3, #4
    54fc:	ldrh	r4, [r2, #0]
    54fe:	str	r3, [sp, #36]	; 0x24
    5500:	movs	r5, #0
    5502:	b.n	53ec <_svfprintf_r+0x6f4>
    5504:	ldrb.w	r3, [sl]
    5508:	cmp	r3, #108	; 0x6c
    550a:	ittte	eq
    550c:	ldrbeq.w	r3, [sl, #1]
    5510:	orreq.w	fp, fp, #32
    5514:	addeq.w	sl, sl, #1
    5518:	orrne.w	fp, fp, #16
    551c:	b.n	4daa <_svfprintf_r+0xb2>
    551e:	cmp	r2, #0
    5520:	bne.w	6202 <_svfprintf_r+0x150a>
    5524:	tst.w	fp, #32
    5528:	beq.w	5bf8 <_svfprintf_r+0xf00>
    552c:	ldr	r2, [sp, #36]	; 0x24
    552e:	ldr	r1, [sp, #24]
    5530:	ldr	r3, [r2, #0]
    5532:	asrs	r5, r1, #31
    5534:	mov	r0, r1
    5536:	adds	r2, #4
    5538:	mov	r1, r5
    553a:	str	r2, [sp, #36]	; 0x24
    553c:	strd	r0, r1, [r3]
    5540:	b.n	4d44 <_svfprintf_r+0x4c>
    5542:	orr.w	fp, fp, #32
    5546:	ldrb.w	r3, [sl]
    554a:	b.n	4daa <_svfprintf_r+0xb2>
    554c:	ldr	r2, [sp, #36]	; 0x24
    554e:	str	r3, [sp, #48]	; 0x30
    5550:	ldr	r6, [r2, #0]
    5552:	movs	r4, #0
    5554:	strb.w	r4, [sp, #79]	; 0x4f
    5558:	adds	r7, r2, #4
    555a:	cmp	r6, #0
    555c:	beq.w	602a <_svfprintf_r+0x1332>
    5560:	cmp	r5, #0
    5562:	blt.w	5eaa <_svfprintf_r+0x11b2>
    5566:	mov	r2, r5
    5568:	mov	r1, r4
    556a:	mov	r0, r6
    556c:	bl	37c0 <memchr>
    5570:	cmp	r0, #0
    5572:	beq.w	610e <_svfprintf_r+0x1416>
    5576:	subs	r3, r0, r6
    5578:	str	r3, [sp, #32]
    557a:	mov	r8, r4
    557c:	bic.w	r3, r3, r3, asr #31
    5580:	str	r7, [sp, #36]	; 0x24
    5582:	str	r3, [sp, #16]
    5584:	str.w	r8, [sp, #56]	; 0x38
    5588:	ldrb.w	r7, [sp, #79]	; 0x4f
    558c:	b.n	50dc <_svfprintf_r+0x3e4>
    558e:	ldr	r0, [pc, #340]	; (56e4 <_svfprintf_r+0x9ec>)
    5590:	str	r2, [sp, #48]	; 0x30
    5592:	cmp.w	r8, #0
    5596:	bne.w	58a2 <_svfprintf_r+0xbaa>
    559a:	mov	r7, r8
    559c:	mov.w	r8, #0
    55a0:	str.w	r8, [sp, #32]
    55a4:	add	r6, sp, #160	; 0xa0
    55a6:	b.n	53b6 <_svfprintf_r+0x6be>
    55a8:	str	r3, [sp, #48]	; 0x30
    55aa:	cmp	r2, #0
    55ac:	bne.w	620a <_svfprintf_r+0x1512>
    55b0:	ldr	r2, [sp, #48]	; 0x30
    55b2:	cmp	r2, #0
    55b4:	beq.w	4ed6 <_svfprintf_r+0x1de>
    55b8:	movs	r3, #0
    55ba:	movs	r1, #1
    55bc:	mov	r7, r3
    55be:	str	r1, [sp, #16]
    55c0:	strb.w	r2, [sp, #120]	; 0x78
    55c4:	strb.w	r3, [sp, #79]	; 0x4f
    55c8:	mov	r8, r3
    55ca:	str	r3, [sp, #56]	; 0x38
    55cc:	str	r1, [sp, #32]
    55ce:	add	r6, sp, #120	; 0x78
    55d0:	b.n	50e4 <_svfprintf_r+0x3ec>
    55d2:	cmp.w	r8, #0
    55d6:	beq.w	60f0 <_svfprintf_r+0x13f8>
    55da:	movs	r7, #0
    55dc:	movs	r4, #0
    55de:	movs	r5, #0
    55e0:	b.n	4f3c <_svfprintf_r+0x244>
    55e2:	ldr	r0, [pc, #256]	; (56e4 <_svfprintf_r+0x9ec>)
    55e4:	str	r2, [sp, #48]	; 0x30
    55e6:	mov	fp, r3
    55e8:	orrs.w	r3, r4, r5
    55ec:	str	r7, [sp, #36]	; 0x24
    55ee:	mov.w	r7, #0
    55f2:	bne.w	5422 <_svfprintf_r+0x72a>
    55f6:	movs	r4, #0
    55f8:	movs	r5, #0
    55fa:	b.n	5422 <_svfprintf_r+0x72a>
    55fc:	ldr	r3, [sp, #116]	; 0x74
    55fe:	b.n	5178 <_svfprintf_r+0x480>
    5600:	ldr	r2, [sp, #48]	; 0x30
    5602:	cmp	r2, #101	; 0x65
    5604:	ble.w	574a <_svfprintf_r+0xa52>
    5608:	vcmp.f64	d8, #0.0
    560c:	vmrs	APSR_nzcv, fpscr
    5610:	bne.w	58a6 <_svfprintf_r+0xbae>
    5614:	ldr	r2, [sp, #112]	; 0x70
    5616:	ldr	r1, [pc, #208]	; (56e8 <_svfprintf_r+0x9f0>)
    5618:	str.w	r1, [r9]
    561c:	adds	r2, #1
    561e:	adds	r3, #1
    5620:	movs	r1, #1
    5622:	cmp	r2, #7
    5624:	str	r3, [sp, #116]	; 0x74
    5626:	str	r2, [sp, #112]	; 0x70
    5628:	str.w	r1, [r9, #4]
    562c:	bgt.w	5d54 <_svfprintf_r+0x105c>
    5630:	add.w	r9, r9, #8
    5634:	ldr	r2, [sp, #84]	; 0x54
    5636:	ldr	r1, [sp, #52]	; 0x34
    5638:	cmp	r2, r1
    563a:	blt.n	5644 <_svfprintf_r+0x94c>
    563c:	tst.w	fp, #1
    5640:	beq.w	525a <_svfprintf_r+0x562>
    5644:	ldr	r2, [sp, #112]	; 0x70
    5646:	ldr	r0, [sp, #60]	; 0x3c
    5648:	ldr	r1, [sp, #64]	; 0x40
    564a:	str.w	r1, [r9]
    564e:	adds	r2, #1
    5650:	add	r3, r0
    5652:	cmp	r2, #7
    5654:	str	r3, [sp, #116]	; 0x74
    5656:	str.w	r0, [r9, #4]
    565a:	str	r2, [sp, #112]	; 0x70
    565c:	bgt.w	5e0c <_svfprintf_r+0x1114>
    5660:	add.w	r9, r9, #8
    5664:	ldr	r2, [sp, #52]	; 0x34
    5666:	subs	r4, r2, #1
    5668:	cmp	r4, #0
    566a:	ble.w	525a <_svfprintf_r+0x562>
    566e:	cmp	r4, #16
    5670:	ldr	r2, [sp, #112]	; 0x70
    5672:	ldr	r7, [pc, #120]	; (56ec <_svfprintf_r+0x9f4>)
    5674:	ble.w	5a30 <_svfprintf_r+0xd38>
    5678:	movs	r5, #16
    567a:	ldr	r6, [sp, #20]
    567c:	ldr.w	r8, [sp, #12]
    5680:	b.n	568e <_svfprintf_r+0x996>
    5682:	add.w	r9, r9, #8
    5686:	subs	r4, #16
    5688:	cmp	r4, #16
    568a:	ble.w	5a30 <_svfprintf_r+0xd38>
    568e:	adds	r2, #1
    5690:	adds	r3, #16
    5692:	cmp	r2, #7
    5694:	str	r3, [sp, #116]	; 0x74
    5696:	str	r2, [sp, #112]	; 0x70
    5698:	str.w	r7, [r9]
    569c:	str.w	r5, [r9, #4]
    56a0:	ble.n	5682 <_svfprintf_r+0x98a>
    56a2:	add	r2, sp, #108	; 0x6c
    56a4:	mov	r1, r8
    56a6:	mov	r0, r6
    56a8:	bl	6268 <__ssprint_r>
    56ac:	cmp	r0, #0
    56ae:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    56b2:	ldr	r3, [sp, #116]	; 0x74
    56b4:	ldr	r2, [sp, #112]	; 0x70
    56b6:	add.w	r9, sp, #160	; 0xa0
    56ba:	b.n	5686 <_svfprintf_r+0x98e>
    56bc:	ldr	r2, [sp, #28]
    56be:	ldr	r1, [sp, #16]
    56c0:	subs	r4, r2, r1
    56c2:	cmp	r4, #0
    56c4:	ble.w	51c0 <_svfprintf_r+0x4c8>
    56c8:	cmp	r4, #16
    56ca:	ldr	r2, [sp, #112]	; 0x70
    56cc:	ldr	r7, [pc, #28]	; (56ec <_svfprintf_r+0x9f4>)
    56ce:	ble.n	572e <_svfprintf_r+0xa36>
    56d0:	mov	r1, r9
    56d2:	movs	r5, #16
    56d4:	mov	r9, r8
    56d6:	mov	r0, r3
    56d8:	mov	r8, r6
    56da:	ldr	r6, [sp, #20]
    56dc:	b.n	56fa <_svfprintf_r+0xa02>
    56de:	nop
    56e0:	.word	0x200006b0
    56e4:	.word	0x200006c4
    56e8:	.word	0x2000068c
    56ec:	.word	0x20000690
    56f0:	subs	r4, #16
    56f2:	cmp	r4, #16
    56f4:	add.w	r1, r1, #8
    56f8:	ble.n	5726 <_svfprintf_r+0xa2e>
    56fa:	adds	r2, #1
    56fc:	adds	r0, #16
    56fe:	cmp	r2, #7
    5700:	str	r0, [sp, #116]	; 0x74
    5702:	str	r2, [sp, #112]	; 0x70
    5704:	str	r7, [r1, #0]
    5706:	str	r5, [r1, #4]
    5708:	ble.n	56f0 <_svfprintf_r+0x9f8>
    570a:	add	r2, sp, #108	; 0x6c
    570c:	ldr	r1, [sp, #12]
    570e:	mov	r0, r6
    5710:	bl	6268 <__ssprint_r>
    5714:	cmp	r0, #0
    5716:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    571a:	subs	r4, #16
    571c:	cmp	r4, #16
    571e:	ldr	r0, [sp, #116]	; 0x74
    5720:	ldr	r2, [sp, #112]	; 0x70
    5722:	add	r1, sp, #160	; 0xa0
    5724:	bgt.n	56fa <_svfprintf_r+0xa02>
    5726:	mov	r6, r8
    5728:	mov	r3, r0
    572a:	mov	r8, r9
    572c:	mov	r9, r1
    572e:	adds	r2, #1
    5730:	add	r3, r4
    5732:	cmp	r2, #7
    5734:	str	r3, [sp, #116]	; 0x74
    5736:	str	r2, [sp, #112]	; 0x70
    5738:	str.w	r7, [r9]
    573c:	str.w	r4, [r9, #4]
    5740:	bgt.w	5bd0 <_svfprintf_r+0xed8>
    5744:	add.w	r9, r9, #8
    5748:	b.n	51c0 <_svfprintf_r+0x4c8>
    574a:	ldr	r2, [sp, #52]	; 0x34
    574c:	str.w	r6, [r9]
    5750:	cmp	r2, #1
    5752:	ldr	r2, [sp, #112]	; 0x70
    5754:	add.w	r3, r3, #1
    5758:	add.w	r2, r2, #1
    575c:	mov.w	r1, #1
    5760:	str	r3, [sp, #116]	; 0x74
    5762:	str	r2, [sp, #112]	; 0x70
    5764:	str.w	r1, [r9, #4]
    5768:	ble.w	5b8c <_svfprintf_r+0xe94>
    576c:	cmp	r2, #7
    576e:	bgt.w	5b9c <_svfprintf_r+0xea4>
    5772:	add.w	r9, r9, #8
    5776:	ldr	r0, [sp, #60]	; 0x3c
    5778:	ldr	r1, [sp, #64]	; 0x40
    577a:	str.w	r1, [r9]
    577e:	adds	r2, #1
    5780:	add	r3, r0
    5782:	cmp	r2, #7
    5784:	str	r3, [sp, #116]	; 0x74
    5786:	str	r2, [sp, #112]	; 0x70
    5788:	str.w	r0, [r9, #4]
    578c:	bgt.w	5bb6 <_svfprintf_r+0xebe>
    5790:	add.w	r9, r9, #8
    5794:	vcmp.f64	d8, #0.0
    5798:	vmrs	APSR_nzcv, fpscr
    579c:	ldr	r1, [sp, #52]	; 0x34
    579e:	beq.w	598c <_svfprintf_r+0xc94>
    57a2:	subs	r1, #1
    57a4:	adds	r2, #1
    57a6:	adds	r6, #1
    57a8:	add	r3, r1
    57aa:	cmp	r2, #7
    57ac:	str.w	r6, [r9]
    57b0:	str	r2, [sp, #112]	; 0x70
    57b2:	str	r3, [sp, #116]	; 0x74
    57b4:	str.w	r1, [r9, #4]
    57b8:	bgt.w	59f6 <_svfprintf_r+0xcfe>
    57bc:	add.w	r9, r9, #8
    57c0:	ldr	r0, [sp, #68]	; 0x44
    57c2:	str.w	r0, [r9, #4]
    57c6:	adds	r2, #1
    57c8:	add	r3, r0
    57ca:	add	r1, sp, #92	; 0x5c
    57cc:	cmp	r2, #7
    57ce:	str	r3, [sp, #116]	; 0x74
    57d0:	str	r2, [sp, #112]	; 0x70
    57d2:	str.w	r1, [r9]
    57d6:	ble.w	5256 <_svfprintf_r+0x55e>
    57da:	add	r2, sp, #108	; 0x6c
    57dc:	ldr	r1, [sp, #12]
    57de:	ldr	r0, [sp, #20]
    57e0:	bl	6268 <__ssprint_r>
    57e4:	cmp	r0, #0
    57e6:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    57ea:	ldr	r3, [sp, #116]	; 0x74
    57ec:	add.w	r9, sp, #160	; 0xa0
    57f0:	b.n	525a <_svfprintf_r+0x562>
    57f2:	add	r2, sp, #108	; 0x6c
    57f4:	ldr	r1, [sp, #12]
    57f6:	ldr	r0, [sp, #20]
    57f8:	bl	6268 <__ssprint_r>
    57fc:	cmp	r0, #0
    57fe:	beq.w	52f4 <_svfprintf_r+0x5fc>
    5802:	b.w	4ee4 <_svfprintf_r+0x1ec>
    5806:	ldr	r1, [sp, #36]	; 0x24
    5808:	cmp.w	r8, #0
    580c:	ldr	r4, [r1, #0]
    580e:	strb.w	r3, [sp, #79]	; 0x4f
    5812:	add.w	r7, r1, #4
    5816:	mov.w	r5, #0
    581a:	blt.w	5f00 <_svfprintf_r+0x1208>
    581e:	orrs.w	r2, r4, r5
    5822:	str	r7, [sp, #36]	; 0x24
    5824:	bic.w	fp, fp, #128	; 0x80
    5828:	mov	r7, r3
    582a:	bne.w	5042 <_svfprintf_r+0x34a>
    582e:	cmp.w	r8, #0
    5832:	beq.w	559c <_svfprintf_r+0x8a4>
    5836:	movs	r4, #0
    5838:	b.n	53a8 <_svfprintf_r+0x6b0>
    583a:	add	r2, sp, #108	; 0x6c
    583c:	ldr	r1, [sp, #12]
    583e:	ldr	r0, [sp, #20]
    5840:	bl	6268 <__ssprint_r>
    5844:	cmp	r0, #0
    5846:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    584a:	ldr	r3, [sp, #116]	; 0x74
    584c:	add.w	r9, sp, #160	; 0xa0
    5850:	b.n	5234 <_svfprintf_r+0x53c>
    5852:	add	r2, sp, #108	; 0x6c
    5854:	ldr	r1, [sp, #12]
    5856:	ldr	r0, [sp, #20]
    5858:	bl	6268 <__ssprint_r>
    585c:	cmp	r0, #0
    585e:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5862:	ldr	r3, [sp, #116]	; 0x74
    5864:	add.w	r9, sp, #160	; 0xa0
    5868:	b.n	5198 <_svfprintf_r+0x4a0>
    586a:	add	r2, sp, #108	; 0x6c
    586c:	ldr	r1, [sp, #12]
    586e:	ldr	r0, [sp, #20]
    5870:	bl	6268 <__ssprint_r>
    5874:	cmp	r0, #0
    5876:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    587a:	ldr	r3, [sp, #116]	; 0x74
    587c:	add.w	r9, sp, #160	; 0xa0
    5880:	b.n	51b8 <_svfprintf_r+0x4c0>
    5882:	cmp.w	r8, #0
    5886:	strb.w	r7, [sp, #79]	; 0x4f
    588a:	blt.w	5d6c <_svfprintf_r+0x1074>
    588e:	orrs.w	r3, r4, r5
    5892:	bic.w	fp, fp, #128	; 0x80
    5896:	bne.w	5422 <_svfprintf_r+0x72a>
    589a:	cmp.w	r8, #0
    589e:	beq.w	559a <_svfprintf_r+0x8a2>
    58a2:	movs	r7, #0
    58a4:	b.n	55f6 <_svfprintf_r+0x8fe>
    58a6:	ldr	r4, [sp, #84]	; 0x54
    58a8:	cmp	r4, #0
    58aa:	ble.w	5d70 <_svfprintf_r+0x1078>
    58ae:	ldr	r2, [sp, #56]	; 0x38
    58b0:	ldr	r1, [sp, #52]	; 0x34
    58b2:	cmp	r2, r1
    58b4:	it	ge
    58b6:	movge	r2, r1
    58b8:	cmp	r2, #0
    58ba:	mov	r4, r2
    58bc:	ble.n	58da <_svfprintf_r+0xbe2>
    58be:	ldr	r2, [sp, #112]	; 0x70
    58c0:	str.w	r6, [r9]
    58c4:	adds	r2, #1
    58c6:	add	r3, r4
    58c8:	cmp	r2, #7
    58ca:	str	r3, [sp, #116]	; 0x74
    58cc:	str.w	r4, [r9, #4]
    58d0:	str	r2, [sp, #112]	; 0x70
    58d2:	bgt.w	5fba <_svfprintf_r+0x12c2>
    58d6:	add.w	r9, r9, #8
    58da:	ldr	r2, [sp, #56]	; 0x38
    58dc:	cmp	r4, #0
    58de:	it	ge
    58e0:	subge	r2, r2, r4
    58e2:	cmp	r2, #0
    58e4:	mov	r4, r2
    58e6:	ble.w	5acc <_svfprintf_r+0xdd4>
    58ea:	cmp	r4, #16
    58ec:	ldr	r2, [sp, #112]	; 0x70
    58ee:	ldr	r7, [pc, #772]	; (5bf4 <_svfprintf_r+0xefc>)
    58f0:	ble.w	5d26 <_svfprintf_r+0x102e>
    58f4:	mov	r1, r9
    58f6:	movs	r5, #16
    58f8:	mov	r9, r6
    58fa:	ldr.w	r8, [sp, #20]
    58fe:	ldr	r6, [sp, #12]
    5900:	b.n	590c <_svfprintf_r+0xc14>
    5902:	adds	r1, #8
    5904:	subs	r4, #16
    5906:	cmp	r4, #16
    5908:	ble.w	5d22 <_svfprintf_r+0x102a>
    590c:	adds	r2, #1
    590e:	adds	r3, #16
    5910:	cmp	r2, #7
    5912:	str	r3, [sp, #116]	; 0x74
    5914:	str	r2, [sp, #112]	; 0x70
    5916:	str	r7, [r1, #0]
    5918:	str	r5, [r1, #4]
    591a:	ble.n	5902 <_svfprintf_r+0xc0a>
    591c:	add	r2, sp, #108	; 0x6c
    591e:	mov	r1, r6
    5920:	mov	r0, r8
    5922:	bl	6268 <__ssprint_r>
    5926:	cmp	r0, #0
    5928:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    592c:	ldr	r3, [sp, #116]	; 0x74
    592e:	ldr	r2, [sp, #112]	; 0x70
    5930:	add	r1, sp, #160	; 0xa0
    5932:	b.n	5904 <_svfprintf_r+0xc0c>
    5934:	add	r2, sp, #108	; 0x6c
    5936:	ldr	r1, [sp, #12]
    5938:	ldr	r0, [sp, #20]
    593a:	bl	6268 <__ssprint_r>
    593e:	cmp	r0, #0
    5940:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5944:	ldrb.w	r7, [sp, #79]	; 0x4f
    5948:	ldr	r3, [sp, #116]	; 0x74
    594a:	add.w	r9, sp, #160	; 0xa0
    594e:	b.n	5178 <_svfprintf_r+0x480>
    5950:	ands.w	r2, fp, #16
    5954:	bne.w	5806 <_svfprintf_r+0xb0e>
    5958:	ands.w	r3, fp, #64	; 0x40
    595c:	beq.w	5806 <_svfprintf_r+0xb0e>
    5960:	ldr	r1, [sp, #36]	; 0x24
    5962:	strb.w	r2, [sp, #79]	; 0x4f
    5966:	mov	r3, r1
    5968:	cmp.w	r8, #0
    596c:	add.w	r3, r3, #4
    5970:	ldrh	r4, [r1, #0]
    5972:	mov.w	r5, #0
    5976:	blt.w	5ea2 <_svfprintf_r+0x11aa>
    597a:	orrs.w	r1, r4, r5
    597e:	bic.w	fp, fp, #128	; 0x80
    5982:	str	r3, [sp, #36]	; 0x24
    5984:	mov	r7, r2
    5986:	bne.w	5042 <_svfprintf_r+0x34a>
    598a:	b.n	582e <_svfprintf_r+0xb36>
    598c:	subs	r4, r1, #1
    598e:	cmp	r4, #0
    5990:	ble.w	57c0 <_svfprintf_r+0xac8>
    5994:	cmp	r4, #16
    5996:	ldr	r7, [pc, #604]	; (5bf4 <_svfprintf_r+0xefc>)
    5998:	ble.n	59e0 <_svfprintf_r+0xce8>
    599a:	movs	r5, #16
    599c:	ldr	r6, [sp, #20]
    599e:	ldr.w	r8, [sp, #12]
    59a2:	b.n	59ae <_svfprintf_r+0xcb6>
    59a4:	subs	r4, #16
    59a6:	cmp	r4, #16
    59a8:	add.w	r9, r9, #8
    59ac:	ble.n	59e0 <_svfprintf_r+0xce8>
    59ae:	adds	r2, #1
    59b0:	adds	r3, #16
    59b2:	cmp	r2, #7
    59b4:	str	r3, [sp, #116]	; 0x74
    59b6:	str	r2, [sp, #112]	; 0x70
    59b8:	str.w	r7, [r9]
    59bc:	str.w	r5, [r9, #4]
    59c0:	ble.n	59a4 <_svfprintf_r+0xcac>
    59c2:	add	r2, sp, #108	; 0x6c
    59c4:	mov	r1, r8
    59c6:	mov	r0, r6
    59c8:	bl	6268 <__ssprint_r>
    59cc:	cmp	r0, #0
    59ce:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    59d2:	subs	r4, #16
    59d4:	cmp	r4, #16
    59d6:	ldr	r3, [sp, #116]	; 0x74
    59d8:	ldr	r2, [sp, #112]	; 0x70
    59da:	add.w	r9, sp, #160	; 0xa0
    59de:	bgt.n	59ae <_svfprintf_r+0xcb6>
    59e0:	adds	r2, #1
    59e2:	add	r3, r4
    59e4:	cmp	r2, #7
    59e6:	str	r3, [sp, #116]	; 0x74
    59e8:	str	r2, [sp, #112]	; 0x70
    59ea:	str.w	r7, [r9]
    59ee:	str.w	r4, [r9, #4]
    59f2:	ble.w	57bc <_svfprintf_r+0xac4>
    59f6:	add	r2, sp, #108	; 0x6c
    59f8:	ldr	r1, [sp, #12]
    59fa:	ldr	r0, [sp, #20]
    59fc:	bl	6268 <__ssprint_r>
    5a00:	cmp	r0, #0
    5a02:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5a06:	ldr	r3, [sp, #116]	; 0x74
    5a08:	ldr	r2, [sp, #112]	; 0x70
    5a0a:	add.w	r9, sp, #160	; 0xa0
    5a0e:	b.n	57c0 <_svfprintf_r+0xac8>
    5a10:	tst.w	fp, #16
    5a14:	bne.n	5a7e <_svfprintf_r+0xd86>
    5a16:	tst.w	fp, #64	; 0x40
    5a1a:	beq.n	5a7e <_svfprintf_r+0xd86>
    5a1c:	ldr	r1, [sp, #36]	; 0x24
    5a1e:	ldrsh.w	r4, [r1]
    5a22:	adds	r1, #4
    5a24:	asrs	r5, r4, #31
    5a26:	mov	r2, r4
    5a28:	mov	r3, r5
    5a2a:	str	r1, [sp, #36]	; 0x24
    5a2c:	b.w	5020 <_svfprintf_r+0x328>
    5a30:	adds	r2, #1
    5a32:	add	r3, r4
    5a34:	cmp	r2, #7
    5a36:	str	r3, [sp, #116]	; 0x74
    5a38:	str	r2, [sp, #112]	; 0x70
    5a3a:	str.w	r7, [r9]
    5a3e:	str.w	r4, [r9, #4]
    5a42:	ble.w	5256 <_svfprintf_r+0x55e>
    5a46:	b.n	57da <_svfprintf_r+0xae2>
    5a48:	ldr	r1, [sp, #36]	; 0x24
    5a4a:	cmp.w	r8, #0
    5a4e:	ldr	r4, [r1, #0]
    5a50:	strb.w	r3, [sp, #79]	; 0x4f
    5a54:	add.w	r7, r1, #4
    5a58:	mov.w	r5, #0
    5a5c:	blt.w	5bea <_svfprintf_r+0xef2>
    5a60:	orrs.w	r2, r4, r5
    5a64:	bic.w	fp, fp, #128	; 0x80
    5a68:	str	r7, [sp, #36]	; 0x24
    5a6a:	beq.w	55d2 <_svfprintf_r+0x8da>
    5a6e:	mov	r7, r3
    5a70:	b.w	4f3c <_svfprintf_r+0x244>
    5a74:	ldr	r4, [r3, #0]
    5a76:	adds	r3, #4
    5a78:	str	r3, [sp, #36]	; 0x24
    5a7a:	movs	r5, #0
    5a7c:	b.n	53ec <_svfprintf_r+0x6f4>
    5a7e:	ldr	r2, [sp, #36]	; 0x24
    5a80:	ldr	r4, [r2, #0]
    5a82:	mov	r3, r2
    5a84:	adds	r3, #4
    5a86:	asrs	r5, r4, #31
    5a88:	mov	r2, r4
    5a8a:	str	r3, [sp, #36]	; 0x24
    5a8c:	cmp	r2, #0
    5a8e:	mov	r3, r5
    5a90:	sbcs.w	r3, r3, #0
    5a94:	bge.w	502a <_svfprintf_r+0x332>
    5a98:	negs	r4, r4
    5a9a:	mov.w	r7, #45	; 0x2d
    5a9e:	sbc.w	r5, r5, r5, lsl #1
    5aa2:	cmp.w	r8, #0
    5aa6:	strb.w	r7, [sp, #79]	; 0x4f
    5aaa:	blt.w	5042 <_svfprintf_r+0x34a>
    5aae:	bic.w	fp, fp, #128	; 0x80
    5ab2:	b.w	5042 <_svfprintf_r+0x34a>
    5ab6:	add	r2, sp, #108	; 0x6c
    5ab8:	ldr	r1, [sp, #12]
    5aba:	ldr	r0, [sp, #20]
    5abc:	bl	6268 <__ssprint_r>
    5ac0:	cmp	r0, #0
    5ac2:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5ac6:	ldr	r3, [sp, #116]	; 0x74
    5ac8:	add.w	r9, sp, #160	; 0xa0
    5acc:	ldr	r1, [sp, #56]	; 0x38
    5ace:	ldr	r2, [sp, #84]	; 0x54
    5ad0:	add	r1, r6
    5ad2:	mov	r5, r1
    5ad4:	ldr	r1, [sp, #52]	; 0x34
    5ad6:	cmp	r2, r1
    5ad8:	blt.n	5b6a <_svfprintf_r+0xe72>
    5ada:	tst.w	fp, #1
    5ade:	bne.n	5b6a <_svfprintf_r+0xe72>
    5ae0:	ldr	r0, [sp, #52]	; 0x34
    5ae2:	add	r6, r0
    5ae4:	subs	r4, r6, r5
    5ae6:	subs	r2, r0, r2
    5ae8:	cmp	r4, r2
    5aea:	it	ge
    5aec:	movge	r4, r2
    5aee:	cmp	r4, #0
    5af0:	mov	r6, r4
    5af2:	ble.n	5b10 <_svfprintf_r+0xe18>
    5af4:	ldr	r1, [sp, #112]	; 0x70
    5af6:	str.w	r5, [r9]
    5afa:	adds	r1, #1
    5afc:	add	r3, r4
    5afe:	cmp	r1, #7
    5b00:	str	r3, [sp, #116]	; 0x74
    5b02:	str.w	r4, [r9, #4]
    5b06:	str	r1, [sp, #112]	; 0x70
    5b08:	bgt.w	600c <_svfprintf_r+0x1314>
    5b0c:	add.w	r9, r9, #8
    5b10:	cmp	r6, #0
    5b12:	ite	ge
    5b14:	subge	r4, r2, r6
    5b16:	movlt	r4, r2
    5b18:	cmp	r4, #0
    5b1a:	ble.w	525a <_svfprintf_r+0x562>
    5b1e:	cmp	r4, #16
    5b20:	ldr	r2, [sp, #112]	; 0x70
    5b22:	ldr	r7, [pc, #208]	; (5bf4 <_svfprintf_r+0xefc>)
    5b24:	ble.n	5a30 <_svfprintf_r+0xd38>
    5b26:	movs	r5, #16
    5b28:	ldr	r6, [sp, #20]
    5b2a:	ldr.w	r8, [sp, #12]
    5b2e:	b.n	5b3c <_svfprintf_r+0xe44>
    5b30:	add.w	r9, r9, #8
    5b34:	subs	r4, #16
    5b36:	cmp	r4, #16
    5b38:	ble.w	5a30 <_svfprintf_r+0xd38>
    5b3c:	adds	r2, #1
    5b3e:	adds	r3, #16
    5b40:	cmp	r2, #7
    5b42:	str	r3, [sp, #116]	; 0x74
    5b44:	str	r2, [sp, #112]	; 0x70
    5b46:	str.w	r7, [r9]
    5b4a:	str.w	r5, [r9, #4]
    5b4e:	ble.n	5b30 <_svfprintf_r+0xe38>
    5b50:	add	r2, sp, #108	; 0x6c
    5b52:	mov	r1, r8
    5b54:	mov	r0, r6
    5b56:	bl	6268 <__ssprint_r>
    5b5a:	cmp	r0, #0
    5b5c:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5b60:	ldr	r3, [sp, #116]	; 0x74
    5b62:	ldr	r2, [sp, #112]	; 0x70
    5b64:	add.w	r9, sp, #160	; 0xa0
    5b68:	b.n	5b34 <_svfprintf_r+0xe3c>
    5b6a:	ldr	r1, [sp, #112]	; 0x70
    5b6c:	ldr	r4, [sp, #60]	; 0x3c
    5b6e:	ldr	r0, [sp, #64]	; 0x40
    5b70:	str.w	r0, [r9]
    5b74:	adds	r1, #1
    5b76:	add	r3, r4
    5b78:	cmp	r1, #7
    5b7a:	str	r3, [sp, #116]	; 0x74
    5b7c:	str.w	r4, [r9, #4]
    5b80:	str	r1, [sp, #112]	; 0x70
    5b82:	bgt.w	5fd2 <_svfprintf_r+0x12da>
    5b86:	add.w	r9, r9, #8
    5b8a:	b.n	5ae0 <_svfprintf_r+0xde8>
    5b8c:	tst.w	fp, #1
    5b90:	bne.w	576c <_svfprintf_r+0xa74>
    5b94:	cmp	r2, #7
    5b96:	ble.w	57bc <_svfprintf_r+0xac4>
    5b9a:	b.n	59f6 <_svfprintf_r+0xcfe>
    5b9c:	add	r2, sp, #108	; 0x6c
    5b9e:	ldr	r1, [sp, #12]
    5ba0:	ldr	r0, [sp, #20]
    5ba2:	bl	6268 <__ssprint_r>
    5ba6:	cmp	r0, #0
    5ba8:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5bac:	ldr	r3, [sp, #116]	; 0x74
    5bae:	ldr	r2, [sp, #112]	; 0x70
    5bb0:	add.w	r9, sp, #160	; 0xa0
    5bb4:	b.n	5776 <_svfprintf_r+0xa7e>
    5bb6:	add	r2, sp, #108	; 0x6c
    5bb8:	ldr	r1, [sp, #12]
    5bba:	ldr	r0, [sp, #20]
    5bbc:	bl	6268 <__ssprint_r>
    5bc0:	cmp	r0, #0
    5bc2:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5bc6:	ldr	r3, [sp, #116]	; 0x74
    5bc8:	ldr	r2, [sp, #112]	; 0x70
    5bca:	add.w	r9, sp, #160	; 0xa0
    5bce:	b.n	5794 <_svfprintf_r+0xa9c>
    5bd0:	add	r2, sp, #108	; 0x6c
    5bd2:	ldr	r1, [sp, #12]
    5bd4:	ldr	r0, [sp, #20]
    5bd6:	bl	6268 <__ssprint_r>
    5bda:	cmp	r0, #0
    5bdc:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5be0:	ldr	r3, [sp, #116]	; 0x74
    5be2:	add.w	r9, sp, #160	; 0xa0
    5be6:	b.w	51c0 <_svfprintf_r+0x4c8>
    5bea:	str	r7, [sp, #36]	; 0x24
    5bec:	movs	r7, #0
    5bee:	b.w	4f3c <_svfprintf_r+0x244>
    5bf2:	nop
    5bf4:	.word	0x20000690
    5bf8:	tst.w	fp, #16
    5bfc:	bne.n	5c16 <_svfprintf_r+0xf1e>
    5bfe:	tst.w	fp, #64	; 0x40
    5c02:	beq.n	5c16 <_svfprintf_r+0xf1e>
    5c04:	ldr	r2, [sp, #36]	; 0x24
    5c06:	ldr	r3, [r2, #0]
    5c08:	adds	r2, #4
    5c0a:	str	r2, [sp, #36]	; 0x24
    5c0c:	ldrh.w	r2, [sp, #24]
    5c10:	strh	r2, [r3, #0]
    5c12:	b.w	4d44 <_svfprintf_r+0x4c>
    5c16:	ldr	r2, [sp, #36]	; 0x24
    5c18:	ldr	r3, [r2, #0]
    5c1a:	adds	r2, #4
    5c1c:	str	r2, [sp, #36]	; 0x24
    5c1e:	ldr	r2, [sp, #24]
    5c20:	str	r2, [r3, #0]
    5c22:	b.w	4d44 <_svfprintf_r+0x4c>
    5c26:	vcmp.f64	d8, d8
    5c2a:	vmrs	APSR_nzcv, fpscr
    5c2e:	bvs.w	616e <_svfprintf_r+0x1476>
    5c32:	ldr	r3, [sp, #48]	; 0x30
    5c34:	cmp.w	r8, #4294967295
    5c38:	bic.w	r5, r3, #32
    5c3c:	beq.w	608a <_svfprintf_r+0x1392>
    5c40:	cmp	r5, #71	; 0x47
    5c42:	beq.w	5e92 <_svfprintf_r+0x119a>
    5c46:	orr.w	r3, fp, #256	; 0x100
    5c4a:	str	r3, [sp, #40]	; 0x28
    5c4c:	vmov	r3, s17
    5c50:	cmp	r3, #0
    5c52:	blt.w	6090 <_svfprintf_r+0x1398>
    5c56:	vmov.f64	d10, d8
    5c5a:	movs	r7, #0
    5c5c:	ldr	r3, [sp, #48]	; 0x30
    5c5e:	cmp	r3, #102	; 0x66
    5c60:	beq.w	6068 <_svfprintf_r+0x1370>
    5c64:	cmp	r3, #70	; 0x46
    5c66:	beq.w	5e42 <_svfprintf_r+0x114a>
    5c6a:	vmov.f64	d0, d10
    5c6e:	cmp	r5, #69	; 0x45
    5c70:	ite	eq
    5c72:	addeq.w	r4, r8, #1
    5c76:	movne	r4, r8
    5c78:	add	r2, sp, #100	; 0x64
    5c7a:	add	r3, sp, #88	; 0x58
    5c7c:	str	r2, [sp, #4]
    5c7e:	str	r3, [sp, #0]
    5c80:	mov	r2, r4
    5c82:	add	r3, sp, #84	; 0x54
    5c84:	movs	r1, #2
    5c86:	ldr	r0, [sp, #20]
    5c88:	bl	4070 <_dtoa_r>
    5c8c:	ldr	r3, [sp, #48]	; 0x30
    5c8e:	cmp	r3, #103	; 0x67
    5c90:	mov	r6, r0
    5c92:	bne.w	60b2 <_svfprintf_r+0x13ba>
    5c96:	tst.w	fp, #1
    5c9a:	beq.w	616a <_svfprintf_r+0x1472>
    5c9e:	adds	r1, r6, r4
    5ca0:	vcmp.f64	d10, #0.0
    5ca4:	vmrs	APSR_nzcv, fpscr
    5ca8:	beq.w	5fb6 <_svfprintf_r+0x12be>
    5cac:	ldr	r3, [sp, #100]	; 0x64
    5cae:	cmp	r1, r3
    5cb0:	bls.n	5cc0 <_svfprintf_r+0xfc8>
    5cb2:	movs	r0, #48	; 0x30
    5cb4:	adds	r2, r3, #1
    5cb6:	str	r2, [sp, #100]	; 0x64
    5cb8:	strb	r0, [r3, #0]
    5cba:	ldr	r3, [sp, #100]	; 0x64
    5cbc:	cmp	r1, r3
    5cbe:	bhi.n	5cb4 <_svfprintf_r+0xfbc>
    5cc0:	subs	r3, r3, r6
    5cc2:	cmp	r5, #71	; 0x47
    5cc4:	str	r3, [sp, #52]	; 0x34
    5cc6:	beq.w	5f08 <_svfprintf_r+0x1210>
    5cca:	ldr	r3, [sp, #48]	; 0x30
    5ccc:	cmp	r3, #101	; 0x65
    5cce:	ble.w	60d0 <_svfprintf_r+0x13d8>
    5cd2:	ldr	r3, [sp, #48]	; 0x30
    5cd4:	cmp	r3, #102	; 0x66
    5cd6:	ldr	r3, [sp, #84]	; 0x54
    5cd8:	beq.w	60d4 <_svfprintf_r+0x13dc>
    5cdc:	str	r3, [sp, #56]	; 0x38
    5cde:	ldr	r2, [sp, #56]	; 0x38
    5ce0:	ldr	r1, [sp, #52]	; 0x34
    5ce2:	cmp	r2, r1
    5ce4:	blt.w	6098 <_svfprintf_r+0x13a0>
    5ce8:	tst.w	fp, #1
    5cec:	bne.w	6158 <_svfprintf_r+0x1460>
    5cf0:	bic.w	r3, r2, r2, asr #31
    5cf4:	str	r2, [sp, #32]
    5cf6:	movs	r2, #103	; 0x67
    5cf8:	str	r2, [sp, #48]	; 0x30
    5cfa:	cmp	r7, #0
    5cfc:	bne.w	5eec <_svfprintf_r+0x11f4>
    5d00:	mov	r8, r7
    5d02:	str	r3, [sp, #16]
    5d04:	ldr.w	fp, [sp, #40]	; 0x28
    5d08:	ldrb.w	r7, [sp, #79]	; 0x4f
    5d0c:	b.w	50dc <_svfprintf_r+0x3e4>
    5d10:	bic.w	r7, r7, #7
    5d14:	add.w	r3, r7, #8
    5d18:	vldr	d8, [r7]
    5d1c:	str	r3, [sp, #36]	; 0x24
    5d1e:	b.w	509e <_svfprintf_r+0x3a6>
    5d22:	mov	r6, r9
    5d24:	mov	r9, r1
    5d26:	adds	r2, #1
    5d28:	add	r3, r4
    5d2a:	cmp	r2, #7
    5d2c:	str	r3, [sp, #116]	; 0x74
    5d2e:	str	r2, [sp, #112]	; 0x70
    5d30:	str.w	r7, [r9]
    5d34:	str.w	r4, [r9, #4]
    5d38:	bgt.w	5ab6 <_svfprintf_r+0xdbe>
    5d3c:	add.w	r9, r9, #8
    5d40:	b.n	5acc <_svfprintf_r+0xdd4>
    5d42:	movs	r7, #0
    5d44:	cmp	r8, r7
    5d46:	strb.w	r7, [sp, #79]	; 0x4f
    5d4a:	blt.w	55f6 <_svfprintf_r+0x8fe>
    5d4e:	bic.w	fp, fp, #128	; 0x80
    5d52:	b.n	5592 <_svfprintf_r+0x89a>
    5d54:	add	r2, sp, #108	; 0x6c
    5d56:	ldr	r1, [sp, #12]
    5d58:	ldr	r0, [sp, #20]
    5d5a:	bl	6268 <__ssprint_r>
    5d5e:	cmp	r0, #0
    5d60:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5d64:	ldr	r3, [sp, #116]	; 0x74
    5d66:	add.w	r9, sp, #160	; 0xa0
    5d6a:	b.n	5634 <_svfprintf_r+0x93c>
    5d6c:	ldr	r7, [sp, #36]	; 0x24
    5d6e:	b.n	55e8 <_svfprintf_r+0x8f0>
    5d70:	ldr	r2, [sp, #112]	; 0x70
    5d72:	ldr	r1, [pc, #740]	; (6058 <_svfprintf_r+0x1360>)
    5d74:	str.w	r1, [r9]
    5d78:	adds	r2, #1
    5d7a:	adds	r3, #1
    5d7c:	movs	r1, #1
    5d7e:	cmp	r2, #7
    5d80:	str	r3, [sp, #116]	; 0x74
    5d82:	str	r2, [sp, #112]	; 0x70
    5d84:	str.w	r1, [r9, #4]
    5d88:	bgt.n	5e78 <_svfprintf_r+0x1180>
    5d8a:	add.w	r9, r9, #8
    5d8e:	cbnz	r4, 5d9c <_svfprintf_r+0x10a4>
    5d90:	ldr	r2, [sp, #52]	; 0x34
    5d92:	cbnz	r2, 5d9c <_svfprintf_r+0x10a4>
    5d94:	tst.w	fp, #1
    5d98:	beq.w	525a <_svfprintf_r+0x562>
    5d9c:	ldr	r2, [sp, #112]	; 0x70
    5d9e:	ldr	r0, [sp, #60]	; 0x3c
    5da0:	ldr	r1, [sp, #64]	; 0x40
    5da2:	str.w	r1, [r9]
    5da6:	adds	r2, #1
    5da8:	add	r3, r0
    5daa:	cmp	r2, #7
    5dac:	str	r3, [sp, #116]	; 0x74
    5dae:	str.w	r0, [r9, #4]
    5db2:	str	r2, [sp, #112]	; 0x70
    5db4:	bgt.w	6124 <_svfprintf_r+0x142c>
    5db8:	add.w	r9, r9, #8
    5dbc:	negs	r4, r4
    5dbe:	cmp	r4, #0
    5dc0:	ble.w	5ed2 <_svfprintf_r+0x11da>
    5dc4:	cmp	r4, #16
    5dc6:	ldr	r7, [pc, #660]	; (605c <_svfprintf_r+0x1364>)
    5dc8:	ble.w	5ff0 <_svfprintf_r+0x12f8>
    5dcc:	mov	r1, r9
    5dce:	movs	r5, #16
    5dd0:	mov	r9, r6
    5dd2:	ldr.w	r8, [sp, #20]
    5dd6:	ldr	r6, [sp, #12]
    5dd8:	b.n	5de4 <_svfprintf_r+0x10ec>
    5dda:	adds	r1, #8
    5ddc:	subs	r4, #16
    5dde:	cmp	r4, #16
    5de0:	ble.w	5fec <_svfprintf_r+0x12f4>
    5de4:	adds	r2, #1
    5de6:	adds	r3, #16
    5de8:	cmp	r2, #7
    5dea:	str	r3, [sp, #116]	; 0x74
    5dec:	str	r2, [sp, #112]	; 0x70
    5dee:	str	r7, [r1, #0]
    5df0:	str	r5, [r1, #4]
    5df2:	ble.n	5dda <_svfprintf_r+0x10e2>
    5df4:	add	r2, sp, #108	; 0x6c
    5df6:	mov	r1, r6
    5df8:	mov	r0, r8
    5dfa:	bl	6268 <__ssprint_r>
    5dfe:	cmp	r0, #0
    5e00:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5e04:	ldr	r3, [sp, #116]	; 0x74
    5e06:	ldr	r2, [sp, #112]	; 0x70
    5e08:	add	r1, sp, #160	; 0xa0
    5e0a:	b.n	5ddc <_svfprintf_r+0x10e4>
    5e0c:	add	r2, sp, #108	; 0x6c
    5e0e:	ldr	r1, [sp, #12]
    5e10:	ldr	r0, [sp, #20]
    5e12:	bl	6268 <__ssprint_r>
    5e16:	cmp	r0, #0
    5e18:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5e1c:	ldr	r3, [sp, #116]	; 0x74
    5e1e:	add.w	r9, sp, #160	; 0xa0
    5e22:	b.n	5664 <_svfprintf_r+0x96c>
    5e24:	movs	r1, #64	; 0x40
    5e26:	ldr	r0, [sp, #20]
    5e28:	bl	27d8 <_malloc_r>
    5e2c:	ldr	r2, [sp, #12]
    5e2e:	str	r0, [r2, #0]
    5e30:	str	r0, [r2, #16]
    5e32:	cmp	r0, #0
    5e34:	beq.w	6212 <_svfprintf_r+0x151a>
    5e38:	ldr	r2, [sp, #12]
    5e3a:	movs	r3, #64	; 0x40
    5e3c:	str	r3, [r2, #20]
    5e3e:	b.w	4d2a <_svfprintf_r+0x32>
    5e42:	add	r2, sp, #100	; 0x64
    5e44:	add	r3, sp, #88	; 0x58
    5e46:	str	r2, [sp, #4]
    5e48:	str	r3, [sp, #0]
    5e4a:	mov	r2, r8
    5e4c:	add	r3, sp, #84	; 0x54
    5e4e:	movs	r1, #3
    5e50:	vmov.f64	d0, d10
    5e54:	ldr	r0, [sp, #20]
    5e56:	bl	4070 <_dtoa_r>
    5e5a:	mov	r4, r8
    5e5c:	mov	r6, r0
    5e5e:	ldr	r3, [sp, #48]	; 0x30
    5e60:	cmp	r3, #70	; 0x46
    5e62:	add.w	r1, r6, r4
    5e66:	bne.w	5ca0 <_svfprintf_r+0xfa8>
    5e6a:	ldrb	r3, [r6, #0]
    5e6c:	cmp	r3, #48	; 0x30
    5e6e:	beq.w	618c <_svfprintf_r+0x1494>
    5e72:	ldr	r4, [sp, #84]	; 0x54
    5e74:	add	r1, r4
    5e76:	b.n	5ca0 <_svfprintf_r+0xfa8>
    5e78:	add	r2, sp, #108	; 0x6c
    5e7a:	ldr	r1, [sp, #12]
    5e7c:	ldr	r0, [sp, #20]
    5e7e:	bl	6268 <__ssprint_r>
    5e82:	cmp	r0, #0
    5e84:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5e88:	ldr	r4, [sp, #84]	; 0x54
    5e8a:	ldr	r3, [sp, #116]	; 0x74
    5e8c:	add.w	r9, sp, #160	; 0xa0
    5e90:	b.n	5d8e <_svfprintf_r+0x1096>
    5e92:	cmp.w	r8, #0
    5e96:	it	eq
    5e98:	moveq.w	r8, #1
    5e9c:	b.n	5c46 <_svfprintf_r+0xf4e>
    5e9e:	str	r3, [sp, #36]	; 0x24
    5ea0:	b.n	5bec <_svfprintf_r+0xef4>
    5ea2:	str	r3, [sp, #36]	; 0x24
    5ea4:	mov	r7, r2
    5ea6:	b.w	53a0 <_svfprintf_r+0x6a8>
    5eaa:	mov	r0, r6
    5eac:	bl	3300 <strlen>
    5eb0:	mov	r8, r4
    5eb2:	mov	r3, r0
    5eb4:	str	r0, [sp, #32]
    5eb6:	b.w	557c <_svfprintf_r+0x884>
    5eba:	add	r2, sp, #108	; 0x6c
    5ebc:	ldr	r1, [sp, #12]
    5ebe:	ldr	r0, [sp, #20]
    5ec0:	bl	6268 <__ssprint_r>
    5ec4:	cmp	r0, #0
    5ec6:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5eca:	ldr	r3, [sp, #116]	; 0x74
    5ecc:	ldr	r2, [sp, #112]	; 0x70
    5ece:	add.w	r9, sp, #160	; 0xa0
    5ed2:	ldr	r0, [sp, #52]	; 0x34
    5ed4:	str.w	r6, [r9]
    5ed8:	adds	r2, #1
    5eda:	add	r3, r0
    5edc:	cmp	r2, #7
    5ede:	str	r3, [sp, #116]	; 0x74
    5ee0:	str	r2, [sp, #112]	; 0x70
    5ee2:	str.w	r0, [r9, #4]
    5ee6:	ble.w	5256 <_svfprintf_r+0x55e>
    5eea:	b.n	57da <_svfprintf_r+0xae2>
    5eec:	movs	r7, #45	; 0x2d
    5eee:	str	r3, [sp, #16]
    5ef0:	ldr.w	fp, [sp, #40]	; 0x28
    5ef4:	strb.w	r7, [sp, #79]	; 0x4f
    5ef8:	mov.w	r8, #0
    5efc:	b.w	50de <_svfprintf_r+0x3e6>
    5f00:	str	r7, [sp, #36]	; 0x24
    5f02:	mov	r7, r3
    5f04:	b.w	53a0 <_svfprintf_r+0x6a8>
    5f08:	ldr	r3, [sp, #84]	; 0x54
    5f0a:	adds	r2, r3, #3
    5f0c:	blt.n	5f14 <_svfprintf_r+0x121c>
    5f0e:	cmp	r8, r3
    5f10:	bge.w	5cdc <_svfprintf_r+0xfe4>
    5f14:	ldr	r2, [sp, #48]	; 0x30
    5f16:	subs	r2, #2
    5f18:	str	r2, [sp, #48]	; 0x30
    5f1a:	subs	r3, #1
    5f1c:	cmp	r3, #0
    5f1e:	ldrb.w	r2, [sp, #48]	; 0x30
    5f22:	str	r3, [sp, #84]	; 0x54
    5f24:	it	lt
    5f26:	neglt	r3, r3
    5f28:	strb.w	r2, [sp, #92]	; 0x5c
    5f2c:	ite	lt
    5f2e:	movlt	r2, #45	; 0x2d
    5f30:	movge	r2, #43	; 0x2b
    5f32:	cmp	r3, #9
    5f34:	strb.w	r2, [sp, #93]	; 0x5d
    5f38:	ble.w	6148 <_svfprintf_r+0x1450>
    5f3c:	add.w	r0, sp, #107	; 0x6b
    5f40:	mov	r4, r0
    5f42:	ldr	r2, [pc, #284]	; (6060 <_svfprintf_r+0x1368>)
    5f44:	smull	r2, r1, r2, r3
    5f48:	asrs	r2, r3, #31
    5f4a:	rsb	r2, r2, r1, asr #2
    5f4e:	add.w	r1, r2, r2, lsl #2
    5f52:	sub.w	r3, r3, r1, lsl #1
    5f56:	add.w	r1, r3, #48	; 0x30
    5f5a:	cmp	r2, #9
    5f5c:	mov	r3, r2
    5f5e:	strb.w	r1, [r4, #-1]!
    5f62:	bgt.n	5f42 <_svfprintf_r+0x124a>
    5f64:	mov	r1, r4
    5f66:	adds	r3, #48	; 0x30
    5f68:	uxtb	r2, r3
    5f6a:	strb.w	r2, [r1, #-1]!
    5f6e:	cmp	r0, r1
    5f70:	bls.w	6238 <_svfprintf_r+0x1540>
    5f74:	add.w	r1, sp, #94	; 0x5e
    5f78:	mov	r3, r4
    5f7a:	b.n	5f80 <_svfprintf_r+0x1288>
    5f7c:	ldrb.w	r2, [r3], #1
    5f80:	strb.w	r2, [r1], #1
    5f84:	cmp	r0, r3
    5f86:	bne.n	5f7c <_svfprintf_r+0x1284>
    5f88:	adds	r3, r0, #1
    5f8a:	subs	r3, r3, r4
    5f8c:	add.w	r2, sp, #94	; 0x5e
    5f90:	add	r3, r2
    5f92:	add	r2, sp, #92	; 0x5c
    5f94:	subs	r3, r3, r2
    5f96:	ldr	r2, [sp, #52]	; 0x34
    5f98:	str	r3, [sp, #68]	; 0x44
    5f9a:	cmp	r2, #1
    5f9c:	add	r3, r2
    5f9e:	str	r3, [sp, #32]
    5fa0:	ble.w	61a2 <_svfprintf_r+0x14aa>
    5fa4:	ldr	r3, [sp, #32]
    5fa6:	ldr	r2, [sp, #60]	; 0x3c
    5fa8:	add	r3, r2
    5faa:	movs	r2, #0
    5fac:	str	r3, [sp, #32]
    5fae:	str	r2, [sp, #56]	; 0x38
    5fb0:	bic.w	r3, r3, r3, asr #31
    5fb4:	b.n	5cfa <_svfprintf_r+0x1002>
    5fb6:	mov	r3, r1
    5fb8:	b.n	5cc0 <_svfprintf_r+0xfc8>
    5fba:	add	r2, sp, #108	; 0x6c
    5fbc:	ldr	r1, [sp, #12]
    5fbe:	ldr	r0, [sp, #20]
    5fc0:	bl	6268 <__ssprint_r>
    5fc4:	cmp	r0, #0
    5fc6:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5fca:	ldr	r3, [sp, #116]	; 0x74
    5fcc:	add.w	r9, sp, #160	; 0xa0
    5fd0:	b.n	58da <_svfprintf_r+0xbe2>
    5fd2:	add	r2, sp, #108	; 0x6c
    5fd4:	ldr	r1, [sp, #12]
    5fd6:	ldr	r0, [sp, #20]
    5fd8:	bl	6268 <__ssprint_r>
    5fdc:	cmp	r0, #0
    5fde:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    5fe2:	ldr	r2, [sp, #84]	; 0x54
    5fe4:	ldr	r3, [sp, #116]	; 0x74
    5fe6:	add.w	r9, sp, #160	; 0xa0
    5fea:	b.n	5ae0 <_svfprintf_r+0xde8>
    5fec:	mov	r6, r9
    5fee:	mov	r9, r1
    5ff0:	adds	r2, #1
    5ff2:	add	r3, r4
    5ff4:	cmp	r2, #7
    5ff6:	str	r3, [sp, #116]	; 0x74
    5ff8:	str	r2, [sp, #112]	; 0x70
    5ffa:	str.w	r7, [r9]
    5ffe:	str.w	r4, [r9, #4]
    6002:	bgt.w	5eba <_svfprintf_r+0x11c2>
    6006:	add.w	r9, r9, #8
    600a:	b.n	5ed2 <_svfprintf_r+0x11da>
    600c:	add	r2, sp, #108	; 0x6c
    600e:	ldr	r1, [sp, #12]
    6010:	ldr	r0, [sp, #20]
    6012:	bl	6268 <__ssprint_r>
    6016:	cmp	r0, #0
    6018:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    601c:	ldr	r2, [sp, #84]	; 0x54
    601e:	ldr	r1, [sp, #52]	; 0x34
    6020:	ldr	r3, [sp, #116]	; 0x74
    6022:	subs	r2, r1, r2
    6024:	add.w	r9, sp, #160	; 0xa0
    6028:	b.n	5b10 <_svfprintf_r+0xe18>
    602a:	cmp	r5, #6
    602c:	mov	r3, r5
    602e:	it	cs
    6030:	movcs	r3, #6
    6032:	str	r3, [sp, #32]
    6034:	bic.w	r3, r3, r3, asr #31
    6038:	mov	r8, r6
    603a:	str	r7, [sp, #36]	; 0x24
    603c:	str	r6, [sp, #56]	; 0x38
    603e:	mov	r7, r6
    6040:	str	r3, [sp, #16]
    6042:	ldr	r6, [pc, #32]	; (6064 <_svfprintf_r+0x136c>)
    6044:	b.w	50dc <_svfprintf_r+0x3e4>
    6048:	mov	fp, r3
    604a:	b.w	5422 <_svfprintf_r+0x72a>
    604e:	movs	r7, #45	; 0x2d
    6050:	strb.w	r7, [sp, #79]	; 0x4f
    6054:	b.w	50be <_svfprintf_r+0x3c6>
    6058:	.word	0x2000068c
    605c:	.word	0x20000690
    6060:	.word	0x66666667
    6064:	.word	0x200006d8
    6068:	add	r2, sp, #100	; 0x64
    606a:	add	r3, sp, #88	; 0x58
    606c:	str	r2, [sp, #4]
    606e:	str	r3, [sp, #0]
    6070:	movs	r1, #3
    6072:	add	r3, sp, #84	; 0x54
    6074:	mov	r2, r8
    6076:	vmov.f64	d0, d10
    607a:	ldr	r0, [sp, #20]
    607c:	bl	4070 <_dtoa_r>
    6080:	mov	r4, r8
    6082:	mov	r6, r0
    6084:	add.w	r1, r0, r8
    6088:	b.n	5e6a <_svfprintf_r+0x1172>
    608a:	mov.w	r8, #6
    608e:	b.n	5c46 <_svfprintf_r+0xf4e>
    6090:	vneg.f64	d10, d8
    6094:	movs	r7, #45	; 0x2d
    6096:	b.n	5c5c <_svfprintf_r+0xf64>
    6098:	ldr	r2, [sp, #60]	; 0x3c
    609a:	ldr	r3, [sp, #52]	; 0x34
    609c:	add	r3, r2
    609e:	ldr	r2, [sp, #56]	; 0x38
    60a0:	str	r3, [sp, #32]
    60a2:	cmp	r2, #0
    60a4:	ble.w	61b4 <_svfprintf_r+0x14bc>
    60a8:	movs	r2, #103	; 0x67
    60aa:	bic.w	r3, r3, r3, asr #31
    60ae:	str	r2, [sp, #48]	; 0x30
    60b0:	b.n	5cfa <_svfprintf_r+0x1002>
    60b2:	ldr	r3, [sp, #48]	; 0x30
    60b4:	cmp	r3, #71	; 0x47
    60b6:	bne.w	5c9e <_svfprintf_r+0xfa6>
    60ba:	tst.w	fp, #1
    60be:	bne.w	5e5e <_svfprintf_r+0x1166>
    60c2:	ldr	r3, [sp, #100]	; 0x64
    60c4:	cmp	r5, #71	; 0x47
    60c6:	sub.w	r3, r3, r6
    60ca:	str	r3, [sp, #52]	; 0x34
    60cc:	beq.w	5f08 <_svfprintf_r+0x1210>
    60d0:	ldr	r3, [sp, #84]	; 0x54
    60d2:	b.n	5f1a <_svfprintf_r+0x1222>
    60d4:	cmp	r3, #0
    60d6:	mov	r2, r3
    60d8:	str	r3, [sp, #56]	; 0x38
    60da:	ble.n	61c4 <_svfprintf_r+0x14cc>
    60dc:	cmp.w	r8, #0
    60e0:	bne.n	617a <_svfprintf_r+0x1482>
    60e2:	tst.w	fp, #1
    60e6:	bne.n	617a <_svfprintf_r+0x1482>
    60e8:	bic.w	r3, r3, r3, asr #31
    60ec:	str	r2, [sp, #32]
    60ee:	b.n	5cfa <_svfprintf_r+0x1002>
    60f0:	tst.w	fp, #1
    60f4:	mov	r7, r8
    60f6:	beq.n	6104 <_svfprintf_r+0x140c>
    60f8:	add	r6, sp, #224	; 0xe0
    60fa:	movs	r3, #48	; 0x30
    60fc:	strb.w	r3, [r6, #-65]!
    6100:	b.w	53b0 <_svfprintf_r+0x6b8>
    6104:	str.w	r8, [sp, #32]
    6108:	add	r6, sp, #160	; 0xa0
    610a:	b.w	53b6 <_svfprintf_r+0x6be>
    610e:	bic.w	r3, r5, r5, asr #31
    6112:	str	r7, [sp, #36]	; 0x24
    6114:	str	r3, [sp, #16]
    6116:	str	r5, [sp, #32]
    6118:	mov	r8, r0
    611a:	str	r0, [sp, #56]	; 0x38
    611c:	ldrb.w	r7, [sp, #79]	; 0x4f
    6120:	b.w	50dc <_svfprintf_r+0x3e4>
    6124:	add	r2, sp, #108	; 0x6c
    6126:	ldr	r1, [sp, #12]
    6128:	ldr	r0, [sp, #20]
    612a:	bl	6268 <__ssprint_r>
    612e:	cmp	r0, #0
    6130:	bne.w	4ee4 <_svfprintf_r+0x1ec>
    6134:	ldr	r4, [sp, #84]	; 0x54
    6136:	ldr	r3, [sp, #116]	; 0x74
    6138:	ldr	r2, [sp, #112]	; 0x70
    613a:	add.w	r9, sp, #160	; 0xa0
    613e:	b.n	5dbc <_svfprintf_r+0x10c4>
    6140:	mov	sl, r4
    6142:	movs	r5, #0
    6144:	b.w	4dae <_svfprintf_r+0xb6>
    6148:	adds	r3, #48	; 0x30
    614a:	movs	r2, #48	; 0x30
    614c:	strb.w	r3, [sp, #95]	; 0x5f
    6150:	strb.w	r2, [sp, #94]	; 0x5e
    6154:	add	r3, sp, #96	; 0x60
    6156:	b.n	5f92 <_svfprintf_r+0x129a>
    6158:	ldr	r2, [sp, #60]	; 0x3c
    615a:	ldr	r3, [sp, #56]	; 0x38
    615c:	add	r3, r2
    615e:	movs	r2, #103	; 0x67
    6160:	str	r3, [sp, #32]
    6162:	str	r2, [sp, #48]	; 0x30
    6164:	bic.w	r3, r3, r3, asr #31
    6168:	b.n	5cfa <_svfprintf_r+0x1002>
    616a:	ldr	r3, [sp, #100]	; 0x64
    616c:	b.n	5cc0 <_svfprintf_r+0xfc8>
    616e:	ldr	r6, [pc, #240]	; (6260 <_svfprintf_r+0x1568>)
    6170:	ldr	r3, [pc, #240]	; (6264 <_svfprintf_r+0x156c>)
    6172:	ldrb.w	r7, [sp, #79]	; 0x4f
    6176:	b.w	50c2 <_svfprintf_r+0x3ca>
    617a:	ldr	r3, [sp, #56]	; 0x38
    617c:	ldr	r2, [sp, #60]	; 0x3c
    617e:	adds	r5, r3, r2
    6180:	add.w	r3, r5, r8
    6184:	str	r3, [sp, #32]
    6186:	bic.w	r3, r3, r3, asr #31
    618a:	b.n	5cfa <_svfprintf_r+0x1002>
    618c:	vcmp.f64	d10, #0.0
    6190:	vmrs	APSR_nzcv, fpscr
    6194:	beq.w	5e72 <_svfprintf_r+0x117a>
    6198:	rsb	r4, r4, #1
    619c:	str	r4, [sp, #84]	; 0x54
    619e:	add	r1, r4
    61a0:	b.n	5ca0 <_svfprintf_r+0xfa8>
    61a2:	ands.w	r3, fp, #1
    61a6:	bne.w	5fa4 <_svfprintf_r+0x12ac>
    61aa:	str	r3, [sp, #56]	; 0x38
    61ac:	ldr	r3, [sp, #32]
    61ae:	bic.w	r3, r3, r3, asr #31
    61b2:	b.n	5cfa <_svfprintf_r+0x1002>
    61b4:	ldr	r3, [sp, #56]	; 0x38
    61b6:	ldr	r2, [sp, #32]
    61b8:	rsb	r3, r3, #1
    61bc:	add	r2, r3
    61be:	mov	r3, r2
    61c0:	str	r2, [sp, #32]
    61c2:	b.n	60a8 <_svfprintf_r+0x13b0>
    61c4:	cmp.w	r8, #0
    61c8:	bne.n	61d0 <_svfprintf_r+0x14d8>
    61ca:	tst.w	fp, #1
    61ce:	beq.n	61e0 <_svfprintf_r+0x14e8>
    61d0:	ldr	r3, [sp, #60]	; 0x3c
    61d2:	adds	r5, r3, #1
    61d4:	add.w	r3, r5, r8
    61d8:	str	r3, [sp, #32]
    61da:	bic.w	r3, r3, r3, asr #31
    61de:	b.n	5cfa <_svfprintf_r+0x1002>
    61e0:	movs	r3, #1
    61e2:	str	r3, [sp, #32]
    61e4:	b.n	5cfa <_svfprintf_r+0x1002>
    61e6:	ldr	r0, [sp, #36]	; 0x24
    61e8:	ldrb.w	r3, [sl, #1]
    61ec:	ldr	r5, [r0, #0]
    61ee:	adds	r0, #4
    61f0:	cmp	r5, #0
    61f2:	str	r0, [sp, #36]	; 0x24
    61f4:	mov	sl, r4
    61f6:	bge.w	4daa <_svfprintf_r+0xb2>
    61fa:	mov.w	r5, #4294967295
    61fe:	b.w	4daa <_svfprintf_r+0xb2>
    6202:	strb.w	r1, [sp, #79]	; 0x4f
    6206:	b.w	5524 <_svfprintf_r+0x82c>
    620a:	strb.w	r1, [sp, #79]	; 0x4f
    620e:	b.w	55b0 <_svfprintf_r+0x8b8>
    6212:	ldr	r2, [sp, #20]
    6214:	movs	r3, #12
    6216:	str	r3, [r2, #0]
    6218:	mov.w	r0, #4294967295
    621c:	b.w	4ef6 <_svfprintf_r+0x1fe>
    6220:	strb.w	r1, [sp, #79]	; 0x4f
    6224:	b.w	53d0 <_svfprintf_r+0x6d8>
    6228:	strb.w	r1, [sp, #79]	; 0x4f
    622c:	b.w	5376 <_svfprintf_r+0x67e>
    6230:	strb.w	r1, [sp, #79]	; 0x4f
    6234:	b.w	54dc <_svfprintf_r+0x7e4>
    6238:	add.w	r3, sp, #94	; 0x5e
    623c:	b.n	5f92 <_svfprintf_r+0x129a>
    623e:	strb.w	r1, [sp, #79]	; 0x4f
    6242:	b.w	4f0a <_svfprintf_r+0x212>
    6246:	strb.w	r1, [sp, #79]	; 0x4f
    624a:	b.w	5312 <_svfprintf_r+0x61a>
    624e:	strb.w	r1, [sp, #79]	; 0x4f
    6252:	b.w	5082 <_svfprintf_r+0x38a>
    6256:	strb.w	r1, [sp, #79]	; 0x4f
    625a:	b.w	4ffe <_svfprintf_r+0x306>
    625e:	nop
    6260:	.word	0x200006ac
    6264:	.word	0x200006a8

00006268 <__ssprint_r>:
    6268:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    626c:	ldr	r3, [r2, #8]
    626e:	sub	sp, #12
    6270:	mov	r8, r2
    6272:	cmp	r3, #0
    6274:	beq.n	635c <__ssprint_r+0xf4>
    6276:	mov	fp, r0
    6278:	mov.w	r9, #0
    627c:	ldr	r6, [r2, #0]
    627e:	ldr	r0, [r1, #0]
    6280:	ldr	r3, [r1, #8]
    6282:	mov	r5, r1
    6284:	mov	r4, r9
    6286:	cmp	r4, #0
    6288:	beq.n	6316 <__ssprint_r+0xae>
    628a:	cmp	r4, r3
    628c:	mov	r7, r3
    628e:	mov	sl, r3
    6290:	bcc.n	6320 <__ssprint_r+0xb8>
    6292:	ldrh	r3, [r5, #12]
    6294:	tst.w	r3, #1152	; 0x480
    6298:	beq.n	62f6 <__ssprint_r+0x8e>
    629a:	ldr	r7, [r5, #20]
    629c:	ldr	r1, [r5, #16]
    629e:	add.w	r7, r7, r7, lsl #1
    62a2:	rsb	sl, r1, r0
    62a6:	add.w	r7, r7, r7, lsr #31
    62aa:	adds	r0, r4, #1
    62ac:	asrs	r7, r7, #1
    62ae:	add	r0, sl
    62b0:	cmp	r0, r7
    62b2:	mov	r2, r7
    62b4:	itt	hi
    62b6:	movhi	r7, r0
    62b8:	movhi	r2, r7
    62ba:	lsls	r3, r3, #21
    62bc:	bpl.n	6326 <__ssprint_r+0xbe>
    62be:	mov	r1, r2
    62c0:	mov	r0, fp
    62c2:	bl	27d8 <_malloc_r>
    62c6:	cmp	r0, #0
    62c8:	beq.n	633a <__ssprint_r+0xd2>
    62ca:	mov	r2, sl
    62cc:	ldr	r1, [r5, #16]
    62ce:	str	r0, [sp, #4]
    62d0:	bl	235c <memcpy>
    62d4:	ldrh	r2, [r5, #12]
    62d6:	ldr	r3, [sp, #4]
    62d8:	bic.w	r2, r2, #1152	; 0x480
    62dc:	orr.w	r2, r2, #128	; 0x80
    62e0:	strh	r2, [r5, #12]
    62e2:	rsb	r2, sl, r7
    62e6:	add.w	r0, r3, sl
    62ea:	str	r7, [r5, #20]
    62ec:	str	r3, [r5, #16]
    62ee:	str	r0, [r5, #0]
    62f0:	str	r2, [r5, #8]
    62f2:	mov	r7, r4
    62f4:	mov	sl, r4
    62f6:	mov	r2, sl
    62f8:	mov	r1, r9
    62fa:	bl	2d74 <memmove>
    62fe:	ldr.w	r2, [r8, #8]
    6302:	ldr	r3, [r5, #8]
    6304:	ldr	r0, [r5, #0]
    6306:	subs	r3, r3, r7
    6308:	add	r0, sl
    630a:	subs	r4, r2, r4
    630c:	str	r3, [r5, #8]
    630e:	str	r0, [r5, #0]
    6310:	str.w	r4, [r8, #8]
    6314:	cbz	r4, 635c <__ssprint_r+0xf4>
    6316:	ldr.w	r9, [r6]
    631a:	ldr	r4, [r6, #4]
    631c:	adds	r6, #8
    631e:	b.n	6286 <__ssprint_r+0x1e>
    6320:	mov	r7, r4
    6322:	mov	sl, r4
    6324:	b.n	62f6 <__ssprint_r+0x8e>
    6326:	mov	r0, fp
    6328:	bl	2ee0 <_realloc_r>
    632c:	mov	r3, r0
    632e:	cmp	r0, #0
    6330:	bne.n	62e2 <__ssprint_r+0x7a>
    6332:	ldr	r1, [r5, #16]
    6334:	mov	r0, fp
    6336:	bl	35c8 <_free_r>
    633a:	movs	r3, #12
    633c:	str.w	r3, [fp]
    6340:	ldrh	r3, [r5, #12]
    6342:	movs	r2, #0
    6344:	orr.w	r3, r3, #64	; 0x40
    6348:	mov.w	r0, #4294967295
    634c:	strh	r3, [r5, #12]
    634e:	str.w	r2, [r8, #8]
    6352:	str.w	r2, [r8, #4]
    6356:	add	sp, #12
    6358:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    635c:	movs	r0, #0
    635e:	str.w	r0, [r8, #4]
    6362:	add	sp, #12
    6364:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006368 <__aeabi_uldivmod>:
    6368:	cbnz	r3, 6380 <__aeabi_uldivmod+0x18>
    636a:	cbnz	r2, 6380 <__aeabi_uldivmod+0x18>
    636c:	cmp	r1, #0
    636e:	it	eq
    6370:	cmpeq	r0, #0
    6372:	itt	ne
    6374:	movne.w	r1, #4294967295
    6378:	movne.w	r0, #4294967295
    637c:	b.w	667c <__aeabi_idiv0>
    6380:	sub.w	ip, sp, #8
    6384:	strd	ip, lr, [sp, #-16]!
    6388:	bl	6398 <__udivmoddi4>
    638c:	ldr.w	lr, [sp, #4]
    6390:	ldrd	r2, r3, [sp, #8]
    6394:	add	sp, #16
    6396:	bx	lr

00006398 <__udivmoddi4>:
    6398:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    639c:	mov	ip, r1
    639e:	mov	r6, r1
    63a0:	mov	r4, r0
    63a2:	ldr	r5, [sp, #32]
    63a4:	cmp	r3, #0
    63a6:	bne.n	644a <__udivmoddi4+0xb2>
    63a8:	cmp	r2, r1
    63aa:	mov	r7, r2
    63ac:	bls.n	6488 <__udivmoddi4+0xf0>
    63ae:	clz	lr, r2
    63b2:	cmp.w	lr, #0
    63b6:	beq.n	63d0 <__udivmoddi4+0x38>
    63b8:	rsb	r4, lr, #32
    63bc:	lsr.w	r4, r0, r4
    63c0:	lsl.w	r6, r1, lr
    63c4:	orr.w	ip, r4, r6
    63c8:	lsl.w	r7, r2, lr
    63cc:	lsl.w	r4, r0, lr
    63d0:	mov.w	r9, r7, lsr #16
    63d4:	lsrs	r2, r4, #16
    63d6:	udiv	r0, ip, r9
    63da:	uxth.w	r8, r7
    63de:	mls	r6, r9, r0, ip
    63e2:	orr.w	r6, r2, r6, lsl #16
    63e6:	mul.w	r3, r0, r8
    63ea:	cmp	r3, r6
    63ec:	bls.n	6402 <__udivmoddi4+0x6a>
    63ee:	adds	r6, r6, r7
    63f0:	add.w	r2, r0, #4294967295
    63f4:	bcs.w	663c <__udivmoddi4+0x2a4>
    63f8:	cmp	r3, r6
    63fa:	bls.w	663c <__udivmoddi4+0x2a4>
    63fe:	subs	r0, #2
    6400:	add	r6, r7
    6402:	subs	r6, r6, r3
    6404:	uxth	r2, r4
    6406:	udiv	r3, r6, r9
    640a:	mls	r6, r9, r3, r6
    640e:	orr.w	r4, r2, r6, lsl #16
    6412:	mul.w	r8, r3, r8
    6416:	cmp	r8, r4
    6418:	bls.n	642e <__udivmoddi4+0x96>
    641a:	adds	r4, r4, r7
    641c:	add.w	r2, r3, #4294967295
    6420:	bcs.w	6638 <__udivmoddi4+0x2a0>
    6424:	cmp	r8, r4
    6426:	bls.w	6638 <__udivmoddi4+0x2a0>
    642a:	subs	r3, #2
    642c:	add	r4, r7
    642e:	rsb	r4, r8, r4
    6432:	orr.w	r0, r3, r0, lsl #16
    6436:	movs	r1, #0
    6438:	cmp	r5, #0
    643a:	beq.n	6502 <__udivmoddi4+0x16a>
    643c:	lsr.w	r4, r4, lr
    6440:	movs	r3, #0
    6442:	str	r4, [r5, #0]
    6444:	str	r3, [r5, #4]
    6446:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    644a:	cmp	r3, r1
    644c:	bls.n	645e <__udivmoddi4+0xc6>
    644e:	cmp	r5, #0
    6450:	beq.n	64fe <__udivmoddi4+0x166>
    6452:	movs	r1, #0
    6454:	stmia.w	r5, {r0, r6}
    6458:	mov	r0, r1
    645a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    645e:	clz	r1, r3
    6462:	cmp	r1, #0
    6464:	bne.w	6588 <__udivmoddi4+0x1f0>
    6468:	cmp	r3, r6
    646a:	bcc.n	6472 <__udivmoddi4+0xda>
    646c:	cmp	r2, r0
    646e:	bhi.w	6662 <__udivmoddi4+0x2ca>
    6472:	subs	r4, r0, r2
    6474:	sbc.w	r6, r6, r3
    6478:	movs	r0, #1
    647a:	mov	ip, r6
    647c:	cmp	r5, #0
    647e:	beq.n	6502 <__udivmoddi4+0x16a>
    6480:	stmia.w	r5, {r4, ip}
    6484:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6488:	cbnz	r2, 6490 <__udivmoddi4+0xf8>
    648a:	movs	r7, #1
    648c:	udiv	r7, r7, r2
    6490:	clz	lr, r7
    6494:	cmp.w	lr, #0
    6498:	bne.n	6506 <__udivmoddi4+0x16e>
    649a:	subs	r3, r6, r7
    649c:	mov.w	r8, r7, lsr #16
    64a0:	uxth.w	ip, r7
    64a4:	movs	r1, #1
    64a6:	udiv	r0, r3, r8
    64aa:	lsrs	r2, r4, #16
    64ac:	mls	r6, r8, r0, r3
    64b0:	orr.w	r6, r2, r6, lsl #16
    64b4:	mul.w	r3, ip, r0
    64b8:	cmp	r3, r6
    64ba:	bls.n	64cc <__udivmoddi4+0x134>
    64bc:	adds	r6, r6, r7
    64be:	add.w	r2, r0, #4294967295
    64c2:	bcs.n	64ca <__udivmoddi4+0x132>
    64c4:	cmp	r3, r6
    64c6:	bhi.w	6666 <__udivmoddi4+0x2ce>
    64ca:	mov	r0, r2
    64cc:	subs	r6, r6, r3
    64ce:	uxth	r2, r4
    64d0:	udiv	r3, r6, r8
    64d4:	mls	r6, r8, r3, r6
    64d8:	orr.w	r4, r2, r6, lsl #16
    64dc:	mul.w	ip, ip, r3
    64e0:	cmp	ip, r4
    64e2:	bls.n	64f4 <__udivmoddi4+0x15c>
    64e4:	adds	r4, r4, r7
    64e6:	add.w	r2, r3, #4294967295
    64ea:	bcs.n	64f2 <__udivmoddi4+0x15a>
    64ec:	cmp	ip, r4
    64ee:	bhi.w	665c <__udivmoddi4+0x2c4>
    64f2:	mov	r3, r2
    64f4:	rsb	r4, ip, r4
    64f8:	orr.w	r0, r3, r0, lsl #16
    64fc:	b.n	6438 <__udivmoddi4+0xa0>
    64fe:	mov	r1, r5
    6500:	mov	r0, r5
    6502:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6506:	rsb	r1, lr, #32
    650a:	lsl.w	r3, r6, lr
    650e:	lsl.w	r7, r7, lr
    6512:	lsr.w	r9, r0, r1
    6516:	mov.w	r8, r7, lsr #16
    651a:	lsrs	r6, r1
    651c:	orr.w	r9, r9, r3
    6520:	udiv	sl, r6, r8
    6524:	mov.w	r4, r9, lsr #16
    6528:	mls	r6, r8, sl, r6
    652c:	uxth.w	ip, r7
    6530:	orr.w	r3, r4, r6, lsl #16
    6534:	mul.w	r2, sl, ip
    6538:	cmp	r2, r3
    653a:	lsl.w	r4, r0, lr
    653e:	bls.n	6556 <__udivmoddi4+0x1be>
    6540:	adds	r3, r3, r7
    6542:	add.w	r1, sl, #4294967295
    6546:	bcs.w	6658 <__udivmoddi4+0x2c0>
    654a:	cmp	r2, r3
    654c:	bls.w	6658 <__udivmoddi4+0x2c0>
    6550:	sub.w	sl, sl, #2
    6554:	add	r3, r7
    6556:	subs	r3, r3, r2
    6558:	uxth.w	r9, r9
    655c:	udiv	r1, r3, r8
    6560:	mls	r3, r8, r1, r3
    6564:	orr.w	r3, r9, r3, lsl #16
    6568:	mul.w	r6, r1, ip
    656c:	cmp	r6, r3
    656e:	bls.n	6580 <__udivmoddi4+0x1e8>
    6570:	adds	r3, r3, r7
    6572:	add.w	r2, r1, #4294967295
    6576:	bcs.n	6650 <__udivmoddi4+0x2b8>
    6578:	cmp	r6, r3
    657a:	bls.n	6650 <__udivmoddi4+0x2b8>
    657c:	subs	r1, #2
    657e:	add	r3, r7
    6580:	subs	r3, r3, r6
    6582:	orr.w	r1, r1, sl, lsl #16
    6586:	b.n	64a6 <__udivmoddi4+0x10e>
    6588:	rsb	lr, r1, #32
    658c:	lsr.w	r4, r2, lr
    6590:	lsls	r3, r1
    6592:	orrs	r3, r4
    6594:	lsr.w	r7, r0, lr
    6598:	lsl.w	r4, r6, r1
    659c:	mov.w	ip, r3, lsr #16
    65a0:	lsr.w	r6, r6, lr
    65a4:	orrs	r4, r7
    65a6:	udiv	r9, r6, ip
    65aa:	lsrs	r7, r4, #16
    65ac:	mls	r6, ip, r9, r6
    65b0:	uxth.w	r8, r3
    65b4:	orr.w	r6, r7, r6, lsl #16
    65b8:	mul.w	r7, r9, r8
    65bc:	cmp	r7, r6
    65be:	lsl.w	r2, r2, r1
    65c2:	lsl.w	sl, r0, r1
    65c6:	bls.n	65da <__udivmoddi4+0x242>
    65c8:	adds	r6, r6, r3
    65ca:	add.w	r0, r9, #4294967295
    65ce:	bcs.n	6654 <__udivmoddi4+0x2bc>
    65d0:	cmp	r7, r6
    65d2:	bls.n	6654 <__udivmoddi4+0x2bc>
    65d4:	sub.w	r9, r9, #2
    65d8:	add	r6, r3
    65da:	subs	r6, r6, r7
    65dc:	uxth	r0, r4
    65de:	udiv	r4, r6, ip
    65e2:	mls	r6, ip, r4, r6
    65e6:	orr.w	r7, r0, r6, lsl #16
    65ea:	mul.w	r8, r4, r8
    65ee:	cmp	r8, r7
    65f0:	bls.n	6602 <__udivmoddi4+0x26a>
    65f2:	adds	r7, r7, r3
    65f4:	add.w	r0, r4, #4294967295
    65f8:	bcs.n	664c <__udivmoddi4+0x2b4>
    65fa:	cmp	r8, r7
    65fc:	bls.n	664c <__udivmoddi4+0x2b4>
    65fe:	subs	r4, #2
    6600:	add	r7, r3
    6602:	orr.w	r0, r4, r9, lsl #16
    6606:	rsb	r7, r8, r7
    660a:	umull	r8, r9, r0, r2
    660e:	cmp	r7, r9
    6610:	mov	r4, r8
    6612:	mov	r6, r9
    6614:	bcc.n	6640 <__udivmoddi4+0x2a8>
    6616:	beq.n	666c <__udivmoddi4+0x2d4>
    6618:	cbz	r5, 6674 <__udivmoddi4+0x2dc>
    661a:	subs.w	r3, sl, r4
    661e:	sbc.w	r7, r7, r6
    6622:	lsl.w	lr, r7, lr
    6626:	lsrs	r3, r1
    6628:	lsrs	r7, r1
    662a:	orr.w	r3, lr, r3
    662e:	stmia.w	r5, {r3, r7}
    6632:	movs	r1, #0
    6634:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6638:	mov	r3, r2
    663a:	b.n	642e <__udivmoddi4+0x96>
    663c:	mov	r0, r2
    663e:	b.n	6402 <__udivmoddi4+0x6a>
    6640:	subs.w	r4, r8, r2
    6644:	sbc.w	r6, r9, r3
    6648:	subs	r0, #1
    664a:	b.n	6618 <__udivmoddi4+0x280>
    664c:	mov	r4, r0
    664e:	b.n	6602 <__udivmoddi4+0x26a>
    6650:	mov	r1, r2
    6652:	b.n	6580 <__udivmoddi4+0x1e8>
    6654:	mov	r9, r0
    6656:	b.n	65da <__udivmoddi4+0x242>
    6658:	mov	sl, r1
    665a:	b.n	6556 <__udivmoddi4+0x1be>
    665c:	subs	r3, #2
    665e:	add	r4, r7
    6660:	b.n	64f4 <__udivmoddi4+0x15c>
    6662:	mov	r0, r1
    6664:	b.n	647c <__udivmoddi4+0xe4>
    6666:	subs	r0, #2
    6668:	add	r6, r7
    666a:	b.n	64cc <__udivmoddi4+0x134>
    666c:	cmp	sl, r8
    666e:	bcc.n	6640 <__udivmoddi4+0x2a8>
    6670:	mov	r6, r7
    6672:	b.n	6618 <__udivmoddi4+0x280>
    6674:	mov	r1, r5
    6676:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    667a:	nop

0000667c <__aeabi_idiv0>:
    667c:	bx	lr
    667e:	nop

00006680 <___init_veneer>:
    6680:	ldr.w	pc, [pc]	; 6684 <___init_veneer+0x4>
    6684:	.word	0x60001729
	...

Disassembly of section .fini:

00006690 <_fini>:
    6690:	push	{r3, r4, r5, r6, r7, lr}
    6692:	nop
