
.vsteensy/build/03_Multiplexed_4067.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	60001388 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	60001428 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	600016d8 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	600016d0 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	6000129c <usb_init>
	analog_init();
600011e4:	bl	6000148c <analog_init>
	pwm_init();
600011e8:	bl	600016b8 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	600014e4 <tempmon_init>

	startup_late_hook();
600011f0:	bl	600016c8 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	600016e0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	600016e8 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaab
60001210:	.word	0x00200007
60001214:	.word	0x20078000
60001218:	.word	0x00000000
6000121c:	.word	0x60001700
60001220:	.word	0x000061d0
60001224:	.word	0x20000000
60001228:	.word	0x600078dc
6000122c:	.word	0x20001010
60001230:	.word	0x20001010
60001234:	.word	0x20003700
60001238:	.word	0xe000ed88
6000123c:	.word	0x200033fc
60001240:	.word	0x00001e79
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x00001b95
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x00001c99
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x2000127c
6000127c:	.word	0x23c34600
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20001284
60001290:	.word	0x20003400
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000129c:	ldr	r3, [pc, #192]	; (60001360 <usb_init+0xc4>)
6000129e:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600012a2:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a4:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012a8:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012ac:	bl	600016f0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b0:	ldr	r1, [pc, #176]	; (60001364 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b2:	ldr	r0, [pc, #180]	; (60001368 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b4:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012b8:	ldr	r4, [pc, #176]	; (6000136c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012ba:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012be:	ldr	r3, [pc, #176]	; (60001370 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c0:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012c4:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c8:	ldr	r2, [r4, #0]
600012ca:	ands	r3, r2
600012cc:	cbnz	r3, 600012d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012ce:	ldr.w	r3, [r0, #424]	; 0x1a8
600012d2:	lsls	r2, r3, #30
600012d4:	beq.n	6000130c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012d6:	ldr	r3, [pc, #144]	; (60001368 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012d8:	mov.w	r1, #2147483648	; 0x80000000
600012dc:	ldr	r2, [pc, #140]	; (6000136c <usb_init+0xd0>)
600012de:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012e0:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012e2:	ldr.w	r1, [r3, #320]	; 0x140
600012e6:	orr.w	r1, r1, #2
600012ea:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ee:	ldr.w	r3, [r2, #320]	; 0x140
600012f2:	lsls	r3, r3, #30
600012f4:	bmi.n	600012ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012f6:	mov.w	r0, #131072	; 0x20000
600012fa:	ldr	r1, [pc, #120]	; (60001374 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012fc:	ldr	r3, [pc, #108]	; (6000136c <usb_init+0xd0>)
600012fe:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001302:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001304:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001306:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001308:	bl	600016b0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000130c:	ldr	r5, [pc, #104]	; (60001378 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000130e:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001310:	ldr	r3, [pc, #88]	; (6000136c <usb_init+0xd0>)
60001312:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001316:	ldr	r4, [pc, #80]	; (60001368 <usb_init+0xcc>)
60001318:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000131a:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000131c:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000131e:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001320:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001322:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001326:	mov.w	r2, #640	; 0x280
6000132a:	bl	600016c0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000132e:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001332:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001336:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000133a:	ldr	r2, [pc, #64]	; (6000137c <usb_init+0xe0>)
6000133c:	ldr	r1, [pc, #64]	; (60001380 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000133e:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001340:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001342:	str.w	r5, [r4, #344]	; 0x158
60001346:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000134a:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000134e:	ldr	r2, [pc, #52]	; (60001384 <usb_init+0xe8>)
60001350:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001354:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001356:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001358:	str.w	r3, [r4, #320]	; 0x140
6000135c:	pop	{r4, r5, r6, pc}
6000135e:	nop
60001360:	.word	0x400d8000
60001364:	.word	0x400fc000
60001368:	.word	0x402e0000
6000136c:	.word	0x400d9000
60001370:	.word	0x001e1c00
60001374:	.word	0xe000e28c
60001378:	.word	0x20003000
6000137c:	.word	0x20003400
60001380:	.word	0x0000107d
60001384:	.word	0xe000e10c

60001388 <configure_cache>:
#define SIZE_32M	(SCB_MPU_RASR_SIZE(24) | SCB_MPU_RASR_ENABLE)
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001388:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000138a:	ldr	r2, [pc, #100]	; (600013f0 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000138c:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000138e:	ldr	r3, [pc, #100]	; (600013f4 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
60001390:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001394:	ldr	r0, [pc, #96]	; (600013f8 <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001396:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001398:	ldr	r6, [pc, #96]	; (600013fc <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
6000139a:	ldr	r5, [pc, #100]	; (60001400 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000139c:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000139e:	ldr	r7, [pc, #100]	; (60001404 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013a0:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013a4:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013a6:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013a8:	ldr	r6, [pc, #92]	; (60001408 <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013aa:	ldr	r5, [pc, #96]	; (6000140c <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013ac:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013ae:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013b0:	ldr	r7, [pc, #92]	; (60001410 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013b2:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013b4:	ldr	r6, [pc, #92]	; (60001414 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013b6:	ldr	r5, [pc, #96]	; (60001418 <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013b8:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013ba:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013bc:	ldr	r7, [pc, #92]	; (6000141c <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013be:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013c0:	ldr	r6, [pc, #92]	; (60001420 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013c2:	ldr	r5, [pc, #96]	; (60001424 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013c4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013c6:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013c8:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ca:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600013cc:	dsb	sy
	asm("isb");
600013d0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013d4:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013d8:	dsb	sy
	asm("isb");
600013dc:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600013e0:	ldr.w	r3, [r2, #-136]
600013e4:	orr.w	r3, r3, #196608	; 0x30000
600013e8:	str.w	r3, [r2, #-136]
600013ec:	pop	{r4, r5, r6, r7, pc}
600013ee:	nop
600013f0:	.word	0xe000ed9c
600013f4:	.word	0xe000eda0
600013f8:	.word	0xe000ed94
600013fc:	.word	0x03080025
60001400:	.word	0x00200011
60001404:	.word	0x07020021
60001408:	.word	0x20000012
6000140c:	.word	0x13080025
60001410:	.word	0x20200013
60001414:	.word	0x130b0027
60001418:	.word	0x40000014
6000141c:	.word	0x13100033
60001420:	.word	0x60000015
60001424:	.word	0x070b002f

60001428 <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
60001428:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000142a:	ldr	r2, [pc, #92]	; (60001488 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000142c:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000142e:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001432:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001436:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000143a:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000143e:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001442:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001444:	tst.w	r3, #2
60001448:	beq.n	60001458 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000144a:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000144c:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000144e:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001450:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001452:	tst.w	r3, #2
60001456:	bne.n	6000144a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001458:	tst.w	r3, #8192	; 0x2000
6000145c:	bne.n	60001462 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000145e:	str	r5, [r2, #20]
			continue;
60001460:	b.n	60001442 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001462:	tst.w	r3, #4096	; 0x1000
60001466:	bne.n	6000146c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001468:	str	r6, [r2, #20]
			continue;
6000146a:	b.n	60001442 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000146c:	cmp	r3, #0
6000146e:	bge.n	60001442 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001470:	tst.w	r3, #65536	; 0x10000
60001474:	beq.n	6000147a <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001476:	str	r1, [r2, #24]
			continue;
60001478:	b.n	60001442 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000147a:	lsls	r3, r3, #25
6000147c:	bmi.n	60001482 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000147e:	str	r7, [r2, #20]
			continue;
60001480:	b.n	60001442 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001482:	pop	{r4, r5, r6, r7}
60001484:	bx	lr
60001486:	nop
60001488:	.word	0x400d8000

6000148c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000148c:	ldr	r3, [pc, #68]	; (600014d4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000148e:	ldr	r1, [pc, #72]	; (600014d8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001490:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001492:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001494:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001498:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000149a:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000149c:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014a2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a4:	orr.w	r0, r0, #768	; 0x300
600014a8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014aa:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014ac:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ae:	ldr	r3, [r2, #72]	; 0x48
600014b0:	lsls	r3, r3, #24
600014b2:	bmi.n	600014ae <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014b4:	ldr	r3, [pc, #36]	; (600014dc <analog_init+0x50>)
600014b6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014ba:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014bc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014be:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014c0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014c2:	ldr	r3, [r2, #72]	; 0x48
600014c4:	ands.w	r3, r3, #128	; 0x80
600014c8:	bne.n	600014c2 <analog_init+0x36>
	calibrating = 0;
600014ca:	ldr	r2, [pc, #20]	; (600014e0 <analog_init+0x54>)
600014cc:	strb	r3, [r2, #0]
}
600014ce:	pop	{r4, r5}
600014d0:	bx	lr
600014d2:	nop
600014d4:	.word	0x400fc000
600014d8:	.word	0x400c4000
600014dc:	.word	0x400c8000
600014e0:	.word	0x200012a8

600014e4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014e4:	ldr	r2, [pc, #216]	; (600015c0 <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014e6:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014e8:	ldr	r1, [pc, #216]	; (600015c4 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014ea:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ee:	ldr	r3, [r2, #0]
600014f0:	bic.w	r3, r3, #1

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

FLASHMEM void tempmon_init(void)
{
600014f4:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014f6:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014f8:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014fc:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001500:	ldr.w	lr, [pc, #212]	; 600015d8 <tempmon_init+0xf4>
60001504:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001506:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000150a:	ldr	r7, [pc, #188]	; (600015c8 <tempmon_init+0xe4>)
6000150c:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001514:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000151c:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001520:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001524:	vmov	s15, r0
60001528:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000152c:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000152e:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001532:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001536:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000153a:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000153c:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001540:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001544:	ldr	r5, [pc, #132]	; (600015cc <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001546:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000154a:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000154c:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001550:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001554:	ldr	r6, [pc, #120]	; (600015d0 <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001556:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155a:	ldr	r1, [pc, #120]	; (600015d4 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000155c:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155e:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001560:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001564:	vmov	s15, r3
60001568:	vcvt.f32.u32	s15, s15
6000156c:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001570:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001578:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000157c:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001580:	vmov	r3, s11
60001584:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001588:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158c:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001590:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001592:	and.w	r1, r1, r0, lsl #16
60001596:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000159a:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000159e:	orrs	r3, r1
600015a0:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015a4:	vmov	r3, s15
600015a8:	ldr.w	r1, [r2, #272]	; 0x110
600015ac:	ubfx	r3, r3, #0, #12
600015b0:	orrs	r3, r1
600015b2:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015b6:	ldr	r3, [r2, #0]
600015b8:	orr.w	r3, r3, #2
600015bc:	str	r3, [r2, #0]
600015be:	pop	{r4, r5, r6, r7, pc}
600015c0:	.word	0x400d8180
600015c4:	.word	0x401f4400
600015c8:	.word	0x200012b4
600015cc:	.word	0x200012b0
600015d0:	.word	0x200012b8
600015d4:	.word	0x0fff0000
600015d8:	.word	0x200012ac

600015dc <usb_string_product_name_default>:
600015dc:	..U.S.B. .S.e.r.
600015ec:	i.a.l...

600015f4 <usb_string_manufacturer_name_default>:
600015f4:	..T.e.e.n.s.y.d.
60001604:	u.i.n.o.

6000160c <string0>:
6000160c:	....

60001610 <usb_config_descriptor_12>:
60001610:	..C.....2.......
60001620:	...$....$....$..
60001630:	.$..............
60001640:	.........@......
60001650:	@...

60001654 <usb_config_descriptor_480>:
60001654:	..C.....2.......
60001664:	...$....$....$..
60001674:	.$..............
60001684:	................
60001694:	....

60001698 <qualifier_descriptor>:
60001698:	.......@....

600016a4 <_init>:
600016a4:	push	{r3, r4, r5, r6, r7, lr}
600016a6:	nop
600016a8:	pop	{r3, r4, r5, r6, r7}
600016aa:	pop	{r3}
600016ac:	mov	lr, r3
600016ae:	bx	lr

600016b0 <__delay_veneer>:
600016b0:	ldr.w	pc, [pc]	; 600016b4 <__delay_veneer+0x4>
600016b4:	.word	0x00001861

600016b8 <__pwm_init_veneer>:
600016b8:	ldr.w	pc, [pc]	; 600016bc <__pwm_init_veneer+0x4>
600016bc:	.word	0x00001fa5

600016c0 <__memset_veneer>:
600016c0:	ldr.w	pc, [pc]	; 600016c4 <__memset_veneer+0x4>
600016c4:	.word	0x0000297d

600016c8 <__startup_late_hook_veneer>:
600016c8:	ldr.w	pc, [pc]	; 600016cc <__startup_late_hook_veneer+0x4>
600016cc:	.word	0x00001e95

600016d0 <__startup_early_hook_veneer>:
600016d0:	ldr.w	pc, [pc]	; 600016d4 <__startup_early_hook_veneer+0x4>
600016d4:	.word	0x00001e91

600016d8 <__set_arm_clock_veneer>:
600016d8:	ldr.w	pc, [pc]	; 600016dc <__set_arm_clock_veneer+0x4>
600016dc:	.word	0x00000c81

600016e0 <____libc_init_array_veneer>:
600016e0:	ldr.w	pc, [pc]	; 600016e4 <____libc_init_array_veneer+0x4>
600016e4:	.word	0x000022a9

600016e8 <__main_veneer>:
600016e8:	ldr.w	pc, [pc]	; 600016ec <__main_veneer+0x4>
600016ec:	.word	0x00001a05

600016f0 <__usb_init_serialnumber_veneer>:
600016f0:	ldr.w	pc, [pc]	; 600016f4 <__usb_init_serialnumber_veneer+0x4>
600016f4:	.word	0x000019ad

600016f8 <__init_array_start>:
600016f8:	.word	0x00000045
600016fc:	.word	0x00000279

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>
	}
	__enable_irq();
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	asrs	r0, r2, #32
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	str	r4, [r2, #28]
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	bx	r3
      mode1 |= ADC_CFG_AVGS(1);
      66:	nop
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	asrs	r4, r2, #32
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	str	r4, [r2, #28]
  ADC2_CFG = mode1;
      72:	movs	r0, r0
  
  if(num >= 4){
      74:	asrs	r0, r2, #32
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	movs	r0, r0
	...

0000007c <EncoderTool::EncPlex4067::~EncPlex4067()>:
#include "EncPlexBase.h"
#include "core_pins.h"

namespace EncoderTool
{
   class EncPlex4067 : public EncPlexBase
      7c:	push	{r4, lr}
      7e:	mov	r4, r0
      80:	bl	394 <EncoderTool::EncPlexBase::~EncPlexBase()>
      84:	mov	r0, r4
      86:	.short	0xbd10

00000088 <EncoderTool::EncPlex4067::tick()>:
      pinMode(B, INPUT);
   }

   void EncPlex4067::tick()
   {
      for (unsigned i = 0; i < encoderCount; i++)
      88:	ldr	r3, [r0, #0]
      8a:	.short	0x2b00
      8c:	beq.w	1a8 <EncoderTool::EncPlex4067::tick()+0x120>
      pinMode(A, INPUT);
      pinMode(B, INPUT);
   }

   void EncPlex4067::tick()
   {
      90:	.word	0x47f0e92d
      for (unsigned i = 0; i < encoderCount; i++)
      94:	mov.w	sl, #0
      pinMode(A, INPUT);
      pinMode(B, INPUT);
   }

   void EncPlex4067::tick()
   {
      98:	.word	0x4605b082
      9c:	ldr	r6, [pc, #268]	; (1ac <EncoderTool::EncPlex4067::tick()+0x124>)
      9e:	.short	0xf8df
      a0:	str	r1, [sp, #80]	; 0x50
      for (unsigned i = 0; i < encoderCount; i++)
      a2:	mov	r7, sl
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
      a4:	.word	0xf8df4c42
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
      a8:	strh	r0, [r2, #8]
      {
         digitalWriteFast(S0, i & 0b0001);
      aa:	ldr	r2, [r5, #24]
      ac:	uxtb	r3, r7
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
      ae:	.short	0xb2d2
      b0:	lsls	r0, r3, #31
      b2:	mov.w	r2, r2, lsl #4
      b6:	.short	0xeb06
      b8:	lsls	r2, r0, #4
      ba:	ldr	r2, [r6, r2]
      bc:	ldr	r1, [r1, #12]
      be:	bpl.n	1a2 <EncoderTool::EncPlex4067::tick()+0x11a>
      c0:	str.w	r1, [r2, #132]	; 0x84
         digitalWriteFast(S1, i & 0b0010);
      c4:	ldr	r2, [r5, #28]
      c6:	.short	0x0798
      c8:	uxtb	r2, r2
      ca:	.short	0xea4f
      cc:	asrs	r2, r0, #8
      ce:	.short	0xeb06
      d0:	lsls	r2, r0, #4
      d2:	.short	0x58b2
      d4:	ldr	r1, [r1, #12]
      d6:	.short	0xd561
      d8:	str.w	r1, [r2, #132]	; 0x84
         digitalWriteFast(S2, i & 0b0100);
      dc:	.word	0x07586a2a
      e0:	uxtb	r2, r2
      e2:	mov.w	r2, r2, lsl #4
      e6:	add.w	r1, r6, r2
      ea:	.short	0x58b2
      ec:	ldr	r1, [r1, #12]
      ee:	.short	0xd552
      f0:	str.w	r1, [r2, #132]	; 0x84
         digitalWriteFast(S3, i & 0b1000);
      f4:	ldr	r2, [r5, #36]	; 0x24
      f6:	.short	0xf013
      f8:	lsrs	r0, r1, #28
      fa:	.short	0xb2d2
      fc:	mov.w	r2, r2, lsl #4
     100:	add.w	r1, r6, r2
     104:	ldr	r3, [r6, r2]
     106:	ldr	r2, [r1, #12]
     108:	beq.n	190 <EncoderTool::EncPlex4067::tick()+0x108>
     10a:	str.w	r2, [r3, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     10e:	ldr	r1, [r4, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     110:	ldr.w	r2, [r9]
     114:	umull	r3, r2, r8, r2
     118:	.word	0x68230c92
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     11c:	subs	r3, r3, r1
     11e:	.short	0x429a
     120:	bhi.n	11a <EncoderTool::EncPlex4067::tick()+0x92>
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     122:	ldrb.w	r2, [r5, #40]	; 0x28
     126:	ldrb.w	r3, [r5, #44]	; 0x2c
     12a:	lsls	r2, r2, #4
         delayMicroseconds(1);

         if (encoders[i].update(digitalReadFast(A), digitalReadFast(B)) && callback != nullptr)
     12c:	ldr	r0, [r5, #4]
     12e:	lsls	r3, r3, #4
     130:	ldr	r1, [r6, r2]
     132:	add	r2, r6
     134:	add.w	lr, r6, r3
     138:	.word	0x688958f3
     13c:	add	r0, sl
     13e:	.short	0xf8d3
     140:	stmia	r0!, {r3}
     142:	.short	0xf8de
     144:	b.n	160 <EncoderTool::EncPlex4067::tick()+0xd8>
     146:	ldr	r3, [r2, #12]
     148:	.word	0x0f0eea1c
     14c:	ite	ne
     14e:	movne	r2, #1
     150:	.word	0x42192200
     154:	ite	ne
     156:	.short	0x2101
     158:	moveq	r1, #0
     15a:	bl	460 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)>
     15e:	.short	0xb170
     160:	ldr	r3, [r5, #16]
     162:	.short	0xb163
     164:	ldr	r1, [r5, #4]
     166:	.short	0x2000
     168:	add	r2, sp, #8
     16a:	ldr.w	r3, [r1, sl]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
     16e:	.short	0x4669
     170:	str	r0, [sp, #0]
     172:	.short	0xf105
     174:	movs	r0, r1
     176:	str.w	r3, [r2, #-4]!
     17a:	.short	0x696b
     17c:	blx	r3
      pinMode(B, INPUT);
   }

   void EncPlex4067::tick()
   {
      for (unsigned i = 0; i < encoderCount; i++)
     17e:	.short	0x3701
     180:	ldr	r3, [r5, #0]
     182:	add.w	sl, sl, #44	; 0x2c
     186:	.short	0x42bb
     188:	bhi.n	aa <EncoderTool::EncPlex4067::tick()+0x22>
         if (encoders[i].update(digitalReadFast(A), digitalReadFast(B)) && callback != nullptr)
         {
            callback(0, encoders[i].getValue());
         }
      }
   }
     18a:	.short	0xb002
     18c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     190:	.word	0x2088f8c3
     194:	b.n	10e <EncoderTool::EncPlex4067::tick()+0x86>
     196:	str.w	r1, [r2, #136]	; 0x88
     19a:	.short	0xe7ab
     19c:	str.w	r1, [r2, #136]	; 0x88
     1a0:	.word	0xf8c2e79c
     1a4:	asrs	r0, r1, #2
     1a6:	.short	0xe78d
     1a8:	bx	lr
     1aa:	.short	0xbf00
     1ac:	lsls	r0, r7, #1
     1ae:	.short	0x2000
     1b0:	asrs	r4, r0, #32
     1b2:	.short	0xe000
     1b4:	lsls	r0, r4, #24
     1b6:	movs	r0, #0
     1b8:	.word	0x431bde83

000001bc <setup>:
                                      //datasheet: https://www.ti.com/lit/gpn/CD74HC4067

EncPlex4067 encoders(encoderCount, S0, S1, S2, S3, SIG_A, SIG_B);

void setup()
{
     1bc:	push	{r4, lr}
      begin();
   }

   void EncPlex4067::begin()
   {
      pinMode(S0, OUTPUT);
     1be:	.short	0x4c11
    pinMode(LED_BUILTIN, OUTPUT);
     1c0:	movs	r1, #1
     1c2:	.short	0x200d
     1c4:	bl	192c <pinMode>
     1c8:	.word	0x21017e20
     1cc:	bl	192c <pinMode>
      pinMode(S1, OUTPUT);
     1d0:	.word	0x21017f20
     1d4:	bl	192c <pinMode>
      pinMode(S2, OUTPUT);
     1d8:	ldrb.w	r0, [r4, #32]
     1dc:	.word	0xf0012101
     1e0:			; <UNDEFINED> instruction: 0xfba5f894
      pinMode(S3, OUTPUT);
     1e4:	.word	0x21010024
     1e8:	bl	192c <pinMode>

      pinMode(A, INPUT);
     1ec:	.word	0x0028f894
     1f0:	movs	r1, #0
     1f2:	.short	0xf001
     1f4:			; <UNDEFINED> instruction: 0xfb9bf894
      pinMode(B, INPUT);
     1f8:	movs	r4, r5
     1fa:	.short	0x2100
    encoders.begin();
}
     1fc:	ldmia.w	sp!, {r4, lr}
     200:	.word	0xbb94f001
     204:	asrs	r4, r5, #32
     206:	movs	r0, #0

00000208 <loop>:

void loop()
{
     208:	push	{r4, lr}
    encoders.tick();
     20a:	.short	0x4816
    for (unsigned i = 0; i < encoderCount; i++)
     20c:	movs	r4, #0
    encoders.begin();
}

void loop()
{
    encoders.tick();
     20e:	.short	0xf7ff
     210:	vmax.u<illegal width 64>	d4, d11, d17
    for (unsigned i = 0; i < encoderCount; i++)
    {
        Serial.printf("%d:\t%d\r\n", i, encoders[i].getValue());
     214:	.word	0xf0004813
     218:	str??.w	r4, [sp, #1570]	; 0x622
}

void loop()
{
    encoders.tick();
    for (unsigned i = 0; i < encoderCount; i++)
     21c:	adds	r4, #1
    {
        Serial.printf("%d:\t%d\r\n", i, encoders[i].getValue());
     21e:	ldr	r3, [r0, #0]
     220:	ldr	r1, [pc, #68]	; (268 <loop+0x60>)
     222:	ldr	r0, [pc, #72]	; (26c <loop+0x64>)
     224:	bl	1d1c <Print::printf(char const*, ...)>
}

void loop()
{
    encoders.tick();
    for (unsigned i = 0; i < encoderCount; i++)
     228:	cmp	r4, #16
     22a:	bne.n	212 <loop+0xa>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     22c:	movs	r1, #23
     22e:	ldr	r0, [pc, #64]	; (270 <loop+0x68>)
     230:	bl	b7c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     234:	ldr	r0, [pc, #52]	; (26c <loop+0x64>)
     236:	bl	1cec <Print::println()>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
     23a:	ldr	r3, [pc, #56]	; (274 <loop+0x6c>)
     23c:	ldr	r2, [r3, #8]
     23e:	lsls	r2, r2, #28
     240:	bmi.n	252 <loop+0x4a>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     242:	movs	r2, #8
        Serial.printf("%d:\t%d\r\n", i, encoders[i].getValue());
    }
    Serial.println("-----------------------");

    digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
    delay(100);
     244:	movs	r0, #100	; 0x64
     246:	str.w	r2, [r3, #132]	; 0x84
}
     24a:	ldmia.w	sp!, {r4, lr}
        Serial.printf("%d:\t%d\r\n", i, encoders[i].getValue());
    }
    Serial.println("-----------------------");

    digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
    delay(100);
     24e:	b.w	1860 <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     252:	movs	r2, #8
     254:	movs	r0, #100	; 0x64
     256:	str.w	r2, [r3, #136]	; 0x88
}
     25a:	ldmia.w	sp!, {r4, lr}
        Serial.printf("%d:\t%d\r\n", i, encoders[i].getValue());
    }
    Serial.println("-----------------------");

    digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
    delay(100);
     25e:	b.w	1860 <delay>
     262:	nop
     264:	.word	0x2000102c
     268:	.word	0x20000000
     26c:	.word	0x20000650
     270:	.word	0x2000000c
     274:	.word	0x42004000

00000278 <_GLOBAL__sub_I_encoders>:
}
     278:	push	{r3, r4, r5, r6, r7, lr}
   // IMPLEMENTATION =====================================================================================================

   EncPlex4067::EncPlex4067(unsigned encoderCount, unsigned pinS0, unsigned pinS1, unsigned pinS2, unsigned pinS3, unsigned pinA, unsigned pinB, CountMode mode)
       : EncPlexBase(encoderCount, mode),
         S0(pinS0), S1(pinS1), S2(pinS2), S3(pinS3),
         A(pinA), B(pinB)
     27a:	ldr	r4, [pc, #104]	; (2e4 <_GLOBAL__sub_I_encoders+0x6c>)
     27c:	movs	r2, #0
     27e:	movs	r1, #16
     280:	movs	r5, #1
     282:	mov	r0, r4
     284:	mov	r6, r2
     286:	bl	2f0 <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)>
     28a:	movs	r1, #2
     28c:	movs	r2, #4
     28e:	movs	r3, #5
     290:	movs	r7, #3
      begin();
   }

   void EncPlex4067::begin()
   {
      pinMode(S0, OUTPUT);
     292:	mov	r0, r6
   // IMPLEMENTATION =====================================================================================================

   EncPlex4067::EncPlex4067(unsigned encoderCount, unsigned pinS0, unsigned pinS1, unsigned pinS2, unsigned pinS3, unsigned pinA, unsigned pinB, CountMode mode)
       : EncPlexBase(encoderCount, mode),
         S0(pinS0), S1(pinS1), S2(pinS2), S3(pinS3),
         A(pinA), B(pinB)
     294:	str	r1, [r4, #32]
      begin();
   }

   void EncPlex4067::begin()
   {
      pinMode(S0, OUTPUT);
     296:	mov	r1, r5
   // IMPLEMENTATION =====================================================================================================

   EncPlex4067::EncPlex4067(unsigned encoderCount, unsigned pinS0, unsigned pinS1, unsigned pinS2, unsigned pinS3, unsigned pinA, unsigned pinB, CountMode mode)
       : EncPlexBase(encoderCount, mode),
         S0(pinS0), S1(pinS1), S2(pinS2), S3(pinS3),
         A(pinA), B(pinB)
     298:	str	r2, [r4, #40]	; 0x28
     29a:	str	r3, [r4, #44]	; 0x2c
     29c:	str	r7, [r4, #36]	; 0x24
     29e:	str	r6, [r4, #24]
     2a0:	str	r5, [r4, #28]
      begin();
   }

   void EncPlex4067::begin()
   {
      pinMode(S0, OUTPUT);
     2a2:	bl	192c <pinMode>
      pinMode(S1, OUTPUT);
     2a6:	mov	r1, r5
     2a8:	ldrb	r0, [r4, #28]
     2aa:	bl	192c <pinMode>
      pinMode(S2, OUTPUT);
     2ae:	mov	r1, r5
     2b0:	ldrb.w	r0, [r4, #32]
     2b4:	bl	192c <pinMode>
      pinMode(S3, OUTPUT);
     2b8:	mov	r1, r5
     2ba:	ldrb.w	r0, [r4, #36]	; 0x24
     2be:	bl	192c <pinMode>

      pinMode(A, INPUT);
     2c2:	mov	r1, r6
     2c4:	ldrb.w	r0, [r4, #40]	; 0x28
     2c8:	bl	192c <pinMode>
      pinMode(B, INPUT);
     2cc:	mov	r1, r6
     2ce:	ldrb.w	r0, [r4, #44]	; 0x2c
     2d2:	bl	192c <pinMode>
constexpr unsigned SIG_A = 4;         //output pin SIG of multiplexer A
constexpr unsigned SIG_B = 5;         //output pin SIG of multiplexer B
                                      //breakout:  https://www.sparkfun.com/products/9056
                                      //datasheet: https://www.ti.com/lit/gpn/CD74HC4067

EncPlex4067 encoders(encoderCount, S0, S1, S2, S3, SIG_A, SIG_B);
     2d6:	mov	r0, r4
     2d8:	ldr	r2, [pc, #12]	; (2e8 <_GLOBAL__sub_I_encoders+0x70>)
     2da:	ldr	r1, [pc, #16]	; (2ec <_GLOBAL__sub_I_encoders+0x74>)
    }
    Serial.println("-----------------------");

    digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
    delay(100);
}
     2dc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
constexpr unsigned SIG_A = 4;         //output pin SIG of multiplexer A
constexpr unsigned SIG_B = 5;         //output pin SIG of multiplexer B
                                      //breakout:  https://www.sparkfun.com/products/9056
                                      //datasheet: https://www.ti.com/lit/gpn/CD74HC4067

EncPlex4067 encoders(encoderCount, S0, S1, S2, S3, SIG_A, SIG_B);
     2e0:	b.w	2284 <__aeabi_atexit>
     2e4:	.word	0x2000102c
     2e8:	.word	0x20000618
     2ec:	.word	0x0000007d

000002f0 <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     2f0:	movs	r3, #0
namespace EncoderTool
{
    EncPlexBase::EncPlexBase(unsigned eCnt, CountMode mode)
        : encoderCount(eCnt)
    {
        encoders = new EncoderBase[eCnt];
     2f2:	cmp.w	r1, #48758784	; 0x2e80000
#include "EncPlexBase.h"

namespace EncoderTool
{
    EncPlexBase::EncPlexBase(unsigned eCnt, CountMode mode)
     2f6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     2fa:	mov	r6, r0
     2fc:	mov	r8, r1
     2fe:	mov	r7, r2
        : encoderCount(eCnt)
     300:	str	r1, [r0, #0]
     302:	str	r3, [r0, #16]
    {
        encoders = new EncoderBase[eCnt];
     304:	bhi.n	38a <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x9a>
     306:	movs	r0, #44	; 0x2c
     308:	mul.w	r0, r0, r1
     30c:	adds	r0, #8
     30e:	bl	1d3c <operator new[](unsigned int)>
     312:	movs	r3, #44	; 0x2c
     314:	str.w	r8, [r0, #4]
     318:	add.w	lr, r0, #8
     31c:	str	r3, [r0, #0]
     31e:	cmp.w	r8, #0
     322:	beq.n	35e <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x6e>
     324:	movs	r1, #0
     326:	add.w	r3, r0, #52	; 0x34
     32a:	ldr	r5, [pc, #100]	; (390 <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0xa0>)
    };

    class EncoderBase
    {
     public:
        EncoderBase() = default;
     32c:	mov.w	r4, #2147483648	; 0x80000000
     330:	mov	r2, r1
     332:	mvn.w	r0, #2147483648	; 0x80000000
     336:	adds	r1, #1
     338:	str.w	r2, [r3, #-44]
     33c:	str.w	r4, [r3, #-40]
     340:	adds	r3, #44	; 0x2c
     342:	cmp	r8, r1
     344:	str.w	r0, [r3, #-80]
     348:	strb.w	r2, [r3, #-76]
     34c:	str.w	r2, [r3, #-72]
     350:	strb.w	r2, [r3, #-68]
     354:	str.w	r2, [r3, #-56]
     358:	str.w	r5, [r3, #-48]
     35c:	bne.n	336 <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x46>
     35e:	str.w	lr, [r6, #4]
        for (unsigned i = 0; i < eCnt; i++)
     362:	cmp.w	r8, #0
     366:	beq.n	384 <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x94>
     368:	movs	r4, #0
     36a:	mov	r5, r4
     36c:	b.n	372 <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x82>
     36e:	ldr.w	lr, [r6, #4]
     372:	adds	r5, #1
        {
            encoders[i].setCountMode(mode);
     374:	add.w	r0, lr, r4
     378:	mov	r1, r7
     37a:	adds	r4, #44	; 0x2c
     37c:	bl	414 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)>
{
    EncPlexBase::EncPlexBase(unsigned eCnt, CountMode mode)
        : encoderCount(eCnt)
    {
        encoders = new EncoderBase[eCnt];
        for (unsigned i = 0; i < eCnt; i++)
     380:	cmp	r8, r5
     382:	bne.n	36e <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x7e>
        {
            encoders[i].setCountMode(mode);
        }
    }
     384:	mov	r0, r6
     386:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
namespace EncoderTool
{
    EncPlexBase::EncPlexBase(unsigned eCnt, CountMode mode)
        : encoderCount(eCnt)
    {
        encoders = new EncoderBase[eCnt];
     38a:	mov.w	r0, #4294967295
     38e:	b.n	30e <EncoderTool::EncPlexBase::EncPlexBase(unsigned int, EncoderTool::CountMode)+0x1e>
     390:	.word	0x2000005c

00000394 <EncoderTool::EncPlexBase::~EncPlexBase()>:
        {
            encoders[i].setCountMode(mode);
        }
    }

    EncPlexBase::~EncPlexBase()
     394:	push	{r3, r4, r5, r6, r7, lr}
    {
        delete[] encoders;
     396:	ldr	r6, [r0, #4]
        {
            encoders[i].setCountMode(mode);
        }
    }

    EncPlexBase::~EncPlexBase()
     398:	mov	r7, r0
    {
        delete[] encoders;
     39a:	cbz	r6, 3dc <EncoderTool::EncPlexBase::~EncPlexBase()+0x48>
     39c:	ldr.w	r1, [r6, #-4]
     3a0:	movs	r3, #44	; 0x2c
     3a2:	mul.w	r1, r3, r1
     3a6:	adds	r5, r6, r1
     3a8:	cmp	r6, r5
     3aa:	bne.n	3b0 <EncoderTool::EncPlexBase::~EncPlexBase()+0x1c>
     3ac:	b.n	3ee <EncoderTool::EncPlexBase::~EncPlexBase()+0x5a>
     3ae:	mov	r5, r4
     3b0:	sub.w	r4, r5, #44	; 0x2c
     3b4:	sub.w	r1, r5, #20

    ~_Function_base()
    {
      if (_M_manager)
     3b8:	ldr	r3, [r4, #32]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     3ba:	movs	r2, #3
     3bc:	mov	r0, r1

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     3be:	cbz	r3, 3c4 <EncoderTool::EncPlexBase::~EncPlexBase()+0x30>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     3c0:	blx	r3
     3c2:	ldr	r6, [r7, #4]
     3c4:	cmp	r6, r4
     3c6:	bne.n	3ae <EncoderTool::EncPlexBase::~EncPlexBase()+0x1a>
     3c8:	ldr.w	r1, [r5, #-48]
     3cc:	movs	r3, #44	; 0x2c
     3ce:	mul.w	r1, r3, r1
     3d2:	adds	r1, #8
     3d4:	sub.w	r0, r4, #8
     3d8:	bl	1d40 <operator delete[](void*, unsigned int)>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     3dc:	ldr	r3, [r7, #16]
     3de:	cbz	r3, 3ea <EncoderTool::EncPlexBase::~EncPlexBase()+0x56>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     3e0:	add.w	r1, r7, #8
     3e4:	movs	r2, #3
     3e6:	mov	r0, r1
     3e8:	blx	r3
    }
     3ea:	mov	r0, r7
     3ec:	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    EncPlexBase::~EncPlexBase()
    {
        delete[] encoders;
     3ee:	mov	r4, r6
     3f0:	b.n	3d2 <EncoderTool::EncPlexBase::~EncPlexBase()+0x3e>
     3f2:	nop

000003f4 <EncoderTool::EncPlexBase::operator[](unsigned int)>:
    }

    EncoderBase &EncPlexBase::operator[](std::size_t idx)
    {
        return idx < encoderCount ? encoders[idx] : encoders[encoderCount - 1];
     3f4:	ldr	r2, [r0, #0]
     3f6:	cmp	r2, r1
     3f8:	bhi.n	408 <EncoderTool::EncPlexBase::operator[](unsigned int)+0x14>
     3fa:	movs	r3, #44	; 0x2c
     3fc:	ldr	r1, [r0, #4]
     3fe:	mul.w	r3, r3, r2
     402:	subs	r3, #44	; 0x2c
     404:	adds	r0, r1, r3
    }
     406:	bx	lr
        delete[] encoders;
    }

    EncoderBase &EncPlexBase::operator[](std::size_t idx)
    {
        return idx < encoderCount ? encoders[idx] : encoders[encoderCount - 1];
     408:	ldr	r3, [r0, #4]
     40a:	movs	r0, #44	; 0x2c
     40c:	mla	r0, r0, r1, r3
     410:	bx	lr
     412:	nop

00000414 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)>:

namespace EncoderTool
{
    EncoderBase& EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
     414:	cmp	r1, #3
     416:	bhi.n	448 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x34>
     418:	tbb	[pc, r1]
     41c:	.word	0x02070c11
            case CountMode::half:
                stateMachine = &stateMachineHalf;
                invert = 0b00;
                break;
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
     420:	ldr	r2, [pc, #48]	; (454 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x40>)
                invert = 0b01;
     422:	movs	r3, #1
            case CountMode::half:
                stateMachine = &stateMachineHalf;
                invert = 0b00;
                break;
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
     424:	str	r2, [r0, #40]	; 0x28
                invert = 0b01;
     426:	str	r3, [r0, #16]
                break;
     428:	bx	lr
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
                invert = 0b00;
                break;
            case CountMode::half:
                stateMachine = &stateMachineHalf;
     42a:	ldr	r2, [pc, #40]	; (454 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x40>)
                invert = 0b00;
     42c:	movs	r3, #0
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
                invert = 0b00;
                break;
            case CountMode::half:
                stateMachine = &stateMachineHalf;
     42e:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     430:	str	r3, [r0, #16]
                break;
     432:	bx	lr
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
                invert = 0b11;
                break;
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
     434:	ldr	r2, [pc, #32]	; (458 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x44>)
                invert = 0b00;
     436:	movs	r3, #0
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
                invert = 0b11;
                break;
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
     438:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     43a:	str	r3, [r0, #16]
                break;
     43c:	bx	lr
    EncoderBase& EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
        {
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
     43e:	ldr	r2, [pc, #24]	; (458 <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x44>)
                invert = 0b11;
     440:	movs	r3, #3
    EncoderBase& EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
        {
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
     442:	str	r2, [r0, #40]	; 0x28
                invert = 0b11;
     444:	str	r3, [r0, #16]
                break;
     446:	bx	lr
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
                invert = 0b01;
                break;
            default:
                stateMachine = &stateMachineFull;
     448:	ldr	r2, [pc, #16]	; (45c <EncoderTool::EncoderBase::setCountMode(EncoderTool::CountMode)+0x48>)
                invert = 0b00;
     44a:	movs	r3, #0
            case CountMode::halfAlt:
                stateMachine = &stateMachineHalf;
                invert = 0b01;
                break;
            default:
                stateMachine = &stateMachineFull;
     44c:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     44e:	str	r3, [r0, #16]
        }
        return *this;
    }
     450:	bx	lr
     452:	nop
     454:	.word	0x20000040
     458:	.word	0x20000024
     45c:	.word	0x2000005c

00000460 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)>:
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     460:	mov	r3, r0
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     462:	orr.w	r1, r2, r1, lsl #1
     466:	ldr	r0, [r0, #16]
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     468:	push	{r4, r5, lr}
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     46a:	ldr	r4, [r3, #40]	; 0x28
     46c:	eors	r0, r1
     46e:	ldrb	r5, [r3, #20]
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     470:	sub	sp, #36	; 0x24
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     472:	add.w	r4, r4, r5, lsl #2
     476:	ldrb	r2, [r4, r0]
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state
     478:	and.w	r1, r2, #15
    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
     47c:	and.w	r2, r2, #240	; 0xf0
        curState &=  0x0F;                                  // remove the direction info from state

        if(direction == UP)
     480:	cmp	r2, #16
    {
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state
     482:	strb	r1, [r3, #20]

        if(direction == UP)
     484:	beq.n	4c0 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x60>
            }
            value = maxVal;
            return false;
        }

        if (direction == DOWN)
     486:	cmp	r2, #32
     488:	beq.n	492 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x32>
        if (direction == ERR)
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
     48a:	movs	r4, #0
    }
     48c:	mov	r0, r4
     48e:	add	sp, #36	; 0x24
     490:	pop	{r4, r5, pc}
            return false;
        }

        if (direction == DOWN)
        {
            if (value > minVal)  // minVal = INT_MIN if no limits set
     492:	ldr	r2, [r3, #0]
     494:	ldr	r1, [r3, #4]
     496:	cmp	r2, r1
     498:	ble.n	512 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0xb2>
            {
                value--;
     49a:	subs	r1, r2, #1
                if (callback != nullptr) callback(value, -1);
     49c:	ldr	r2, [r3, #32]

        if (direction == DOWN)
        {
            if (value > minVal)  // minVal = INT_MIN if no limits set
            {
                value--;
     49e:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, -1);
     4a0:	cbz	r2, 4b8 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     4a2:	mov.w	r4, #4294967295
     4a6:	add	r2, sp, #32
     4a8:	str	r1, [sp, #16]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
     4aa:	add.w	r0, r3, #24
     4ae:	str.w	r4, [r2, #-12]!
     4b2:	add	r1, sp, #16
     4b4:	ldr	r3, [r3, #36]	; 0x24
     4b6:	blx	r3
                return true;
     4b8:	movs	r4, #1
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     4ba:	mov	r0, r4
     4bc:	add	sp, #36	; 0x24
     4be:	pop	{r4, r5, pc}
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
     4c0:	ldr	r2, [r3, #0]
     4c2:	ldr	r1, [r3, #8]
     4c4:	cmp	r2, r1
     4c6:	blt.n	4ee <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x8e>
            {
                value++;
                if (callback != nullptr) callback(value, +1);
                return true;
            }
            if (periodic)       // if periodic, wrap to minVal, else stop counting
     4c8:	ldrb	r4, [r3, #12]
     4ca:	cmp	r4, #0
     4cc:	beq.n	538 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0xd8>
            {
                value = minVal;
     4ce:	ldr	r1, [r3, #4]
                if (callback != nullptr) callback(value, +1);
     4d0:	ldr	r2, [r3, #32]
                if (callback != nullptr) callback(value, +1);
                return true;
            }
            if (periodic)       // if periodic, wrap to minVal, else stop counting
            {
                value = minVal;
     4d2:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, +1);
     4d4:	cmp	r2, #0
     4d6:	beq.n	4b8 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     4d8:	movs	r5, #1
     4da:	add	r2, sp, #32
     4dc:	str	r1, [sp, #8]
     4de:	add.w	r0, r3, #24
     4e2:	str.w	r5, [r2, #-20]!
     4e6:	add	r1, sp, #8
     4e8:	ldr	r3, [r3, #36]	; 0x24
     4ea:	blx	r3
     4ec:	b.n	48c <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x2c>

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
            {
                value++;
     4ee:	adds	r1, r2, #1
                if (callback != nullptr) callback(value, +1);
     4f0:	ldr	r2, [r3, #32]

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
            {
                value++;
     4f2:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, +1);
     4f4:	cmp	r2, #0
     4f6:	beq.n	4b8 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     4f8:	movs	r4, #1
     4fa:	add	r2, sp, #32
     4fc:	str	r1, [sp, #0]
     4fe:	add.w	r0, r3, #24
     502:	str.w	r4, [r2, #-28]!
     506:	mov	r1, sp
     508:	ldr	r3, [r3, #36]	; 0x24
     50a:	blx	r3
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     50c:	mov	r0, r4
     50e:	add	sp, #36	; 0x24
     510:	pop	{r4, r5, pc}
            {
                value--;
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            if (periodic)        // if periodic, wrap to maxVal, else stop counting
     512:	ldrb	r4, [r3, #12]
     514:	cbz	r4, 538 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0xd8>
            {
                value = maxVal;
     516:	ldr	r1, [r3, #8]
                if (callback != nullptr) callback(value, -1);
     518:	ldr	r2, [r3, #32]
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            if (periodic)        // if periodic, wrap to maxVal, else stop counting
            {
                value = maxVal;
     51a:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, -1);
     51c:	cmp	r2, #0
     51e:	beq.n	4b8 <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x58>
     520:	mov.w	r5, #4294967295
     524:	add	r2, sp, #32
     526:	str	r1, [sp, #24]
     528:	add.w	r0, r3, #24
     52c:	str.w	r5, [r2, #-4]!
     530:	add	r1, sp, #24
     532:	ldr	r3, [r3, #36]	; 0x24
     534:	blx	r3
     536:	b.n	48c <EncoderTool::EncoderBase::update(unsigned long, unsigned long)+0x2c>
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     538:	mov	r0, r4
            {
                value = maxVal;
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            value = minVal;
     53a:	str	r1, [r3, #0]
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     53c:	add	sp, #36	; 0x24
     53e:	pop	{r4, r5, pc}

00000540 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     540:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     542:	ldr	r1, [pc, #80]	; (594 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     544:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     548:	ldr	r5, [pc, #76]	; (598 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     54a:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     54c:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     550:	ldr	r6, [pc, #72]	; (59c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     552:	ldr	r2, [pc, #76]	; (5a0 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     554:	add.w	r5, r5, r0, lsl #5
     558:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     55a:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     55c:	mov	r0, r5
     55e:	ldrh	r2, [r6, #0]
     560:	bl	17e0 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     564:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     566:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     56a:	add	r1, r4
	asm("dsb");
     56c:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     570:	ldr	r2, [pc, #48]	; (5a4 <rx_queue_transfer+0x64>)
     572:	str	r3, [r2, #0]
		location += 32;
     574:	adds	r3, #32
	} while (location < end_addr);
     576:	cmp	r1, r3
     578:	bhi.n	572 <rx_queue_transfer+0x32>
	asm("dsb");
     57a:	dsb	sy
	asm("isb");
     57e:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     582:	movs	r0, #3
     584:	mov	r1, r5
     586:	bl	1838 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     58a:	ldr	r3, [pc, #28]	; (5a8 <rx_queue_transfer+0x68>)
     58c:	mov.w	r2, #131072	; 0x20000
     590:	str	r2, [r3, #0]
     592:	pop	{r3, r4, r5, r6, r7, pc}
     594:	.word	0x20200000
     598:	.word	0x20001080
     59c:	.word	0x2000118e
     5a0:	.word	0xe000e18c
     5a4:	.word	0xe000ef5c
     5a8:	.word	0xe000e10c

000005ac <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     5ac:	ldr	r2, [pc, #144]	; (640 <rx_event+0x94>)
     5ae:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
     5b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     5b4:	ubfx	r3, r3, #16, #15
     5b8:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
     5ba:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     5bc:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     5be:	cmp	r4, #0
     5c0:	ble.n	634 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
     5c2:	ldr	r1, [pc, #128]	; (644 <rx_event+0x98>)
		if (head != rx_tail) {
     5c4:	ldr	r2, [pc, #128]	; (648 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     5c6:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
     5c8:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     5ca:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     5cc:	ldr	r0, [pc, #124]	; (64c <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
     5ce:	ldr	r6, [pc, #128]	; (650 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
     5d0:	cmp	r3, r2
     5d2:	beq.n	5e4 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     5d4:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     5d8:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     5dc:	rsb	r2, r7, #512	; 0x200
     5e0:	cmp	r4, r2
     5e2:	bls.n	60a <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     5e4:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
     5e6:	movs	r2, #0
     5e8:	ldr	r7, [pc, #104]	; (654 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     5ea:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
     5ec:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
     5f0:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
     5f4:	ldr	r6, [pc, #96]	; (658 <rx_event+0xac>)
     5f6:	ite	ls
     5f8:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     5fa:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
     5fc:	strb	r2, [r1, #0]
		rx_available += len;
     5fe:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
     600:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
     602:	add	r4, r2
     604:	str	r4, [r6, #0]
     606:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     60a:	ldr	r3, [pc, #80]	; (65c <rx_event+0xb0>)
     60c:	add.w	r0, r7, r8, lsl #9
     610:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     612:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     614:	add.w	r1, r3, r5, lsl #9
     618:	add	r0, r3
     61a:	bl	1d44 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
     61e:	ldr	r2, [pc, #56]	; (658 <rx_event+0xac>)
				rx_queue_transfer(i);
     620:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     622:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     626:	ldr	r3, [r2, #0]
     628:	add	r4, r3
     62a:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     62c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
     630:	b.w	540 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     634:	mov	r0, r5
	}
}
     636:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     63a:	b.w	540 <rx_queue_transfer>
     63e:	nop
     640:	.word	0x2000118e
     644:	.word	0x200011a4
     648:	.word	0x20001180
     64c:	.word	0x20001184
     650:	.word	0x20001190
     654:	.word	0x2000105c
     658:	.word	0x200011a0
     65c:	.word	0x20200000

00000660 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     660:	ldr	r3, [pc, #120]	; (6dc <usb_serial_flush_callback+0x7c>)
     662:	ldrb	r2, [r3, #0]
     664:	cbnz	r2, 67e <usb_serial_flush_callback+0x1e>
     666:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
     66a:	ldr	r2, [pc, #116]	; (6e0 <usb_serial_flush_callback+0x80>)
     66c:	ldrb	r2, [r2, #0]
     66e:	cbz	r2, 67e <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
     670:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
     674:	ldr	r5, [pc, #108]	; (6e4 <usb_serial_flush_callback+0x84>)
     676:	ldrh	r2, [r5, #0]
     678:	cbnz	r2, 680 <usb_serial_flush_callback+0x20>
     67a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     67e:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     680:	ldr	r6, [pc, #100]	; (6e8 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     682:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     686:	ldr	r7, [pc, #100]	; (6ec <usb_serial_flush_callback+0x8c>)
     688:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     68a:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     68c:	ldr	r4, [pc, #96]	; (6f0 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     68e:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     692:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     696:	mov	r0, r7
     698:	mov	r1, r4
     69a:	bl	17e0 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     69e:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     6a2:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     6a6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     6aa:	ldr	r3, [pc, #72]	; (6f4 <usb_serial_flush_callback+0x94>)
     6ac:	str	r1, [r3, #0]
		location += 32;
     6ae:	adds	r1, #32
	} while (location < end_addr);
     6b0:	cmp	r2, r1
     6b2:	bhi.n	6ac <usb_serial_flush_callback+0x4c>
	asm("dsb");
     6b4:	dsb	sy
	asm("isb");
     6b8:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     6bc:	movs	r0, #4
     6be:	mov	r1, r7
     6c0:	bl	1810 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     6c4:	ldrb	r3, [r6, #0]
     6c6:	ldr	r2, [pc, #32]	; (6e8 <usb_serial_flush_callback+0x88>)
     6c8:	adds	r3, #1
     6ca:	uxtb	r3, r3
     6cc:	cmp	r3, #3
     6ce:	it	hi
     6d0:	movhi	r3, #0
     6d2:	strb	r3, [r2, #0]
	tx_available = 0;
     6d4:	movs	r3, #0
     6d6:	strh	r3, [r5, #0]
     6d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     6dc:	.word	0x2000106e
     6e0:	.word	0x20001278
     6e4:	.word	0x200011a6
     6e8:	.word	0x2000106f
     6ec:	.word	0x200011c0
     6f0:	.word	0x20201000
     6f4:	.word	0xe000ef70

000006f8 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
     6f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6fc:	sub	sp, #20
     6fe:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     700:	str	r1, [sp, #4]
     702:	cmp	r1, #0
     704:	beq.w	84c <usb_serial_write.part.1+0x154>
     708:	movs	r3, #0
     70a:	ldr.w	r8, [pc, #348]	; 868 <usb_serial_write.part.1+0x170>
     70e:	ldr.w	r9, [pc, #332]	; 85c <usb_serial_write.part.1+0x164>
     712:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
     714:	ldr	r6, [pc, #312]	; (850 <usb_serial_write.part.1+0x158>)
     716:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     71a:	ldr.w	sl, [pc, #336]	; 86c <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
     71e:	ldr.w	fp, [pc, #336]	; 870 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
     722:	ldr	r2, [pc, #304]	; (854 <usb_serial_write.part.1+0x15c>)
     724:	ldrb	r4, [r2, #0]
     726:	ldr	r2, [pc, #304]	; (858 <usb_serial_write.part.1+0x160>)
     728:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     72c:	cmp	r3, #0
     72e:	bne.n	80e <usb_serial_write.part.1+0x116>
     730:	mov	r5, r3
     732:	mov	r4, r3
     734:	b.n	760 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     736:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
     73a:	cbnz	r4, 73e <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
     73c:	ldr	r5, [r6, #0]
     73e:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     740:	cmp	r3, #0
     742:	bne.n	802 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
     744:	ldr	r3, [r6, #0]
     746:	subs	r3, r3, r5
     748:	cmp	r3, #120	; 0x78
     74a:	bhi.n	840 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     74c:	ldrb.w	r3, [sl]
     750:	cmp	r3, #0
     752:	beq.n	802 <usb_serial_write.part.1+0x10a>
			yield();
     754:	bl	1a14 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     758:	ldrh.w	r3, [r8]
     75c:	cmp	r3, #0
     75e:	bne.n	80a <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
     760:	mov	r0, r7
     762:	bl	185c <usb_transfer_status>
			if (!(status & 0x80)) {
     766:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     76a:	ldr	r2, [pc, #240]	; (85c <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
     76c:	bne.n	736 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     76e:	mov.w	r3, #2048	; 0x800
     772:	ldr	r2, [pc, #224]	; (854 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
     774:	strb.w	r0, [r9]
     778:	ldrb	r4, [r2, #0]
     77a:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     77c:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     780:	lsls	r4, r4, #11
		if (size >= tx_available) {
     782:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     784:	ldr	r1, [pc, #216]	; (860 <usb_serial_write.part.1+0x168>)
     786:	add	r0, r4
		if (size >= tx_available) {
     788:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     78a:	add	r0, r1
		if (size >= tx_available) {
     78c:	bcc.n	816 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     78e:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
     790:	ldr	r1, [sp, #8]
     792:	bl	1d44 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
     796:	movs	r3, #0
     798:	mov	r1, r4
     79a:	mov.w	r2, #2048	; 0x800
     79e:	mov	r0, r7
     7a0:	bl	17e0 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     7a4:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     7a8:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
     7ac:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     7b0:	str.w	r3, [fp]
		location += 32;
     7b4:	adds	r3, #32
	} while (location < end_addr);
     7b6:	cmp	r4, r3
     7b8:	bhi.n	7b0 <usb_serial_write.part.1+0xb8>
	asm("dsb");
     7ba:	dsb	sy
	asm("isb");
     7be:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
     7c2:	movs	r0, #4
     7c4:	mov	r1, r7
     7c6:	bl	1810 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
     7ca:	ldr	r3, [pc, #136]	; (854 <usb_serial_write.part.1+0x15c>)
     7cc:	ldr	r2, [pc, #132]	; (854 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
     7ce:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     7d0:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     7d2:	ldr	r0, [pc, #144]	; (864 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     7d4:	adds	r3, #1
     7d6:	uxtb	r3, r3
     7d8:	cmp	r3, #3
     7da:	it	hi
     7dc:	movhi	r3, #0
     7de:	strb	r3, [r2, #0]
			size -= tx_available;
     7e0:	ldrh.w	r2, [r8]
			sent += tx_available;
     7e4:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
     7e6:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
     7ea:	add	r3, r2
     7ec:	str	r3, [sp, #0]
			data += tx_available;
     7ee:	ldr	r3, [sp, #8]
     7f0:	add	r3, r2
     7f2:	str	r3, [sp, #8]
     7f4:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     7f6:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     7fa:	ldr	r1, [sp, #4]
     7fc:	subs	r2, r1, r2
     7fe:	str	r2, [sp, #4]
     800:	bne.n	722 <usb_serial_write.part.1+0x2a>
     802:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     804:	add	sp, #20
     806:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     80a:	ldr	r2, [pc, #72]	; (854 <usb_serial_write.part.1+0x15c>)
     80c:	ldrb	r4, [r2, #0]
     80e:	mov	r2, r3
     810:	rsb	r0, r3, #2048	; 0x800
     814:	b.n	780 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
     816:	ldr	r4, [sp, #4]
     818:	ldr	r1, [sp, #8]
     81a:	mov	r2, r4
     81c:	str	r3, [sp, #12]
     81e:	bl	1d44 <memcpy>
			tx_available -= size;
     822:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     824:	ldr	r2, [pc, #60]	; (864 <usb_serial_write.part.1+0x16c>)
     826:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
     82a:	subs	r3, r3, r4
     82c:	strh.w	r3, [r8]
     830:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     832:	str.w	r1, [r2, #132]	; 0x84
     836:	mov	r0, r3
     838:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     83a:	add	sp, #20
     83c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     840:	movs	r3, #1
				return sent;
     842:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     844:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     846:	add	sp, #20
     848:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     84c:	ldr	r0, [sp, #4]
     84e:	b.n	804 <usb_serial_write.part.1+0x10c>
     850:	.word	0x20001284
     854:	.word	0x2000106f
     858:	.word	0x200011c0
     85c:	.word	0x200011a5
     860:	.word	0x20201000
     864:	.word	0x402e0000
     868:	.word	0x200011a6
     86c:	.word	0x20001278
     870:	.word	0xe000ef70

00000874 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
     874:	bx	lr
     876:	nop

00000878 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     878:	ldr	r3, [pc, #196]	; (940 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
     87a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     87e:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
     880:	ldr	r7, [pc, #192]	; (944 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     882:	cmp	r3, #0
     884:	beq.n	930 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
     886:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
     88a:	ldr.w	r8, [pc, #236]	; 978 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
     88e:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
     890:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     894:	movs	r1, #0
     896:	movs	r2, #128	; 0x80
     898:	ldr	r0, [pc, #172]	; (948 <usb_serial_configure+0xd0>)
	tx_head = 0;
     89a:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     89c:	ldr	r6, [pc, #172]	; (94c <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     89e:	bl	297c <memset>
	tx_head = 0;
     8a2:	ldr	r4, [pc, #172]	; (950 <usb_serial_configure+0xd8>)
	tx_available = 0;
     8a4:	ldr	r3, [pc, #172]	; (954 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
     8a6:	mov	r1, r5
     8a8:	mov.w	r2, #256	; 0x100
     8ac:	ldr	r0, [pc, #168]	; (958 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
     8ae:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     8b0:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
     8b2:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     8b4:	bl	297c <memset>
	memset(rx_count, 0, sizeof(rx_count));
     8b8:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     8ba:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     8bc:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     8be:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     8c0:	str	r5, [r6, #8]
     8c2:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     8c4:	ldr	r1, [pc, #148]	; (95c <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     8c6:	ldr	r6, [pc, #152]	; (960 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
     8c8:	ldr	r0, [pc, #152]	; (964 <usb_serial_configure+0xec>)
	rx_available = 0;
     8ca:	ldr.w	lr, [pc, #176]	; 97c <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     8ce:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     8d0:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
     8d2:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     8d4:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     8d6:	str	r5, [r6, #0]
     8d8:	str	r5, [r6, #4]
     8da:	str	r5, [r6, #8]
     8dc:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
     8de:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     8e2:	bl	1778 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
     8e6:	ldrh.w	r1, [r8]
     8ea:	mov	r2, r5
     8ec:	ldr	r3, [pc, #120]	; (968 <usb_serial_configure+0xf0>)
     8ee:	movs	r0, #3
     8f0:	bl	1714 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
     8f4:	mov	r3, r5
     8f6:	ldrh	r1, [r7, #0]
     8f8:	movs	r2, #1
     8fa:	movs	r0, #4
     8fc:	bl	1778 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     900:	mov	r0, r4
     902:	adds	r4, #1
     904:	bl	540 <rx_queue_transfer>
     908:	cmp	r4, #8
     90a:	bne.n	900 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
     90c:	ldr	r3, [pc, #92]	; (96c <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
     90e:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     910:	ldr	r0, [pc, #92]	; (970 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
     912:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     914:	ldr	r4, [pc, #92]	; (974 <usb_serial_configure+0xfc>)
     916:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
     918:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
     91c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
     920:	ldr.w	r2, [r3, #328]	; 0x148
     924:	orr.w	r2, r2, #16777216	; 0x1000000
     928:	str.w	r2, [r3, #328]	; 0x148
     92c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     930:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
     932:	ldr.w	r8, [pc, #68]	; 978 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     936:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
     938:	strh.w	r3, [r8]
     93c:	b.n	894 <usb_serial_configure+0x1c>
     93e:	nop
     940:	.word	0x20001250
     944:	.word	0x2000106c
     948:	.word	0x200011c0
     94c:	.word	0x20001190
     950:	.word	0x2000106f
     954:	.word	0x200011a6
     958:	.word	0x20001080
     95c:	.word	0x200011a4
     960:	.word	0x2000105c
     964:	.word	0x20001180
     968:	.word	0x000005ad
     96c:	.word	0x402e0000
     970:	.word	0x20001240
     974:	.word	0x00000661
     978:	.word	0x2000118e
     97c:	.word	0x200011a0

00000980 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     980:	ldr	r3, [pc, #196]	; (a48 <usb_serial_read+0xc8>)
     982:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     986:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     98a:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     98c:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     98e:	ldr	r3, [pc, #188]	; (a4c <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     990:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     992:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     994:	cmp	r1, #0
     996:	beq.n	a40 <usb_serial_read+0xc0>
     998:	ldr	r3, [pc, #180]	; (a50 <usb_serial_read+0xd0>)
     99a:	uxtb	r4, r4
     99c:	ldrb	r3, [r3, #0]
     99e:	cmp	r4, r3
     9a0:	beq.n	a44 <usb_serial_read+0xc4>
     9a2:	mov	sl, r0
     9a4:	movs	r7, #0
     9a6:	ldr.w	fp, [pc, #192]	; a68 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
     9aa:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     9ac:	ldr	r3, [pc, #164]	; (a54 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
     9ae:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     9b2:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     9b4:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     9b6:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
     9b8:	ldr	r3, [pc, #156]	; (a58 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     9ba:	it	cs
     9bc:	movcs	r4, #0
		uint32_t i = rx_list[tail];
     9be:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     9c0:	ldr	r3, [pc, #144]	; (a54 <usb_serial_read+0xd4>)
     9c2:	ldrh.w	lr, [r3, r5, lsl #1]
     9c6:	ldr	r3, [pc, #148]	; (a5c <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     9c8:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     9cc:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     9d0:	ldr	r3, [pc, #140]	; (a60 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     9d2:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     9d6:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     9d8:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     9da:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
     9dc:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     9de:	bcs.n	a14 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
     9e0:	add.w	r1, lr, r5, lsl #9
     9e4:	mov	r2, r8
     9e6:	add	r1, r3
     9e8:	bl	1d44 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
     9ec:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     9ee:	ldr.w	r1, [fp]
     9f2:	mov	r0, r9
			rx_index[i] += len;
     9f4:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     9f8:	rsb	r1, r8, r1
			rx_index[i] += len;
     9fc:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     9fe:	str.w	r1, [fp]
			rx_index[i] += len;
     a02:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
     a06:	ldr	r3, [pc, #92]	; (a64 <usb_serial_read+0xe4>)
     a08:	mov.w	r2, #131072	; 0x20000
     a0c:	str	r2, [r3, #0]
	return count;
}
     a0e:	add	sp, #12
     a10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     a14:	bl	1d44 <memcpy>
			p += avail;
			rx_available -= avail;
     a18:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     a1c:	uxtb	r3, r4
			rx_queue_transfer(i);
     a1e:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
     a20:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
     a22:	add	sl, r6
			rx_available -= avail;
     a24:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     a28:	ldr	r2, [pc, #32]	; (a4c <usb_serial_read+0xcc>)
     a2a:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
     a2c:	bl	540 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     a30:	cmp	r9, r7
     a32:	bls.n	a3c <usb_serial_read+0xbc>
     a34:	ldr	r3, [pc, #24]	; (a50 <usb_serial_read+0xd0>)
     a36:	ldrb	r3, [r3, #0]
     a38:	cmp	r4, r3
     a3a:	bne.n	9aa <usb_serial_read+0x2a>
     a3c:	mov	r0, r7
     a3e:	b.n	a06 <usb_serial_read+0x86>
     a40:	mov	r0, r1
     a42:	b.n	a06 <usb_serial_read+0x86>
     a44:	movs	r0, #0
     a46:	b.n	a06 <usb_serial_read+0x86>
     a48:	.word	0xe000e18c
     a4c:	.word	0x20001180
     a50:	.word	0x200011a4
     a54:	.word	0x2000105c
     a58:	.word	0x20001184
     a5c:	.word	0x20001190
     a60:	.word	0x20200000
     a64:	.word	0xe000e10c
     a68:	.word	0x200011a0

00000a6c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     a6c:	ldr	r3, [pc, #44]	; (a9c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
     a6e:	ldr	r2, [pc, #48]	; (aa0 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     a70:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
     a72:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     a74:	uxtb	r3, r3
	if (tail == rx_head) return -1;
     a76:	cmp	r3, r2
     a78:	beq.n	a96 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
     a7a:	adds	r3, #1
	uint32_t i = rx_list[tail];
     a7c:	ldr	r0, [pc, #36]	; (aa4 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     a7e:	ldr	r2, [pc, #40]	; (aa8 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     a80:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     a82:	ldr	r1, [pc, #40]	; (aac <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     a84:	it	cs
     a86:	movcs	r3, #0
	uint32_t i = rx_list[tail];
     a88:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     a8a:	ldrh.w	r1, [r1, r3, lsl #1]
     a8e:	add.w	r3, r2, r3, lsl #9
     a92:	ldrb	r0, [r3, r1]
     a94:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
     a96:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
     a9a:	bx	lr
     a9c:	.word	0x20001180
     aa0:	.word	0x200011a4
     aa4:	.word	0x20001184
     aa8:	.word	0x20200000
     aac:	.word	0x2000105c

00000ab0 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
     ab0:	ldr	r3, [pc, #4]	; (ab8 <usb_serial_available+0x8>)
     ab2:	ldr	r0, [r3, #0]
}
     ab4:	bx	lr
     ab6:	nop
     ab8:	.word	0x200011a0

00000abc <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
     abc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
     ac0:	ldr	r6, [pc, #84]	; (b18 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
     ac2:	ldr	r5, [pc, #88]	; (b1c <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     ac4:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
     ac6:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     ac8:	uxtb	r4, r4
	while (tail != rx_head) {
     aca:	cmp	r4, r3
     acc:	beq.n	b12 <usb_serial_flush_input+0x56>
     ace:	ldr.w	r9, [pc, #84]	; b24 <usb_serial_flush_input+0x68>
     ad2:	ldr.w	fp, [pc, #84]	; b28 <usb_serial_flush_input+0x6c>
     ad6:	ldr.w	r8, [pc, #84]	; b2c <usb_serial_flush_input+0x70>
     ada:	ldr	r7, [pc, #68]	; (b20 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
     adc:	adds	r4, #1
     ade:	cmp	r4, #8
     ae0:	uxtb.w	sl, r4
     ae4:	bls.n	aea <usb_serial_flush_input+0x2e>
     ae6:	movs	r4, #0
     ae8:	mov	sl, r4
		uint32_t i = rx_list[tail];
     aea:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
     aee:	ldr.w	r2, [fp]
     af2:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
     af6:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
     af8:	ldrh.w	r1, [r7, r1, lsl #1]
     afc:	subs	r3, r3, r1
     afe:	subs	r3, r2, r3
     b00:	str.w	r3, [fp]
		rx_queue_transfer(i);
     b04:	bl	540 <rx_queue_transfer>
		rx_tail = tail;
     b08:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
     b0c:	ldrb	r3, [r5, #0]
     b0e:	cmp	r4, r3
     b10:	bne.n	adc <usb_serial_flush_input+0x20>
     b12:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b16:	nop
     b18:	.word	0x20001180
     b1c:	.word	0x200011a4
     b20:	.word	0x2000105c
     b24:	.word	0x20001184
     b28:	.word	0x200011a0
     b2c:	.word	0x20001190

00000b30 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     b30:	push	{lr}
     b32:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
     b34:	movs	r1, #1
     b36:	add.w	r0, sp, #7
     b3a:	bl	980 <usb_serial_read>
     b3e:	cbz	r0, b4a <usb_serial_getchar+0x1a>
     b40:	ldrb.w	r0, [sp, #7]
	return -1;
}
     b44:	add	sp, #12
     b46:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
     b4a:	mov.w	r0, #4294967295
     b4e:	b.n	b44 <usb_serial_getchar+0x14>

00000b50 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     b50:	ldr	r3, [pc, #36]	; (b78 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     b52:	push	{lr}
     b54:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     b56:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     b58:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     b5c:	cbnz	r3, b68 <usb_serial_putchar+0x18>
     b5e:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
     b62:	add	sp, #12
     b64:	ldr.w	pc, [sp], #4
     b68:	movs	r1, #1
     b6a:	add.w	r0, sp, #7
     b6e:	bl	6f8 <usb_serial_write.part.1>
     b72:	add	sp, #12
     b74:	ldr.w	pc, [sp], #4
     b78:	.word	0x20001278

00000b7c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     b7c:	ldr	r3, [pc, #16]	; (b90 <usb_serial_write+0x14>)
     b7e:	ldrb	r3, [r3, #0]
     b80:	and.w	r2, r3, #255	; 0xff
     b84:	cbz	r3, b8a <usb_serial_write+0xe>
     b86:	b.w	6f8 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     b8a:	mov	r0, r2
     b8c:	bx	lr
     b8e:	nop
     b90:	.word	0x20001278

00000b94 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
     b94:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     b98:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
     b9a:	ldr.w	r8, [pc, #64]	; bdc <usb_serial_write_buffer_free+0x48>
     b9e:	movs	r3, #1
     ba0:	ldr	r5, [pc, #48]	; (bd4 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
     ba2:	mov	r7, r4
     ba4:	ldr	r6, [pc, #48]	; (bd8 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
     ba6:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     baa:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     bac:	mov	r0, r5
     bae:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     bb0:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     bb2:	add.w	r4, r4, #1
		if (i == tx_head) continue;
     bb6:	beq.n	bc4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     bb8:	bl	185c <usb_transfer_status>
     bbc:	lsls	r3, r0, #24
     bbe:	it	pl
     bc0:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     bc4:	cmp	r4, #4
     bc6:	bne.n	baa <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     bc8:	movs	r3, #0
	return sum;
}
     bca:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     bcc:	strb.w	r3, [r8]
	return sum;
}
     bd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     bd4:	.word	0x200011c0
     bd8:	.word	0x2000106f
     bdc:	.word	0x2000106e

00000be0 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
     be0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
     be4:	ldr	r3, [pc, #124]	; (c64 <usb_serial_flush_output+0x84>)
     be6:	ldrb	r3, [r3, #0]
     be8:	cbz	r3, bf0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
     bea:	ldr	r5, [pc, #124]	; (c68 <usb_serial_flush_output+0x88>)
     bec:	ldrh	r2, [r5, #0]
     bee:	cbnz	r2, bf4 <usb_serial_flush_output+0x14>
     bf0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     bf4:	ldr.w	r8, [pc, #132]	; c7c <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     bf8:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     bfc:	ldr	r6, [pc, #108]	; (c6c <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     bfe:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
     c02:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     c06:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     c08:	ldr	r4, [pc, #100]	; (c70 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     c0a:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     c0c:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     c10:	ldr	r7, [pc, #96]	; (c74 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     c12:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     c16:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     c18:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     c1c:	mov	r1, r4
     c1e:	bl	17e0 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     c22:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     c26:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     c2a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     c2e:	ldr	r3, [pc, #72]	; (c78 <usb_serial_flush_output+0x98>)
     c30:	str	r1, [r3, #0]
		location += 32;
     c32:	adds	r1, #32
	} while (location < end_addr);
     c34:	cmp	r2, r1
     c36:	bhi.n	c30 <usb_serial_flush_output+0x50>
	asm("dsb");
     c38:	dsb	sy
	asm("isb");
     c3c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     c40:	movs	r0, #4
     c42:	mov	r1, r6
     c44:	bl	1810 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     c48:	ldrb.w	r3, [r8]
     c4c:	ldr	r2, [pc, #44]	; (c7c <usb_serial_flush_output+0x9c>)
     c4e:	adds	r3, #1
     c50:	uxtb	r3, r3
     c52:	cmp	r3, #3
     c54:	it	hi
     c56:	movhi	r3, #0
     c58:	strb	r3, [r2, #0]
	tx_available = 0;
     c5a:	movs	r3, #0
     c5c:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
     c5e:	strb	r3, [r7, #0]
     c60:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     c64:	.word	0x20001278
     c68:	.word	0x200011a6
     c6c:	.word	0x200011c0
     c70:	.word	0x20201000
     c74:	.word	0x2000106e
     c78:	.word	0xe000ef70
     c7c:	.word	0x2000106f

00000c80 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     c80:	ldr	r2, [pc, #600]	; (edc <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     c82:	ldr	r3, [pc, #604]	; (ee0 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     c84:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     c86:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     c8a:	ldr	r4, [pc, #600]	; (ee4 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     c8c:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     c90:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     c92:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     c94:	bls.n	cd0 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     c96:	ldr	r3, [pc, #592]	; (ee8 <set_arm_clock+0x268>)
     c98:	cmp	r0, r3
     c9a:	bls.w	ec8 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     c9e:	ldr	r3, [pc, #588]	; (eec <set_arm_clock+0x26c>)
     ca0:	movw	r5, #1575	; 0x627
     ca4:	ldr	r7, [pc, #584]	; (ef0 <set_arm_clock+0x270>)
     ca6:	add	r3, r0
     ca8:	ldr	r4, [pc, #584]	; (ef4 <set_arm_clock+0x274>)
     caa:	lsrs	r2, r3, #8
     cac:	umull	r3, r2, r7, r2
     cb0:	lsrs	r3, r2, #7
     cb2:	add.w	r3, r3, r3, lsl #2
     cb6:	add.w	r2, r3, r3, lsl #2
     cba:	addw	r3, r2, #1250	; 0x4e2
     cbe:	cmp	r3, r5
     cc0:	it	cs
     cc2:	movcs	r3, r5
     cc4:	sub.w	r3, r3, #800	; 0x320
     cc8:	umull	r3, r5, r4, r3
     ccc:	lsrs	r5, r5, #3
     cce:	b.n	cda <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     cd0:	ldr	r5, [pc, #548]	; (ef8 <set_arm_clock+0x278>)
     cd2:	cmp	r0, r5
     cd4:	ite	ls
     cd6:	movls	r5, #6
     cd8:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     cda:	ldr	r2, [pc, #516]	; (ee0 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     cdc:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     ce0:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     ce4:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     ce6:	orr.w	r3, r3, #192	; 0xc0
     cea:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     cee:	bcs.n	d06 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     cf0:	ldr	r3, [pc, #496]	; (ee4 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     cf2:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     cf6:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     cf8:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     cfa:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     cfc:	ldr	r3, [r2, #0]
     cfe:	cmp	r3, #0
     d00:	bge.n	cfc <set_arm_clock+0x7c>
     d02:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     d06:	ands.w	r3, lr, #33554432	; 0x2000000
     d0a:	bne.n	d70 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     d0c:	ldr	r4, [pc, #492]	; (efc <set_arm_clock+0x27c>)
     d0e:	ldr	r2, [pc, #496]	; (f00 <set_arm_clock+0x280>)
     d10:	ldr.w	ip, [r4, #16]
     d14:	mov	r4, r2
     d16:	and.w	r2, ip, r2
     d1a:	cmp	r2, r4
     d1c:	itet	eq
     d1e:	moveq.w	r3, #402653184	; 0x18000000
     d22:	movne.w	r2, #4096	; 0x1000
     d26:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     d28:	eor.w	r4, lr, r3
     d2c:	tst.w	r4, #939524096	; 0x38000000
     d30:	beq.n	d44 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     d32:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     d36:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
     d3a:	ldr	r4, [pc, #420]	; (ee0 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     d3c:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
     d40:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     d44:	eor.w	r3, r1, r2
     d48:	tst.w	r3, #12288	; 0x3000
     d4c:	beq.n	d60 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     d4e:	ldr	r3, [pc, #400]	; (ee0 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     d50:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     d54:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     d56:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     d58:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     d5a:	ldr	r3, [r2, #72]	; 0x48
     d5c:	lsls	r4, r3, #28
     d5e:	bmi.n	d5a <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     d60:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     d64:	ldr	r2, [pc, #376]	; (ee0 <set_arm_clock+0x260>)
     d66:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     d6a:	ldr	r3, [r2, #72]	; 0x48
     d6c:	lsls	r1, r3, #26
     d6e:	bmi.n	d6a <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
     d70:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     d72:	ldr	r4, [pc, #400]	; (f04 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
     d74:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     d76:	mul.w	r3, r1, r2
     d7a:	mul.w	r3, r0, r3
     d7e:	cmp	r3, r4
     d80:	bhi.n	d96 <set_arm_clock+0x116>
		if (div_arm < 8) {
     d82:	cmp	r2, #7
     d84:	bhi.w	eb2 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
     d88:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     d8a:	mul.w	r3, r1, r2
     d8e:	mul.w	r3, r0, r3
     d92:	cmp	r3, r4
     d94:	bls.n	d82 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     d96:	ldr	r0, [pc, #368]	; (f08 <set_arm_clock+0x288>)
     d98:	ldr	r4, [pc, #368]	; (f0c <set_arm_clock+0x28c>)
     d9a:	add	r0, r3
     d9c:	umull	r0, r3, r4, r0
     da0:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
     da2:	cmp	r3, #108	; 0x6c
     da4:	bhi.w	ebe <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
     da8:	cmp	r3, #53	; 0x35
     daa:	bhi.w	ecc <set_arm_clock+0x24c>
     dae:	ldr.w	r8, [pc, #392]	; f38 <set_arm_clock+0x2b8>
     db2:	movs	r3, #54	; 0x36
     db4:	ldr	r0, [pc, #344]	; (f10 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     db6:	ldr.w	ip, [pc, #324]	; efc <set_arm_clock+0x27c>
     dba:	ldr	r4, [pc, #344]	; (f14 <set_arm_clock+0x294>)
     dbc:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     dc0:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     dc4:	and.w	r4, r9, r4
     dc8:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     dca:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     dce:	beq.n	de8 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     dd0:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     dd4:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     dd8:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     dda:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     dde:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     de2:	ldr	r3, [r4, #0]
     de4:	cmp	r3, #0
     de6:	bge.n	de2 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     de8:	ldr.w	ip, [pc, #244]	; ee0 <set_arm_clock+0x260>
     dec:	subs	r2, #1
     dee:	ldr.w	r3, [ip, #16]
     df2:	and.w	r3, r3, #7
     df6:	cmp	r3, r2
     df8:	beq.n	e0a <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     dfa:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     dfe:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     e00:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     e04:	ldr	r3, [r4, #72]	; 0x48
     e06:	lsls	r3, r3, #15
     e08:	bmi.n	e04 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     e0a:	subs	r1, #1
     e0c:	lsls	r1, r1, #10
     e0e:	eor.w	r3, lr, r1
     e12:	tst.w	r3, #7168	; 0x1c00
     e16:	beq.n	e32 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
     e18:	ldr	r3, [pc, #196]	; (ee0 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     e1a:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     e1e:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     e22:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     e24:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
     e28:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     e2c:	ldr	r3, [r2, #72]	; 0x48
     e2e:	lsls	r1, r3, #30
     e30:	bmi.n	e2c <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     e32:	ldr	r3, [pc, #228]	; (f18 <set_arm_clock+0x298>)
     e34:	ldr	r1, [pc, #228]	; (f1c <set_arm_clock+0x29c>)
     e36:	add	r3, r0
     e38:	lsrs	r3, r3, #7
     e3a:	umull	r3, r1, r1, r3
     e3e:	lsrs	r1, r1, #12
     e40:	cmp	r1, #4
     e42:	it	cs
     e44:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     e46:	subs	r3, r1, #1
     e48:	lsls	r3, r3, #8
     e4a:	eor.w	r2, lr, r3
     e4e:	tst.w	r2, #768	; 0x300
     e52:	beq.n	e64 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     e54:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     e58:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     e5c:	ldr	r2, [pc, #128]	; (ee0 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     e5e:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     e62:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     e64:	ldr	r3, [pc, #120]	; (ee0 <set_arm_clock+0x260>)
     e66:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     e68:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     e6a:	bic.w	r4, r4, #33554432	; 0x2000000
     e6e:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     e70:	ldr	r3, [r2, #72]	; 0x48
     e72:	lsls	r3, r3, #26
     e74:	bmi.n	e70 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     e76:	ldr	r3, [pc, #168]	; (f20 <set_arm_clock+0x2a0>)
     e78:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     e7c:	ldr	r4, [pc, #164]	; (f24 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     e7e:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     e80:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     e84:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     e86:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     e8a:	ldr	r4, [pc, #156]	; (f28 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     e8c:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     e90:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     e94:	ldr	r2, [pc, #148]	; (f2c <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     e96:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     e98:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     e9a:	bcs.n	eae <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     e9c:	ldr	r3, [pc, #68]	; (ee4 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     e9e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     ea2:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     ea4:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     ea6:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     ea8:	ldr	r3, [r2, #0]
     eaa:	cmp	r3, #0
     eac:	bge.n	ea8 <set_arm_clock+0x228>
	}

	return frequency;
}
     eae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
     eb2:	cmp	r1, #4
     eb4:	bhi.w	d96 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
     eb8:	adds	r1, #1
				div_arm = 1;
     eba:	movs	r2, #1
     ebc:	b.n	d76 <set_arm_clock+0xf6>
     ebe:	ldr.w	r8, [pc, #124]	; f3c <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
     ec2:	movs	r3, #108	; 0x6c
     ec4:	ldr	r0, [pc, #104]	; (f30 <set_arm_clock+0x2b0>)
     ec6:	b.n	db6 <set_arm_clock+0x136>
     ec8:	movs	r5, #18
     eca:	b.n	cda <set_arm_clock+0x5a>
     ecc:	ldr	r0, [pc, #100]	; (f34 <set_arm_clock+0x2b4>)
     ece:	ldr.w	r8, [pc, #112]	; f40 <set_arm_clock+0x2c0>
     ed2:	mul.w	r0, r0, r3
     ed6:	orr.w	r8, r3, r8
     eda:	b.n	db6 <set_arm_clock+0x136>
     edc:	.word	0x1f78a400
     ee0:	.word	0x400fc000
     ee4:	.word	0x40080000
     ee8:	.word	0x23c34600
     eec:	.word	0xdc3cba00
     ef0:	.word	0x004cb223
     ef4:	.word	0x51eb851f
     ef8:	.word	0x016e3600
     efc:	.word	0x400d8000
     f00:	.word	0x80003040
     f04:	.word	0x269fb1ff
     f08:	.word	0x005b8d80
     f0c:	.word	0x165e9f81
     f10:	.word	0x269fb200
     f14:	.word	0x8001307f
     f18:	.word	0x08f0d17f
     f1c:	.word	0x00e5109f
     f20:	.word	0x431bde83
     f24:	.word	0x20000620
     f28:	.word	0x2000061c
     f2c:	.word	0x20001280
     f30:	.word	0x4d3f6400
     f34:	.word	0x00b71b00
     f38:	.word	0x80002036
     f3c:	.word	0x8000206c
     f40:	.word	0x80002000

00000f44 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     f44:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
     f46:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     f48:	cbz	r3, f52 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     f4a:	ldr	r3, [r2, #4]
     f4c:	orr.w	r3, r3, #32768	; 0x8000
     f50:	str	r3, [r2, #4]
	}
	__disable_irq();
     f52:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     f54:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     f56:	cbz	r4, f80 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     f58:	ldr	r3, [pc, #64]	; (f9c <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
     f5a:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     f5c:	ldr.w	r4, [r3, #432]	; 0x1b0
     f60:	tst	r4, r1
     f62:	bne.n	f94 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     f64:	ldr.w	r4, [r3, #320]	; 0x140
     f68:	orr.w	r4, r4, #16384	; 0x4000
     f6c:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     f70:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
     f74:	ldr.w	r4, [r3, #320]	; 0x140
     f78:	lsls	r4, r4, #17
     f7a:	bpl.n	f64 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     f7c:	tst	r1, r5
     f7e:	bne.n	f94 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
     f80:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
     f82:	ldr	r4, [pc, #24]	; (f9c <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
     f84:	str	r2, [r0, #8]
	endpoint->status = 0;
     f86:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
     f88:	ldr.w	r3, [r4, #432]	; 0x1b0
     f8c:	orrs	r1, r3
     f8e:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     f92:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
     f94:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     f96:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     f98:	pop	{r4, r5}
     f9a:	bx	lr
     f9c:	.word	0x402e0000

00000fa0 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     fa0:	push	{r4, r5, r6, lr}
     fa2:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     fa4:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
     fa6:	cbz	r0, fce <run_callbacks+0x2e>
     fa8:	mov	r2, r0
     faa:	movs	r4, #0
     fac:	b.n	fb6 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     fae:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
     fb0:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
     fb2:	cmp	r2, #1
     fb4:	beq.n	fd0 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
     fb6:	ldr	r3, [r2, #4]
     fb8:	ands.w	r3, r3, #128	; 0x80
     fbc:	beq.n	fae <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
     fbe:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     fc0:	cbz	r4, fce <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
     fc2:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
     fc4:	ldr	r5, [r0, #0]
		ep->callback_function(first);
     fc6:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     fc8:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
     fca:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     fcc:	bne.n	fc2 <run_callbacks+0x22>
     fce:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
     fd0:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
     fd2:	str	r3, [r6, #52]	; 0x34
			break;
     fd4:	b.n	fc0 <run_callbacks+0x20>
     fd6:	nop

00000fd8 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     fd8:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
     fda:	cbnz	r1, 101a <endpoint0_transmit.constprop.1+0x42>
     fdc:	ldr	r4, [pc, #136]	; (1068 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     fde:	ldr	r1, [pc, #140]	; (106c <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     fe0:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     fe2:	ldr	r3, [pc, #140]	; (1070 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     fe4:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     fe6:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
     fe8:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     fea:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
     fec:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     fee:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
     ff0:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     ff2:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     ff6:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     ff8:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     ffc:	ldr	r5, [pc, #116]	; (1074 <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     ffe:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1002:	ldr.w	r1, [r3, #432]	; 0x1b0
    1006:	orr.w	r1, r1, #1
    100a:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    100e:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    1010:	ldr.w	r3, [r2, #432]	; 0x1b0
    1014:	cmp	r3, #0
    1016:	bne.n	1010 <endpoint0_transmit.constprop.1+0x38>
}
    1018:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    101a:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    101c:	ldr	r3, [pc, #88]	; (1078 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    101e:	ldr	r5, [pc, #80]	; (1070 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1020:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1022:	ldr	r4, [pc, #68]	; (1068 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1024:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1028:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    102a:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    102c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    102e:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1032:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1034:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1038:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    103a:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    103e:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1042:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    1046:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1048:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    104a:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    104e:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1052:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1056:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1058:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    105a:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    105e:	ldr.w	r3, [r2, #432]	; 0x1b0
    1062:	cmp	r3, #0
    1064:	bne.n	105e <endpoint0_transmit.constprop.1+0x86>
    1066:	b.n	fde <endpoint0_transmit.constprop.1+0x6>
    1068:	.word	0x20003000
    106c:	.word	0x20002020
    1070:	.word	0x402e0000
    1074:	.word	0x20001254
    1078:	.word	0x20002000

0000107c <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    107c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1080:	ldr	r4, [pc, #752]	; (1374 <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    1082:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1084:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1088:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    108c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1090:	beq.n	1150 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    1092:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1096:	cmp	r3, #0
    1098:	beq.n	1146 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    109a:	mov.w	fp, #65537	; 0x10001
    109e:	ldr.w	r9, [pc, #764]	; 139c <isr+0x320>
    10a2:	ldr	r6, [pc, #724]	; (1378 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    10a4:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    10a6:	mov	sl, fp
    10a8:	ldr	r0, [r6, #40]	; 0x28
    10aa:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    10ac:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    10b0:	ldr.w	r3, [r4, #320]	; 0x140
    10b4:	orr.w	r3, r3, #8192	; 0x2000
    10b8:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    10bc:	ldr.w	r3, [r4, #320]	; 0x140
    10c0:	lsls	r7, r3, #18
    10c2:	bpl.n	10b0 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    10c4:	ldr.w	r3, [r5, #320]	; 0x140
    10c8:	bic.w	r3, r3, #8192	; 0x2000
    10cc:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    10d0:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    10d4:	ldr.w	r3, [r4, #436]	; 0x1b4
    10d8:	ands.w	r3, r3, #65537	; 0x10001
    10dc:	bne.n	10d4 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    10de:	uxth	r1, r0
    10e0:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    10e4:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    10e8:	cmp	r1, r7
    10ea:	bhi.w	1238 <isr+0x1bc>
    10ee:	cmp.w	r1, #1664	; 0x680
    10f2:	bcs.w	14cc <isr+0x450>
    10f6:	cmp.w	r1, #258	; 0x102
    10fa:	beq.w	13d2 <isr+0x356>
    10fe:	bhi.w	12ca <isr+0x24e>
    1102:	cmp	r1, #128	; 0x80
    1104:	beq.w	13b8 <isr+0x33c>
    1108:	cmp	r1, #130	; 0x82
    110a:	bne.w	12ba <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    110e:	uxth	r2, r2
    1110:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1114:	cmp	r1, #7
    1116:	bhi.w	12ba <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    111a:	lsls	r1, r1, #2
    111c:	ldr	r0, [pc, #604]	; (137c <isr+0x300>)
		reply_buffer[0] = 0;
    111e:	ldr	r7, [pc, #608]	; (1380 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1120:	add	r0, r1
    1122:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1124:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    1126:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    1128:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    112a:	bpl.w	154a <isr+0x4ce>
    112e:	lsls	r2, r1, #15
    1130:	bpl.n	1136 <isr+0xba>
			reply_buffer[0] = 1;
    1132:	movs	r3, #1
    1134:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    1136:	movs	r1, #2
    1138:	ldr	r0, [pc, #580]	; (1380 <isr+0x304>)
    113a:	bl	fd8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    113e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1142:	cmp	r3, #0
    1144:	bne.n	10a8 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    1146:	ldr	r2, [pc, #556]	; (1374 <isr+0x2f8>)
    1148:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    114c:	cmp	r3, #0
    114e:	bne.n	11f2 <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    1150:	tst.w	r8, #64	; 0x40
    1154:	beq.n	1188 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1156:	ldr	r3, [pc, #540]	; (1374 <isr+0x2f8>)
    1158:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    115c:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    115e:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1162:	ldr.w	r1, [r3, #444]	; 0x1bc
    1166:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    116a:	ldr.w	r4, [r2, #432]	; 0x1b0
    116e:	ldr	r3, [pc, #516]	; (1374 <isr+0x2f8>)
    1170:	cmp	r4, #0
    1172:	bne.n	116a <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1174:	mov.w	r2, #4294967295
    1178:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    117c:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    1180:	bl	874 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    1184:	ldr	r3, [pc, #508]	; (1384 <isr+0x308>)
    1186:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    1188:	tst.w	r8, #16777216	; 0x1000000
    118c:	beq.n	1196 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    118e:	ldr	r3, [pc, #504]	; (1388 <isr+0x30c>)
    1190:	ldr	r3, [r3, #0]
    1192:	cbz	r3, 1196 <isr+0x11a>
    1194:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    1196:	tst.w	r8, #33554432	; 0x2000000
    119a:	beq.n	11a4 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    119c:	ldr	r3, [pc, #492]	; (138c <isr+0x310>)
    119e:	ldr	r3, [r3, #0]
    11a0:	cbz	r3, 11a4 <isr+0x128>
    11a2:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    11a4:	tst.w	r8, #4
    11a8:	beq.n	11bc <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    11aa:	ldr	r3, [pc, #456]	; (1374 <isr+0x2f8>)
    11ac:	ldr.w	r3, [r3, #388]	; 0x184
    11b0:	ands.w	r3, r3, #512	; 0x200
    11b4:	beq.n	1232 <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    11b6:	ldr	r3, [pc, #472]	; (1390 <isr+0x314>)
    11b8:	movs	r2, #1
    11ba:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    11bc:	ldr	r3, [pc, #436]	; (1374 <isr+0x2f8>)
    11be:	ldr.w	r2, [r3, #328]	; 0x148
    11c2:	lsls	r2, r2, #24
    11c4:	bpl.n	11ec <isr+0x170>
    11c6:	tst.w	r8, #128	; 0x80
    11ca:	beq.n	11ec <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    11cc:	ldr	r1, [pc, #452]	; (1394 <isr+0x318>)
    11ce:	ldrb	r2, [r1, #0]
    11d0:	cbz	r2, 11ec <isr+0x170>
			if (--usb_reboot_timer == 0) {
    11d2:	subs	r2, #1
    11d4:	uxtb	r2, r2
    11d6:	strb	r2, [r1, #0]
    11d8:	cbnz	r2, 11ec <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    11da:	ldr	r1, [pc, #444]	; (1398 <isr+0x31c>)
    11dc:	ldrb	r2, [r1, #0]
    11de:	and.w	r2, r2, #251	; 0xfb
    11e2:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    11e4:	cmp	r2, #0
    11e6:	beq.w	164e <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    11ea:	bkpt	0x00fb
		#endif
		#ifdef MULTITOUCH_INTERFACE
		usb_touchscreen_update_callback();
		#endif
	}
}
    11ec:	add	sp, #12
    11ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    11f2:	ldr	r1, [pc, #424]	; (139c <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    11f4:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    11f8:	ldr	r0, [r1, #0]
    11fa:	tst	r3, r0
    11fc:	bne.w	15d6 <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    1200:	ldr	r2, [pc, #384]	; (1384 <isr+0x308>)
    1202:	ldr	r4, [r2, #0]
			if (completestatus) {
    1204:	ands	r4, r3
    1206:	beq.n	1150 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1208:	lsls	r3, r4, #29
    120a:	bmi.w	166c <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    120e:	lsls	r7, r4, #13
    1210:	bmi.w	1664 <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1214:	lsls	r6, r4, #28
    1216:	bmi.w	167c <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    121a:	lsls	r5, r4, #12
    121c:	bmi.w	1674 <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1220:	lsls	r0, r4, #27
    1222:	bmi.w	165c <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    1226:	lsls	r1, r4, #11
    1228:	bpl.n	1150 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    122a:	ldr	r0, [pc, #372]	; (13a0 <isr+0x324>)
    122c:	bl	fa0 <run_callbacks>
    1230:	b.n	1150 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    1232:	ldr	r2, [pc, #348]	; (1390 <isr+0x314>)
    1234:	strb	r3, [r2, #0]
    1236:	b.n	11bc <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1238:	movw	r7, #8225	; 0x2021
    123c:	cmp	r1, r7
    123e:	beq.n	12b2 <isr+0x236>
    1240:	bhi.n	1322 <isr+0x2a6>
    1242:	cmp.w	r1, #2176	; 0x880
    1246:	beq.w	14b0 <isr+0x434>
    124a:	cmp.w	r1, #2304	; 0x900
    124e:	bne.n	12ba <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1250:	ubfx	r0, r0, #16, #8
    1254:	ldr	r2, [pc, #332]	; (13a4 <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1256:	ldr	r1, [pc, #336]	; (13a8 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1258:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    125a:	ldr	r7, [pc, #336]	; (13ac <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    125c:	ldr	r2, [pc, #336]	; (13b0 <isr+0x334>)
    125e:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1260:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1264:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1268:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    126c:	bl	878 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1270:	ldr	r2, [pc, #320]	; (13b4 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1272:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1274:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1276:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1278:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    127a:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    127c:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    127e:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1282:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1284:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1288:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    128a:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    128e:	ldr.w	r2, [r5, #432]	; 0x1b0
    1292:	orr.w	r2, r2, #65536	; 0x10000
    1296:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    129a:	ldr	r2, [pc, #256]	; (139c <isr+0x320>)
    129c:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    129e:	ldr.w	r3, [r4, #432]	; 0x1b0
    12a2:	cmp	r3, #0
    12a4:	bne.n	129e <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    12a6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    12aa:	cmp	r3, #0
    12ac:	bne.w	10a8 <isr+0x2c>
    12b0:	b.n	1146 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    12b2:	lsrs	r1, r2, #16
    12b4:	cmp	r1, #7
    12b6:	beq.w	1552 <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    12ba:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    12be:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    12c2:	cmp	r3, #0
    12c4:	bne.w	10a8 <isr+0x2c>
    12c8:	b.n	1146 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    12ca:	movw	r7, #770	; 0x302
    12ce:	cmp	r1, r7
    12d0:	beq.w	144a <isr+0x3ce>
    12d4:	cmp.w	r1, #1280	; 0x500
    12d8:	bne.n	12ba <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    12da:	ldr	r2, [pc, #216]	; (13b4 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    12dc:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    12de:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    12e0:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    12e2:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    12e4:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    12e6:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    12ea:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    12ec:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    12f0:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    12f2:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    12f6:	ldr.w	r3, [r5, #432]	; 0x1b0
    12fa:	orr.w	r3, r3, #65536	; 0x10000
    12fe:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1302:	ldr.w	r3, [r4, #432]	; 0x1b0
    1306:	cmp	r3, #0
    1308:	bne.n	1302 <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    130a:	lsrs	r3, r0, #16
    130c:	lsls	r3, r3, #25
    130e:	orr.w	r3, r3, #16777216	; 0x1000000
    1312:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1316:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    131a:	cmp	r3, #0
    131c:	bne.w	10a8 <isr+0x2c>
    1320:	b.n	1146 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1322:	movw	r3, #8737	; 0x2221
    1326:	cmp	r1, r3
    1328:	beq.w	1438 <isr+0x3bc>
    132c:	movw	r3, #8993	; 0x2321
    1330:	cmp	r1, r3
    1332:	bne.n	12ba <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1334:	ldr	r3, [pc, #124]	; (13b4 <isr+0x338>)
    1336:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1338:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    133a:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    133c:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    133e:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1340:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1344:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1346:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    134a:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    134c:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    134e:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1352:	ldr.w	r3, [r4, #432]	; 0x1b0
    1356:	orr.w	r3, r3, #65536	; 0x10000
    135a:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    135e:	ldr.w	r3, [r4, #432]	; 0x1b0
    1362:	cmp	r3, #0
    1364:	bne.n	135e <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1366:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    136a:	cmp	r3, #0
    136c:	bne.w	10a8 <isr+0x2c>
    1370:	b.n	1146 <isr+0xca>
    1372:	nop
    1374:	.word	0x402e0000
    1378:	.word	0x20003000
    137c:	.word	0x402e01c0
    1380:	.word	0x20001268
    1384:	.word	0x20001244
    1388:	.word	0x20001240
    138c:	.word	0x2000124c
    1390:	.word	0x20001250
    1394:	.word	0x20001258
    1398:	.word	0x20001248
    139c:	.word	0x20001254
    13a0:	.word	0x20003240
    13a4:	.word	0x20001278
    13a8:	.word	0x000200c8
    13ac:	.word	0x00cc0002
    13b0:	.word	0x00c80002
    13b4:	.word	0x20002020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    13b8:	ldr	r2, [pc, #744]	; (16a4 <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    13ba:	movs	r1, #2
    13bc:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    13be:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    13c0:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    13c2:	bl	fd8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    13c6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    13ca:	cmp	r3, #0
    13cc:	bne.w	10a8 <isr+0x2c>
    13d0:	b.n	1146 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    13d2:	uxth	r2, r2
    13d4:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    13d8:	cmp	r3, #7
    13da:	bhi.w	12ba <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    13de:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    13e2:	mov.w	r3, r3, lsl #2
    13e6:	ldr	r2, [pc, #704]	; (16a8 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    13e8:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    13ec:	add	r2, r3
    13ee:	ldr	r3, [r2, #0]
    13f0:	ite	ne
    13f2:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    13f6:	biceq.w	r3, r3, #1
    13fa:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    13fc:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    13fe:	ldr	r3, [pc, #684]	; (16ac <isr+0x630>)
    1400:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1402:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1404:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1406:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    140a:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    140c:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1410:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1412:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1414:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1418:	ldr.w	r3, [r4, #432]	; 0x1b0
    141c:	orr.w	r3, r3, #65536	; 0x10000
    1420:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1424:	ldr.w	r3, [r4, #432]	; 0x1b0
    1428:	cmp	r3, #0
    142a:	bne.n	1424 <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    142c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1430:	cmp	r3, #0
    1432:	bne.w	10a8 <isr+0x2c>
    1436:	b.n	1146 <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1438:	ldr	r3, [pc, #628]	; (16b0 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    143a:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    143e:	ldr	r2, [pc, #628]	; (16b4 <isr+0x638>)
    1440:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    1442:	ldr	r3, [pc, #628]	; (16b8 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1444:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    1446:	strb	r0, [r3, #0]
    1448:	b.n	1334 <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    144a:	uxth	r2, r2
    144c:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1450:	cmp	r3, #7
    1452:	bhi.w	12ba <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1456:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    145a:	mov.w	r3, r3, lsl #2
    145e:	ldr	r2, [pc, #584]	; (16a8 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1460:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1464:	add	r2, r3
    1466:	ldr	r3, [r2, #0]
    1468:	ite	ne
    146a:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    146e:	orreq.w	r3, r3, #1
    1472:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1474:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1476:	ldr	r3, [pc, #564]	; (16ac <isr+0x630>)
    1478:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    147a:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    147c:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    147e:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1482:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1484:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1488:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    148a:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    148c:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1490:	ldr.w	r3, [r4, #432]	; 0x1b0
    1494:	orr.w	r3, r3, #65536	; 0x10000
    1498:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    149c:	ldr.w	r3, [r4, #432]	; 0x1b0
    14a0:	cmp	r3, #0
    14a2:	bne.n	149c <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    14a4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    14a8:	cmp	r3, #0
    14aa:	bne.w	10a8 <isr+0x2c>
    14ae:	b.n	1146 <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    14b0:	ldr	r2, [pc, #520]	; (16bc <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    14b2:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    14b4:	ldr	r3, [pc, #492]	; (16a4 <isr+0x628>)
    14b6:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    14b8:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    14ba:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    14bc:	bl	fd8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    14c0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    14c4:	cmp	r3, #0
    14c6:	bne.w	10a8 <isr+0x2c>
    14ca:	b.n	1146 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    14cc:	ldr	r3, [pc, #496]	; (16c0 <isr+0x644>)
    14ce:	ldr	r1, [r3, #4]
    14d0:	cmp	r1, #0
    14d2:	beq.w	12ba <isr+0x23e>
    14d6:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    14d8:	uxth.w	lr, r2
    14dc:	b.n	14e8 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    14de:	adds	r3, #12
    14e0:	ldr	r1, [r3, #4]
    14e2:	cmp	r1, #0
    14e4:	beq.w	12ba <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    14e8:	ldrh	r7, [r3, #0]
    14ea:	cmp	r7, r0
    14ec:	bne.n	14de <isr+0x462>
    14ee:	ldrh	r7, [r3, #2]
    14f0:	cmp	r7, lr
    14f2:	bne.n	14de <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    14f4:	lsrs	r7, r0, #8
    14f6:	cmp	r7, #3
    14f8:	beq.w	1708 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    14fc:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    14fe:	lsrs	r2, r2, #16
    1500:	cmp	r3, r2
    1502:	it	cs
    1504:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    1506:	cmp.w	r0, #512	; 0x200
    150a:	beq.w	1684 <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    150e:	cmp.w	r0, #1792	; 0x700
    1512:	beq.w	1628 <isr+0x5ac>
    1516:	ldr	r7, [pc, #428]	; (16c4 <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1518:	mov	r2, r3
    151a:	str	r3, [sp, #4]
    151c:	mov	r0, r7
    151e:	bl	1d44 <memcpy>
    1522:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1524:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1528:	add	r7, r3
	asm("dsb");
    152a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    152e:	ldr	r1, [pc, #408]	; (16c8 <isr+0x64c>)
    1530:	str	r2, [r1, #0]
		location += 32;
    1532:	adds	r2, #32
	} while (location < end_addr);
    1534:	cmp	r7, r2
    1536:	bhi.n	152e <isr+0x4b2>
	asm("dsb");
    1538:	dsb	sy
	asm("isb");
    153c:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1540:	ldr	r0, [pc, #384]	; (16c4 <isr+0x648>)
    1542:	mov	r1, r3
    1544:	bl	fd8 <endpoint0_transmit.constprop.1>
    1548:	b.n	113e <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    154a:	lsls	r3, r1, #31
    154c:	bpl.w	1136 <isr+0xba>
    1550:	b.n	1132 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1552:	ldr	r7, [pc, #376]	; (16cc <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1554:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    1558:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    155a:	ldr	r1, [pc, #372]	; (16d0 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    155c:	ldr	r3, [pc, #372]	; (16d4 <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    155e:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1560:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1564:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1566:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    156a:	ldr	r1, [pc, #364]	; (16d8 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    156c:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    156e:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1572:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1576:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    157a:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    157c:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1580:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1584:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1588:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    158a:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    158c:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1590:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1592:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    1594:	ldr.w	r3, [r4, #432]	; 0x1b0
    1598:	cmp	r3, #0
    159a:	bne.n	1594 <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    159c:	ldr	r2, [pc, #268]	; (16ac <isr+0x630>)
    159e:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15a0:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    15a4:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15a6:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    15a8:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15ac:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    15ae:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    15b2:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    15b4:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    15b8:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    15ba:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    15be:	ldr.w	r3, [r5, #432]	; 0x1b0
    15c2:	orrs	r3, r0
    15c4:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    15c8:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    15cc:	ldr.w	r3, [r4, #432]	; 0x1b0
    15d0:	cmp	r3, #0
    15d2:	bne.n	15cc <isr+0x550>
    15d4:	b.n	113e <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    15d6:	ldr	r4, [pc, #244]	; (16cc <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    15d8:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    15dc:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    15de:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    15e0:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    15e2:	cmp	r4, r0
    15e4:	bne.w	1200 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    15e8:	ldr	r1, [pc, #236]	; (16d8 <isr+0x65c>)
    15ea:	ldr	r4, [pc, #240]	; (16dc <isr+0x660>)
    15ec:	ldmia	r1, {r0, r1}
    15ee:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    15f0:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    15f2:	str	r0, [r4, #0]
    15f4:	strh	r1, [r4, #4]
    15f6:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    15f8:	bne.w	1200 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    15fc:	cpsid	i
	sof_usage |= (1 << interface);
    15fe:	ldr	r0, [pc, #224]	; (16e0 <isr+0x664>)
    1600:	ldrb	r1, [r0, #0]
    1602:	orr.w	r1, r1, #4
    1606:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1608:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    160c:	lsls	r0, r1, #24
    160e:	bmi.n	161e <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1610:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1614:	movs	r0, #128	; 0x80
    1616:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    161a:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    161e:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1620:	ldr	r2, [pc, #192]	; (16e4 <isr+0x668>)
    1622:	movs	r1, #80	; 0x50
    1624:	strb	r1, [r2, #0]
    1626:	b.n	1200 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1628:	ldr	r0, [pc, #188]	; (16e8 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    162a:	mov	r2, r3
    162c:	ldr	r7, [pc, #148]	; (16c4 <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    162e:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    1632:	ldr	r1, [pc, #184]	; (16ec <isr+0x670>)
    1634:	ldr	r0, [pc, #184]	; (16f0 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    1636:	str	r3, [sp, #4]
    1638:	cmp.w	lr, #0
    163c:	it	eq
    163e:	moveq	r1, r0
    1640:	mov	r0, r7
    1642:	bl	1d44 <memcpy>
					usb_descriptor_buffer[1] = 7;
    1646:	movs	r2, #7
    1648:	ldr	r3, [sp, #4]
    164a:	strb	r2, [r7, #1]
    164c:	b.n	1524 <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    164e:	ldr.w	r2, [r3, #328]	; 0x148
    1652:	bic.w	r2, r2, #128	; 0x80
    1656:	str.w	r2, [r3, #328]	; 0x148
    165a:	b.n	11ea <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    165c:	ldr	r0, [pc, #148]	; (16f4 <isr+0x678>)
    165e:	bl	fa0 <run_callbacks>
    1662:	b.n	1226 <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1664:	ldr	r0, [pc, #144]	; (16f8 <isr+0x67c>)
    1666:	bl	fa0 <run_callbacks>
    166a:	b.n	1214 <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    166c:	ldr	r0, [pc, #140]	; (16fc <isr+0x680>)
    166e:	bl	fa0 <run_callbacks>
    1672:	b.n	120e <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1674:	ldr	r0, [pc, #136]	; (1700 <isr+0x684>)
    1676:	bl	fa0 <run_callbacks>
    167a:	b.n	1220 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    167c:	ldr	r0, [pc, #132]	; (1704 <isr+0x688>)
    167e:	bl	fa0 <run_callbacks>
    1682:	b.n	121a <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    1684:	ldr	r0, [pc, #96]	; (16e8 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1686:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1688:	ldr	r1, [pc, #100]	; (16f0 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    168a:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    168c:	ldr	r0, [pc, #92]	; (16ec <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    168e:	str	r3, [sp, #4]
    1690:	cmp	r7, #0
    1692:	it	eq
    1694:	moveq	r1, r0
    1696:	ldr	r0, [pc, #44]	; (16c4 <isr+0x648>)
    1698:	bl	1d44 <memcpy>
    169c:	ldr	r7, [pc, #36]	; (16c4 <isr+0x648>)
    169e:	ldr	r3, [sp, #4]
    16a0:	b.n	1524 <isr+0x4a8>
    16a2:	nop
    16a4:	.word	0x20001268
    16a8:	.word	0x402e01c0
    16ac:	.word	0x20002020
    16b0:	.word	0x20001284
    16b4:	.word	0x20001318
    16b8:	.word	0x200011a8
    16bc:	.word	0x20001278
    16c0:	.word	0x200002f8
    16c4:	.word	0x20203000
    16c8:	.word	0xe000ef70
    16cc:	.word	0x20001260
    16d0:	.word	0x00070080
    16d4:	.word	0x20002000
    16d8:	.word	0x20001270
    16dc:	.word	0x20001310
    16e0:	.word	0x20001248
    16e4:	.word	0x20001258
    16e8:	.word	0x20001250
    16ec:	.word	0x60001610
    16f0:	.word	0x60001654
    16f4:	.word	0x20003200
    16f8:	.word	0x20003140
    16fc:	.word	0x20003100
    1700:	.word	0x200031c0
    1704:	.word	0x20003180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1708:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    170a:	ldrb	r3, [r1, #0]
    170c:	cmp	r3, r2
    170e:	it	cs
    1710:	movcs	r3, r2
    1712:	b.n	150e <isr+0x492>

00001714 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1714:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1716:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    171a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    171e:	ite	ne
    1720:	movne	r7, #0
    1722:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1726:	cmp	r2, #2
    1728:	bls.n	172e <usb_config_rx+0x1a>
    172a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    172e:	mov.w	sl, r0, lsl #7
    1732:	ldr.w	r9, [pc, #64]	; 1774 <usb_config_rx+0x60>
    1736:	mov	r5, r1
    1738:	mov	r4, r0
    173a:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    173e:	movs	r1, #0
    1740:	movs	r2, #64	; 0x40
    1742:	mov	r8, r3
    1744:	mov	r0, r6
    1746:	bl	297c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    174a:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    174c:	orr.w	r1, r7, r5, lsl #16
    1750:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1754:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1758:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    175a:	cmp.w	r8, #0
    175e:	beq.n	172a <usb_config_rx+0x16>
    1760:	ldr	r3, [pc, #12]	; (1770 <usb_config_rx+0x5c>)
    1762:	lsls	r0, r4
    1764:	ldr	r4, [r3, #0]
    1766:	orrs	r0, r4
    1768:	str	r0, [r3, #0]
    176a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    176e:	nop
    1770:	.word	0x20001244
    1774:	.word	0x20003000

00001778 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1778:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    177a:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    177e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1782:	ite	ne
    1784:	movne	r7, #0
    1786:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    178a:	cmp	r2, #2
    178c:	bls.n	1792 <usb_config_tx+0x1a>
    178e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1792:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1794:	lsls	r5, r0, #7
    1796:	ldr.w	r9, [pc, #68]	; 17dc <usb_config_tx+0x64>
    179a:	mov	r8, r1
    179c:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    179e:	movs	r1, #0
    17a0:	mov	r4, r0
    17a2:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    17a4:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    17a8:	mov	r0, sl
    17aa:	bl	297c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    17ae:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    17b0:	orr.w	r1, r7, r8, lsl #16
    17b4:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    17b8:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    17bc:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    17c0:	cmp	r6, #0
    17c2:	beq.n	178e <usb_config_tx+0x16>
    17c4:	add.w	r0, r4, #16
    17c8:	ldr	r3, [pc, #12]	; (17d8 <usb_config_tx+0x60>)
    17ca:	lsls	r2, r0
    17cc:	ldr	r0, [r3, #0]
    17ce:	orrs	r2, r0
    17d0:	str	r2, [r3, #0]
    17d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    17d6:	nop
    17d8:	.word	0x20001244
    17dc:	.word	0x20003000

000017e0 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    17e0:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    17e2:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    17e4:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    17e6:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    17ea:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    17ec:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    17ee:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    17f0:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    17f4:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    17f8:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    17fc:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1800:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1802:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1804:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    1806:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1808:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    180a:	pop	{r4, r5, r6, r7}
    180c:	bx	lr
    180e:	nop

00001810 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1810:	subs	r3, r0, #2
    1812:	cmp	r3, #2
    1814:	bls.n	1818 <usb_transmit+0x8>
    1816:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1818:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    181a:	ldr	r3, [pc, #24]	; (1834 <usb_transmit+0x24>)
    181c:	add.w	r4, r0, #16
    1820:	movs	r5, #1
    1822:	mov	r2, r1
    1824:	add.w	r0, r3, r0, lsl #7
    1828:	lsl.w	r1, r5, r4
}
    182c:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    182e:	b.w	f44 <schedule_transfer>
    1832:	nop
    1834:	.word	0x20003040

00001838 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1838:	subs	r3, r0, #2
    183a:	cmp	r3, #2
    183c:	bls.n	1840 <usb_receive+0x8>
    183e:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1840:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1842:	ldr	r3, [pc, #20]	; (1858 <usb_receive+0x20>)
    1844:	movs	r4, #1
    1846:	mov	r2, r1
    1848:	lsl.w	r1, r4, r0
    184c:	add.w	r0, r3, r0, lsl #7
}
    1850:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1854:	b.w	f44 <schedule_transfer>
    1858:	.word	0x20003000

0000185c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    185c:	ldr	r0, [r0, #4]
#endif
}
    185e:	bx	lr

00001860 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    1860:	cmp	r0, #0
    1862:	beq.n	1914 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1864:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    1866:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    186a:	sub	sp, #20
    186c:	mov	fp, r0
    186e:	ldr	r4, [pc, #168]	; (1918 <delay+0xb8>)
    1870:	ldr	r5, [pc, #168]	; (191c <delay+0xbc>)
    1872:	ldr	r6, [pc, #172]	; (1920 <delay+0xc0>)
    1874:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1878:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    187c:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    187e:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1880:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1884:	cmp	r1, #0
    1886:	bne.n	1878 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1888:	ldr	r7, [pc, #152]	; (1924 <delay+0xc4>)
    188a:	strd	r8, r9, [sp, #8]
    188e:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1890:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1892:	ldr	r2, [pc, #148]	; (1928 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1894:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1898:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    189a:	ldr	r2, [r2, #0]
    189c:	movs	r7, #1
    189e:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    18a2:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18a6:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    18a8:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18aa:	cmp	r3, r1
    18ac:	it	eq
    18ae:	cmpeq	r2, r8
    18b0:	ite	cs
    18b2:	movcs	sl, r8
    18b4:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    18b6:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    18ba:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    18be:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    18c0:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    18c2:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    18c6:	cmp	r3, #0
    18c8:	bne.n	18ba <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    18ca:	ldr	r0, [sp, #4]
    18cc:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    18ce:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18d0:	ldr	r0, [pc, #84]	; (1928 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    18d2:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18d6:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    18d8:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18dc:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    18e0:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    18e4:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18e8:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    18ea:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    18ec:	cmp	r1, r3
    18ee:	it	eq
    18f0:	cmpeq	r0, r8
    18f2:	ite	cs
    18f4:	movcs	r3, r8
    18f6:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    18f8:	add	r2, r3
    18fa:	cmp	r2, lr
    18fc:	bcc.n	190e <delay+0xae>
			if (--msec == 0) return;
    18fe:	subs.w	fp, fp, #1
			start += 1000;
    1902:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    1906:	bne.n	18ba <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    1908:	add	sp, #20
    190a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    190e:	bl	1a14 <yield>
	}
    1912:	b.n	18ba <delay+0x5a>
    1914:	bx	lr
    1916:	nop
    1918:	.word	0x20003280
    191c:	.word	0x20001284
    1920:	.word	0x2000127c
    1924:	.word	0xe0001004
    1928:	.word	0x20001280

0000192c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    192c:	cmp	r0, #39	; 0x27
    192e:	bhi.n	196a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    1930:	lsls	r0, r0, #4
    1932:	ldr	r2, [pc, #104]	; (199c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1934:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    1936:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    193a:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    193c:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    193e:	beq.n	196c <pinMode+0x40>
    1940:	cmp	r1, #4
    1942:	beq.n	196c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1944:	ldr	r4, [r3, #12]
    1946:	ldr	r2, [r0, #4]
    1948:	bic.w	r2, r2, r4
    194c:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    194e:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    1950:	cbz	r1, 198e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    1952:	cmp	r1, #2
    1954:	beq.n	1994 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1956:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1958:	ldr	r3, [r3, #4]
}
    195a:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    195e:	ite	eq
    1960:	ldreq	r1, [pc, #60]	; (19a0 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1962:	ldrne	r1, [pc, #64]	; (19a4 <pinMode+0x78>)
    1964:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    1966:	movs	r2, #21
    1968:	str	r2, [r3, #0]
}
    196a:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    196c:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    196e:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1970:	ldr	r4, [r0, #4]
    1972:	orr.w	r2, r2, r4
    1976:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1978:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    197a:	beq.n	198e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    197c:	movw	r1, #2104	; 0x838
    1980:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1982:	ldr	r3, [r3, #4]
    1984:	movs	r2, #21
}
    1986:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    198a:	str	r2, [r3, #0]
}
    198c:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    198e:	movs	r1, #56	; 0x38
    1990:	str	r1, [r2, #0]
    1992:	b.n	1982 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1994:	ldr	r1, [pc, #16]	; (19a8 <pinMode+0x7c>)
    1996:	str	r1, [r2, #0]
    1998:	b.n	1982 <pinMode+0x56>
    199a:	nop
    199c:	.word	0x20000078
    19a0:	.word	0x00013038
    19a4:	.word	0x00010038
    19a8:	.word	0x0001f038

000019ac <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    19ac:	ldr	r2, [pc, #72]	; (19f8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    19ae:	ldr	r3, [pc, #76]	; (19fc <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    19b0:	ldr.w	r0, [r2, #544]	; 0x220
    19b4:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    19b8:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    19ba:	push	{r4, lr}
    19bc:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    19be:	bhi.n	19c6 <usb_init_serialnumber+0x1a>
    19c0:	add.w	r0, r0, r0, lsl #2
    19c4:	lsls	r0, r0, #1
    19c6:	ldr	r4, [pc, #56]	; (1a00 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    19c8:	add	r1, sp, #4
    19ca:	movs	r2, #10
    19cc:	bl	1f54 <ultoa>
    19d0:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    19d2:	movs	r3, #0
    19d4:	mov	r0, r4
		char c = buf[i];
    19d6:	ldrb.w	r2, [r1], #1
    19da:	adds	r3, #1
		if (!c) break;
    19dc:	cbz	r2, 19ee <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    19de:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    19e0:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    19e4:	bne.n	19d6 <usb_init_serialnumber+0x2a>
    19e6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    19e8:	strb	r3, [r4, #0]
}
    19ea:	add	sp, #16
    19ec:	pop	{r4, pc}
    19ee:	lsls	r3, r3, #1
    19f0:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    19f2:	strb	r3, [r4, #0]
}
    19f4:	add	sp, #16
    19f6:	pop	{r4, pc}
    19f8:	.word	0x401f4400
    19fc:	.word	0x0098967f
    1a00:	.word	0x20000638

00001a04 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    1a04:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    1a06:	bl	1bc <setup>
	while (1) {
		loop();
    1a0a:	bl	208 <loop>
		yield();
    1a0e:	bl	1a14 <yield>
    1a12:	b.n	1a0a <main+0x6>

00001a14 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    1a14:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    1a16:	ldr	r4, [pc, #132]	; (1a9c <yield+0x88>)
    1a18:	ldrb	r3, [r4, #0]
    1a1a:	cbnz	r3, 1a3e <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1a1c:	ldr	r3, [pc, #128]	; (1aa0 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    1a1e:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1a20:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    1a22:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1a24:	cbnz	r3, 1a6e <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    1a26:	ldr	r3, [pc, #124]	; (1aa4 <yield+0x90>)
    1a28:	ldrb	r3, [r3, #0]
    1a2a:	cmp	r3, #0
    1a2c:	bne.n	1a82 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    1a2e:	ldr	r3, [pc, #120]	; (1aa8 <yield+0x94>)

	running = 0;
    1a30:	movs	r1, #0
    1a32:	ldr	r2, [r3, #0]
    1a34:	strb	r1, [r4, #0]
    1a36:	cbz	r2, 1a3e <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1a38:	mrs	r2, IPSR
		if (ipsr != 0) return;
    1a3c:	cbz	r2, 1a40 <yield+0x2c>
    1a3e:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1a40:	mrs	r0, PRIMASK
		__disable_irq();
    1a44:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    1a46:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    1a48:	cbz	r2, 1a88 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    1a4a:	ldr	r4, [pc, #96]	; (1aac <yield+0x98>)
    1a4c:	ldrb	r1, [r4, #0]
    1a4e:	cbnz	r1, 1a88 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1a50:	movs	r6, #1
		firstYield = first->_next;
    1a52:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1a54:	strb	r6, [r4, #0]
		firstYield = first->_next;
    1a56:	str	r5, [r3, #0]
		if (firstYield) {
    1a58:	cbz	r5, 1a90 <yield+0x7c>
			firstYield->_prev = nullptr;
    1a5a:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1a5c:	cbnz	r0, 1a60 <yield+0x4c>
    1a5e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1a60:	movs	r5, #0
		(*(first->_function))(*first);
    1a62:	ldr	r3, [r2, #8]
    1a64:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1a66:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    1a68:	blx	r3
		runningFromYield = false;
    1a6a:	strb	r5, [r4, #0]
    1a6c:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1a6e:	bl	ab0 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1a72:	cmp	r0, #0
    1a74:	beq.n	1a26 <yield+0x12>
    1a76:	bl	1ce0 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    1a7a:	ldr	r3, [pc, #40]	; (1aa4 <yield+0x90>)
    1a7c:	ldrb	r3, [r3, #0]
    1a7e:	cmp	r3, #0
    1a80:	beq.n	1a2e <yield+0x1a>
    1a82:	bl	225c <HardwareSerial::processSerialEvents()>
    1a86:	b.n	1a2e <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1a88:	cmp	r0, #0
    1a8a:	bne.n	1a3e <yield+0x2a>
    1a8c:	cpsie	i
    1a8e:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    1a90:	ldr	r3, [pc, #28]	; (1ab0 <yield+0x9c>)
    1a92:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1a94:	cmp	r0, #0
    1a96:	bne.n	1a60 <yield+0x4c>
    1a98:	b.n	1a5e <yield+0x4a>
    1a9a:	nop
    1a9c:	.word	0x20001288
    1aa0:	.word	0x2000064e
    1aa4:	.word	0x200012d8
    1aa8:	.word	0x2000129c
    1aac:	.word	0x200012a0
    1ab0:	.word	0x20001298

00001ab4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    1ab4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1ab6:	mrs	r2, PRIMASK
		__disable_irq();
    1aba:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    1abc:	ldrb	r3, [r0, #29]
    1abe:	cbnz	r3, 1ace <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    1ac0:	ldrb	r1, [r0, #28]
    1ac2:	cmp	r1, #1
    1ac4:	beq.n	1ad8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    1ac6:	cmp	r1, #3
    1ac8:	beq.n	1aec <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    1aca:	movs	r3, #1
    1acc:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1ace:	cbnz	r2, 1ad2 <EventResponder::triggerEventNotImmediate()+0x1e>
    1ad0:	cpsie	i
	}
	enableInterrupts(irq);
}
    1ad2:	ldr.w	r4, [sp], #4
    1ad6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    1ad8:	ldr	r4, [pc, #68]	; (1b20 <EventResponder::triggerEventNotImmediate()+0x6c>)
    1ada:	ldr	r1, [r4, #0]
    1adc:	cbz	r1, 1b08 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    1ade:	ldr	r1, [pc, #68]	; (1b24 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    1ae0:	str	r3, [r0, #20]
				_prev = lastYield;
    1ae2:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    1ae4:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    1ae6:	str	r3, [r0, #24]
				_prev->_next = this;
    1ae8:	str	r0, [r3, #20]
    1aea:	b.n	1aca <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    1aec:	ldr	r4, [pc, #56]	; (1b28 <EventResponder::triggerEventNotImmediate()+0x74>)
    1aee:	ldr	r1, [r4, #0]
    1af0:	cbz	r1, 1b14 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    1af2:	ldr	r1, [pc, #56]	; (1b2c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    1af4:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    1af6:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    1af8:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    1afa:	str	r3, [r0, #24]
				_prev->_next = this;
    1afc:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    1afe:	ldr	r3, [pc, #48]	; (1b30 <EventResponder::triggerEventNotImmediate()+0x7c>)
    1b00:	mov.w	r1, #268435456	; 0x10000000
    1b04:	str	r1, [r3, #0]
    1b06:	b.n	1aca <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    1b08:	ldr	r3, [pc, #24]	; (1b24 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    1b0a:	str	r1, [r0, #20]
				_prev = nullptr;
    1b0c:	str	r1, [r0, #24]
				firstYield = this;
    1b0e:	str	r0, [r4, #0]
				lastYield = this;
    1b10:	str	r0, [r3, #0]
    1b12:	b.n	1aca <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    1b14:	ldr	r3, [pc, #20]	; (1b2c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    1b16:	str	r1, [r0, #20]
				_prev = nullptr;
    1b18:	str	r1, [r0, #24]
				firstInterrupt = this;
    1b1a:	str	r0, [r4, #0]
				lastInterrupt = this;
    1b1c:	str	r0, [r3, #0]
    1b1e:	b.n	1afe <EventResponder::triggerEventNotImmediate()+0x4a>
    1b20:	.word	0x2000129c
    1b24:	.word	0x20001298
    1b28:	.word	0x2000128c
    1b2c:	.word	0x20001290
    1b30:	.word	0xe000ed04

00001b34 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1b34:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1b36:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1b38:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1b3a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1b3c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1b3e:	beq.n	1b48 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1b40:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1b44:	b.w	1ab4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1b48:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    1b4a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1b4e:	bx	r3

00001b50 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1b50:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1b52:	mrs	r1, PRIMASK
		__disable_irq();
    1b56:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1b58:	ldr	r4, [pc, #48]	; (1b8c <EventResponder::runFromInterrupt()+0x3c>)
    1b5a:	ldr	r3, [r4, #0]
		if (first) {
    1b5c:	cbz	r3, 1b82 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1b5e:	ldr	r6, [pc, #48]	; (1b90 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    1b60:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    1b62:	ldr	r2, [r3, #20]
    1b64:	str	r2, [r4, #0]
			if (firstInterrupt) {
    1b66:	cbz	r2, 1b88 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    1b68:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1b6a:	cbnz	r1, 1b6e <EventResponder::runFromInterrupt()+0x1e>
    1b6c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    1b6e:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    1b70:	mov	r0, r3
    1b72:	ldr	r3, [r3, #8]
    1b74:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1b76:	mrs	r1, PRIMASK
		__disable_irq();
    1b7a:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1b7c:	ldr	r3, [r4, #0]
		if (first) {
    1b7e:	cmp	r3, #0
    1b80:	bne.n	1b62 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1b82:	cbnz	r1, 1b86 <EventResponder::runFromInterrupt()+0x36>
    1b84:	cpsie	i
    1b86:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1b88:	str	r2, [r6, #0]
    1b8a:	b.n	1b6a <EventResponder::runFromInterrupt()+0x1a>
    1b8c:	.word	0x2000128c
    1b90:	.word	0x20001290

00001b94 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    1b94:	b.w	1b50 <EventResponder::runFromInterrupt()>

00001b98 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    1b98:	ldr	r2, [pc, #96]	; (1bfc <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    1b9a:	push	{r4, r5}
	if (listActive == nullptr) {
    1b9c:	ldr	r4, [r2, #0]
    1b9e:	cmp	r4, #0
    1ba0:	beq.n	1bf4 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    1ba2:	ldr	r3, [r0, #0]
    1ba4:	ldr	r1, [r4, #0]
    1ba6:	cmp	r3, r1
    1ba8:	bcs.n	1bca <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    1baa:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    1bac:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    1bae:	str	r4, [r0, #8]
		_prev = nullptr;
    1bb0:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    1bb2:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    1bb4:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    1bb6:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    1bb8:	movs	r3, #2
}
    1bba:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    1bbc:	strb	r3, [r0, #20]
}
    1bbe:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    1bc0:	str	r3, [r0, #0]
    1bc2:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    1bc4:	ldr	r1, [r2, #0]
    1bc6:	cmp	r3, r1
    1bc8:	bcc.n	1bdc <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    1bca:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    1bcc:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    1bce:	cmp	r2, #0
    1bd0:	bne.n	1bc0 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    1bd2:	str	r2, [r0, #8]
		_prev = timer;
    1bd4:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    1bd6:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    1bd8:	str	r0, [r4, #8]
    1bda:	b.n	1bb8 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    1bdc:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    1bde:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    1be0:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    1be2:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    1be4:	str	r5, [r0, #12]
				timer->_prev = this;
    1be6:	str	r0, [r4, #12]
				_prev->_next = this;
    1be8:	ldr	r1, [r0, #12]
    1bea:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    1bec:	str	r3, [r4, #0]
				_state = TimerActive;
    1bee:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    1bf0:	pop	{r4, r5}
    1bf2:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    1bf4:	str	r4, [r0, #8]
		_prev = nullptr;
    1bf6:	str	r4, [r0, #12]
		listActive = this;
    1bf8:	str	r0, [r2, #0]
    1bfa:	b.n	1bb8 <MillisTimer::addToActiveList()+0x20>
    1bfc:	.word	0x20001294

00001c00 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    1c00:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    1c02:	ldr	r6, [pc, #136]	; (1c8c <MillisTimer::runFromTimer()+0x8c>)
    1c04:	ldr	r4, [r6, #0]
	while (timer) {
    1c06:	cbz	r4, 1c54 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    1c08:	ldr	r3, [r4, #0]
    1c0a:	cmp	r3, #0
    1c0c:	bne.n	1c84 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    1c0e:	mov	r5, r3
    1c10:	ldr	r7, [pc, #124]	; (1c90 <MillisTimer::runFromTimer()+0x90>)
    1c12:	b.n	1c1e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    1c14:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    1c16:	cbz	r4, 1c54 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    1c18:	ldr	r3, [r4, #0]
    1c1a:	cmp	r3, #0
    1c1c:	bne.n	1c84 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    1c1e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    1c20:	cbz	r3, 1c24 <MillisTimer::runFromTimer()+0x24>
    1c22:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    1c24:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    1c26:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1c28:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    1c2a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1c2c:	ldr	r3, [r3, #0]
    1c2e:	cmp	r3, r7
    1c30:	bne.n	1c76 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1c32:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1c34:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1c36:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1c38:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    1c3a:	beq.n	1c7e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1c3c:	bl	1ab4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    1c40:	ldr	r3, [r4, #4]
    1c42:	cmp	r3, #0
    1c44:	beq.n	1c14 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    1c46:	str	r3, [r4, #0]
				timer->addToActiveList();
    1c48:	mov	r0, r4
    1c4a:	bl	1b98 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    1c4e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    1c50:	cmp	r4, #0
    1c52:	bne.n	1c18 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1c54:	mrs	r3, PRIMASK
		__disable_irq();
    1c58:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    1c5a:	ldr	r2, [pc, #56]	; (1c94 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    1c5c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    1c5e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    1c60:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    1c62:	cbnz	r3, 1c66 <MillisTimer::runFromTimer()+0x66>
    1c64:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    1c66:	cbz	r0, 1c74 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    1c68:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    1c6a:	bl	1b98 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    1c6e:	mov	r0, r4
    1c70:	cmp	r0, #0
    1c72:	bne.n	1c68 <MillisTimer::runFromTimer()+0x68>
    1c74:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1c76:	mov	r2, r4
    1c78:	movs	r1, #0
    1c7a:	blx	r3
    1c7c:	b.n	1c40 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1c7e:	ldr	r3, [r0, #8]
    1c80:	blx	r3
    1c82:	b.n	1c40 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    1c84:	subs	r3, #1
    1c86:	str	r3, [r4, #0]
			break;
    1c88:	b.n	1c54 <MillisTimer::runFromTimer()+0x54>
    1c8a:	nop
    1c8c:	.word	0x20001294
    1c90:	.word	0x00001b35
    1c94:	.word	0x200012a4

00001c98 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1c98:	ldr	r2, [pc, #16]	; (1cac <systick_isr+0x14>)
    1c9a:	ldr	r3, [pc, #20]	; (1cb0 <systick_isr+0x18>)
    1c9c:	ldr	r1, [r2, #0]
	systick_millis_count++;
    1c9e:	ldr	r2, [pc, #20]	; (1cb4 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1ca0:	str	r1, [r3, #0]
	systick_millis_count++;
    1ca2:	ldr	r3, [r2, #0]
    1ca4:	adds	r3, #1
    1ca6:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    1ca8:	b.w	1c00 <MillisTimer::runFromTimer()>
    1cac:	.word	0xe0001004
    1cb0:	.word	0x2000127c
    1cb4:	.word	0x20001284

00001cb8 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    1cb8:	b.w	abc <usb_serial_flush_input>

00001cbc <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    1cbc:	b.w	a6c <usb_serial_peekchar>

00001cc0 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    1cc0:	b.w	b30 <usb_serial_getchar>

00001cc4 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1cc4:	b.w	ab0 <usb_serial_available>

00001cc8 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1cc8:	b.w	be0 <usb_serial_flush_output>

00001ccc <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    1ccc:	b.w	b94 <usb_serial_write_buffer_free>

00001cd0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1cd0:	mov	r0, r1
    1cd2:	mov	r1, r2
    1cd4:	b.w	b7c <usb_serial_write>

00001cd8 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1cd8:	mov	r0, r1
    1cda:	b.w	b50 <usb_serial_putchar>
    1cde:	nop

00001ce0 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    1ce0:	ldr	r3, [pc, #4]	; (1ce8 <serialEvent()+0x8>)
    1ce2:	movs	r2, #0
    1ce4:	strb	r2, [r3, #0]
    1ce6:	bx	lr
    1ce8:	.word	0x2000064e

00001cec <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    1cec:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    1cee:	ldr	r4, [pc, #24]	; (1d08 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    1cf0:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    1cf2:	ldr	r3, [r0, #0]
    1cf4:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    1cf6:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    1cf8:	add	r1, sp, #4
    1cfa:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    1cfc:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    1d00:	blx	r3
}
    1d02:	add	sp, #8
    1d04:	pop	{r4, pc}
    1d06:	nop
    1d08:	.word	0x2000038c

00001d0c <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    1d0c:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    1d0e:	push	{r4, lr}
    1d10:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    1d12:	ldr	r3, [r3, #4]
    1d14:	blx	r3
	return len;
}
    1d16:	mov	r0, r4
    1d18:	pop	{r4, pc}
    1d1a:	nop

00001d1c <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    1d1c:	push	{r1, r2, r3}
    1d1e:	push	{lr}
    1d20:	sub	sp, #8
    1d22:	add	r3, sp, #12
    1d24:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    1d28:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    1d2a:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    1d2c:	bl	2f68 <vdprintf>
#endif
}
    1d30:	add	sp, #8
    1d32:	ldr.w	lr, [sp], #4
    1d36:	add	sp, #12
    1d38:	bx	lr
    1d3a:	nop

00001d3c <operator new[](unsigned int)>:
	return malloc(size);
}

void * operator new[](size_t size)
{
	return malloc(size);
    1d3c:	b.w	22f8 <malloc>

00001d40 <operator delete[](void*, unsigned int)>:
	free(ptr);
}

void operator delete[](void * ptr, size_t size)
{
	free(ptr);
    1d40:	b.w	2308 <free>

00001d44 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1d44:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1d46:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1d4a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1d4e:	bne.n	1e2c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1d50:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1d52:	bcc.n	1dd8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1d54:	ldr.w	r3, [r1], #4
    1d58:	str.w	r3, [r0], #4
    1d5c:	ldr.w	r3, [r1], #4
    1d60:	str.w	r3, [r0], #4
    1d64:	ldr.w	r3, [r1], #4
    1d68:	str.w	r3, [r0], #4
    1d6c:	ldr.w	r3, [r1], #4
    1d70:	str.w	r3, [r0], #4
    1d74:	ldr.w	r3, [r1], #4
    1d78:	str.w	r3, [r0], #4
    1d7c:	ldr.w	r3, [r1], #4
    1d80:	str.w	r3, [r0], #4
    1d84:	ldr.w	r3, [r1], #4
    1d88:	str.w	r3, [r0], #4
    1d8c:	ldr.w	r3, [r1], #4
    1d90:	str.w	r3, [r0], #4
    1d94:	ldr.w	r3, [r1], #4
    1d98:	str.w	r3, [r0], #4
    1d9c:	ldr.w	r3, [r1], #4
    1da0:	str.w	r3, [r0], #4
    1da4:	ldr.w	r3, [r1], #4
    1da8:	str.w	r3, [r0], #4
    1dac:	ldr.w	r3, [r1], #4
    1db0:	str.w	r3, [r0], #4
    1db4:	ldr.w	r3, [r1], #4
    1db8:	str.w	r3, [r0], #4
    1dbc:	ldr.w	r3, [r1], #4
    1dc0:	str.w	r3, [r0], #4
    1dc4:	ldr.w	r3, [r1], #4
    1dc8:	str.w	r3, [r0], #4
    1dcc:	ldr.w	r3, [r1], #4
    1dd0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1dd4:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1dd6:	bcs.n	1d54 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1dd8:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1dda:	bcc.n	1e00 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1ddc:	ldr.w	r3, [r1], #4
    1de0:	str.w	r3, [r0], #4
    1de4:	ldr.w	r3, [r1], #4
    1de8:	str.w	r3, [r0], #4
    1dec:	ldr.w	r3, [r1], #4
    1df0:	str.w	r3, [r0], #4
    1df4:	ldr.w	r3, [r1], #4
    1df8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1dfc:	subs	r2, #16
	bhs	.Lmid_block_loop
    1dfe:	bcs.n	1ddc <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1e00:	adds	r2, #12
	blo	.Lcopy_less_than_4
    1e02:	bcc.n	1e10 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1e04:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1e08:	str.w	r3, [r0], #4
	subs	r2, #4
    1e0c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1e0e:	bcs.n	1e04 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1e10:	adds	r2, #4
	beq	.Ldone
    1e12:	beq.n	1e26 <memcpy+0xe2>

	lsls	r2, r2, #31
    1e14:	lsls	r2, r2, #31
	itt ne
    1e16:	itt	ne
	ldrbne  r3, [r1], #1
    1e18:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1e1c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1e20:	bcc.n	1e26 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1e22:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1e24:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1e26:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1e28:	bx	lr
    1e2a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1e2c:	cmp	r2, #8
	blo	.Lbyte_copy
    1e2e:	bcc.n	1e58 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1e30:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1e32:	beq.n	1d50 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1e34:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1e38:	beq.n	1d50 <memcpy+0xc>

	rsb	r3, #4
    1e3a:	rsb	r3, r3, #4
	subs	r2, r3
    1e3e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    1e40:	lsls	r3, r3, #31
	itt ne
    1e42:	itt	ne
	ldrbne  r3, [r1], #1
    1e44:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1e48:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1e4c:	bcc.n	1d50 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1e4e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1e52:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1e56:	b.n	1d50 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1e58:	subs	r2, #4
	blo	.Lcopy_less_than_4
    1e5a:	bcc.n	1e10 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1e5c:	subs	r2, #1
	ldrb    r3, [r1], #1
    1e5e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1e62:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1e66:	bcs.n	1e5c <memcpy+0x118>

	ldrb	r3, [r1]
    1e68:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1e6a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1e6c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1e6e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1e70:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1e72:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1e74:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1e76:	bx	lr

00001e78 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    1e78:	movs	r0, #4
    1e7a:	mov	r1, lr
    1e7c:	tst	r0, r1
    1e7e:	beq.n	1e88 <_MSP>
    1e80:	mrs	r0, PSP
    1e84:	b.w	1e98 <HardFault_HandlerC>

00001e88 <_MSP>:
    1e88:	mrs	r0, MSP
    1e8c:	b.w	1e98 <HardFault_HandlerC>

00001e90 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    1e90:	bx	lr
    1e92:	nop

00001e94 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    1e94:	bx	lr
    1e96:	nop

00001e98 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1e98:	ldr	r3, [pc, #108]	; (1f08 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1e9a:	movs	r1, #5
    1e9c:	ldr	r2, [pc, #108]	; (1f0c <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1e9e:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1ea0:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1ea2:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    1ea6:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1ea8:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1eac:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1eae:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1eb0:	ldr	r4, [pc, #92]	; (1f10 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1eb2:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1eb4:	ldr	r0, [pc, #92]	; (1f14 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1eb6:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    1eb8:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1ebc:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    1ec0:	ldr	r3, [r4, #0]
    1ec2:	cmp	r3, r0
    1ec4:	bls.n	1ecc <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    1ec6:	ldr	r0, [pc, #80]	; (1f18 <HardFault_HandlerC+0x80>)
    1ec8:	bl	c80 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1ecc:	ldr	r5, [pc, #56]	; (1f08 <HardFault_HandlerC+0x70>)
    1ece:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1ed0:	movs	r0, #0
    1ed2:	ldr	r2, [pc, #72]	; (1f1c <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1ed4:	ldr	r1, [pc, #72]	; (1f20 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1ed6:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1eda:	str	r0, [sp, #4]
    1edc:	ldr	r3, [sp, #4]
    1ede:	cmp	r3, r2
    1ee0:	bhi.n	1eee <HardFault_HandlerC+0x56>
    1ee2:	ldr	r3, [sp, #4]
    1ee4:	adds	r3, #1
    1ee6:	str	r3, [sp, #4]
    1ee8:	ldr	r3, [sp, #4]
    1eea:	cmp	r3, r2
    1eec:	bls.n	1ee2 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1eee:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1ef2:	str	r0, [sp, #4]
    1ef4:	ldr	r3, [sp, #4]
    1ef6:	cmp	r3, r1
    1ef8:	bhi.n	1ed6 <HardFault_HandlerC+0x3e>
    1efa:	ldr	r3, [sp, #4]
    1efc:	adds	r3, #1
    1efe:	str	r3, [sp, #4]
    1f00:	ldr	r3, [sp, #4]
    1f02:	cmp	r3, r1
    1f04:	bls.n	1efa <HardFault_HandlerC+0x62>
    1f06:	b.n	1ed6 <HardFault_HandlerC+0x3e>
    1f08:	.word	0x401bc000
    1f0c:	.word	0x401f8000
    1f10:	.word	0x20000620
    1f14:	.word	0x23c345ff
    1f18:	.word	0x11e1a300
    1f1c:	.word	0x000f423f
    1f20:	.word	0x0089543f

00001f24 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    1f24:	ldr	r2, [pc, #36]	; (1f4c <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    1f26:	push	{r3, lr}
        char *prev = __brkval;
    1f28:	ldr	r3, [r2, #0]
        if (incr != 0) {
    1f2a:	cbz	r0, 1f36 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    1f2c:	add	r0, r3
    1f2e:	ldr	r1, [pc, #32]	; (1f50 <_sbrk+0x2c>)
    1f30:	cmp	r0, r1
    1f32:	bhi.n	1f3a <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    1f34:	str	r0, [r2, #0]
        }
        return prev;
}
    1f36:	mov	r0, r3
    1f38:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    1f3a:	bl	229c <__errno>
    1f3e:	movs	r2, #12
                        return (void *)-1;
    1f40:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    1f44:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    1f46:	mov	r0, r3
    1f48:	pop	{r3, pc}
    1f4a:	nop
    1f4c:	.word	0x20000660
    1f50:	.word	0x20280000

00001f54 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1f54:	push	{r4, r5, r6, r7}
    1f56:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    1f58:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1f5a:	mov	r7, r6
    1f5c:	b.n	1f60 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    1f5e:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    1f60:	udiv	r3, r0, r2
    1f64:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1f68:	add.w	r4, r0, #55	; 0x37
    1f6c:	cmp	r0, #9
    1f6e:	add.w	r0, r0, #48	; 0x30
    1f72:	uxtb	r4, r4
    1f74:	it	ls
    1f76:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    1f78:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1f7a:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    1f7e:	cmp	r3, #0
    1f80:	bne.n	1f5e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    1f82:	adds	r2, r1, r5
    1f84:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    1f86:	cbz	r5, 1f9c <ultoa+0x48>
    1f88:	adds	r3, #1
		t = buf[j];
    1f8a:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    1f8e:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1f90:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    1f92:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1f94:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    1f96:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1f9a:	blt.n	1f88 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    1f9c:	mov	r0, r1
    1f9e:	pop	{r4, r5, r6, r7}
    1fa0:	bx	lr
    1fa2:	nop

00001fa4 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1fa4:	ldr	r0, [pc, #656]	; (2238 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1fa6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1faa:	ldr	r3, [pc, #656]	; (223c <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1fac:	ldr	r2, [r0, #120]	; 0x78
    1fae:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    1fb2:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1fb4:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1fb6:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1fb8:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1fbc:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1fc0:	ldr	r4, [pc, #636]	; (2240 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1fc2:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1fc6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1fc8:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1fcc:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1fce:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1fd0:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1fd4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1fd8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1fdc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1fe0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1fe4:	ldrh.w	r0, [r3, #392]	; 0x188
    1fe8:	uxth	r0, r0
    1fea:	orr.w	r0, r0, #240	; 0xf0
    1fee:	strh.w	r0, [r3, #392]	; 0x188
    1ff2:	add.w	r0, r1, r1, lsl #1
    1ff6:	ldr	r3, [pc, #580]	; (223c <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    1ff8:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1ffa:	movs	r5, #0
    1ffc:	lsls	r0, r0, #5
    1ffe:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2000:	cmp	r1, #4
    2002:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2004:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2008:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    200a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    200c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    200e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2010:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2012:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2014:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2016:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2018:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    201a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    201c:	bne.n	1ff2 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    201e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2022:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2026:	ldr	r3, [pc, #540]	; (2244 <pwm_init+0x2a0>)
    2028:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    202c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    202e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2030:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2034:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2036:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    203a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    203e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2042:	ldrh.w	r0, [r4, #392]	; 0x188
    2046:	uxth	r0, r0
    2048:	orr.w	r0, r0, #3840	; 0xf00
    204c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2050:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2054:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2058:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    205c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2060:	ldrh.w	r0, [r3, #392]	; 0x188
    2064:	uxth	r0, r0
    2066:	orr.w	r0, r0, #240	; 0xf0
    206a:	strh.w	r0, [r3, #392]	; 0x188
    206e:	add.w	r0, r1, r1, lsl #1
    2072:	ldr	r3, [pc, #464]	; (2244 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    2074:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2076:	movs	r5, #0
    2078:	lsls	r0, r0, #5
    207a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    207c:	cmp	r1, #4
    207e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2080:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2082:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2086:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2088:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    208a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    208c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    208e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2090:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2092:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2094:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2096:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2098:	bne.n	206e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    209a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    209e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    20a2:	ldr	r3, [pc, #420]	; (2248 <pwm_init+0x2a4>)
    20a4:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    20a8:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    20aa:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    20ac:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    20b0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    20b2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    20b6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    20ba:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    20be:	ldrh.w	r0, [r4, #392]	; 0x188
    20c2:	uxth	r0, r0
    20c4:	orr.w	r0, r0, #3840	; 0xf00
    20c8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    20cc:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    20d0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    20d4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    20d8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    20dc:	ldrh.w	r0, [r3, #392]	; 0x188
    20e0:	uxth	r0, r0
    20e2:	orr.w	r0, r0, #240	; 0xf0
    20e6:	strh.w	r0, [r3, #392]	; 0x188
    20ea:	add.w	r0, r1, r1, lsl #1
    20ee:	ldr	r3, [pc, #344]	; (2248 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    20f0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    20f2:	movs	r5, #0
    20f4:	lsls	r0, r0, #5
    20f6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    20f8:	cmp	r1, #4
    20fa:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    20fc:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    20fe:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2102:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2104:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2106:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2108:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    210a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    210c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    210e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2110:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2112:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2114:	bne.n	20ea <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2116:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    211a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    211e:	ldr	r3, [pc, #300]	; (224c <pwm_init+0x2a8>)
    2120:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2124:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2126:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2128:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    212c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    212e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2132:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2136:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    213a:	ldrh.w	r0, [r4, #392]	; 0x188
    213e:	uxth	r0, r0
    2140:	orr.w	r0, r0, #3840	; 0xf00
    2144:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2148:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    214c:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2150:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2154:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2158:	ldrh.w	r0, [r3, #392]	; 0x188
    215c:	uxth	r0, r0
    215e:	orr.w	r0, r0, #240	; 0xf0
    2162:	strh.w	r0, [r3, #392]	; 0x188
    2166:	add.w	r0, r1, r1, lsl #1
    216a:	ldr	r3, [pc, #224]	; (224c <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    216c:	adds	r1, #1
    216e:	lsls	r0, r0, #5
    2170:	mov	r4, r3
    2172:	cmp	r1, #4
    2174:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2176:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2178:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    217c:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    217e:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2180:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2182:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2184:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    2186:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2188:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    218a:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    218c:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    218e:	bne.n	2166 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2190:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2194:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2196:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2198:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    219c:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    219e:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    21a2:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    21a4:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    21a8:	orrs	r3, r7
    21aa:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    21ae:	ldrh.w	r3, [r4, #392]	; 0x188
    21b2:	uxth	r3, r3
    21b4:	orr.w	r3, r3, #3840	; 0xf00
    21b8:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    21bc:	lsls	r0, r2, #5
    21be:	ldr	r3, [pc, #144]	; (2250 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    21c0:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    21c2:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    21c4:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    21c6:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    21c8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    21ca:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    21cc:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    21ce:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    21d2:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    21d4:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    21d6:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    21d8:	bne.n	21bc <pwm_init+0x218>
    21da:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    21dc:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    21de:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    21e2:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    21e6:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    21e8:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    21ec:	lsls	r0, r2, #5
    21ee:	ldr	r3, [pc, #100]	; (2254 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    21f0:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    21f2:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    21f4:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    21f6:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    21f8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    21fa:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    21fc:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    21fe:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2200:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2202:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2204:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2206:	bne.n	21ec <pwm_init+0x248>
    2208:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    220a:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    220c:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2210:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2214:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2216:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    221a:	lsls	r0, r2, #5
    221c:	ldr	r3, [pc, #56]	; (2258 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    221e:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2220:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2222:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2224:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2226:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2228:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    222a:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    222c:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    222e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2230:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2232:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2234:	bne.n	221a <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    2236:	pop	{r4, r5, r6, r7, pc}
    2238:	.word	0x400fc000
    223c:	.word	0x403dc000
    2240:	.word	0xfc030000
    2244:	.word	0x403e0000
    2248:	.word	0x403e4000
    224c:	.word	0x403e8000
    2250:	.word	0x401dc000
    2254:	.word	0x401e0000
    2258:	.word	0x401e4000

0000225c <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    225c:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    225e:	ldr	r3, [pc, #28]	; (227c <HardwareSerial::processSerialEvents()+0x20>)
    2260:	ldrb	r4, [r3, #0]
    2262:	cbz	r4, 2278 <HardwareSerial::processSerialEvents()+0x1c>
    2264:	ldr	r5, [pc, #24]	; (2280 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    2266:	ldr.w	r3, [r5, #4]!
    226a:	cmp	r3, #0
    226c:	beq.n	2266 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    226e:	blx	r3
			if (--handlers_still_to_process == 0) return;
    2270:	subs	r3, r4, #1
    2272:	ands.w	r4, r3, #255	; 0xff
    2276:	bne.n	2266 <HardwareSerial::processSerialEvents()+0xa>
    2278:	pop	{r3, r4, r5, pc}
    227a:	nop
    227c:	.word	0x200012d8
    2280:	.word	0x200012b8

00002284 <__aeabi_atexit>:
    2284:	mov	r3, r1
    2286:	mov	r1, r0
    2288:	mov	r0, r3
    228a:	b.w	2290 <__cxa_atexit>
    228e:	nop

00002290 <__cxa_atexit>:
    2290:	mov	r3, r2
    2292:	mov	r2, r1
    2294:	mov	r1, r0
    2296:	movs	r0, #2
    2298:	b.w	2fc8 <__register_exitproc>

0000229c <__errno>:
    229c:	ldr	r3, [pc, #4]	; (22a4 <__errno+0x8>)
    229e:	ldr	r0, [r3, #0]
    22a0:	bx	lr
    22a2:	nop
    22a4:	.word	0x20000a90

000022a8 <__libc_init_array>:
    22a8:	push	{r4, r5, r6, lr}
    22aa:	ldr	r6, [pc, #60]	; (22e8 <__libc_init_array+0x40>)
    22ac:	ldr	r5, [pc, #60]	; (22ec <__libc_init_array+0x44>)
    22ae:	subs	r6, r6, r5
    22b0:	asrs	r6, r6, #2
    22b2:	it	ne
    22b4:	movne	r4, #0
    22b6:	beq.n	22c4 <__libc_init_array+0x1c>
    22b8:	adds	r4, #1
    22ba:	ldr.w	r3, [r5], #4
    22be:	blx	r3
    22c0:	cmp	r6, r4
    22c2:	bne.n	22b8 <__libc_init_array+0x10>
    22c4:	ldr	r6, [pc, #40]	; (22f0 <__libc_init_array+0x48>)
    22c6:	ldr	r5, [pc, #44]	; (22f4 <__libc_init_array+0x4c>)
    22c8:	subs	r6, r6, r5
    22ca:	bl	61c0 <___init_veneer>
    22ce:	asrs	r6, r6, #2
    22d0:	it	ne
    22d2:	movne	r4, #0
    22d4:	beq.n	22e4 <__libc_init_array+0x3c>
    22d6:	adds	r4, #1
    22d8:	ldr.w	r3, [r5], #4
    22dc:	blx	r3
    22de:	cmp	r6, r4
    22e0:	bne.n	22d6 <__libc_init_array+0x2e>
    22e2:	pop	{r4, r5, r6, pc}
    22e4:	pop	{r4, r5, r6, pc}
    22e6:	nop
    22e8:	.word	0x600016f8
    22ec:	.word	0x600016f8
    22f0:	.word	0x60001700
    22f4:	.word	0x600016f8

000022f8 <malloc>:
    22f8:	ldr	r3, [pc, #8]	; (2304 <malloc+0xc>)
    22fa:	mov	r1, r0
    22fc:	ldr	r0, [r3, #0]
    22fe:	b.w	2318 <_malloc_r>
    2302:	nop
    2304:	.word	0x20000a90

00002308 <free>:
    2308:	ldr	r3, [pc, #8]	; (2314 <free+0xc>)
    230a:	mov	r1, r0
    230c:	ldr	r0, [r3, #0]
    230e:	b.w	3108 <_free_r>
    2312:	nop
    2314:	.word	0x20000a90

00002318 <_malloc_r>:
    2318:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    231c:	add.w	r5, r1, #11
    2320:	cmp	r5, #22
    2322:	sub	sp, #12
    2324:	mov	r6, r0
    2326:	bls.w	2468 <_malloc_r+0x150>
    232a:	bics.w	r5, r5, #7
    232e:	bmi.w	24b0 <_malloc_r+0x198>
    2332:	cmp	r1, r5
    2334:	bhi.w	24b0 <_malloc_r+0x198>
    2338:	bl	2a18 <__malloc_lock>
    233c:	cmp.w	r5, #504	; 0x1f8
    2340:	bcc.w	287c <_malloc_r+0x564>
    2344:	lsrs	r3, r5, #9
    2346:	beq.w	24be <_malloc_r+0x1a6>
    234a:	cmp	r3, #4
    234c:	bhi.w	2656 <_malloc_r+0x33e>
    2350:	lsrs	r0, r5, #6
    2352:	add.w	lr, r0, #57	; 0x39
    2356:	mov.w	r3, lr, lsl #1
    235a:	adds	r0, #56	; 0x38
    235c:	ldr	r7, [pc, #784]	; (2670 <_malloc_r+0x358>)
    235e:	add.w	r3, r7, r3, lsl #2
    2362:	sub.w	r1, r3, #8
    2366:	ldr	r4, [r3, #4]
    2368:	cmp	r1, r4
    236a:	bne.n	237c <_malloc_r+0x64>
    236c:	b.n	24c8 <_malloc_r+0x1b0>
    236e:	cmp	r2, #0
    2370:	bge.w	24cc <_malloc_r+0x1b4>
    2374:	ldr	r4, [r4, #12]
    2376:	cmp	r1, r4
    2378:	beq.w	24c8 <_malloc_r+0x1b0>
    237c:	ldr	r3, [r4, #4]
    237e:	bic.w	r3, r3, #3
    2382:	subs	r2, r3, r5
    2384:	cmp	r2, #15
    2386:	ble.n	236e <_malloc_r+0x56>
    2388:	ldr	r1, [pc, #740]	; (2670 <_malloc_r+0x358>)
    238a:	ldr	r4, [r7, #16]
    238c:	add.w	lr, r1, #8
    2390:	cmp	r4, lr
    2392:	beq.w	26fc <_malloc_r+0x3e4>
    2396:	ldr	r3, [r4, #4]
    2398:	bic.w	r3, r3, #3
    239c:	subs	r2, r3, r5
    239e:	cmp	r2, #15
    23a0:	bgt.w	26d6 <_malloc_r+0x3be>
    23a4:	cmp	r2, #0
    23a6:	str.w	lr, [r1, #20]
    23aa:	str.w	lr, [r1, #16]
    23ae:	bge.w	24ee <_malloc_r+0x1d6>
    23b2:	cmp.w	r3, #512	; 0x200
    23b6:	bcs.w	2688 <_malloc_r+0x370>
    23ba:	lsrs	r3, r3, #3
    23bc:	add.w	ip, r3, #1
    23c0:	movs	r2, #1
    23c2:	asrs	r3, r3, #2
    23c4:	lsl.w	r3, r2, r3
    23c8:	ldr	r2, [r1, #4]
    23ca:	ldr.w	r8, [r1, ip, lsl #3]
    23ce:	str.w	r8, [r4, #8]
    23d2:	add.w	r9, r1, ip, lsl #3
    23d6:	orrs	r2, r3
    23d8:	sub.w	r3, r9, #8
    23dc:	str	r3, [r4, #12]
    23de:	str	r2, [r1, #4]
    23e0:	str.w	r4, [r1, ip, lsl #3]
    23e4:	str.w	r4, [r8, #12]
    23e8:	asrs	r3, r0, #2
    23ea:	movs	r4, #1
    23ec:	lsls	r4, r3
    23ee:	cmp	r4, r2
    23f0:	bhi.w	2508 <_malloc_r+0x1f0>
    23f4:	tst	r4, r2
    23f6:	bne.n	2406 <_malloc_r+0xee>
    23f8:	bic.w	r0, r0, #3
    23fc:	lsls	r4, r4, #1
    23fe:	tst	r4, r2
    2400:	add.w	r0, r0, #4
    2404:	beq.n	23fc <_malloc_r+0xe4>
    2406:	add.w	r9, r7, r0, lsl #3
    240a:	mov	ip, r9
    240c:	mov	r8, r0
    240e:	ldr.w	r1, [ip, #12]
    2412:	cmp	ip, r1
    2414:	bne.n	2426 <_malloc_r+0x10e>
    2416:	b.n	2700 <_malloc_r+0x3e8>
    2418:	cmp	r2, #0
    241a:	bge.w	2720 <_malloc_r+0x408>
    241e:	ldr	r1, [r1, #12]
    2420:	cmp	ip, r1
    2422:	beq.w	2700 <_malloc_r+0x3e8>
    2426:	ldr	r3, [r1, #4]
    2428:	bic.w	r3, r3, #3
    242c:	subs	r2, r3, r5
    242e:	cmp	r2, #15
    2430:	ble.n	2418 <_malloc_r+0x100>
    2432:	mov	r4, r1
    2434:	ldr.w	ip, [r1, #12]
    2438:	ldr.w	r8, [r4, #8]!
    243c:	adds	r3, r1, r5
    243e:	orr.w	r5, r5, #1
    2442:	str	r5, [r1, #4]
    2444:	orr.w	r1, r2, #1
    2448:	str.w	ip, [r8, #12]
    244c:	mov	r0, r6
    244e:	str.w	r8, [ip, #8]
    2452:	str	r3, [r7, #20]
    2454:	str	r3, [r7, #16]
    2456:	str.w	lr, [r3, #12]
    245a:	str.w	lr, [r3, #8]
    245e:	str	r1, [r3, #4]
    2460:	str	r2, [r3, r2]
    2462:	bl	2a1c <__malloc_unlock>
    2466:	b.n	24a8 <_malloc_r+0x190>
    2468:	cmp	r1, #16
    246a:	bhi.n	24b0 <_malloc_r+0x198>
    246c:	bl	2a18 <__malloc_lock>
    2470:	movs	r5, #16
    2472:	movs	r3, #6
    2474:	movs	r0, #2
    2476:	ldr	r7, [pc, #504]	; (2670 <_malloc_r+0x358>)
    2478:	add.w	r3, r7, r3, lsl #2
    247c:	sub.w	r2, r3, #8
    2480:	ldr	r4, [r3, #4]
    2482:	cmp	r4, r2
    2484:	beq.w	2712 <_malloc_r+0x3fa>
    2488:	ldr	r3, [r4, #4]
    248a:	ldr	r1, [r4, #12]
    248c:	ldr	r5, [r4, #8]
    248e:	bic.w	r3, r3, #3
    2492:	add	r3, r4
    2494:	mov	r0, r6
    2496:	ldr	r2, [r3, #4]
    2498:	str	r1, [r5, #12]
    249a:	orr.w	r2, r2, #1
    249e:	str	r5, [r1, #8]
    24a0:	str	r2, [r3, #4]
    24a2:	bl	2a1c <__malloc_unlock>
    24a6:	adds	r4, #8
    24a8:	mov	r0, r4
    24aa:	add	sp, #12
    24ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24b0:	movs	r4, #0
    24b2:	movs	r3, #12
    24b4:	mov	r0, r4
    24b6:	str	r3, [r6, #0]
    24b8:	add	sp, #12
    24ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24be:	movs	r3, #128	; 0x80
    24c0:	mov.w	lr, #64	; 0x40
    24c4:	movs	r0, #63	; 0x3f
    24c6:	b.n	235c <_malloc_r+0x44>
    24c8:	mov	r0, lr
    24ca:	b.n	2388 <_malloc_r+0x70>
    24cc:	add	r3, r4
    24ce:	ldr	r1, [r4, #12]
    24d0:	ldr	r2, [r3, #4]
    24d2:	ldr	r5, [r4, #8]
    24d4:	orr.w	r2, r2, #1
    24d8:	str	r1, [r5, #12]
    24da:	mov	r0, r6
    24dc:	str	r5, [r1, #8]
    24de:	str	r2, [r3, #4]
    24e0:	bl	2a1c <__malloc_unlock>
    24e4:	adds	r4, #8
    24e6:	mov	r0, r4
    24e8:	add	sp, #12
    24ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24ee:	add	r3, r4
    24f0:	mov	r0, r6
    24f2:	ldr	r2, [r3, #4]
    24f4:	orr.w	r2, r2, #1
    24f8:	str	r2, [r3, #4]
    24fa:	bl	2a1c <__malloc_unlock>
    24fe:	adds	r4, #8
    2500:	mov	r0, r4
    2502:	add	sp, #12
    2504:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2508:	ldr	r4, [r7, #8]
    250a:	ldr	r3, [r4, #4]
    250c:	bic.w	r8, r3, #3
    2510:	cmp	r8, r5
    2512:	bcc.n	251e <_malloc_r+0x206>
    2514:	rsb	r3, r5, r8
    2518:	cmp	r3, #15
    251a:	bgt.w	2636 <_malloc_r+0x31e>
    251e:	ldr	r3, [pc, #340]	; (2674 <_malloc_r+0x35c>)
    2520:	ldr.w	r9, [pc, #352]	; 2684 <_malloc_r+0x36c>
    2524:	ldr	r2, [r3, #0]
    2526:	ldr.w	r3, [r9]
    252a:	adds	r3, #1
    252c:	add	r2, r5
    252e:	add.w	sl, r4, r8
    2532:	beq.w	27f6 <_malloc_r+0x4de>
    2536:	add.w	r2, r2, #4096	; 0x1000
    253a:	adds	r2, #15
    253c:	bic.w	r2, r2, #4080	; 0xff0
    2540:	bic.w	r2, r2, #15
    2544:	mov	r1, r2
    2546:	mov	r0, r6
    2548:	str	r2, [sp, #4]
    254a:	bl	2e00 <_sbrk_r>
    254e:	cmp.w	r0, #4294967295
    2552:	mov	fp, r0
    2554:	ldr	r2, [sp, #4]
    2556:	beq.w	280a <_malloc_r+0x4f2>
    255a:	cmp	sl, r0
    255c:	bhi.w	2758 <_malloc_r+0x440>
    2560:	ldr	r3, [pc, #276]	; (2678 <_malloc_r+0x360>)
    2562:	ldr	r1, [r3, #0]
    2564:	cmp	sl, fp
    2566:	add	r1, r2
    2568:	str	r1, [r3, #0]
    256a:	beq.w	2814 <_malloc_r+0x4fc>
    256e:	ldr.w	r0, [r9]
    2572:	ldr.w	lr, [pc, #272]	; 2684 <_malloc_r+0x36c>
    2576:	adds	r0, #1
    2578:	ittet	ne
    257a:	rsbne	sl, sl, fp
    257e:	addne	r1, sl
    2580:	streq.w	fp, [lr]
    2584:	strne	r1, [r3, #0]
    2586:	ands.w	r1, fp, #7
    258a:	beq.w	27bc <_malloc_r+0x4a4>
    258e:	rsb	r0, r1, #8
    2592:	rsb	r1, r1, #4096	; 0x1000
    2596:	add	fp, r0
    2598:	adds	r1, #8
    259a:	add	r2, fp
    259c:	ubfx	r2, r2, #0, #12
    25a0:	rsb	r9, r2, r1
    25a4:	mov	r1, r9
    25a6:	mov	r0, r6
    25a8:	str	r3, [sp, #4]
    25aa:	bl	2e00 <_sbrk_r>
    25ae:	adds	r3, r0, #1
    25b0:	ldr	r3, [sp, #4]
    25b2:	beq.w	2834 <_malloc_r+0x51c>
    25b6:	rsb	r2, fp, r0
    25ba:	add	r2, r9
    25bc:	orr.w	r2, r2, #1
    25c0:	ldr	r1, [r3, #0]
    25c2:	str.w	fp, [r7, #8]
    25c6:	add	r1, r9
    25c8:	cmp	r4, r7
    25ca:	str.w	r2, [fp, #4]
    25ce:	str	r1, [r3, #0]
    25d0:	ldr.w	r9, [pc, #164]	; 2678 <_malloc_r+0x360>
    25d4:	beq.n	2604 <_malloc_r+0x2ec>
    25d6:	cmp.w	r8, #15
    25da:	bls.w	27d8 <_malloc_r+0x4c0>
    25de:	ldr	r2, [r4, #4]
    25e0:	sub.w	r3, r8, #12
    25e4:	bic.w	r3, r3, #7
    25e8:	adds	r0, r4, r3
    25ea:	and.w	r2, r2, #1
    25ee:	mov.w	lr, #5
    25f2:	orrs	r2, r3
    25f4:	cmp	r3, #15
    25f6:	str	r2, [r4, #4]
    25f8:	str.w	lr, [r0, #4]
    25fc:	str.w	lr, [r0, #8]
    2600:	bhi.w	283c <_malloc_r+0x524>
    2604:	ldr	r3, [pc, #116]	; (267c <_malloc_r+0x364>)
    2606:	ldr	r4, [r7, #8]
    2608:	ldr	r2, [r3, #0]
    260a:	cmp	r1, r2
    260c:	it	hi
    260e:	strhi	r1, [r3, #0]
    2610:	ldr	r3, [pc, #108]	; (2680 <_malloc_r+0x368>)
    2612:	ldr	r2, [r3, #0]
    2614:	cmp	r1, r2
    2616:	ldr	r2, [r4, #4]
    2618:	it	hi
    261a:	strhi	r1, [r3, #0]
    261c:	bic.w	r2, r2, #3
    2620:	cmp	r5, r2
    2622:	sub.w	r3, r2, r5
    2626:	bhi.n	262c <_malloc_r+0x314>
    2628:	cmp	r3, #15
    262a:	bgt.n	2636 <_malloc_r+0x31e>
    262c:	mov	r0, r6
    262e:	bl	2a1c <__malloc_unlock>
    2632:	movs	r4, #0
    2634:	b.n	24a8 <_malloc_r+0x190>
    2636:	adds	r2, r4, r5
    2638:	orr.w	r3, r3, #1
    263c:	orr.w	r5, r5, #1
    2640:	str	r5, [r4, #4]
    2642:	mov	r0, r6
    2644:	str	r2, [r7, #8]
    2646:	str	r3, [r2, #4]
    2648:	bl	2a1c <__malloc_unlock>
    264c:	adds	r4, #8
    264e:	mov	r0, r4
    2650:	add	sp, #12
    2652:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2656:	cmp	r3, #20
    2658:	bls.n	273e <_malloc_r+0x426>
    265a:	cmp	r3, #84	; 0x54
    265c:	bhi.w	27a8 <_malloc_r+0x490>
    2660:	lsrs	r0, r5, #12
    2662:	add.w	lr, r0, #111	; 0x6f
    2666:	mov.w	r3, lr, lsl #1
    266a:	adds	r0, #110	; 0x6e
    266c:	b.n	235c <_malloc_r+0x44>
    266e:	nop
    2670:	.word	0x20000c00
    2674:	.word	0x200012e4
    2678:	.word	0x200012e8
    267c:	.word	0x200012e0
    2680:	.word	0x200012dc
    2684:	.word	0x2000100c
    2688:	lsrs	r2, r3, #9
    268a:	cmp	r2, #4
    268c:	bls.n	274c <_malloc_r+0x434>
    268e:	cmp	r2, #20
    2690:	bhi.w	27fa <_malloc_r+0x4e2>
    2694:	add.w	r1, r2, #92	; 0x5c
    2698:	lsls	r1, r1, #1
    269a:	adds	r2, #91	; 0x5b
    269c:	add.w	ip, r7, r1, lsl #2
    26a0:	ldr.w	r1, [r7, r1, lsl #2]
    26a4:	ldr.w	r8, [pc, #476]	; 2884 <_malloc_r+0x56c>
    26a8:	sub.w	ip, ip, #8
    26ac:	cmp	ip, r1
    26ae:	beq.w	27c2 <_malloc_r+0x4aa>
    26b2:	ldr	r2, [r1, #4]
    26b4:	bic.w	r2, r2, #3
    26b8:	cmp	r3, r2
    26ba:	bcs.n	26c2 <_malloc_r+0x3aa>
    26bc:	ldr	r1, [r1, #8]
    26be:	cmp	ip, r1
    26c0:	bne.n	26b2 <_malloc_r+0x39a>
    26c2:	ldr.w	ip, [r1, #12]
    26c6:	ldr	r2, [r7, #4]
    26c8:	str.w	ip, [r4, #12]
    26cc:	str	r1, [r4, #8]
    26ce:	str.w	r4, [ip, #8]
    26d2:	str	r4, [r1, #12]
    26d4:	b.n	23e8 <_malloc_r+0xd0>
    26d6:	adds	r3, r4, r5
    26d8:	orr.w	r7, r2, #1
    26dc:	orr.w	r5, r5, #1
    26e0:	str	r5, [r4, #4]
    26e2:	mov	r0, r6
    26e4:	str	r3, [r1, #20]
    26e6:	str	r3, [r1, #16]
    26e8:	str.w	lr, [r3, #12]
    26ec:	str.w	lr, [r3, #8]
    26f0:	str	r7, [r3, #4]
    26f2:	str	r2, [r3, r2]
    26f4:	adds	r4, #8
    26f6:	bl	2a1c <__malloc_unlock>
    26fa:	b.n	24a8 <_malloc_r+0x190>
    26fc:	ldr	r2, [r1, #4]
    26fe:	b.n	23e8 <_malloc_r+0xd0>
    2700:	add.w	r8, r8, #1
    2704:	tst.w	r8, #3
    2708:	add.w	ip, ip, #8
    270c:	bne.w	240e <_malloc_r+0xf6>
    2710:	b.n	2774 <_malloc_r+0x45c>
    2712:	ldr	r4, [r3, #12]
    2714:	cmp	r3, r4
    2716:	it	eq
    2718:	addeq	r0, #2
    271a:	beq.w	2388 <_malloc_r+0x70>
    271e:	b.n	2488 <_malloc_r+0x170>
    2720:	add	r3, r1
    2722:	mov	r4, r1
    2724:	ldr	r2, [r3, #4]
    2726:	ldr	r1, [r1, #12]
    2728:	ldr.w	r5, [r4, #8]!
    272c:	orr.w	r2, r2, #1
    2730:	str	r2, [r3, #4]
    2732:	mov	r0, r6
    2734:	str	r1, [r5, #12]
    2736:	str	r5, [r1, #8]
    2738:	bl	2a1c <__malloc_unlock>
    273c:	b.n	24a8 <_malloc_r+0x190>
    273e:	add.w	lr, r3, #92	; 0x5c
    2742:	add.w	r0, r3, #91	; 0x5b
    2746:	mov.w	r3, lr, lsl #1
    274a:	b.n	235c <_malloc_r+0x44>
    274c:	lsrs	r2, r3, #6
    274e:	add.w	r1, r2, #57	; 0x39
    2752:	lsls	r1, r1, #1
    2754:	adds	r2, #56	; 0x38
    2756:	b.n	269c <_malloc_r+0x384>
    2758:	cmp	r4, r7
    275a:	ldr	r3, [pc, #296]	; (2884 <_malloc_r+0x56c>)
    275c:	beq.w	2560 <_malloc_r+0x248>
    2760:	ldr	r4, [r3, #8]
    2762:	ldr	r2, [r4, #4]
    2764:	bic.w	r2, r2, #3
    2768:	b.n	2620 <_malloc_r+0x308>
    276a:	ldr.w	r3, [r9], #-8
    276e:	cmp	r9, r3
    2770:	bne.w	2878 <_malloc_r+0x560>
    2774:	tst.w	r0, #3
    2778:	add.w	r0, r0, #4294967295
    277c:	bne.n	276a <_malloc_r+0x452>
    277e:	ldr	r3, [r7, #4]
    2780:	bic.w	r3, r3, r4
    2784:	str	r3, [r7, #4]
    2786:	lsls	r4, r4, #1
    2788:	cmp	r4, r3
    278a:	bhi.w	2508 <_malloc_r+0x1f0>
    278e:	cmp	r4, #0
    2790:	beq.w	2508 <_malloc_r+0x1f0>
    2794:	tst	r4, r3
    2796:	mov	r0, r8
    2798:	bne.w	2406 <_malloc_r+0xee>
    279c:	lsls	r4, r4, #1
    279e:	tst	r4, r3
    27a0:	add.w	r0, r0, #4
    27a4:	beq.n	279c <_malloc_r+0x484>
    27a6:	b.n	2406 <_malloc_r+0xee>
    27a8:	cmp.w	r3, #340	; 0x154
    27ac:	bhi.n	27e0 <_malloc_r+0x4c8>
    27ae:	lsrs	r0, r5, #15
    27b0:	add.w	lr, r0, #120	; 0x78
    27b4:	mov.w	r3, lr, lsl #1
    27b8:	adds	r0, #119	; 0x77
    27ba:	b.n	235c <_malloc_r+0x44>
    27bc:	mov.w	r1, #4096	; 0x1000
    27c0:	b.n	259a <_malloc_r+0x282>
    27c2:	movs	r1, #1
    27c4:	ldr.w	r3, [r8, #4]
    27c8:	asrs	r2, r2, #2
    27ca:	lsl.w	r2, r1, r2
    27ce:	orrs	r2, r3
    27d0:	str.w	r2, [r8, #4]
    27d4:	mov	r1, ip
    27d6:	b.n	26c8 <_malloc_r+0x3b0>
    27d8:	movs	r3, #1
    27da:	str.w	r3, [fp, #4]
    27de:	b.n	262c <_malloc_r+0x314>
    27e0:	movw	r2, #1364	; 0x554
    27e4:	cmp	r3, r2
    27e6:	bhi.n	282a <_malloc_r+0x512>
    27e8:	lsrs	r0, r5, #18
    27ea:	add.w	lr, r0, #125	; 0x7d
    27ee:	mov.w	r3, lr, lsl #1
    27f2:	adds	r0, #124	; 0x7c
    27f4:	b.n	235c <_malloc_r+0x44>
    27f6:	adds	r2, #16
    27f8:	b.n	2544 <_malloc_r+0x22c>
    27fa:	cmp	r2, #84	; 0x54
    27fc:	bhi.n	284c <_malloc_r+0x534>
    27fe:	lsrs	r2, r3, #12
    2800:	add.w	r1, r2, #111	; 0x6f
    2804:	lsls	r1, r1, #1
    2806:	adds	r2, #110	; 0x6e
    2808:	b.n	269c <_malloc_r+0x384>
    280a:	ldr	r4, [r7, #8]
    280c:	ldr	r2, [r4, #4]
    280e:	bic.w	r2, r2, #3
    2812:	b.n	2620 <_malloc_r+0x308>
    2814:	ubfx	r0, sl, #0, #12
    2818:	cmp	r0, #0
    281a:	bne.w	256e <_malloc_r+0x256>
    281e:	add	r2, r8
    2820:	ldr	r3, [r7, #8]
    2822:	orr.w	r2, r2, #1
    2826:	str	r2, [r3, #4]
    2828:	b.n	2604 <_malloc_r+0x2ec>
    282a:	movs	r3, #254	; 0xfe
    282c:	mov.w	lr, #127	; 0x7f
    2830:	movs	r0, #126	; 0x7e
    2832:	b.n	235c <_malloc_r+0x44>
    2834:	movs	r2, #1
    2836:	mov.w	r9, #0
    283a:	b.n	25c0 <_malloc_r+0x2a8>
    283c:	add.w	r1, r4, #8
    2840:	mov	r0, r6
    2842:	bl	3108 <_free_r>
    2846:	ldr.w	r1, [r9]
    284a:	b.n	2604 <_malloc_r+0x2ec>
    284c:	cmp.w	r2, #340	; 0x154
    2850:	bhi.n	285e <_malloc_r+0x546>
    2852:	lsrs	r2, r3, #15
    2854:	add.w	r1, r2, #120	; 0x78
    2858:	lsls	r1, r1, #1
    285a:	adds	r2, #119	; 0x77
    285c:	b.n	269c <_malloc_r+0x384>
    285e:	movw	r1, #1364	; 0x554
    2862:	cmp	r2, r1
    2864:	bhi.n	2872 <_malloc_r+0x55a>
    2866:	lsrs	r2, r3, #18
    2868:	add.w	r1, r2, #125	; 0x7d
    286c:	lsls	r1, r1, #1
    286e:	adds	r2, #124	; 0x7c
    2870:	b.n	269c <_malloc_r+0x384>
    2872:	movs	r1, #254	; 0xfe
    2874:	movs	r2, #126	; 0x7e
    2876:	b.n	269c <_malloc_r+0x384>
    2878:	ldr	r3, [r7, #4]
    287a:	b.n	2786 <_malloc_r+0x46e>
    287c:	lsrs	r0, r5, #3
    287e:	adds	r3, r0, #1
    2880:	lsls	r3, r3, #1
    2882:	b.n	2476 <_malloc_r+0x15e>
    2884:	.word	0x20000c00

00002888 <__ascii_mbtowc>:
    2888:	sub	sp, #8
    288a:	cbz	r1, 28a0 <__ascii_mbtowc+0x18>
    288c:	cbz	r2, 28a6 <__ascii_mbtowc+0x1e>
    288e:	cbz	r3, 28ac <__ascii_mbtowc+0x24>
    2890:	ldrb	r3, [r2, #0]
    2892:	str	r3, [r1, #0]
    2894:	ldrb	r2, [r2, #0]
    2896:	adds	r0, r2, #0
    2898:	it	ne
    289a:	movne	r0, #1
    289c:	add	sp, #8
    289e:	bx	lr
    28a0:	add	r1, sp, #4
    28a2:	cmp	r2, #0
    28a4:	bne.n	288e <__ascii_mbtowc+0x6>
    28a6:	mov	r0, r2
    28a8:	add	sp, #8
    28aa:	bx	lr
    28ac:	mvn.w	r0, #1
    28b0:	b.n	289c <__ascii_mbtowc+0x14>
    28b2:	nop

000028b4 <memmove>:
    28b4:	cmp	r0, r1
    28b6:	push	{r4, r5, r6, r7, lr}
    28b8:	bls.n	28d6 <memmove+0x22>
    28ba:	adds	r3, r1, r2
    28bc:	cmp	r0, r3
    28be:	bcs.n	28d6 <memmove+0x22>
    28c0:	adds	r1, r0, r2
    28c2:	cmp	r2, #0
    28c4:	beq.n	296a <memmove+0xb6>
    28c6:	subs	r2, r3, r2
    28c8:	ldrb.w	r4, [r3, #-1]!
    28cc:	strb.w	r4, [r1, #-1]!
    28d0:	cmp	r3, r2
    28d2:	bne.n	28c8 <memmove+0x14>
    28d4:	pop	{r4, r5, r6, r7, pc}
    28d6:	cmp	r2, #15
    28d8:	bls.n	296c <memmove+0xb8>
    28da:	orr.w	r3, r1, r0
    28de:	lsls	r3, r3, #30
    28e0:	bne.n	2970 <memmove+0xbc>
    28e2:	add.w	r4, r0, #16
    28e6:	add.w	r3, r1, #16
    28ea:	mov	r5, r2
    28ec:	ldr.w	r6, [r3, #-16]
    28f0:	str.w	r6, [r4, #-16]
    28f4:	ldr.w	r6, [r3, #-12]
    28f8:	str.w	r6, [r4, #-12]
    28fc:	ldr.w	r6, [r3, #-8]
    2900:	str.w	r6, [r4, #-8]
    2904:	subs	r5, #16
    2906:	ldr.w	r6, [r3, #-4]
    290a:	str.w	r6, [r4, #-4]
    290e:	cmp	r5, #15
    2910:	add.w	r3, r3, #16
    2914:	add.w	r4, r4, #16
    2918:	bhi.n	28ec <memmove+0x38>
    291a:	sub.w	r3, r2, #16
    291e:	bic.w	r3, r3, #15
    2922:	and.w	lr, r2, #15
    2926:	adds	r3, #16
    2928:	cmp.w	lr, #3
    292c:	add	r1, r3
    292e:	add	r3, r0
    2930:	bls.n	2976 <memmove+0xc2>
    2932:	subs	r6, r3, #4
    2934:	mov	r5, r1
    2936:	mov	r4, lr
    2938:	subs	r4, #4
    293a:	ldr.w	r7, [r5], #4
    293e:	str.w	r7, [r6, #4]!
    2942:	cmp	r4, #3
    2944:	bhi.n	2938 <memmove+0x84>
    2946:	sub.w	r4, lr, #4
    294a:	bic.w	r4, r4, #3
    294e:	adds	r4, #4
    2950:	add	r3, r4
    2952:	add	r1, r4
    2954:	and.w	r2, r2, #3
    2958:	cbz	r2, 2974 <memmove+0xc0>
    295a:	subs	r3, #1
    295c:	add	r2, r1
    295e:	ldrb.w	r4, [r1], #1
    2962:	strb.w	r4, [r3, #1]!
    2966:	cmp	r2, r1
    2968:	bne.n	295e <memmove+0xaa>
    296a:	pop	{r4, r5, r6, r7, pc}
    296c:	mov	r3, r0
    296e:	b.n	2958 <memmove+0xa4>
    2970:	mov	r3, r0
    2972:	b.n	295a <memmove+0xa6>
    2974:	pop	{r4, r5, r6, r7, pc}
    2976:	mov	r2, lr
    2978:	b.n	2958 <memmove+0xa4>
    297a:	nop

0000297c <memset>:
    297c:	push	{r4, r5, r6}
    297e:	lsls	r4, r0, #30
    2980:	beq.n	2a10 <memset+0x94>
    2982:	subs	r4, r2, #1
    2984:	cmp	r2, #0
    2986:	beq.n	2a0c <memset+0x90>
    2988:	uxtb	r5, r1
    298a:	mov	r3, r0
    298c:	b.n	2994 <memset+0x18>
    298e:	subs	r2, r4, #1
    2990:	cbz	r4, 2a0c <memset+0x90>
    2992:	mov	r4, r2
    2994:	strb.w	r5, [r3], #1
    2998:	lsls	r2, r3, #30
    299a:	bne.n	298e <memset+0x12>
    299c:	cmp	r4, #3
    299e:	bls.n	29fe <memset+0x82>
    29a0:	uxtb	r5, r1
    29a2:	orr.w	r5, r5, r5, lsl #8
    29a6:	cmp	r4, #15
    29a8:	orr.w	r5, r5, r5, lsl #16
    29ac:	bls.n	29e2 <memset+0x66>
    29ae:	add.w	r2, r3, #16
    29b2:	mov	r6, r4
    29b4:	subs	r6, #16
    29b6:	cmp	r6, #15
    29b8:	str.w	r5, [r2, #-16]
    29bc:	str.w	r5, [r2, #-12]
    29c0:	str.w	r5, [r2, #-8]
    29c4:	str.w	r5, [r2, #-4]
    29c8:	add.w	r2, r2, #16
    29cc:	bhi.n	29b4 <memset+0x38>
    29ce:	sub.w	r2, r4, #16
    29d2:	bic.w	r2, r2, #15
    29d6:	and.w	r4, r4, #15
    29da:	adds	r2, #16
    29dc:	cmp	r4, #3
    29de:	add	r3, r2
    29e0:	bls.n	29fe <memset+0x82>
    29e2:	mov	r6, r3
    29e4:	mov	r2, r4
    29e6:	subs	r2, #4
    29e8:	cmp	r2, #3
    29ea:	str.w	r5, [r6], #4
    29ee:	bhi.n	29e6 <memset+0x6a>
    29f0:	subs	r2, r4, #4
    29f2:	bic.w	r2, r2, #3
    29f6:	adds	r2, #4
    29f8:	add	r3, r2
    29fa:	and.w	r4, r4, #3
    29fe:	cbz	r4, 2a0c <memset+0x90>
    2a00:	uxtb	r1, r1
    2a02:	add	r4, r3
    2a04:	strb.w	r1, [r3], #1
    2a08:	cmp	r3, r4
    2a0a:	bne.n	2a04 <memset+0x88>
    2a0c:	pop	{r4, r5, r6}
    2a0e:	bx	lr
    2a10:	mov	r4, r2
    2a12:	mov	r3, r0
    2a14:	b.n	299c <memset+0x20>
    2a16:	nop

00002a18 <__malloc_lock>:
    2a18:	bx	lr
    2a1a:	nop

00002a1c <__malloc_unlock>:
    2a1c:	bx	lr
    2a1e:	nop

00002a20 <_realloc_r>:
    2a20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a24:	mov	r7, r2
    2a26:	sub	sp, #12
    2a28:	cmp	r1, #0
    2a2a:	beq.w	2bb0 <_realloc_r+0x190>
    2a2e:	mov	r6, r1
    2a30:	mov	r9, r0
    2a32:	add.w	r5, r7, #11
    2a36:	bl	2a18 <__malloc_lock>
    2a3a:	ldr.w	lr, [r6, #-4]
    2a3e:	cmp	r5, #22
    2a40:	bic.w	r4, lr, #3
    2a44:	sub.w	r8, r6, #8
    2a48:	bhi.n	2acc <_realloc_r+0xac>
    2a4a:	movs	r2, #16
    2a4c:	mov	r5, r2
    2a4e:	cmp	r7, r5
    2a50:	bhi.n	2ad6 <_realloc_r+0xb6>
    2a52:	cmp	r4, r2
    2a54:	bge.n	2b42 <_realloc_r+0x122>
    2a56:	ldr	r3, [pc, #804]	; (2d7c <_realloc_r+0x35c>)
    2a58:	ldr	r1, [r3, #8]
    2a5a:	add.w	r0, r8, r4
    2a5e:	cmp	r0, r1
    2a60:	ldr	r1, [r0, #4]
    2a62:	beq.w	2c18 <_realloc_r+0x1f8>
    2a66:	bic.w	r3, r1, #1
    2a6a:	add	r3, r0
    2a6c:	ldr	r3, [r3, #4]
    2a6e:	lsls	r3, r3, #31
    2a70:	bpl.n	2b6e <_realloc_r+0x14e>
    2a72:	tst.w	lr, #1
    2a76:	beq.n	2ae4 <_realloc_r+0xc4>
    2a78:	mov	r1, r7
    2a7a:	mov	r0, r9
    2a7c:	bl	2318 <_malloc_r>
    2a80:	mov	r7, r0
    2a82:	cbz	r0, 2abe <_realloc_r+0x9e>
    2a84:	ldr.w	r3, [r6, #-4]
    2a88:	bic.w	r3, r3, #1
    2a8c:	add	r3, r8
    2a8e:	sub.w	r2, r0, #8
    2a92:	cmp	r2, r3
    2a94:	beq.w	2d20 <_realloc_r+0x300>
    2a98:	subs	r2, r4, #4
    2a9a:	cmp	r2, #36	; 0x24
    2a9c:	bhi.w	2d02 <_realloc_r+0x2e2>
    2aa0:	cmp	r2, #19
    2aa2:	bhi.w	2cae <_realloc_r+0x28e>
    2aa6:	mov	r3, r0
    2aa8:	mov	r2, r6
    2aaa:	ldr	r1, [r2, #0]
    2aac:	str	r1, [r3, #0]
    2aae:	ldr	r1, [r2, #4]
    2ab0:	str	r1, [r3, #4]
    2ab2:	ldr	r2, [r2, #8]
    2ab4:	str	r2, [r3, #8]
    2ab6:	mov	r1, r6
    2ab8:	mov	r0, r9
    2aba:	bl	3108 <_free_r>
    2abe:	mov	r0, r9
    2ac0:	bl	2a1c <__malloc_unlock>
    2ac4:	mov	r0, r7
    2ac6:	add	sp, #12
    2ac8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2acc:	bic.w	r5, r5, #7
    2ad0:	cmp	r5, #0
    2ad2:	mov	r2, r5
    2ad4:	bge.n	2a4e <_realloc_r+0x2e>
    2ad6:	movs	r3, #12
    2ad8:	movs	r0, #0
    2ada:	str.w	r3, [r9]
    2ade:	add	sp, #12
    2ae0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ae4:	ldr.w	r3, [r6, #-8]
    2ae8:	rsb	sl, r3, r8
    2aec:	ldr.w	r3, [sl, #4]
    2af0:	bic.w	ip, r3, #3
    2af4:	add.w	r3, r4, ip
    2af8:	cmp	r3, r2
    2afa:	blt.n	2a78 <_realloc_r+0x58>
    2afc:	mov	r7, sl
    2afe:	ldr.w	r1, [sl, #12]
    2b02:	ldr.w	r0, [r7, #8]!
    2b06:	subs	r2, r4, #4
    2b08:	cmp	r2, #36	; 0x24
    2b0a:	str	r1, [r0, #12]
    2b0c:	str	r0, [r1, #8]
    2b0e:	bhi.w	2d40 <_realloc_r+0x320>
    2b12:	cmp	r2, #19
    2b14:	bls.w	2d3c <_realloc_r+0x31c>
    2b18:	ldr	r1, [r6, #0]
    2b1a:	str.w	r1, [sl, #8]
    2b1e:	ldr	r1, [r6, #4]
    2b20:	str.w	r1, [sl, #12]
    2b24:	cmp	r2, #27
    2b26:	bhi.w	2d80 <_realloc_r+0x360>
    2b2a:	adds	r6, #8
    2b2c:	add.w	r2, sl, #16
    2b30:	ldr	r1, [r6, #0]
    2b32:	str	r1, [r2, #0]
    2b34:	ldr	r1, [r6, #4]
    2b36:	str	r1, [r2, #4]
    2b38:	ldr	r1, [r6, #8]
    2b3a:	str	r1, [r2, #8]
    2b3c:	mov	r6, r7
    2b3e:	mov	r4, r3
    2b40:	mov	r8, sl
    2b42:	subs	r3, r4, r5
    2b44:	cmp	r3, #15
    2b46:	bhi.n	2b84 <_realloc_r+0x164>
    2b48:	ldr.w	r3, [r8, #4]
    2b4c:	and.w	r3, r3, #1
    2b50:	orrs	r3, r4
    2b52:	add	r4, r8
    2b54:	str.w	r3, [r8, #4]
    2b58:	ldr	r3, [r4, #4]
    2b5a:	orr.w	r3, r3, #1
    2b5e:	str	r3, [r4, #4]
    2b60:	mov	r0, r9
    2b62:	bl	2a1c <__malloc_unlock>
    2b66:	mov	r0, r6
    2b68:	add	sp, #12
    2b6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b6e:	bic.w	r1, r1, #3
    2b72:	add	r1, r4
    2b74:	cmp	r1, r2
    2b76:	blt.n	2bbc <_realloc_r+0x19c>
    2b78:	ldr	r3, [r0, #12]
    2b7a:	ldr	r2, [r0, #8]
    2b7c:	mov	r4, r1
    2b7e:	str	r3, [r2, #12]
    2b80:	str	r2, [r3, #8]
    2b82:	b.n	2b42 <_realloc_r+0x122>
    2b84:	ldr.w	r2, [r8, #4]
    2b88:	add.w	r1, r8, r5
    2b8c:	and.w	r2, r2, #1
    2b90:	orrs	r5, r2
    2b92:	orr.w	r2, r3, #1
    2b96:	add	r3, r1
    2b98:	str.w	r5, [r8, #4]
    2b9c:	str	r2, [r1, #4]
    2b9e:	ldr	r2, [r3, #4]
    2ba0:	orr.w	r2, r2, #1
    2ba4:	adds	r1, #8
    2ba6:	str	r2, [r3, #4]
    2ba8:	mov	r0, r9
    2baa:	bl	3108 <_free_r>
    2bae:	b.n	2b60 <_realloc_r+0x140>
    2bb0:	mov	r1, r2
    2bb2:	add	sp, #12
    2bb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bb8:	b.w	2318 <_malloc_r>
    2bbc:	tst.w	lr, #1
    2bc0:	bne.w	2a78 <_realloc_r+0x58>
    2bc4:	ldr.w	r3, [r6, #-8]
    2bc8:	rsb	sl, r3, r8
    2bcc:	ldr.w	r3, [sl, #4]
    2bd0:	bic.w	ip, r3, #3
    2bd4:	add.w	lr, r1, ip
    2bd8:	cmp	lr, r2
    2bda:	blt.n	2af4 <_realloc_r+0xd4>
    2bdc:	ldr	r3, [r0, #12]
    2bde:	ldr	r2, [r0, #8]
    2be0:	mov	r7, sl
    2be2:	str	r3, [r2, #12]
    2be4:	str	r2, [r3, #8]
    2be6:	ldr.w	r1, [r7, #8]!
    2bea:	ldr.w	r3, [sl, #12]
    2bee:	str	r3, [r1, #12]
    2bf0:	subs	r2, r4, #4
    2bf2:	cmp	r2, #36	; 0x24
    2bf4:	str	r1, [r3, #8]
    2bf6:	bhi.w	2d2c <_realloc_r+0x30c>
    2bfa:	cmp	r2, #19
    2bfc:	bls.n	2cc4 <_realloc_r+0x2a4>
    2bfe:	ldr	r3, [r6, #0]
    2c00:	str.w	r3, [sl, #8]
    2c04:	ldr	r3, [r6, #4]
    2c06:	str.w	r3, [sl, #12]
    2c0a:	cmp	r2, #27
    2c0c:	bhi.w	2d50 <_realloc_r+0x330>
    2c10:	adds	r6, #8
    2c12:	add.w	r3, sl, #16
    2c16:	b.n	2cc6 <_realloc_r+0x2a6>
    2c18:	bic.w	fp, r1, #3
    2c1c:	add	fp, r4
    2c1e:	add.w	r0, r5, #16
    2c22:	cmp	fp, r0
    2c24:	bge.n	2cda <_realloc_r+0x2ba>
    2c26:	tst.w	lr, #1
    2c2a:	bne.w	2a78 <_realloc_r+0x58>
    2c2e:	ldr.w	r1, [r6, #-8]
    2c32:	rsb	sl, r1, r8
    2c36:	ldr.w	r1, [sl, #4]
    2c3a:	bic.w	ip, r1, #3
    2c3e:	add	fp, ip
    2c40:	cmp	r0, fp
    2c42:	bgt.w	2af4 <_realloc_r+0xd4>
    2c46:	mov	r7, sl
    2c48:	ldr.w	r1, [sl, #12]
    2c4c:	ldr.w	r0, [r7, #8]!
    2c50:	subs	r2, r4, #4
    2c52:	cmp	r2, #36	; 0x24
    2c54:	str	r1, [r0, #12]
    2c56:	str	r0, [r1, #8]
    2c58:	bhi.w	2dc4 <_realloc_r+0x3a4>
    2c5c:	cmp	r2, #19
    2c5e:	bls.w	2dac <_realloc_r+0x38c>
    2c62:	ldr	r1, [r6, #0]
    2c64:	str.w	r1, [sl, #8]
    2c68:	ldr	r1, [r6, #4]
    2c6a:	str.w	r1, [sl, #12]
    2c6e:	cmp	r2, #27
    2c70:	bhi.w	2dd2 <_realloc_r+0x3b2>
    2c74:	adds	r6, #8
    2c76:	add.w	r2, sl, #16
    2c7a:	ldr	r1, [r6, #0]
    2c7c:	str	r1, [r2, #0]
    2c7e:	ldr	r1, [r6, #4]
    2c80:	str	r1, [r2, #4]
    2c82:	ldr	r1, [r6, #8]
    2c84:	str	r1, [r2, #8]
    2c86:	add.w	r1, sl, r5
    2c8a:	rsb	r2, r5, fp
    2c8e:	orr.w	r2, r2, #1
    2c92:	str	r1, [r3, #8]
    2c94:	str	r2, [r1, #4]
    2c96:	ldr.w	r3, [sl, #4]
    2c9a:	and.w	r3, r3, #1
    2c9e:	orrs	r5, r3
    2ca0:	mov	r0, r9
    2ca2:	str.w	r5, [sl, #4]
    2ca6:	bl	2a1c <__malloc_unlock>
    2caa:	mov	r0, r7
    2cac:	b.n	2b68 <_realloc_r+0x148>
    2cae:	ldr	r3, [r6, #0]
    2cb0:	str	r3, [r0, #0]
    2cb2:	ldr	r3, [r6, #4]
    2cb4:	str	r3, [r0, #4]
    2cb6:	cmp	r2, #27
    2cb8:	bhi.n	2d0a <_realloc_r+0x2ea>
    2cba:	add.w	r3, r0, #8
    2cbe:	add.w	r2, r6, #8
    2cc2:	b.n	2aaa <_realloc_r+0x8a>
    2cc4:	mov	r3, r7
    2cc6:	ldr	r2, [r6, #0]
    2cc8:	str	r2, [r3, #0]
    2cca:	ldr	r2, [r6, #4]
    2ccc:	str	r2, [r3, #4]
    2cce:	ldr	r2, [r6, #8]
    2cd0:	str	r2, [r3, #8]
    2cd2:	mov	r6, r7
    2cd4:	mov	r4, lr
    2cd6:	mov	r8, sl
    2cd8:	b.n	2b42 <_realloc_r+0x122>
    2cda:	add.w	r1, r8, r5
    2cde:	rsb	fp, r5, fp
    2ce2:	orr.w	r2, fp, #1
    2ce6:	str	r1, [r3, #8]
    2ce8:	str	r2, [r1, #4]
    2cea:	ldr.w	r3, [r6, #-4]
    2cee:	and.w	r3, r3, #1
    2cf2:	orrs	r5, r3
    2cf4:	mov	r0, r9
    2cf6:	str.w	r5, [r6, #-4]
    2cfa:	bl	2a1c <__malloc_unlock>
    2cfe:	mov	r0, r6
    2d00:	b.n	2b68 <_realloc_r+0x148>
    2d02:	mov	r1, r6
    2d04:	bl	28b4 <memmove>
    2d08:	b.n	2ab6 <_realloc_r+0x96>
    2d0a:	ldr	r3, [r6, #8]
    2d0c:	str	r3, [r0, #8]
    2d0e:	ldr	r3, [r6, #12]
    2d10:	str	r3, [r0, #12]
    2d12:	cmp	r2, #36	; 0x24
    2d14:	beq.n	2d68 <_realloc_r+0x348>
    2d16:	add.w	r3, r0, #16
    2d1a:	add.w	r2, r6, #16
    2d1e:	b.n	2aaa <_realloc_r+0x8a>
    2d20:	ldr.w	r3, [r0, #-4]
    2d24:	bic.w	r3, r3, #3
    2d28:	add	r4, r3
    2d2a:	b.n	2b42 <_realloc_r+0x122>
    2d2c:	mov	r1, r6
    2d2e:	mov	r0, r7
    2d30:	mov	r4, lr
    2d32:	mov	r8, sl
    2d34:	bl	28b4 <memmove>
    2d38:	mov	r6, r7
    2d3a:	b.n	2b42 <_realloc_r+0x122>
    2d3c:	mov	r2, r7
    2d3e:	b.n	2b30 <_realloc_r+0x110>
    2d40:	mov	r1, r6
    2d42:	mov	r0, r7
    2d44:	mov	r4, r3
    2d46:	mov	r8, sl
    2d48:	bl	28b4 <memmove>
    2d4c:	mov	r6, r7
    2d4e:	b.n	2b42 <_realloc_r+0x122>
    2d50:	ldr	r3, [r6, #8]
    2d52:	str.w	r3, [sl, #16]
    2d56:	ldr	r3, [r6, #12]
    2d58:	str.w	r3, [sl, #20]
    2d5c:	cmp	r2, #36	; 0x24
    2d5e:	beq.n	2d98 <_realloc_r+0x378>
    2d60:	adds	r6, #16
    2d62:	add.w	r3, sl, #24
    2d66:	b.n	2cc6 <_realloc_r+0x2a6>
    2d68:	ldr	r3, [r6, #16]
    2d6a:	str	r3, [r0, #16]
    2d6c:	ldr	r3, [r6, #20]
    2d6e:	str	r3, [r0, #20]
    2d70:	add.w	r2, r6, #24
    2d74:	add.w	r3, r0, #24
    2d78:	b.n	2aaa <_realloc_r+0x8a>
    2d7a:	nop
    2d7c:	.word	0x20000c00
    2d80:	ldr	r1, [r6, #8]
    2d82:	str.w	r1, [sl, #16]
    2d86:	ldr	r1, [r6, #12]
    2d88:	str.w	r1, [sl, #20]
    2d8c:	cmp	r2, #36	; 0x24
    2d8e:	beq.n	2db0 <_realloc_r+0x390>
    2d90:	adds	r6, #16
    2d92:	add.w	r2, sl, #24
    2d96:	b.n	2b30 <_realloc_r+0x110>
    2d98:	ldr	r3, [r6, #16]
    2d9a:	str.w	r3, [sl, #24]
    2d9e:	ldr	r3, [r6, #20]
    2da0:	str.w	r3, [sl, #28]
    2da4:	adds	r6, #24
    2da6:	add.w	r3, sl, #32
    2daa:	b.n	2cc6 <_realloc_r+0x2a6>
    2dac:	mov	r2, r7
    2dae:	b.n	2c7a <_realloc_r+0x25a>
    2db0:	ldr	r2, [r6, #16]
    2db2:	str.w	r2, [sl, #24]
    2db6:	ldr	r2, [r6, #20]
    2db8:	str.w	r2, [sl, #28]
    2dbc:	adds	r6, #24
    2dbe:	add.w	r2, sl, #32
    2dc2:	b.n	2b30 <_realloc_r+0x110>
    2dc4:	mov	r1, r6
    2dc6:	mov	r0, r7
    2dc8:	str	r3, [sp, #4]
    2dca:	bl	28b4 <memmove>
    2dce:	ldr	r3, [sp, #4]
    2dd0:	b.n	2c86 <_realloc_r+0x266>
    2dd2:	ldr	r1, [r6, #8]
    2dd4:	str.w	r1, [sl, #16]
    2dd8:	ldr	r1, [r6, #12]
    2dda:	str.w	r1, [sl, #20]
    2dde:	cmp	r2, #36	; 0x24
    2de0:	beq.n	2dea <_realloc_r+0x3ca>
    2de2:	adds	r6, #16
    2de4:	add.w	r2, sl, #24
    2de8:	b.n	2c7a <_realloc_r+0x25a>
    2dea:	ldr	r2, [r6, #16]
    2dec:	str.w	r2, [sl, #24]
    2df0:	ldr	r2, [r6, #20]
    2df2:	str.w	r2, [sl, #28]
    2df6:	adds	r6, #24
    2df8:	add.w	r2, sl, #32
    2dfc:	b.n	2c7a <_realloc_r+0x25a>
    2dfe:	nop

00002e00 <_sbrk_r>:
    2e00:	push	{r3, r4, r5, lr}
    2e02:	ldr	r4, [pc, #28]	; (2e20 <_sbrk_r+0x20>)
    2e04:	movs	r3, #0
    2e06:	mov	r5, r0
    2e08:	mov	r0, r1
    2e0a:	str	r3, [r4, #0]
    2e0c:	bl	1f24 <_sbrk>
    2e10:	adds	r3, r0, #1
    2e12:	beq.n	2e16 <_sbrk_r+0x16>
    2e14:	pop	{r3, r4, r5, pc}
    2e16:	ldr	r3, [r4, #0]
    2e18:	cmp	r3, #0
    2e1a:	beq.n	2e14 <_sbrk_r+0x14>
    2e1c:	str	r3, [r5, #0]
    2e1e:	pop	{r3, r4, r5, pc}
    2e20:	.word	0x200036c0
	...

00002e40 <strlen>:
    2e40:	pld	[r0]
    2e44:	strd	r4, r5, [sp, #-8]!
    2e48:	bic.w	r1, r0, #7
    2e4c:	mvn.w	ip, #0
    2e50:	ands.w	r4, r0, #7
    2e54:	pld	[r1, #32]
    2e58:	bne.w	2eee <strlen+0xae>
    2e5c:	mov.w	r4, #0
    2e60:	mvn.w	r0, #7
    2e64:	ldrd	r2, r3, [r1]
    2e68:	pld	[r1, #64]	; 0x40
    2e6c:	add.w	r0, r0, #8
    2e70:	uadd8	r2, r2, ip
    2e74:	sel	r2, r4, ip
    2e78:	uadd8	r3, r3, ip
    2e7c:	sel	r3, r2, ip
    2e80:	cbnz	r3, 2ed6 <strlen+0x96>
    2e82:	ldrd	r2, r3, [r1, #8]
    2e86:	uadd8	r2, r2, ip
    2e8a:	add.w	r0, r0, #8
    2e8e:	sel	r2, r4, ip
    2e92:	uadd8	r3, r3, ip
    2e96:	sel	r3, r2, ip
    2e9a:	cbnz	r3, 2ed6 <strlen+0x96>
    2e9c:	ldrd	r2, r3, [r1, #16]
    2ea0:	uadd8	r2, r2, ip
    2ea4:	add.w	r0, r0, #8
    2ea8:	sel	r2, r4, ip
    2eac:	uadd8	r3, r3, ip
    2eb0:	sel	r3, r2, ip
    2eb4:	cbnz	r3, 2ed6 <strlen+0x96>
    2eb6:	ldrd	r2, r3, [r1, #24]
    2eba:	add.w	r1, r1, #32
    2ebe:	uadd8	r2, r2, ip
    2ec2:	add.w	r0, r0, #8
    2ec6:	sel	r2, r4, ip
    2eca:	uadd8	r3, r3, ip
    2ece:	sel	r3, r2, ip
    2ed2:	cmp	r3, #0
    2ed4:	beq.n	2e64 <strlen+0x24>
    2ed6:	cmp	r2, #0
    2ed8:	itt	eq
    2eda:	addeq	r0, #4
    2edc:	moveq	r2, r3
    2ede:	rev	r2, r2
    2ee0:	clz	r2, r2
    2ee4:	ldrd	r4, r5, [sp], #8
    2ee8:	add.w	r0, r0, r2, lsr #3
    2eec:	bx	lr
    2eee:	ldrd	r2, r3, [r1]
    2ef2:	and.w	r5, r4, #3
    2ef6:	rsb	r0, r4, #0
    2efa:	mov.w	r5, r5, lsl #3
    2efe:	tst.w	r4, #4
    2f02:	pld	[r1, #64]	; 0x40
    2f06:	lsl.w	r5, ip, r5
    2f0a:	orn	r2, r2, r5
    2f0e:	itt	ne
    2f10:	ornne	r3, r3, r5
    2f14:	movne	r2, ip
    2f16:	mov.w	r4, #0
    2f1a:	b.n	2e70 <strlen+0x30>

00002f1c <_vdprintf_r>:
    2f1c:	push	{r4, r5, r6, r7, lr}
    2f1e:	sub.w	sp, sp, #532	; 0x214
    2f22:	add	r5, sp, #16
    2f24:	str	r3, [sp, #0]
    2f26:	mov	r7, r1
    2f28:	mov	r3, r2
    2f2a:	mov.w	r4, #512	; 0x200
    2f2e:	add	r2, sp, #12
    2f30:	mov	r1, r5
    2f32:	str	r4, [sp, #12]
    2f34:	mov	r6, r0
    2f36:	bl	39c4 <_vasnprintf_r>
    2f3a:	cbz	r0, 2f60 <_vdprintf_r+0x44>
    2f3c:	mov	r4, r0
    2f3e:	mov	r2, r0
    2f40:	mov	r1, r7
    2f42:	ldr	r3, [sp, #12]
    2f44:	mov	r0, r6
    2f46:	bl	2f9c <_write_r>
    2f4a:	cmp	r4, r5
    2f4c:	str	r0, [sp, #12]
    2f4e:	beq.n	2f5a <_vdprintf_r+0x3e>
    2f50:	mov	r0, r6
    2f52:	mov	r1, r4
    2f54:	bl	3108 <_free_r>
    2f58:	ldr	r0, [sp, #12]
    2f5a:	add.w	sp, sp, #532	; 0x214
    2f5e:	pop	{r4, r5, r6, r7, pc}
    2f60:	mov.w	r0, #4294967295
    2f64:	b.n	2f5a <_vdprintf_r+0x3e>
    2f66:	nop

00002f68 <vdprintf>:
    2f68:	push	{r4}
    2f6a:	ldr	r4, [pc, #16]	; (2f7c <vdprintf+0x14>)
    2f6c:	mov	r3, r2
    2f6e:	mov	r2, r1
    2f70:	mov	r1, r0
    2f72:	ldr	r0, [r4, #0]
    2f74:	ldr.w	r4, [sp], #4
    2f78:	b.w	2f1c <_vdprintf_r>
    2f7c:	.word	0x20000a90

00002f80 <__ascii_wctomb>:
    2f80:	cbz	r1, 2f8c <__ascii_wctomb+0xc>
    2f82:	cmp	r2, #255	; 0xff
    2f84:	bhi.n	2f90 <__ascii_wctomb+0x10>
    2f86:	strb	r2, [r1, #0]
    2f88:	movs	r0, #1
    2f8a:	bx	lr
    2f8c:	mov	r0, r1
    2f8e:	bx	lr
    2f90:	movs	r3, #138	; 0x8a
    2f92:	str	r3, [r0, #0]
    2f94:	mov.w	r0, #4294967295
    2f98:	bx	lr
    2f9a:	nop

00002f9c <_write_r>:
    2f9c:	push	{r4, r5, r6, lr}
    2f9e:	mov	r5, r1
    2fa0:	ldr	r4, [pc, #32]	; (2fc4 <_write_r+0x28>)
    2fa2:	mov	r1, r2
    2fa4:	mov	r6, r0
    2fa6:	mov	r2, r3
    2fa8:	mov	r0, r5
    2faa:	movs	r3, #0
    2fac:	str	r3, [r4, #0]
    2fae:	bl	1d0c <_write>
    2fb2:	adds	r3, r0, #1
    2fb4:	beq.n	2fb8 <_write_r+0x1c>
    2fb6:	pop	{r4, r5, r6, pc}
    2fb8:	ldr	r3, [r4, #0]
    2fba:	cmp	r3, #0
    2fbc:	beq.n	2fb6 <_write_r+0x1a>
    2fbe:	str	r3, [r6, #0]
    2fc0:	pop	{r4, r5, r6, pc}
    2fc2:	nop
    2fc4:	.word	0x200036c0

00002fc8 <__register_exitproc>:
    2fc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2fcc:	ldr	r4, [pc, #148]	; (3064 <__register_exitproc+0x9c>)
    2fce:	ldr	r5, [r4, #0]
    2fd0:	ldr.w	r4, [r5, #328]	; 0x148
    2fd4:	mov	r6, r0
    2fd6:	mov	r8, r1
    2fd8:	mov	sl, r2
    2fda:	mov	r9, r3
    2fdc:	cbz	r4, 3050 <__register_exitproc+0x88>
    2fde:	ldr	r0, [r4, #4]
    2fe0:	cmp	r0, #31
    2fe2:	bgt.n	3014 <__register_exitproc+0x4c>
    2fe4:	adds	r3, r0, #1
    2fe6:	cbz	r6, 3006 <__register_exitproc+0x3e>
    2fe8:	add.w	r5, r4, r0, lsl #2
    2fec:	movs	r2, #1
    2fee:	str.w	sl, [r5, #136]	; 0x88
    2ff2:	ldr.w	r1, [r4, #392]	; 0x188
    2ff6:	lsls	r2, r0
    2ff8:	orrs	r1, r2
    2ffa:	cmp	r6, #2
    2ffc:	str.w	r1, [r4, #392]	; 0x188
    3000:	str.w	r9, [r5, #264]	; 0x108
    3004:	beq.n	3044 <__register_exitproc+0x7c>
    3006:	adds	r0, #2
    3008:	str	r3, [r4, #4]
    300a:	str.w	r8, [r4, r0, lsl #2]
    300e:	movs	r0, #0
    3010:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3014:	ldr	r3, [pc, #80]	; (3068 <__register_exitproc+0xa0>)
    3016:	cbz	r3, 305a <__register_exitproc+0x92>
    3018:	mov.w	r0, #400	; 0x190
    301c:	bl	22f8 <malloc>
    3020:	mov	r4, r0
    3022:	cbz	r0, 305a <__register_exitproc+0x92>
    3024:	ldr.w	r3, [r5, #328]	; 0x148
    3028:	movs	r7, #0
    302a:	stmia.w	r0, {r3, r7}
    302e:	str.w	r4, [r5, #328]	; 0x148
    3032:	mov	r0, r7
    3034:	movs	r3, #1
    3036:	str.w	r7, [r4, #392]	; 0x188
    303a:	str.w	r7, [r4, #396]	; 0x18c
    303e:	cmp	r6, #0
    3040:	beq.n	3006 <__register_exitproc+0x3e>
    3042:	b.n	2fe8 <__register_exitproc+0x20>
    3044:	ldr.w	r1, [r4, #396]	; 0x18c
    3048:	orrs	r2, r1
    304a:	str.w	r2, [r4, #396]	; 0x18c
    304e:	b.n	3006 <__register_exitproc+0x3e>
    3050:	add.w	r4, r5, #332	; 0x14c
    3054:	str.w	r4, [r5, #328]	; 0x148
    3058:	b.n	2fde <__register_exitproc+0x16>
    305a:	mov.w	r0, #4294967295
    305e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3062:	nop
    3064:	.word	0x20000390
    3068:	.word	0x000022f9

0000306c <_malloc_trim_r>:
    306c:	push	{r3, r4, r5, r6, r7, lr}
    306e:	ldr	r7, [pc, #140]	; (30fc <_malloc_trim_r+0x90>)
    3070:	mov	r4, r1
    3072:	mov	r6, r0
    3074:	bl	2a18 <__malloc_lock>
    3078:	ldr	r3, [r7, #8]
    307a:	ldr	r5, [r3, #4]
    307c:	bic.w	r5, r5, #3
    3080:	subs	r1, r5, r4
    3082:	addw	r1, r1, #4079	; 0xfef
    3086:	bic.w	r1, r1, #4080	; 0xff0
    308a:	bic.w	r1, r1, #15
    308e:	sub.w	r4, r1, #4096	; 0x1000
    3092:	cmp.w	r4, #4096	; 0x1000
    3096:	blt.n	30a8 <_malloc_trim_r+0x3c>
    3098:	movs	r1, #0
    309a:	mov	r0, r6
    309c:	bl	2e00 <_sbrk_r>
    30a0:	ldr	r3, [r7, #8]
    30a2:	add	r3, r5
    30a4:	cmp	r0, r3
    30a6:	beq.n	30b2 <_malloc_trim_r+0x46>
    30a8:	mov	r0, r6
    30aa:	bl	2a1c <__malloc_unlock>
    30ae:	movs	r0, #0
    30b0:	pop	{r3, r4, r5, r6, r7, pc}
    30b2:	negs	r1, r4
    30b4:	mov	r0, r6
    30b6:	bl	2e00 <_sbrk_r>
    30ba:	adds	r0, #1
    30bc:	beq.n	30da <_malloc_trim_r+0x6e>
    30be:	ldr	r3, [pc, #64]	; (3100 <_malloc_trim_r+0x94>)
    30c0:	ldr	r2, [r7, #8]
    30c2:	ldr	r1, [r3, #0]
    30c4:	subs	r5, r5, r4
    30c6:	orr.w	r5, r5, #1
    30ca:	mov	r0, r6
    30cc:	subs	r1, r1, r4
    30ce:	str	r5, [r2, #4]
    30d0:	str	r1, [r3, #0]
    30d2:	bl	2a1c <__malloc_unlock>
    30d6:	movs	r0, #1
    30d8:	pop	{r3, r4, r5, r6, r7, pc}
    30da:	movs	r1, #0
    30dc:	mov	r0, r6
    30de:	bl	2e00 <_sbrk_r>
    30e2:	ldr	r2, [r7, #8]
    30e4:	subs	r3, r0, r2
    30e6:	cmp	r3, #15
    30e8:	ble.n	30a8 <_malloc_trim_r+0x3c>
    30ea:	ldr	r4, [pc, #24]	; (3104 <_malloc_trim_r+0x98>)
    30ec:	ldr	r1, [pc, #16]	; (3100 <_malloc_trim_r+0x94>)
    30ee:	ldr	r4, [r4, #0]
    30f0:	orr.w	r3, r3, #1
    30f4:	subs	r0, r0, r4
    30f6:	str	r3, [r2, #4]
    30f8:	str	r0, [r1, #0]
    30fa:	b.n	30a8 <_malloc_trim_r+0x3c>
    30fc:	.word	0x20000c00
    3100:	.word	0x200012e8
    3104:	.word	0x2000100c

00003108 <_free_r>:
    3108:	cmp	r1, #0
    310a:	beq.n	3198 <_free_r+0x90>
    310c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3110:	mov	r5, r1
    3112:	mov	r8, r0
    3114:	bl	2a18 <__malloc_lock>
    3118:	ldr.w	r7, [r5, #-4]
    311c:	ldr	r1, [pc, #424]	; (32c8 <_free_r+0x1c0>)
    311e:	bic.w	r3, r7, #1
    3122:	sub.w	r4, r5, #8
    3126:	adds	r2, r4, r3
    3128:	ldr	r6, [r1, #8]
    312a:	ldr	r0, [r2, #4]
    312c:	cmp	r2, r6
    312e:	bic.w	r0, r0, #3
    3132:	beq.n	31fa <_free_r+0xf2>
    3134:	lsls	r6, r7, #31
    3136:	str	r0, [r2, #4]
    3138:	bmi.n	3152 <_free_r+0x4a>
    313a:	ldr.w	r7, [r5, #-8]
    313e:	subs	r4, r4, r7
    3140:	add.w	lr, r1, #8
    3144:	ldr	r5, [r4, #8]
    3146:	cmp	r5, lr
    3148:	add	r3, r7
    314a:	beq.n	322c <_free_r+0x124>
    314c:	ldr	r7, [r4, #12]
    314e:	str	r7, [r5, #12]
    3150:	str	r5, [r7, #8]
    3152:	adds	r5, r2, r0
    3154:	ldr	r5, [r5, #4]
    3156:	lsls	r5, r5, #31
    3158:	bpl.n	31e0 <_free_r+0xd8>
    315a:	orr.w	r2, r3, #1
    315e:	str	r2, [r4, #4]
    3160:	str	r3, [r4, r3]
    3162:	cmp.w	r3, #512	; 0x200
    3166:	bcs.n	319a <_free_r+0x92>
    3168:	lsrs	r3, r3, #3
    316a:	adds	r2, r3, #1
    316c:	ldr	r5, [r1, #4]
    316e:	ldr.w	r7, [r1, r2, lsl #3]
    3172:	str	r7, [r4, #8]
    3174:	movs	r0, #1
    3176:	asrs	r3, r3, #2
    3178:	lsl.w	r3, r0, r3
    317c:	add.w	r0, r1, r2, lsl #3
    3180:	orrs	r5, r3
    3182:	subs	r0, #8
    3184:	str	r0, [r4, #12]
    3186:	str	r5, [r1, #4]
    3188:	str.w	r4, [r1, r2, lsl #3]
    318c:	str	r4, [r7, #12]
    318e:	mov	r0, r8
    3190:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3194:	b.w	2a1c <__malloc_unlock>
    3198:	bx	lr
    319a:	lsrs	r2, r3, #9
    319c:	cmp	r2, #4
    319e:	bhi.n	3248 <_free_r+0x140>
    31a0:	lsrs	r2, r3, #6
    31a2:	add.w	r7, r2, #57	; 0x39
    31a6:	lsls	r7, r7, #1
    31a8:	add.w	r5, r2, #56	; 0x38
    31ac:	add.w	r0, r1, r7, lsl #2
    31b0:	ldr.w	r2, [r1, r7, lsl #2]
    31b4:	ldr	r1, [pc, #272]	; (32c8 <_free_r+0x1c0>)
    31b6:	subs	r0, #8
    31b8:	cmp	r0, r2
    31ba:	beq.n	3258 <_free_r+0x150>
    31bc:	ldr	r1, [r2, #4]
    31be:	bic.w	r1, r1, #3
    31c2:	cmp	r3, r1
    31c4:	bcs.n	31cc <_free_r+0xc4>
    31c6:	ldr	r2, [r2, #8]
    31c8:	cmp	r0, r2
    31ca:	bne.n	31bc <_free_r+0xb4>
    31cc:	ldr	r0, [r2, #12]
    31ce:	str	r0, [r4, #12]
    31d0:	str	r2, [r4, #8]
    31d2:	str	r4, [r0, #8]
    31d4:	str	r4, [r2, #12]
    31d6:	mov	r0, r8
    31d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    31dc:	b.w	2a1c <__malloc_unlock>
    31e0:	ldr	r5, [r2, #8]
    31e2:	ldr	r7, [pc, #232]	; (32cc <_free_r+0x1c4>)
    31e4:	cmp	r5, r7
    31e6:	add	r3, r0
    31e8:	beq.n	326a <_free_r+0x162>
    31ea:	ldr	r0, [r2, #12]
    31ec:	str	r0, [r5, #12]
    31ee:	orr.w	r2, r3, #1
    31f2:	str	r5, [r0, #8]
    31f4:	str	r2, [r4, #4]
    31f6:	str	r3, [r4, r3]
    31f8:	b.n	3162 <_free_r+0x5a>
    31fa:	lsls	r7, r7, #31
    31fc:	add	r3, r0
    31fe:	bmi.n	3210 <_free_r+0x108>
    3200:	ldr.w	r2, [r5, #-8]
    3204:	subs	r4, r4, r2
    3206:	add	r3, r2
    3208:	ldr	r0, [r4, #8]
    320a:	ldr	r2, [r4, #12]
    320c:	str	r2, [r0, #12]
    320e:	str	r0, [r2, #8]
    3210:	ldr	r2, [pc, #188]	; (32d0 <_free_r+0x1c8>)
    3212:	ldr	r2, [r2, #0]
    3214:	orr.w	r0, r3, #1
    3218:	cmp	r3, r2
    321a:	str	r0, [r4, #4]
    321c:	str	r4, [r1, #8]
    321e:	bcc.n	318e <_free_r+0x86>
    3220:	ldr	r3, [pc, #176]	; (32d4 <_free_r+0x1cc>)
    3222:	mov	r0, r8
    3224:	ldr	r1, [r3, #0]
    3226:	bl	306c <_malloc_trim_r>
    322a:	b.n	318e <_free_r+0x86>
    322c:	adds	r1, r2, r0
    322e:	ldr	r1, [r1, #4]
    3230:	lsls	r1, r1, #31
    3232:	bmi.n	32be <_free_r+0x1b6>
    3234:	ldr	r1, [r2, #8]
    3236:	ldr	r2, [r2, #12]
    3238:	str	r2, [r1, #12]
    323a:	add	r3, r0
    323c:	orr.w	r0, r3, #1
    3240:	str	r1, [r2, #8]
    3242:	str	r0, [r4, #4]
    3244:	str	r3, [r4, r3]
    3246:	b.n	318e <_free_r+0x86>
    3248:	cmp	r2, #20
    324a:	bhi.n	327c <_free_r+0x174>
    324c:	add.w	r7, r2, #92	; 0x5c
    3250:	lsls	r7, r7, #1
    3252:	add.w	r5, r2, #91	; 0x5b
    3256:	b.n	31ac <_free_r+0xa4>
    3258:	asrs	r2, r5, #2
    325a:	ldr	r3, [r1, #4]
    325c:	movs	r5, #1
    325e:	lsl.w	r2, r5, r2
    3262:	orrs	r3, r2
    3264:	str	r3, [r1, #4]
    3266:	mov	r2, r0
    3268:	b.n	31ce <_free_r+0xc6>
    326a:	orr.w	r2, r3, #1
    326e:	str	r4, [r1, #20]
    3270:	str	r4, [r1, #16]
    3272:	str	r5, [r4, #12]
    3274:	str	r5, [r4, #8]
    3276:	str	r2, [r4, #4]
    3278:	str	r3, [r4, r3]
    327a:	b.n	318e <_free_r+0x86>
    327c:	cmp	r2, #84	; 0x54
    327e:	bhi.n	328e <_free_r+0x186>
    3280:	lsrs	r2, r3, #12
    3282:	add.w	r7, r2, #111	; 0x6f
    3286:	lsls	r7, r7, #1
    3288:	add.w	r5, r2, #110	; 0x6e
    328c:	b.n	31ac <_free_r+0xa4>
    328e:	cmp.w	r2, #340	; 0x154
    3292:	bhi.n	32a2 <_free_r+0x19a>
    3294:	lsrs	r2, r3, #15
    3296:	add.w	r7, r2, #120	; 0x78
    329a:	lsls	r7, r7, #1
    329c:	add.w	r5, r2, #119	; 0x77
    32a0:	b.n	31ac <_free_r+0xa4>
    32a2:	movw	r0, #1364	; 0x554
    32a6:	cmp	r2, r0
    32a8:	bhi.n	32b8 <_free_r+0x1b0>
    32aa:	lsrs	r2, r3, #18
    32ac:	add.w	r7, r2, #125	; 0x7d
    32b0:	lsls	r7, r7, #1
    32b2:	add.w	r5, r2, #124	; 0x7c
    32b6:	b.n	31ac <_free_r+0xa4>
    32b8:	movs	r7, #254	; 0xfe
    32ba:	movs	r5, #126	; 0x7e
    32bc:	b.n	31ac <_free_r+0xa4>
    32be:	orr.w	r2, r3, #1
    32c2:	str	r2, [r4, #4]
    32c4:	str	r3, [r4, r3]
    32c6:	b.n	318e <_free_r+0x86>
    32c8:	.word	0x20000c00
    32cc:	.word	0x20000c08
    32d0:	.word	0x20001008
    32d4:	.word	0x200012e4

000032d8 <_localeconv_r>:
    32d8:	ldr	r2, [pc, #16]	; (32ec <_localeconv_r+0x14>)
    32da:	ldr	r3, [pc, #20]	; (32f0 <_localeconv_r+0x18>)
    32dc:	ldr	r2, [r2, #0]
    32de:	ldr	r0, [r2, #52]	; 0x34
    32e0:	cmp	r0, #0
    32e2:	it	eq
    32e4:	moveq	r0, r3
    32e6:	adds	r0, #240	; 0xf0
    32e8:	bx	lr
    32ea:	nop
    32ec:	.word	0x20000a90
    32f0:	.word	0x20000a94
	...

00003300 <memchr>:
    3300:	and.w	r1, r1, #255	; 0xff
    3304:	cmp	r2, #16
    3306:	blt.n	3360 <memchr+0x60>
    3308:	tst.w	r0, #7
    330c:	beq.n	3320 <memchr+0x20>
    330e:	ldrb.w	r3, [r0], #1
    3312:	subs	r2, #1
    3314:	cmp	r3, r1
    3316:	beq.n	3374 <memchr+0x74>
    3318:	tst.w	r0, #7
    331c:	cbz	r2, 3370 <memchr+0x70>
    331e:	bne.n	330e <memchr+0xe>
    3320:	push	{r4, r5, r6, r7}
    3322:	orr.w	r1, r1, r1, lsl #8
    3326:	orr.w	r1, r1, r1, lsl #16
    332a:	bic.w	r4, r2, #7
    332e:	mvns.w	r7, #0
    3332:	movs	r3, #0
    3334:	ldrd	r5, r6, [r0], #8
    3338:	subs	r4, #8
    333a:	eor.w	r5, r5, r1
    333e:	eor.w	r6, r6, r1
    3342:	uadd8	r5, r5, r7
    3346:	sel	r5, r3, r7
    334a:	uadd8	r6, r6, r7
    334e:	sel	r6, r5, r7
    3352:	cbnz	r6, 3378 <memchr+0x78>
    3354:	bne.n	3334 <memchr+0x34>
    3356:	pop	{r4, r5, r6, r7}
    3358:	and.w	r1, r1, #255	; 0xff
    335c:	and.w	r2, r2, #7
    3360:	cbz	r2, 3370 <memchr+0x70>
    3362:	ldrb.w	r3, [r0], #1
    3366:	subs	r2, #1
    3368:	eor.w	r3, r3, r1
    336c:	cbz	r3, 3374 <memchr+0x74>
    336e:	bne.n	3362 <memchr+0x62>
    3370:	movs	r0, #0
    3372:	bx	lr
    3374:	subs	r0, #1
    3376:	bx	lr
    3378:	cmp	r5, #0
    337a:	itte	eq
    337c:	moveq	r5, r6
    337e:	subeq	r0, #3
    3380:	subne	r0, #7
    3382:	tst.w	r5, #1
    3386:	bne.n	3398 <memchr+0x98>
    3388:	adds	r0, #1
    338a:	tst.w	r5, #256	; 0x100
    338e:	ittt	eq
    3390:	addeq	r0, #1
    3392:	tsteq.w	r5, #98304	; 0x18000
    3396:	addeq	r0, #1
    3398:	pop	{r4, r5, r6, r7}
    339a:	subs	r0, #1
    339c:	bx	lr
    339e:	nop

000033a0 <_Balloc>:
    33a0:	ldr	r3, [r0, #76]	; 0x4c
    33a2:	push	{r4, r5, r6, lr}
    33a4:	mov	r5, r0
    33a6:	mov	r4, r1
    33a8:	cbz	r3, 33be <_Balloc+0x1e>
    33aa:	ldr.w	r0, [r3, r4, lsl #2]
    33ae:	cbz	r0, 33d2 <_Balloc+0x32>
    33b0:	ldr	r2, [r0, #0]
    33b2:	str.w	r2, [r3, r4, lsl #2]
    33b6:	movs	r3, #0
    33b8:	str	r3, [r0, #16]
    33ba:	str	r3, [r0, #12]
    33bc:	pop	{r4, r5, r6, pc}
    33be:	movs	r2, #33	; 0x21
    33c0:	movs	r1, #4
    33c2:	bl	3a24 <_calloc_r>
    33c6:	str	r0, [r5, #76]	; 0x4c
    33c8:	mov	r3, r0
    33ca:	cmp	r0, #0
    33cc:	bne.n	33aa <_Balloc+0xa>
    33ce:	movs	r0, #0
    33d0:	pop	{r4, r5, r6, pc}
    33d2:	movs	r1, #1
    33d4:	lsl.w	r6, r1, r4
    33d8:	adds	r2, r6, #5
    33da:	mov	r0, r5
    33dc:	lsls	r2, r2, #2
    33de:	bl	3a24 <_calloc_r>
    33e2:	cmp	r0, #0
    33e4:	beq.n	33ce <_Balloc+0x2e>
    33e6:	str	r4, [r0, #4]
    33e8:	str	r6, [r0, #8]
    33ea:	b.n	33b6 <_Balloc+0x16>

000033ec <_Bfree>:
    33ec:	cbz	r1, 33fc <_Bfree+0x10>
    33ee:	ldr	r3, [r0, #76]	; 0x4c
    33f0:	ldr	r2, [r1, #4]
    33f2:	ldr.w	r0, [r3, r2, lsl #2]
    33f6:	str	r0, [r1, #0]
    33f8:	str.w	r1, [r3, r2, lsl #2]
    33fc:	bx	lr
    33fe:	nop

00003400 <__multadd>:
    3400:	push	{r4, r5, r6, r7, lr}
    3402:	ldr	r4, [r1, #16]
    3404:	sub	sp, #12
    3406:	mov	r5, r1
    3408:	mov	r6, r0
    340a:	add.w	lr, r1, #20
    340e:	movs	r7, #0
    3410:	ldr.w	r0, [lr]
    3414:	uxth	r1, r0
    3416:	mla	r1, r2, r1, r3
    341a:	lsrs	r3, r1, #16
    341c:	lsrs	r0, r0, #16
    341e:	mla	r3, r2, r0, r3
    3422:	uxth	r1, r1
    3424:	adds	r7, #1
    3426:	add.w	r1, r1, r3, lsl #16
    342a:	cmp	r4, r7
    342c:	str.w	r1, [lr], #4
    3430:	mov.w	r3, r3, lsr #16
    3434:	bgt.n	3410 <__multadd+0x10>
    3436:	cbz	r3, 3448 <__multadd+0x48>
    3438:	ldr	r2, [r5, #8]
    343a:	cmp	r4, r2
    343c:	bge.n	344e <__multadd+0x4e>
    343e:	add.w	r2, r5, r4, lsl #2
    3442:	adds	r4, #1
    3444:	str	r3, [r2, #20]
    3446:	str	r4, [r5, #16]
    3448:	mov	r0, r5
    344a:	add	sp, #12
    344c:	pop	{r4, r5, r6, r7, pc}
    344e:	ldr	r1, [r5, #4]
    3450:	str	r3, [sp, #4]
    3452:	adds	r1, #1
    3454:	mov	r0, r6
    3456:	bl	33a0 <_Balloc>
    345a:	ldr	r2, [r5, #16]
    345c:	adds	r2, #2
    345e:	add.w	r1, r5, #12
    3462:	mov	r7, r0
    3464:	lsls	r2, r2, #2
    3466:	adds	r0, #12
    3468:	bl	1d44 <memcpy>
    346c:	ldr	r2, [r6, #76]	; 0x4c
    346e:	ldr	r1, [r5, #4]
    3470:	ldr	r3, [sp, #4]
    3472:	ldr.w	r0, [r2, r1, lsl #2]
    3476:	str	r0, [r5, #0]
    3478:	str.w	r5, [r2, r1, lsl #2]
    347c:	mov	r5, r7
    347e:	b.n	343e <__multadd+0x3e>

00003480 <__hi0bits>:
    3480:	lsrs	r3, r0, #16
    3482:	lsls	r3, r3, #16
    3484:	cbnz	r3, 34b4 <__hi0bits+0x34>
    3486:	lsls	r0, r0, #16
    3488:	movs	r3, #16
    348a:	tst.w	r0, #4278190080	; 0xff000000
    348e:	itt	eq
    3490:	lsleq	r0, r0, #8
    3492:	addeq	r3, #8
    3494:	tst.w	r0, #4026531840	; 0xf0000000
    3498:	itt	eq
    349a:	lsleq	r0, r0, #4
    349c:	addeq	r3, #4
    349e:	tst.w	r0, #3221225472	; 0xc0000000
    34a2:	itt	eq
    34a4:	lsleq	r0, r0, #2
    34a6:	addeq	r3, #2
    34a8:	cmp	r0, #0
    34aa:	blt.n	34bc <__hi0bits+0x3c>
    34ac:	lsls	r2, r0, #1
    34ae:	bmi.n	34b8 <__hi0bits+0x38>
    34b0:	movs	r0, #32
    34b2:	bx	lr
    34b4:	movs	r3, #0
    34b6:	b.n	348a <__hi0bits+0xa>
    34b8:	adds	r0, r3, #1
    34ba:	bx	lr
    34bc:	mov	r0, r3
    34be:	bx	lr

000034c0 <__lo0bits>:
    34c0:	ldr	r3, [r0, #0]
    34c2:	ands.w	r2, r3, #7
    34c6:	beq.n	34d8 <__lo0bits+0x18>
    34c8:	lsls	r1, r3, #31
    34ca:	bmi.n	350e <__lo0bits+0x4e>
    34cc:	lsls	r2, r3, #30
    34ce:	bmi.n	3512 <__lo0bits+0x52>
    34d0:	lsrs	r3, r3, #2
    34d2:	str	r3, [r0, #0]
    34d4:	movs	r0, #2
    34d6:	bx	lr
    34d8:	uxth	r1, r3
    34da:	cbnz	r1, 34e0 <__lo0bits+0x20>
    34dc:	lsrs	r3, r3, #16
    34de:	movs	r2, #16
    34e0:	tst.w	r3, #255	; 0xff
    34e4:	itt	eq
    34e6:	lsreq	r3, r3, #8
    34e8:	addeq	r2, #8
    34ea:	lsls	r1, r3, #28
    34ec:	itt	eq
    34ee:	lsreq	r3, r3, #4
    34f0:	addeq	r2, #4
    34f2:	lsls	r1, r3, #30
    34f4:	itt	eq
    34f6:	lsreq	r3, r3, #2
    34f8:	addeq	r2, #2
    34fa:	lsls	r1, r3, #31
    34fc:	bmi.n	3508 <__lo0bits+0x48>
    34fe:	lsrs	r3, r3, #1
    3500:	bne.n	3506 <__lo0bits+0x46>
    3502:	movs	r0, #32
    3504:	bx	lr
    3506:	adds	r2, #1
    3508:	str	r3, [r0, #0]
    350a:	mov	r0, r2
    350c:	bx	lr
    350e:	movs	r0, #0
    3510:	bx	lr
    3512:	lsrs	r3, r3, #1
    3514:	str	r3, [r0, #0]
    3516:	movs	r0, #1
    3518:	bx	lr
    351a:	nop

0000351c <__i2b>:
    351c:	push	{r4, lr}
    351e:	mov	r4, r1
    3520:	movs	r1, #1
    3522:	bl	33a0 <_Balloc>
    3526:	movs	r2, #1
    3528:	str	r4, [r0, #20]
    352a:	str	r2, [r0, #16]
    352c:	pop	{r4, pc}
    352e:	nop

00003530 <__multiply>:
    3530:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3534:	ldr	r5, [r1, #16]
    3536:	ldr	r7, [r2, #16]
    3538:	cmp	r5, r7
    353a:	sub	sp, #12
    353c:	mov	r4, r1
    353e:	mov	r6, r2
    3540:	bge.n	354c <__multiply+0x1c>
    3542:	mov	r2, r5
    3544:	mov	r4, r6
    3546:	mov	r5, r7
    3548:	mov	r6, r1
    354a:	mov	r7, r2
    354c:	ldr	r3, [r4, #8]
    354e:	ldr	r1, [r4, #4]
    3550:	add.w	r8, r5, r7
    3554:	cmp	r8, r3
    3556:	it	gt
    3558:	addgt	r1, #1
    355a:	bl	33a0 <_Balloc>
    355e:	add.w	ip, r0, #20
    3562:	add.w	r9, ip, r8, lsl #2
    3566:	cmp	ip, r9
    3568:	str	r0, [sp, #0]
    356a:	bcs.n	3578 <__multiply+0x48>
    356c:	mov	r3, ip
    356e:	movs	r1, #0
    3570:	str.w	r1, [r3], #4
    3574:	cmp	r9, r3
    3576:	bhi.n	3570 <__multiply+0x40>
    3578:	add.w	r2, r6, #20
    357c:	add.w	sl, r2, r7, lsl #2
    3580:	add.w	r3, r4, #20
    3584:	cmp	r2, sl
    3586:	add.w	lr, r3, r5, lsl #2
    358a:	bcs.n	3636 <__multiply+0x106>
    358c:	str.w	r9, [sp, #4]
    3590:	mov	r9, r3
    3592:	ldr.w	r3, [r2], #4
    3596:	uxth.w	fp, r3
    359a:	cmp.w	fp, #0
    359e:	beq.n	35e2 <__multiply+0xb2>
    35a0:	movs	r0, #0
    35a2:	mov	r7, r9
    35a4:	mov	r6, ip
    35a6:	mov	r5, r0
    35a8:	b.n	35ac <__multiply+0x7c>
    35aa:	mov	r6, r3
    35ac:	ldr.w	r4, [r7], #4
    35b0:	ldr	r0, [r6, #0]
    35b2:	uxth	r1, r4
    35b4:	uxth	r3, r0
    35b6:	mla	r1, fp, r1, r3
    35ba:	lsrs	r4, r4, #16
    35bc:	lsrs	r0, r0, #16
    35be:	adds	r3, r1, r5
    35c0:	mla	r0, fp, r4, r0
    35c4:	add.w	r0, r0, r3, lsr #16
    35c8:	uxth	r1, r3
    35ca:	mov	r3, r6
    35cc:	orr.w	r1, r1, r0, lsl #16
    35d0:	cmp	lr, r7
    35d2:	mov.w	r5, r0, lsr #16
    35d6:	str.w	r1, [r3], #4
    35da:	bhi.n	35aa <__multiply+0x7a>
    35dc:	str	r5, [r6, #4]
    35de:	ldr.w	r3, [r2, #-4]
    35e2:	movs.w	fp, r3, lsr #16
    35e6:	beq.n	362a <__multiply+0xfa>
    35e8:	ldr.w	r3, [ip]
    35ec:	mov	r7, ip
    35ee:	mov	r0, r3
    35f0:	mov	r5, r9
    35f2:	movs	r1, #0
    35f4:	b.n	35f8 <__multiply+0xc8>
    35f6:	mov	r7, r6
    35f8:	ldrh	r4, [r5, #0]
    35fa:	lsrs	r0, r0, #16
    35fc:	mla	r0, fp, r4, r0
    3600:	add	r1, r0
    3602:	uxth	r4, r3
    3604:	mov	r6, r7
    3606:	orr.w	r3, r4, r1, lsl #16
    360a:	str.w	r3, [r6], #4
    360e:	ldr	r0, [r7, #4]
    3610:	ldr.w	r4, [r5], #4
    3614:	uxth	r3, r0
    3616:	lsrs	r4, r4, #16
    3618:	mla	r4, fp, r4, r3
    361c:	add.w	r3, r4, r1, lsr #16
    3620:	cmp	lr, r5
    3622:	mov.w	r1, r3, lsr #16
    3626:	bhi.n	35f6 <__multiply+0xc6>
    3628:	str	r3, [r7, #4]
    362a:	cmp	sl, r2
    362c:	add.w	ip, ip, #4
    3630:	bhi.n	3592 <__multiply+0x62>
    3632:	ldr.w	r9, [sp, #4]
    3636:	cmp.w	r8, #0
    363a:	ble.n	3654 <__multiply+0x124>
    363c:	ldr.w	r3, [r9, #-4]
    3640:	sub.w	r9, r9, #4
    3644:	cbz	r3, 364e <__multiply+0x11e>
    3646:	b.n	3654 <__multiply+0x124>
    3648:	ldr.w	r3, [r9, #-4]!
    364c:	cbnz	r3, 3654 <__multiply+0x124>
    364e:	subs.w	r8, r8, #1
    3652:	bne.n	3648 <__multiply+0x118>
    3654:	ldr	r0, [sp, #0]
    3656:	str.w	r8, [r0, #16]
    365a:	add	sp, #12
    365c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003660 <__pow5mult>:
    3660:	ands.w	r3, r2, #3
    3664:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3668:	mov	r4, r2
    366a:	mov	r7, r0
    366c:	bne.n	36cc <__pow5mult+0x6c>
    366e:	mov	r6, r1
    3670:	asrs	r4, r4, #2
    3672:	beq.n	36ae <__pow5mult+0x4e>
    3674:	ldr	r5, [r7, #72]	; 0x48
    3676:	cbz	r5, 36de <__pow5mult+0x7e>
    3678:	lsls	r3, r4, #31
    367a:	mov.w	r8, #0
    367e:	bmi.n	368e <__pow5mult+0x2e>
    3680:	asrs	r4, r4, #1
    3682:	beq.n	36ae <__pow5mult+0x4e>
    3684:	ldr	r0, [r5, #0]
    3686:	cbz	r0, 36b4 <__pow5mult+0x54>
    3688:	mov	r5, r0
    368a:	lsls	r3, r4, #31
    368c:	bpl.n	3680 <__pow5mult+0x20>
    368e:	mov	r2, r5
    3690:	mov	r1, r6
    3692:	mov	r0, r7
    3694:	bl	3530 <__multiply>
    3698:	cbz	r6, 36c8 <__pow5mult+0x68>
    369a:	ldr	r2, [r6, #4]
    369c:	ldr	r3, [r7, #76]	; 0x4c
    369e:	asrs	r4, r4, #1
    36a0:	ldr.w	r1, [r3, r2, lsl #2]
    36a4:	str	r1, [r6, #0]
    36a6:	str.w	r6, [r3, r2, lsl #2]
    36aa:	mov	r6, r0
    36ac:	bne.n	3684 <__pow5mult+0x24>
    36ae:	mov	r0, r6
    36b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36b4:	mov	r2, r5
    36b6:	mov	r1, r5
    36b8:	mov	r0, r7
    36ba:	bl	3530 <__multiply>
    36be:	str	r0, [r5, #0]
    36c0:	str.w	r8, [r0]
    36c4:	mov	r5, r0
    36c6:	b.n	368a <__pow5mult+0x2a>
    36c8:	mov	r6, r0
    36ca:	b.n	3680 <__pow5mult+0x20>
    36cc:	subs	r2, r3, #1
    36ce:	ldr	r5, [pc, #44]	; (36fc <__pow5mult+0x9c>)
    36d0:	movs	r3, #0
    36d2:	ldr.w	r2, [r5, r2, lsl #2]
    36d6:	bl	3400 <__multadd>
    36da:	mov	r6, r0
    36dc:	b.n	3670 <__pow5mult+0x10>
    36de:	movs	r1, #1
    36e0:	mov	r0, r7
    36e2:	bl	33a0 <_Balloc>
    36e6:	movw	r1, #625	; 0x271
    36ea:	movs	r2, #1
    36ec:	movs	r3, #0
    36ee:	str	r1, [r0, #20]
    36f0:	str	r2, [r0, #16]
    36f2:	mov	r5, r0
    36f4:	str	r0, [r7, #72]	; 0x48
    36f6:	str	r3, [r0, #0]
    36f8:	b.n	3678 <__pow5mult+0x18>
    36fa:	nop
    36fc:	.word	0x20000598

00003700 <__lshift>:
    3700:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3704:	mov	r9, r2
    3706:	ldr	r2, [r1, #16]
    3708:	ldr	r3, [r1, #8]
    370a:	mov.w	r4, r9, asr #5
    370e:	add.w	r8, r4, r2
    3712:	add.w	r5, r8, #1
    3716:	cmp	r5, r3
    3718:	mov	r6, r1
    371a:	mov	sl, r0
    371c:	ldr	r1, [r1, #4]
    371e:	ble.n	372a <__lshift+0x2a>
    3720:	lsls	r3, r3, #1
    3722:	cmp	r5, r3
    3724:	add.w	r1, r1, #1
    3728:	bgt.n	3720 <__lshift+0x20>
    372a:	mov	r0, sl
    372c:	bl	33a0 <_Balloc>
    3730:	cmp	r4, #0
    3732:	add.w	r2, r0, #20
    3736:	ble.n	37aa <__lshift+0xaa>
    3738:	add.w	r3, r2, r4, lsl #2
    373c:	movs	r1, #0
    373e:	str.w	r1, [r2], #4
    3742:	cmp	r3, r2
    3744:	bne.n	373e <__lshift+0x3e>
    3746:	ldr	r4, [r6, #16]
    3748:	add.w	r1, r6, #20
    374c:	ands.w	r9, r9, #31
    3750:	add.w	lr, r1, r4, lsl #2
    3754:	beq.n	379a <__lshift+0x9a>
    3756:	rsb	r2, r9, #32
    375a:	movs	r4, #0
    375c:	ldr	r7, [r1, #0]
    375e:	lsl.w	ip, r7, r9
    3762:	orr.w	r4, ip, r4
    3766:	mov	ip, r3
    3768:	str.w	r4, [r3], #4
    376c:	ldr.w	r4, [r1], #4
    3770:	cmp	lr, r1
    3772:	lsr.w	r4, r4, r2
    3776:	bhi.n	375c <__lshift+0x5c>
    3778:	str.w	r4, [ip, #4]
    377c:	cbz	r4, 3782 <__lshift+0x82>
    377e:	add.w	r5, r8, #2
    3782:	ldr.w	r3, [sl, #76]	; 0x4c
    3786:	ldr	r2, [r6, #4]
    3788:	subs	r5, #1
    378a:	ldr.w	r1, [r3, r2, lsl #2]
    378e:	str	r5, [r0, #16]
    3790:	str	r1, [r6, #0]
    3792:	str.w	r6, [r3, r2, lsl #2]
    3796:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    379a:	subs	r3, #4
    379c:	ldr.w	r2, [r1], #4
    37a0:	str.w	r2, [r3, #4]!
    37a4:	cmp	lr, r1
    37a6:	bhi.n	379c <__lshift+0x9c>
    37a8:	b.n	3782 <__lshift+0x82>
    37aa:	mov	r3, r2
    37ac:	b.n	3746 <__lshift+0x46>
    37ae:	nop

000037b0 <__mcmp>:
    37b0:	ldr	r2, [r0, #16]
    37b2:	ldr	r3, [r1, #16]
    37b4:	subs	r2, r2, r3
    37b6:	bne.n	37e0 <__mcmp+0x30>
    37b8:	lsls	r3, r3, #2
    37ba:	adds	r0, #20
    37bc:	adds	r1, #20
    37be:	add	r1, r3
    37c0:	push	{r4}
    37c2:	add	r3, r0
    37c4:	b.n	37ca <__mcmp+0x1a>
    37c6:	cmp	r0, r3
    37c8:	bcs.n	37e4 <__mcmp+0x34>
    37ca:	ldr.w	r4, [r3, #-4]!
    37ce:	ldr.w	r2, [r1, #-4]!
    37d2:	cmp	r4, r2
    37d4:	beq.n	37c6 <__mcmp+0x16>
    37d6:	bcc.n	37ec <__mcmp+0x3c>
    37d8:	movs	r0, #1
    37da:	ldr.w	r4, [sp], #4
    37de:	bx	lr
    37e0:	mov	r0, r2
    37e2:	bx	lr
    37e4:	movs	r0, #0
    37e6:	ldr.w	r4, [sp], #4
    37ea:	bx	lr
    37ec:	mov.w	r0, #4294967295
    37f0:	b.n	37da <__mcmp+0x2a>
    37f2:	nop

000037f4 <__mdiff>:
    37f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    37f8:	ldr	r3, [r1, #16]
    37fa:	mov	r7, r1
    37fc:	ldr	r1, [r2, #16]
    37fe:	subs	r3, r3, r1
    3800:	cmp	r3, #0
    3802:	mov	r8, r2
    3804:	bne.n	3836 <__mdiff+0x42>
    3806:	lsls	r1, r1, #2
    3808:	add.w	r2, r7, #20
    380c:	add.w	r5, r8, #20
    3810:	adds	r3, r2, r1
    3812:	add	r1, r5
    3814:	b.n	381a <__mdiff+0x26>
    3816:	cmp	r2, r3
    3818:	bcs.n	38d8 <__mdiff+0xe4>
    381a:	ldr.w	r6, [r3, #-4]!
    381e:	ldr.w	r4, [r1, #-4]!
    3822:	cmp	r6, r4
    3824:	beq.n	3816 <__mdiff+0x22>
    3826:	bcs.n	38ea <__mdiff+0xf6>
    3828:	mov	r3, r7
    382a:	mov	r4, r2
    382c:	mov	r7, r8
    382e:	mov.w	r9, #1
    3832:	mov	r8, r3
    3834:	b.n	3844 <__mdiff+0x50>
    3836:	blt.n	38f4 <__mdiff+0x100>
    3838:	add.w	r5, r7, #20
    383c:	add.w	r4, r2, #20
    3840:	mov.w	r9, #0
    3844:	ldr	r1, [r7, #4]
    3846:	bl	33a0 <_Balloc>
    384a:	ldr.w	r3, [r8, #16]
    384e:	ldr	r6, [r7, #16]
    3850:	str.w	r9, [r0, #12]
    3854:	add.w	ip, r4, r3, lsl #2
    3858:	mov	lr, r4
    385a:	add.w	r7, r5, r6, lsl #2
    385e:	add.w	r4, r0, #20
    3862:	movs	r3, #0
    3864:	ldr.w	r1, [lr], #4
    3868:	ldr.w	r8, [r5], #4
    386c:	uxth	r2, r1
    386e:	uxtah	r3, r3, r8
    3872:	lsrs	r1, r1, #16
    3874:	subs	r2, r3, r2
    3876:	rsb	r3, r1, r8, lsr #16
    387a:	add.w	r3, r3, r2, asr #16
    387e:	uxth	r2, r2
    3880:	orr.w	r2, r2, r3, lsl #16
    3884:	cmp	ip, lr
    3886:	str.w	r2, [r4], #4
    388a:	mov.w	r3, r3, asr #16
    388e:	bhi.n	3864 <__mdiff+0x70>
    3890:	cmp	r7, r5
    3892:	bls.n	38c4 <__mdiff+0xd0>
    3894:	mov	ip, r4
    3896:	mov	r1, r5
    3898:	ldr.w	lr, [r1], #4
    389c:	uxtah	r2, r3, lr
    38a0:	asrs	r3, r2, #16
    38a2:	add.w	r3, r3, lr, lsr #16
    38a6:	uxth	r2, r2
    38a8:	orr.w	r2, r2, r3, lsl #16
    38ac:	cmp	r7, r1
    38ae:	str.w	r2, [ip], #4
    38b2:	mov.w	r3, r3, asr #16
    38b6:	bhi.n	3898 <__mdiff+0xa4>
    38b8:	mvns	r5, r5
    38ba:	add	r5, r7
    38bc:	bic.w	r5, r5, #3
    38c0:	adds	r5, #4
    38c2:	add	r4, r5
    38c4:	subs	r4, #4
    38c6:	cbnz	r2, 38d2 <__mdiff+0xde>
    38c8:	ldr.w	r3, [r4, #-4]!
    38cc:	subs	r6, #1
    38ce:	cmp	r3, #0
    38d0:	beq.n	38c8 <__mdiff+0xd4>
    38d2:	str	r6, [r0, #16]
    38d4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    38d8:	movs	r1, #0
    38da:	bl	33a0 <_Balloc>
    38de:	movs	r2, #1
    38e0:	movs	r3, #0
    38e2:	str	r2, [r0, #16]
    38e4:	str	r3, [r0, #20]
    38e6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    38ea:	mov	r4, r5
    38ec:	mov.w	r9, #0
    38f0:	mov	r5, r2
    38f2:	b.n	3844 <__mdiff+0x50>
    38f4:	mov	r3, r7
    38f6:	add.w	r4, r7, #20
    38fa:	add.w	r5, r8, #20
    38fe:	mov	r7, r8
    3900:	mov.w	r9, #1
    3904:	mov	r8, r3
    3906:	b.n	3844 <__mdiff+0x50>

00003908 <__d2b>:
    3908:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    390c:	vmov	r6, r7, d0
    3910:	sub	sp, #12
    3912:	mov	r8, r1
    3914:	movs	r1, #1
    3916:	mov	r4, r7
    3918:	ubfx	r5, r7, #20, #11
    391c:	mov	r7, r2
    391e:	bl	33a0 <_Balloc>
    3922:	ubfx	r4, r4, #0, #20
    3926:	mov	r9, r0
    3928:	cbz	r5, 392e <__d2b+0x26>
    392a:	orr.w	r4, r4, #1048576	; 0x100000
    392e:	str	r4, [sp, #4]
    3930:	cbz	r6, 397a <__d2b+0x72>
    3932:	add	r0, sp, #8
    3934:	str.w	r6, [r0, #-8]!
    3938:	bl	34c0 <__lo0bits>
    393c:	cmp	r0, #0
    393e:	bne.n	39aa <__d2b+0xa2>
    3940:	ldmia.w	sp, {r2, r3}
    3944:	str.w	r2, [r9, #20]
    3948:	cmp	r3, #0
    394a:	ite	eq
    394c:	moveq	r1, #1
    394e:	movne	r1, #2
    3950:	str.w	r3, [r9, #24]
    3954:	str.w	r1, [r9, #16]
    3958:	cbnz	r5, 3992 <__d2b+0x8a>
    395a:	add.w	r3, r9, r1, lsl #2
    395e:	subw	r0, r0, #1074	; 0x432
    3962:	str.w	r0, [r8]
    3966:	ldr	r0, [r3, #16]
    3968:	bl	3480 <__hi0bits>
    396c:	rsb	r0, r0, r1, lsl #5
    3970:	str	r0, [r7, #0]
    3972:	mov	r0, r9
    3974:	add	sp, #12
    3976:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    397a:	add	r0, sp, #4
    397c:	bl	34c0 <__lo0bits>
    3980:	ldr	r3, [sp, #4]
    3982:	str.w	r3, [r9, #20]
    3986:	movs	r1, #1
    3988:	adds	r0, #32
    398a:	str.w	r1, [r9, #16]
    398e:	cmp	r5, #0
    3990:	beq.n	395a <__d2b+0x52>
    3992:	subw	r5, r5, #1075	; 0x433
    3996:	add	r5, r0
    3998:	rsb	r0, r0, #53	; 0x35
    399c:	str.w	r5, [r8]
    39a0:	str	r0, [r7, #0]
    39a2:	mov	r0, r9
    39a4:	add	sp, #12
    39a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    39aa:	ldmia.w	sp, {r2, r3}
    39ae:	rsb	r1, r0, #32
    39b2:	lsl.w	r1, r3, r1
    39b6:	orrs	r2, r1
    39b8:	lsrs	r3, r0
    39ba:	str	r3, [sp, #4]
    39bc:	str.w	r2, [r9, #20]
    39c0:	b.n	3948 <__d2b+0x40>
    39c2:	nop

000039c4 <_vasnprintf_r>:
    39c4:	push	{r4, r5, r6, lr}
    39c6:	mov	r5, r2
    39c8:	sub	sp, #104	; 0x68
    39ca:	ldr	r4, [r2, #0]
    39cc:	cbz	r1, 39d2 <_vasnprintf_r+0xe>
    39ce:	cmp	r4, #0
    39d0:	bne.n	3a08 <_vasnprintf_r+0x44>
    39d2:	movs	r4, #0
    39d4:	mov.w	r2, #648	; 0x288
    39d8:	strh.w	r2, [sp, #12]
    39dc:	str	r4, [sp, #0]
    39de:	str	r4, [sp, #16]
    39e0:	mov	r2, r3
    39e2:	movw	r6, #65535	; 0xffff
    39e6:	ldr	r3, [sp, #120]	; 0x78
    39e8:	str	r4, [sp, #8]
    39ea:	mov	r1, sp
    39ec:	str	r4, [sp, #20]
    39ee:	strh.w	r6, [sp, #14]
    39f2:	bl	4838 <_svfprintf_r>
    39f6:	cmp	r0, #0
    39f8:	blt.n	3a1e <_vasnprintf_r+0x5a>
    39fa:	ldr	r3, [sp, #0]
    39fc:	str	r0, [r5, #0]
    39fe:	movs	r2, #0
    3a00:	strb	r2, [r3, #0]
    3a02:	ldr	r0, [sp, #16]
    3a04:	add	sp, #104	; 0x68
    3a06:	pop	{r4, r5, r6, pc}
    3a08:	mov.w	r2, #1544	; 0x608
    3a0c:	str	r1, [sp, #0]
    3a0e:	str	r1, [sp, #16]
    3a10:	strh.w	r2, [sp, #12]
    3a14:	bge.n	39e0 <_vasnprintf_r+0x1c>
    3a16:	movs	r3, #139	; 0x8b
    3a18:	str	r3, [r0, #0]
    3a1a:	movs	r0, #0
    3a1c:	b.n	3a04 <_vasnprintf_r+0x40>
    3a1e:	movs	r0, #0
    3a20:	b.n	3a04 <_vasnprintf_r+0x40>
    3a22:	nop

00003a24 <_calloc_r>:
    3a24:	push	{r4, lr}
    3a26:	mul.w	r1, r2, r1
    3a2a:	bl	2318 <_malloc_r>
    3a2e:	mov	r4, r0
    3a30:	cbz	r0, 3a6a <_calloc_r+0x46>
    3a32:	ldr.w	r2, [r0, #-4]
    3a36:	bic.w	r2, r2, #3
    3a3a:	subs	r2, #4
    3a3c:	cmp	r2, #36	; 0x24
    3a3e:	bhi.n	3a72 <_calloc_r+0x4e>
    3a40:	cmp	r2, #19
    3a42:	bls.n	3a6e <_calloc_r+0x4a>
    3a44:	movs	r3, #0
    3a46:	cmp	r2, #27
    3a48:	str	r3, [r0, #0]
    3a4a:	str	r3, [r0, #4]
    3a4c:	bls.n	3a7c <_calloc_r+0x58>
    3a4e:	cmp	r2, #36	; 0x24
    3a50:	str	r3, [r0, #8]
    3a52:	str	r3, [r0, #12]
    3a54:	iteee	ne
    3a56:	addne.w	r2, r0, #16
    3a5a:	streq	r3, [r0, #16]
    3a5c:	streq	r3, [r0, #20]
    3a5e:	addeq.w	r2, r0, #24
    3a62:	movs	r3, #0
    3a64:	str	r3, [r2, #0]
    3a66:	str	r3, [r2, #4]
    3a68:	str	r3, [r2, #8]
    3a6a:	mov	r0, r4
    3a6c:	pop	{r4, pc}
    3a6e:	mov	r2, r0
    3a70:	b.n	3a62 <_calloc_r+0x3e>
    3a72:	movs	r1, #0
    3a74:	bl	297c <memset>
    3a78:	mov	r0, r4
    3a7a:	pop	{r4, pc}
    3a7c:	add.w	r2, r0, #8
    3a80:	b.n	3a62 <_calloc_r+0x3e>
    3a82:	nop

00003a84 <quorem>:
    3a84:	ldr	r2, [r0, #16]
    3a86:	ldr	r3, [r1, #16]
    3a88:	cmp	r3, r2
    3a8a:	bgt.w	3ba8 <quorem+0x124>
    3a8e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a92:	add.w	r8, r3, #4294967295
    3a96:	add.w	r7, r1, #20
    3a9a:	add.w	fp, r0, #20
    3a9e:	ldr.w	r2, [r7, r8, lsl #2]
    3aa2:	ldr.w	r3, [fp, r8, lsl #2]
    3aa6:	mov.w	r4, r8, lsl #2
    3aaa:	sub	sp, #12
    3aac:	adds	r2, #1
    3aae:	udiv	r9, r3, r2
    3ab2:	add.w	r3, fp, r4
    3ab6:	str	r4, [sp, #0]
    3ab8:	add.w	sl, r7, r4
    3abc:	str	r3, [sp, #4]
    3abe:	cmp.w	r9, #0
    3ac2:	beq.n	3b38 <quorem+0xb4>
    3ac4:	movs	r5, #0
    3ac6:	mov	ip, r7
    3ac8:	mov	lr, fp
    3aca:	mov	r3, r5
    3acc:	ldr.w	r6, [ip], #4
    3ad0:	ldr.w	r2, [lr]
    3ad4:	uxth	r4, r6
    3ad6:	mla	r5, r9, r4, r5
    3ada:	lsrs	r6, r6, #16
    3adc:	lsrs	r4, r5, #16
    3ade:	mla	r4, r9, r6, r4
    3ae2:	uxth	r5, r5
    3ae4:	subs	r3, r3, r5
    3ae6:	uxth	r6, r4
    3ae8:	uxtah	r3, r3, r2
    3aec:	rsb	r6, r6, r2, lsr #16
    3af0:	add.w	r6, r6, r3, asr #16
    3af4:	uxth	r3, r3
    3af6:	orr.w	r3, r3, r6, lsl #16
    3afa:	cmp	sl, ip
    3afc:	str.w	r3, [lr], #4
    3b00:	mov.w	r5, r4, lsr #16
    3b04:	mov.w	r3, r6, asr #16
    3b08:	bcs.n	3acc <quorem+0x48>
    3b0a:	ldr	r3, [sp, #0]
    3b0c:	ldr.w	r3, [fp, r3]
    3b10:	cbnz	r3, 3b38 <quorem+0xb4>
    3b12:	ldr	r4, [sp, #4]
    3b14:	subs	r3, r4, #4
    3b16:	cmp	fp, r3
    3b18:	bcs.n	3b34 <quorem+0xb0>
    3b1a:	ldr.w	r3, [r4, #-4]
    3b1e:	cbnz	r3, 3b34 <quorem+0xb0>
    3b20:	sub.w	r3, r4, #8
    3b24:	b.n	3b2c <quorem+0xa8>
    3b26:	ldr	r2, [r3, #0]
    3b28:	subs	r3, #4
    3b2a:	cbnz	r2, 3b34 <quorem+0xb0>
    3b2c:	cmp	fp, r3
    3b2e:	add.w	r8, r8, #4294967295
    3b32:	bcc.n	3b26 <quorem+0xa2>
    3b34:	str.w	r8, [r0, #16]
    3b38:	mov	r4, r0
    3b3a:	bl	37b0 <__mcmp>
    3b3e:	cmp	r0, #0
    3b40:	blt.n	3ba0 <quorem+0x11c>
    3b42:	add.w	r9, r9, #1
    3b46:	mov	r5, fp
    3b48:	movs	r3, #0
    3b4a:	ldr.w	r1, [r7], #4
    3b4e:	ldr	r0, [r5, #0]
    3b50:	uxth	r2, r1
    3b52:	subs	r2, r3, r2
    3b54:	lsrs	r1, r1, #16
    3b56:	uxtah	r2, r2, r0
    3b5a:	rsb	r3, r1, r0, lsr #16
    3b5e:	add.w	r3, r3, r2, asr #16
    3b62:	uxth	r1, r2
    3b64:	orr.w	r1, r1, r3, lsl #16
    3b68:	cmp	sl, r7
    3b6a:	str.w	r1, [r5], #4
    3b6e:	mov.w	r3, r3, asr #16
    3b72:	bcs.n	3b4a <quorem+0xc6>
    3b74:	ldr.w	r2, [fp, r8, lsl #2]
    3b78:	add.w	r3, fp, r8, lsl #2
    3b7c:	cbnz	r2, 3ba0 <quorem+0x11c>
    3b7e:	subs	r2, r3, #4
    3b80:	cmp	fp, r2
    3b82:	bcs.n	3b9c <quorem+0x118>
    3b84:	ldr.w	r2, [r3, #-4]
    3b88:	cbnz	r2, 3b9c <quorem+0x118>
    3b8a:	subs	r3, #8
    3b8c:	b.n	3b94 <quorem+0x110>
    3b8e:	ldr	r2, [r3, #0]
    3b90:	subs	r3, #4
    3b92:	cbnz	r2, 3b9c <quorem+0x118>
    3b94:	cmp	fp, r3
    3b96:	add.w	r8, r8, #4294967295
    3b9a:	bcc.n	3b8e <quorem+0x10a>
    3b9c:	str.w	r8, [r4, #16]
    3ba0:	mov	r0, r9
    3ba2:	add	sp, #12
    3ba4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ba8:	movs	r0, #0
    3baa:	bx	lr
    3bac:	movs	r0, r0
	...

00003bb0 <_dtoa_r>:
    3bb0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bb4:	vmov	r6, r7, d0
    3bb8:	sub	sp, #76	; 0x4c
    3bba:	ldr	r5, [r0, #64]	; 0x40
    3bbc:	str	r1, [sp, #4]
    3bbe:	mov	r4, r0
    3bc0:	mov	r8, r2
    3bc2:	str	r3, [sp, #16]
    3bc4:	vmov	sl, s0
    3bc8:	mov	fp, r7
    3bca:	cbz	r5, 3be0 <_dtoa_r+0x30>
    3bcc:	ldr	r2, [r0, #68]	; 0x44
    3bce:	str	r2, [r5, #4]
    3bd0:	movs	r3, #1
    3bd2:	lsls	r3, r2
    3bd4:	str	r3, [r5, #8]
    3bd6:	mov	r1, r5
    3bd8:	bl	33ec <_Bfree>
    3bdc:	movs	r3, #0
    3bde:	str	r3, [r4, #64]	; 0x40
    3be0:	cmp.w	fp, #0
    3be4:	mov	r6, fp
    3be6:	blt.n	3c52 <_dtoa_r+0xa2>
    3be8:	ldr	r2, [sp, #112]	; 0x70
    3bea:	movs	r3, #0
    3bec:	str	r3, [r2, #0]
    3bee:	ldr	r3, [pc, #784]	; (3f00 <_dtoa_r+0x350>)
    3bf0:	mov	r2, r3
    3bf2:	ands	r3, r6
    3bf4:	cmp	r3, r2
    3bf6:	beq.n	3c24 <_dtoa_r+0x74>
    3bf8:	vmov	d7, sl, fp
    3bfc:	vcmp.f64	d7, #0.0
    3c00:	vmrs	APSR_nzcv, fpscr
    3c04:	strd	sl, fp, [sp, #8]
    3c08:	bne.n	3c60 <_dtoa_r+0xb0>
    3c0a:	ldr	r2, [sp, #16]
    3c0c:	movs	r3, #1
    3c0e:	str	r3, [r2, #0]
    3c10:	ldr	r3, [sp, #116]	; 0x74
    3c12:	cmp	r3, #0
    3c14:	beq.w	3d86 <_dtoa_r+0x1d6>
    3c18:	ldr	r0, [pc, #744]	; (3f04 <_dtoa_r+0x354>)
    3c1a:	str	r0, [r3, #0]
    3c1c:	subs	r0, #1
    3c1e:	add	sp, #76	; 0x4c
    3c20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c24:	ldr	r2, [sp, #16]
    3c26:	movw	r3, #9999	; 0x270f
    3c2a:	str	r3, [r2, #0]
    3c2c:	cmp.w	sl, #0
    3c30:	beq.w	3d58 <_dtoa_r+0x1a8>
    3c34:	ldr	r0, [pc, #720]	; (3f08 <_dtoa_r+0x358>)
    3c36:	ldr	r3, [sp, #116]	; 0x74
    3c38:	cmp	r3, #0
    3c3a:	beq.n	3c1e <_dtoa_r+0x6e>
    3c3c:	ldrb	r3, [r0, #3]
    3c3e:	cmp	r3, #0
    3c40:	beq.w	3d8a <_dtoa_r+0x1da>
    3c44:	add.w	r3, r0, #8
    3c48:	ldr	r2, [sp, #116]	; 0x74
    3c4a:	str	r3, [r2, #0]
    3c4c:	add	sp, #76	; 0x4c
    3c4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c52:	ldr	r2, [sp, #112]	; 0x70
    3c54:	movs	r3, #1
    3c56:	bic.w	r6, fp, #2147483648	; 0x80000000
    3c5a:	str	r3, [r2, #0]
    3c5c:	mov	fp, r6
    3c5e:	b.n	3bee <_dtoa_r+0x3e>
    3c60:	add	r1, sp, #68	; 0x44
    3c62:	add	r2, sp, #64	; 0x40
    3c64:	vldr	d0, [sp, #8]
    3c68:	mov	r0, r4
    3c6a:	bl	3908 <__d2b>
    3c6e:	lsrs	r1, r6, #20
    3c70:	str	r0, [sp, #28]
    3c72:	bne.n	3d6a <_dtoa_r+0x1ba>
    3c74:	ldr	r0, [sp, #64]	; 0x40
    3c76:	ldr	r1, [sp, #68]	; 0x44
    3c78:	add	r1, r0
    3c7a:	addw	r3, r1, #1074	; 0x432
    3c7e:	cmp	r3, #32
    3c80:	ble.w	4106 <_dtoa_r+0x556>
    3c84:	rsb	r3, r3, #64	; 0x40
    3c88:	addw	r2, r1, #1042	; 0x412
    3c8c:	lsls	r6, r3
    3c8e:	lsr.w	r3, sl, r2
    3c92:	orrs	r3, r6
    3c94:	vmov	s15, r3
    3c98:	vcvt.f64.u32	d7, s15
    3c9c:	movs	r5, #1
    3c9e:	vmov	r2, r3, d7
    3ca2:	subs	r1, #1
    3ca4:	sub.w	r3, r3, #32505856	; 0x1f00000
    3ca8:	str	r5, [sp, #40]	; 0x28
    3caa:	vmov	d7, r2, r3
    3cae:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    3cb2:	vldr	d4, [pc, #564]	; 3ee8 <_dtoa_r+0x338>
    3cb6:	vsub.f64	d6, d7, d6
    3cba:	vldr	d7, [pc, #564]	; 3ef0 <_dtoa_r+0x340>
    3cbe:	vldr	d5, [pc, #568]	; 3ef8 <_dtoa_r+0x348>
    3cc2:	vfma.f64	d7, d6, d4
    3cc6:	vmov	s13, r1
    3cca:	vcvt.f64.s32	d6, s13
    3cce:	vfma.f64	d7, d6, d5
    3cd2:	vcvt.s32.f64	s13, d7
    3cd6:	vcmpe.f64	d7, #0.0
    3cda:	vmrs	APSR_nzcv, fpscr
    3cde:	vstr	s13, [sp, #8]
    3ce2:	bmi.w	3f1e <_dtoa_r+0x36e>
    3ce6:	ldr	r5, [sp, #8]
    3ce8:	cmp	r5, #22
    3cea:	bhi.w	3f18 <_dtoa_r+0x368>
    3cee:	ldr	r3, [pc, #540]	; (3f0c <_dtoa_r+0x35c>)
    3cf0:	add.w	r3, r3, r5, lsl #3
    3cf4:	vldr	d7, [r3]
    3cf8:	vmov	d6, sl, fp
    3cfc:	vcmpe.f64	d7, d6
    3d00:	vmrs	APSR_nzcv, fpscr
    3d04:	ble.w	4114 <_dtoa_r+0x564>
    3d08:	subs	r3, r5, #1
    3d0a:	str	r3, [sp, #8]
    3d0c:	movs	r3, #0
    3d0e:	str	r3, [sp, #48]	; 0x30
    3d10:	subs	r1, r0, r1
    3d12:	subs.w	r9, r1, #1
    3d16:	bmi.w	3f48 <_dtoa_r+0x398>
    3d1a:	movs	r3, #0
    3d1c:	str	r3, [sp, #24]
    3d1e:	ldr	r3, [sp, #8]
    3d20:	cmp	r3, #0
    3d22:	blt.w	3f36 <_dtoa_r+0x386>
    3d26:	add	r9, r3
    3d28:	str	r3, [sp, #44]	; 0x2c
    3d2a:	movs	r3, #0
    3d2c:	str	r3, [sp, #20]
    3d2e:	ldr	r3, [sp, #4]
    3d30:	cmp	r3, #9
    3d32:	bhi.n	3d8e <_dtoa_r+0x1de>
    3d34:	cmp	r3, #5
    3d36:	ble.w	47f8 <_dtoa_r+0xc48>
    3d3a:	subs	r3, #4
    3d3c:	str	r3, [sp, #4]
    3d3e:	movs	r3, #0
    3d40:	str	r3, [sp, #56]	; 0x38
    3d42:	ldr	r3, [sp, #4]
    3d44:	subs	r3, #2
    3d46:	cmp	r3, #3
    3d48:	bhi.w	480a <_dtoa_r+0xc5a>
    3d4c:	tbh	[pc, r3, lsl #1]
    3d50:	.word	0x01e502a9
    3d54:	.word	0x03c802b5
    3d58:	ldr	r3, [pc, #428]	; (3f08 <_dtoa_r+0x358>)
    3d5a:	ldr	r2, [pc, #436]	; (3f10 <_dtoa_r+0x360>)
    3d5c:	ubfx	r0, r6, #0, #20
    3d60:	cmp	r0, #0
    3d62:	ite	ne
    3d64:	movne	r0, r3
    3d66:	moveq	r0, r2
    3d68:	b.n	3c36 <_dtoa_r+0x86>
    3d6a:	ldrd	r2, r3, [sp, #8]
    3d6e:	ubfx	r0, r3, #0, #20
    3d72:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    3d76:	movs	r5, #0
    3d78:	subw	r1, r1, #1023	; 0x3ff
    3d7c:	orr.w	r3, r3, #3145728	; 0x300000
    3d80:	ldr	r0, [sp, #64]	; 0x40
    3d82:	str	r5, [sp, #40]	; 0x28
    3d84:	b.n	3caa <_dtoa_r+0xfa>
    3d86:	ldr	r0, [pc, #396]	; (3f14 <_dtoa_r+0x364>)
    3d88:	b.n	3c1e <_dtoa_r+0x6e>
    3d8a:	adds	r3, r0, #3
    3d8c:	b.n	3c48 <_dtoa_r+0x98>
    3d8e:	movs	r1, #0
    3d90:	str	r1, [r4, #68]	; 0x44
    3d92:	mov	r0, r4
    3d94:	mov	r8, r1
    3d96:	str	r1, [sp, #4]
    3d98:	bl	33a0 <_Balloc>
    3d9c:	mov.w	r7, #4294967295
    3da0:	movs	r3, #1
    3da2:	str	r0, [sp, #32]
    3da4:	str	r0, [r4, #64]	; 0x40
    3da6:	str	r7, [sp, #52]	; 0x34
    3da8:	str	r3, [sp, #36]	; 0x24
    3daa:	ldr	r3, [sp, #68]	; 0x44
    3dac:	cmp	r3, #0
    3dae:	blt.n	3ea6 <_dtoa_r+0x2f6>
    3db0:	ldr	r2, [sp, #8]
    3db2:	cmp	r2, #14
    3db4:	bgt.n	3ea6 <_dtoa_r+0x2f6>
    3db6:	ldr	r3, [pc, #340]	; (3f0c <_dtoa_r+0x35c>)
    3db8:	cmp.w	r8, #0
    3dbc:	add.w	r3, r3, r2, lsl #3
    3dc0:	vldr	d4, [r3]
    3dc4:	blt.w	42d0 <_dtoa_r+0x720>
    3dc8:	vneg.f64	d2, d4
    3dcc:	vmov	d7, sl, fp
    3dd0:	vdiv.f64	d6, d7, d4
    3dd4:	vcvt.s32.f64	s12, d6
    3dd8:	ldr	r2, [sp, #32]
    3dda:	vmov	r3, s12
    3dde:	cmp	r7, #1
    3de0:	add.w	r3, r3, #48	; 0x30
    3de4:	vcvt.f64.s32	d5, s12
    3de8:	add.w	fp, r2, #1
    3dec:	strb	r3, [r2, #0]
    3dee:	vfma.f64	d7, d2, d5
    3df2:	beq.n	3e3a <_dtoa_r+0x28a>
    3df4:	vmov.f64	d3, #36	; 0x41200000  10.0
    3df8:	vmul.f64	d7, d7, d3
    3dfc:	vcmp.f64	d7, #0.0
    3e00:	vmrs	APSR_nzcv, fpscr
    3e04:	beq.n	3e7c <_dtoa_r+0x2cc>
    3e06:	ldr	r2, [sp, #32]
    3e08:	b.n	3e18 <_dtoa_r+0x268>
    3e0a:	vmul.f64	d7, d7, d3
    3e0e:	vcmp.f64	d7, #0.0
    3e12:	vmrs	APSR_nzcv, fpscr
    3e16:	beq.n	3e7c <_dtoa_r+0x2cc>
    3e18:	vdiv.f64	d6, d7, d4
    3e1c:	vcvt.s32.f64	s12, d6
    3e20:	vmov	r3, s12
    3e24:	adds	r3, #48	; 0x30
    3e26:	strb.w	r3, [fp], #1
    3e2a:	rsb	r3, r2, fp
    3e2e:	cmp	r3, r7
    3e30:	vcvt.f64.s32	d5, s12
    3e34:	vfma.f64	d7, d2, d5
    3e38:	bne.n	3e0a <_dtoa_r+0x25a>
    3e3a:	vadd.f64	d7, d7, d7
    3e3e:	vcmpe.f64	d4, d7
    3e42:	vmrs	APSR_nzcv, fpscr
    3e46:	bmi.n	3e5a <_dtoa_r+0x2aa>
    3e48:	vcmp.f64	d4, d7
    3e4c:	vmrs	APSR_nzcv, fpscr
    3e50:	bne.n	3e7c <_dtoa_r+0x2cc>
    3e52:	vmov	r3, s12
    3e56:	lsls	r3, r3, #31
    3e58:	bpl.n	3e7c <_dtoa_r+0x2cc>
    3e5a:	ldrb.w	r0, [fp, #-1]
    3e5e:	ldr	r2, [sp, #32]
    3e60:	add.w	r3, fp, #4294967295
    3e64:	b.n	3e70 <_dtoa_r+0x2c0>
    3e66:	cmp	r2, r3
    3e68:	beq.w	4636 <_dtoa_r+0xa86>
    3e6c:	ldrb.w	r0, [r3, #-1]!
    3e70:	cmp	r0, #57	; 0x39
    3e72:	add.w	fp, r3, #1
    3e76:	beq.n	3e66 <_dtoa_r+0x2b6>
    3e78:	adds	r0, #1
    3e7a:	strb	r0, [r3, #0]
    3e7c:	ldr	r1, [sp, #28]
    3e7e:	mov	r0, r4
    3e80:	bl	33ec <_Bfree>
    3e84:	movs	r2, #0
    3e86:	ldr	r3, [sp, #8]
    3e88:	strb.w	r2, [fp]
    3e8c:	ldr	r2, [sp, #16]
    3e8e:	adds	r3, #1
    3e90:	str	r3, [r2, #0]
    3e92:	ldr	r3, [sp, #116]	; 0x74
    3e94:	cmp	r3, #0
    3e96:	beq.w	4566 <_dtoa_r+0x9b6>
    3e9a:	ldr	r0, [sp, #32]
    3e9c:	str.w	fp, [r3]
    3ea0:	add	sp, #76	; 0x4c
    3ea2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ea6:	ldr	r2, [sp, #36]	; 0x24
    3ea8:	cmp	r2, #0
    3eaa:	beq.n	3f54 <_dtoa_r+0x3a4>
    3eac:	ldr	r2, [sp, #4]
    3eae:	cmp	r2, #1
    3eb0:	ble.w	4310 <_dtoa_r+0x760>
    3eb4:	ldr	r1, [sp, #20]
    3eb6:	subs	r2, r7, #1
    3eb8:	cmp	r1, r2
    3eba:	blt.w	456c <_dtoa_r+0x9bc>
    3ebe:	subs	r3, r1, r2
    3ec0:	str	r3, [sp, #56]	; 0x38
    3ec2:	cmp	r7, #0
    3ec4:	ldr	r3, [sp, #24]
    3ec6:	blt.w	4712 <_dtoa_r+0xb62>
    3eca:	str	r3, [sp, #40]	; 0x28
    3ecc:	mov	r3, r7
    3ece:	ldr	r2, [sp, #24]
    3ed0:	movs	r1, #1
    3ed2:	add	r2, r3
    3ed4:	mov	r0, r4
    3ed6:	str	r2, [sp, #24]
    3ed8:	add	r9, r3
    3eda:	bl	351c <__i2b>
    3ede:	mov	r6, r0
    3ee0:	b.n	3f5e <_dtoa_r+0x3ae>
    3ee2:	nop
    3ee4:	nop.w
    3ee8:	.word	0x636f4361
    3eec:	.word	0x3fd287a7
    3ef0:	.word	0x8b60c8b3
    3ef4:	.word	0x3fc68a28
    3ef8:	.word	0x509f79fb
    3efc:	.word	0x3fd34413
    3f00:	.word	0x7ff00000
    3f04:	.word	0x200005b5
    3f08:	.word	0x200005b0
    3f0c:	.word	0x200004a8
    3f10:	.word	0x200005a4
    3f14:	.word	0x200005b4
    3f18:	movs	r3, #1
    3f1a:	str	r3, [sp, #48]	; 0x30
    3f1c:	b.n	3d10 <_dtoa_r+0x160>
    3f1e:	vcvt.f64.s32	d6, s13
    3f22:	vcmp.f64	d7, d6
    3f26:	vmrs	APSR_nzcv, fpscr
    3f2a:	beq.w	3ce6 <_dtoa_r+0x136>
    3f2e:	ldr	r3, [sp, #8]
    3f30:	subs	r3, #1
    3f32:	str	r3, [sp, #8]
    3f34:	b.n	3ce6 <_dtoa_r+0x136>
    3f36:	ldr	r2, [sp, #24]
    3f38:	ldr	r3, [sp, #8]
    3f3a:	subs	r2, r2, r3
    3f3c:	negs	r3, r3
    3f3e:	str	r3, [sp, #20]
    3f40:	movs	r3, #0
    3f42:	str	r2, [sp, #24]
    3f44:	str	r3, [sp, #44]	; 0x2c
    3f46:	b.n	3d2e <_dtoa_r+0x17e>
    3f48:	rsb	r3, r9, #0
    3f4c:	str	r3, [sp, #24]
    3f4e:	mov.w	r9, #0
    3f52:	b.n	3d1e <_dtoa_r+0x16e>
    3f54:	ldr	r3, [sp, #20]
    3f56:	str	r3, [sp, #56]	; 0x38
    3f58:	ldr	r6, [sp, #36]	; 0x24
    3f5a:	ldr	r3, [sp, #24]
    3f5c:	str	r3, [sp, #40]	; 0x28
    3f5e:	ldr	r1, [sp, #40]	; 0x28
    3f60:	mov	r3, r1
    3f62:	cbz	r1, 3f7e <_dtoa_r+0x3ce>
    3f64:	cmp.w	r9, #0
    3f68:	ble.n	3f7e <_dtoa_r+0x3ce>
    3f6a:	cmp	r1, r9
    3f6c:	ldr	r2, [sp, #24]
    3f6e:	it	ge
    3f70:	movge	r3, r9
    3f72:	subs	r2, r2, r3
    3f74:	str	r2, [sp, #24]
    3f76:	subs	r2, r1, r3
    3f78:	str	r2, [sp, #40]	; 0x28
    3f7a:	rsb	r9, r3, r9
    3f7e:	ldr	r3, [sp, #20]
    3f80:	cmp	r3, #0
    3f82:	ble.w	4486 <_dtoa_r+0x8d6>
    3f86:	ldr	r2, [sp, #36]	; 0x24
    3f88:	cmp	r2, #0
    3f8a:	beq.w	42c2 <_dtoa_r+0x712>
    3f8e:	ldr	r2, [sp, #56]	; 0x38
    3f90:	cmp	r2, #0
    3f92:	beq.w	42c2 <_dtoa_r+0x712>
    3f96:	mov	r1, r6
    3f98:	mov	r0, r4
    3f9a:	bl	3660 <__pow5mult>
    3f9e:	ldr	r2, [sp, #28]
    3fa0:	mov	r1, r0
    3fa2:	mov	r6, r0
    3fa4:	mov	r0, r4
    3fa6:	bl	3530 <__multiply>
    3faa:	ldr	r1, [sp, #28]
    3fac:	mov	r5, r0
    3fae:	mov	r0, r4
    3fb0:	bl	33ec <_Bfree>
    3fb4:	ldr	r3, [sp, #20]
    3fb6:	ldr	r2, [sp, #56]	; 0x38
    3fb8:	subs	r3, r3, r2
    3fba:	str	r3, [sp, #20]
    3fbc:	bne.w	42c0 <_dtoa_r+0x710>
    3fc0:	movs	r1, #1
    3fc2:	mov	r0, r4
    3fc4:	bl	351c <__i2b>
    3fc8:	ldr	r3, [sp, #44]	; 0x2c
    3fca:	str	r0, [sp, #20]
    3fcc:	cmp	r3, #0
    3fce:	beq.w	432a <_dtoa_r+0x77a>
    3fd2:	mov	r1, r0
    3fd4:	mov	r2, r3
    3fd6:	mov	r0, r4
    3fd8:	bl	3660 <__pow5mult>
    3fdc:	ldr	r3, [sp, #4]
    3fde:	str	r0, [sp, #20]
    3fe0:	cmp	r3, #1
    3fe2:	ble.w	44e6 <_dtoa_r+0x936>
    3fe6:	movs	r3, #0
    3fe8:	str	r3, [sp, #28]
    3fea:	ldr	r2, [sp, #20]
    3fec:	ldr	r3, [r2, #16]
    3fee:	add.w	r3, r2, r3, lsl #2
    3ff2:	ldr	r0, [r3, #16]
    3ff4:	bl	3480 <__hi0bits>
    3ff8:	rsb	r0, r0, #32
    3ffc:	add	r0, r9
    3ffe:	ands.w	r0, r0, #31
    4002:	beq.w	4326 <_dtoa_r+0x776>
    4006:	rsb	r3, r0, #32
    400a:	cmp	r3, #4
    400c:	ble.w	4800 <_dtoa_r+0xc50>
    4010:	rsb	r0, r0, #28
    4014:	ldr	r3, [sp, #24]
    4016:	add	r3, r0
    4018:	str	r3, [sp, #24]
    401a:	ldr	r3, [sp, #40]	; 0x28
    401c:	add	r3, r0
    401e:	str	r3, [sp, #40]	; 0x28
    4020:	add	r9, r0
    4022:	ldr	r3, [sp, #24]
    4024:	cmp	r3, #0
    4026:	ble.n	4034 <_dtoa_r+0x484>
    4028:	mov	r1, r5
    402a:	mov	r2, r3
    402c:	mov	r0, r4
    402e:	bl	3700 <__lshift>
    4032:	mov	r5, r0
    4034:	cmp.w	r9, #0
    4038:	ble.n	4046 <_dtoa_r+0x496>
    403a:	mov	r2, r9
    403c:	ldr	r1, [sp, #20]
    403e:	mov	r0, r4
    4040:	bl	3700 <__lshift>
    4044:	str	r0, [sp, #20]
    4046:	ldr	r3, [sp, #48]	; 0x30
    4048:	cmp	r3, #0
    404a:	bne.w	4450 <_dtoa_r+0x8a0>
    404e:	cmp	r7, #0
    4050:	ble.w	4494 <_dtoa_r+0x8e4>
    4054:	ldr	r3, [sp, #36]	; 0x24
    4056:	cmp	r3, #0
    4058:	bne.w	4352 <_dtoa_r+0x7a2>
    405c:	ldr.w	fp, [sp, #32]
    4060:	ldr.w	sl, [sp, #20]
    4064:	mov	r8, fp
    4066:	b.n	406e <_dtoa_r+0x4be>
    4068:	bl	3400 <__multadd>
    406c:	mov	r5, r0
    406e:	mov	r1, sl
    4070:	mov	r0, r5
    4072:	bl	3a84 <quorem>
    4076:	add.w	r9, r0, #48	; 0x30
    407a:	strb.w	r9, [r8], #1
    407e:	rsb	r3, fp, r8
    4082:	cmp	r3, r7
    4084:	mov.w	r2, #10
    4088:	mov.w	r3, #0
    408c:	mov	r1, r5
    408e:	mov	r0, r4
    4090:	blt.n	4068 <_dtoa_r+0x4b8>
    4092:	ldr	r3, [sp, #32]
    4094:	cmp	r7, #1
    4096:	ite	ge
    4098:	addge	r3, r3, r7
    409a:	addlt	r3, #1
    409c:	mov	fp, r3
    409e:	mov.w	sl, #0
    40a2:	mov	r1, r5
    40a4:	movs	r2, #1
    40a6:	mov	r0, r4
    40a8:	bl	3700 <__lshift>
    40ac:	ldr	r1, [sp, #20]
    40ae:	str	r0, [sp, #28]
    40b0:	bl	37b0 <__mcmp>
    40b4:	cmp	r0, #0
    40b6:	ble.w	45d2 <_dtoa_r+0xa22>
    40ba:	ldrb.w	r2, [fp, #-1]
    40be:	ldr	r1, [sp, #32]
    40c0:	add.w	r3, fp, #4294967295
    40c4:	b.n	40d0 <_dtoa_r+0x520>
    40c6:	cmp	r3, r1
    40c8:	beq.w	44d2 <_dtoa_r+0x922>
    40cc:	ldrb.w	r2, [r3, #-1]!
    40d0:	cmp	r2, #57	; 0x39
    40d2:	add.w	fp, r3, #1
    40d6:	beq.n	40c6 <_dtoa_r+0x516>
    40d8:	adds	r2, #1
    40da:	strb	r2, [r3, #0]
    40dc:	ldr	r1, [sp, #20]
    40de:	mov	r0, r4
    40e0:	bl	33ec <_Bfree>
    40e4:	cmp	r6, #0
    40e6:	beq.w	3e7c <_dtoa_r+0x2cc>
    40ea:	cmp.w	sl, #0
    40ee:	beq.n	40fc <_dtoa_r+0x54c>
    40f0:	cmp	sl, r6
    40f2:	beq.n	40fc <_dtoa_r+0x54c>
    40f4:	mov	r1, sl
    40f6:	mov	r0, r4
    40f8:	bl	33ec <_Bfree>
    40fc:	mov	r1, r6
    40fe:	mov	r0, r4
    4100:	bl	33ec <_Bfree>
    4104:	b.n	3e7c <_dtoa_r+0x2cc>
    4106:	rsb	r3, r3, #32
    410a:	lsl.w	r3, sl, r3
    410e:	vmov	s15, r3
    4112:	b.n	3c98 <_dtoa_r+0xe8>
    4114:	movs	r3, #0
    4116:	str	r3, [sp, #48]	; 0x30
    4118:	b.n	3d10 <_dtoa_r+0x160>
    411a:	movs	r3, #0
    411c:	str	r3, [sp, #36]	; 0x24
    411e:	ldr	r3, [sp, #8]
    4120:	add	r3, r8
    4122:	adds	r7, r3, #1
    4124:	cmp	r7, #0
    4126:	str	r3, [sp, #52]	; 0x34
    4128:	ble.w	4586 <_dtoa_r+0x9d6>
    412c:	mov	r6, r7
    412e:	mov	r5, r7
    4130:	movs	r1, #0
    4132:	cmp	r6, #23
    4134:	str	r1, [r4, #68]	; 0x44
    4136:	bls.n	414e <_dtoa_r+0x59e>
    4138:	movs	r2, #1
    413a:	movs	r3, #4
    413c:	lsls	r3, r3, #1
    413e:	add.w	r0, r3, #20
    4142:	cmp	r0, r6
    4144:	mov	r1, r2
    4146:	add.w	r2, r2, #1
    414a:	bls.n	413c <_dtoa_r+0x58c>
    414c:	str	r1, [r4, #68]	; 0x44
    414e:	mov	r0, r4
    4150:	bl	33a0 <_Balloc>
    4154:	cmp	r5, #14
    4156:	str	r0, [sp, #32]
    4158:	str	r0, [r4, #64]	; 0x40
    415a:	bhi.w	3daa <_dtoa_r+0x1fa>
    415e:	ldr	r3, [sp, #56]	; 0x38
    4160:	cmp	r3, #0
    4162:	beq.w	3daa <_dtoa_r+0x1fa>
    4166:	ldr	r1, [sp, #8]
    4168:	cmp	r1, #0
    416a:	strd	sl, fp, [sp, #56]	; 0x38
    416e:	ble.w	45f4 <_dtoa_r+0xa44>
    4172:	ldr	r3, [pc, #792]	; (448c <_dtoa_r+0x8dc>)
    4174:	and.w	r2, r1, #15
    4178:	add.w	r2, r3, r2, lsl #3
    417c:	asrs	r3, r1, #4
    417e:	lsls	r6, r3, #27
    4180:	vldr	d6, [r2]
    4184:	bpl.w	457e <_dtoa_r+0x9ce>
    4188:	ldr	r2, [pc, #772]	; (4490 <_dtoa_r+0x8e0>)
    418a:	vldr	d7, [r2, #32]
    418e:	vmov	d4, sl, fp
    4192:	and.w	r3, r3, #15
    4196:	movs	r1, #3
    4198:	vdiv.f64	d5, d4, d7
    419c:	cbz	r3, 41b6 <_dtoa_r+0x606>
    419e:	ldr	r2, [pc, #752]	; (4490 <_dtoa_r+0x8e0>)
    41a0:	lsls	r5, r3, #31
    41a2:	bpl.n	41ae <_dtoa_r+0x5fe>
    41a4:	vldr	d7, [r2]
    41a8:	adds	r1, #1
    41aa:	vmul.f64	d6, d6, d7
    41ae:	asrs	r3, r3, #1
    41b0:	add.w	r2, r2, #8
    41b4:	bne.n	41a0 <_dtoa_r+0x5f0>
    41b6:	vdiv.f64	d4, d5, d6
    41ba:	ldr	r3, [sp, #48]	; 0x30
    41bc:	cbz	r3, 41ce <_dtoa_r+0x61e>
    41be:	vmov.f64	d7, #112	; 0x3f800000  1.0
    41c2:	vcmpe.f64	d4, d7
    41c6:	vmrs	APSR_nzcv, fpscr
    41ca:	bmi.w	473c <_dtoa_r+0xb8c>
    41ce:	vmov	s15, r1
    41d2:	vcvt.f64.s32	d6, s15
    41d6:	vmov.f64	d7, #28	; 0x40e00000  7.0
    41da:	vfma.f64	d7, d6, d4
    41de:	vmov	r2, r3, d7
    41e2:	sub.w	r3, r3, #54525952	; 0x3400000
    41e6:	cmp	r7, #0
    41e8:	beq.w	4538 <_dtoa_r+0x988>
    41ec:	ldr	r6, [sp, #8]
    41ee:	mov	r1, r7
    41f0:	ldr	r0, [sp, #36]	; 0x24
    41f2:	cmp	r0, #0
    41f4:	beq.w	4692 <_dtoa_r+0xae2>
    41f8:	vmov.f64	d3, #96	; 0x3f000000  0.5
    41fc:	ldr	r0, [pc, #652]	; (448c <_dtoa_r+0x8dc>)
    41fe:	ldr	r5, [sp, #32]
    4200:	add.w	r0, r0, r1, lsl #3
    4204:	vldr	d6, [r0, #-8]
    4208:	vcvt.s32.f64	s14, d4
    420c:	vdiv.f64	d5, d3, d6
    4210:	vmov	r0, s14
    4214:	vmov	d6, r2, r3
    4218:	adds	r0, #48	; 0x30
    421a:	uxtb	r0, r0
    421c:	vsub.f64	d5, d5, d6
    4220:	vcvt.f64.s32	d7, s14
    4224:	vsub.f64	d7, d4, d7
    4228:	vcmpe.f64	d5, d7
    422c:	vmrs	APSR_nzcv, fpscr
    4230:	strb	r0, [r5, #0]
    4232:	add.w	fp, r5, #1
    4236:	bgt.n	429e <_dtoa_r+0x6ee>
    4238:	vmov.f64	d3, #112	; 0x3f800000  1.0
    423c:	vsub.f64	d6, d3, d7
    4240:	vcmpe.f64	d5, d6
    4244:	vmrs	APSR_nzcv, fpscr
    4248:	bgt.w	47a8 <_dtoa_r+0xbf8>
    424c:	cmp	r1, #1
    424e:	ble.w	45ec <_dtoa_r+0xa3c>
    4252:	vmov.f64	d4, #36	; 0x41200000  10.0
    4256:	ldr	r3, [sp, #32]
    4258:	add	r1, r3
    425a:	b.n	4272 <_dtoa_r+0x6c2>
    425c:	vsub.f64	d6, d3, d7
    4260:	vcmpe.f64	d6, d5
    4264:	vmrs	APSR_nzcv, fpscr
    4268:	bmi.w	47a8 <_dtoa_r+0xbf8>
    426c:	cmp	fp, r1
    426e:	beq.w	45ec <_dtoa_r+0xa3c>
    4272:	vmul.f64	d7, d7, d4
    4276:	vmul.f64	d5, d5, d4
    427a:	vcvt.s32.f64	s12, d7
    427e:	vmov	r3, s12
    4282:	add.w	r0, r3, #48	; 0x30
    4286:	uxtb	r0, r0
    4288:	vcvt.f64.s32	d6, s12
    428c:	vsub.f64	d7, d7, d6
    4290:	vcmpe.f64	d7, d5
    4294:	vmrs	APSR_nzcv, fpscr
    4298:	strb.w	r0, [fp], #1
    429c:	bpl.n	425c <_dtoa_r+0x6ac>
    429e:	str	r6, [sp, #8]
    42a0:	b.n	3e7c <_dtoa_r+0x2cc>
    42a2:	movs	r3, #0
    42a4:	str	r3, [sp, #36]	; 0x24
    42a6:	cmp.w	r8, #0
    42aa:	ble.w	458e <_dtoa_r+0x9de>
    42ae:	mov	r6, r8
    42b0:	mov	r5, r8
    42b2:	str.w	r8, [sp, #52]	; 0x34
    42b6:	mov	r7, r8
    42b8:	b.n	4130 <_dtoa_r+0x580>
    42ba:	movs	r3, #1
    42bc:	str	r3, [sp, #36]	; 0x24
    42be:	b.n	42a6 <_dtoa_r+0x6f6>
    42c0:	str	r5, [sp, #28]
    42c2:	ldr	r2, [sp, #20]
    42c4:	ldr	r1, [sp, #28]
    42c6:	mov	r0, r4
    42c8:	bl	3660 <__pow5mult>
    42cc:	mov	r5, r0
    42ce:	b.n	3fc0 <_dtoa_r+0x410>
    42d0:	cmp	r7, #0
    42d2:	bgt.w	3dc8 <_dtoa_r+0x218>
    42d6:	bne.w	455e <_dtoa_r+0x9ae>
    42da:	vmov.f64	d7, #20	; 0x40a00000  5.0
    42de:	vmul.f64	d4, d4, d7
    42e2:	vmov	d7, sl, fp
    42e6:	vcmpe.f64	d4, d7
    42ea:	vmrs	APSR_nzcv, fpscr
    42ee:	mov	r6, r7
    42f0:	str	r7, [sp, #20]
    42f2:	blt.w	44c0 <_dtoa_r+0x910>
    42f6:	mvn.w	r3, r8
    42fa:	ldr.w	fp, [sp, #32]
    42fe:	str	r3, [sp, #8]
    4300:	ldr	r1, [sp, #20]
    4302:	mov	r0, r4
    4304:	bl	33ec <_Bfree>
    4308:	cmp	r6, #0
    430a:	beq.w	3e7c <_dtoa_r+0x2cc>
    430e:	b.n	40fc <_dtoa_r+0x54c>
    4310:	ldr	r2, [sp, #40]	; 0x28
    4312:	cmp	r2, #0
    4314:	beq.w	471c <_dtoa_r+0xb6c>
    4318:	ldr	r2, [sp, #20]
    431a:	str	r2, [sp, #56]	; 0x38
    431c:	ldr	r2, [sp, #24]
    431e:	str	r2, [sp, #40]	; 0x28
    4320:	addw	r3, r3, #1075	; 0x433
    4324:	b.n	3ece <_dtoa_r+0x31e>
    4326:	movs	r0, #28
    4328:	b.n	4014 <_dtoa_r+0x464>
    432a:	ldr	r3, [sp, #4]
    432c:	cmp	r3, #1
    432e:	ble.w	47b2 <_dtoa_r+0xc02>
    4332:	ldr	r3, [sp, #44]	; 0x2c
    4334:	str	r3, [sp, #28]
    4336:	movs	r0, #1
    4338:	b.n	3ffc <_dtoa_r+0x44c>
    433a:	mov	r1, r6
    433c:	movs	r3, #0
    433e:	movs	r2, #10
    4340:	mov	r0, r4
    4342:	bl	3400 <__multadd>
    4346:	ldr	r3, [sp, #52]	; 0x34
    4348:	cmp	r3, #0
    434a:	mov	r6, r0
    434c:	ble.w	47ea <_dtoa_r+0xc3a>
    4350:	mov	r7, r3
    4352:	ldr	r3, [sp, #40]	; 0x28
    4354:	cmp	r3, #0
    4356:	ble.n	4364 <_dtoa_r+0x7b4>
    4358:	mov	r1, r6
    435a:	mov	r2, r3
    435c:	mov	r0, r4
    435e:	bl	3700 <__lshift>
    4362:	mov	r6, r0
    4364:	ldr	r3, [sp, #28]
    4366:	cmp	r3, #0
    4368:	bne.w	4648 <_dtoa_r+0xa98>
    436c:	mov	r8, r6
    436e:	ldr	r3, [sp, #32]
    4370:	subs	r7, #1
    4372:	adds	r2, r3, r7
    4374:	str	r2, [sp, #36]	; 0x24
    4376:	and.w	r2, sl, #1
    437a:	str	r2, [sp, #40]	; 0x28
    437c:	mov	r7, r3
    437e:	ldr.w	fp, [sp, #20]
    4382:	mov	r0, r5
    4384:	mov	r1, fp
    4386:	bl	3a84 <quorem>
    438a:	mov	r1, r6
    438c:	mov	sl, r0
    438e:	mov	r0, r5
    4390:	bl	37b0 <__mcmp>
    4394:	mov	r2, r8
    4396:	mov	r1, fp
    4398:	mov	r9, r0
    439a:	mov	r0, r4
    439c:	bl	37f4 <__mdiff>
    43a0:	ldr	r3, [r0, #12]
    43a2:	mov	fp, r0
    43a4:	add.w	r2, sl, #48	; 0x30
    43a8:	cmp	r3, #0
    43aa:	bne.n	4440 <_dtoa_r+0x890>
    43ac:	mov	r1, r0
    43ae:	mov	r0, r5
    43b0:	str	r2, [sp, #28]
    43b2:	bl	37b0 <__mcmp>
    43b6:	mov	r1, fp
    43b8:	str	r0, [sp, #24]
    43ba:	mov	r0, r4
    43bc:	bl	33ec <_Bfree>
    43c0:	ldr	r3, [sp, #24]
    43c2:	ldr	r2, [sp, #28]
    43c4:	cbnz	r3, 43d2 <_dtoa_r+0x822>
    43c6:	ldr	r1, [sp, #4]
    43c8:	cbnz	r1, 43d2 <_dtoa_r+0x822>
    43ca:	ldr	r1, [sp, #40]	; 0x28
    43cc:	cmp	r1, #0
    43ce:	beq.w	47bc <_dtoa_r+0xc0c>
    43d2:	cmp.w	r9, #0
    43d6:	blt.w	4598 <_dtoa_r+0x9e8>
    43da:	bne.n	43e8 <_dtoa_r+0x838>
    43dc:	ldr	r1, [sp, #4]
    43de:	cbnz	r1, 43e8 <_dtoa_r+0x838>
    43e0:	ldr	r1, [sp, #40]	; 0x28
    43e2:	cmp	r1, #0
    43e4:	beq.w	4598 <_dtoa_r+0x9e8>
    43e8:	cmp	r3, #0
    43ea:	bgt.w	4670 <_dtoa_r+0xac0>
    43ee:	ldr	r3, [sp, #36]	; 0x24
    43f0:	strb	r2, [r7, #0]
    43f2:	add.w	r9, r7, #1
    43f6:	cmp	r7, r3
    43f8:	mov	fp, r9
    43fa:	beq.w	468a <_dtoa_r+0xada>
    43fe:	mov	r1, r5
    4400:	movs	r3, #0
    4402:	movs	r2, #10
    4404:	mov	r0, r4
    4406:	bl	3400 <__multadd>
    440a:	cmp	r6, r8
    440c:	mov	r5, r0
    440e:	mov	r1, r6
    4410:	mov.w	r3, #0
    4414:	mov.w	r2, #10
    4418:	mov	r0, r4
    441a:	beq.n	4434 <_dtoa_r+0x884>
    441c:	bl	3400 <__multadd>
    4420:	mov	r1, r8
    4422:	mov	r6, r0
    4424:	movs	r3, #0
    4426:	movs	r2, #10
    4428:	mov	r0, r4
    442a:	bl	3400 <__multadd>
    442e:	mov	r7, r9
    4430:	mov	r8, r0
    4432:	b.n	437e <_dtoa_r+0x7ce>
    4434:	bl	3400 <__multadd>
    4438:	mov	r7, r9
    443a:	mov	r6, r0
    443c:	mov	r8, r0
    443e:	b.n	437e <_dtoa_r+0x7ce>
    4440:	mov	r1, r0
    4442:	mov	r0, r4
    4444:	str	r2, [sp, #24]
    4446:	bl	33ec <_Bfree>
    444a:	movs	r3, #1
    444c:	ldr	r2, [sp, #24]
    444e:	b.n	43d2 <_dtoa_r+0x822>
    4450:	ldr	r1, [sp, #20]
    4452:	mov	r0, r5
    4454:	bl	37b0 <__mcmp>
    4458:	cmp	r0, #0
    445a:	bge.w	404e <_dtoa_r+0x49e>
    445e:	mov	r1, r5
    4460:	ldr	r5, [sp, #8]
    4462:	movs	r3, #0
    4464:	subs	r5, #1
    4466:	movs	r2, #10
    4468:	mov	r0, r4
    446a:	str	r5, [sp, #8]
    446c:	bl	3400 <__multadd>
    4470:	ldr	r3, [sp, #36]	; 0x24
    4472:	mov	r5, r0
    4474:	cmp	r3, #0
    4476:	bne.w	433a <_dtoa_r+0x78a>
    447a:	ldr	r3, [sp, #52]	; 0x34
    447c:	cmp	r3, #0
    447e:	ble.w	47dc <_dtoa_r+0xc2c>
    4482:	mov	r7, r3
    4484:	b.n	405c <_dtoa_r+0x4ac>
    4486:	ldr	r5, [sp, #28]
    4488:	b.n	3fc0 <_dtoa_r+0x410>
    448a:	nop
    448c:	.word	0x200004a8
    4490:	.word	0x20000570
    4494:	ldr	r3, [sp, #4]
    4496:	cmp	r3, #2
    4498:	ble.w	4054 <_dtoa_r+0x4a4>
    449c:	cmp	r7, #0
    449e:	bne.w	4774 <_dtoa_r+0xbc4>
    44a2:	mov	r3, r7
    44a4:	ldr	r1, [sp, #20]
    44a6:	movs	r2, #5
    44a8:	mov	r0, r4
    44aa:	bl	3400 <__multadd>
    44ae:	mov	r1, r0
    44b0:	str	r0, [sp, #20]
    44b2:	mov	r0, r5
    44b4:	bl	37b0 <__mcmp>
    44b8:	cmp	r0, #0
    44ba:	str	r5, [sp, #28]
    44bc:	ble.w	42f6 <_dtoa_r+0x746>
    44c0:	ldr	r2, [sp, #8]
    44c2:	ldr	r1, [sp, #32]
    44c4:	movs	r3, #49	; 0x31
    44c6:	adds	r2, #1
    44c8:	str	r2, [sp, #8]
    44ca:	strb	r3, [r1, #0]
    44cc:	add.w	fp, r1, #1
    44d0:	b.n	4300 <_dtoa_r+0x750>
    44d2:	ldr	r2, [sp, #8]
    44d4:	adds	r2, #1
    44d6:	str	r2, [sp, #8]
    44d8:	ldr	r2, [sp, #32]
    44da:	movs	r3, #49	; 0x31
    44dc:	strb	r3, [r2, #0]
    44de:	b.n	40dc <_dtoa_r+0x52c>
    44e0:	movs	r3, #1
    44e2:	str	r3, [sp, #36]	; 0x24
    44e4:	b.n	411e <_dtoa_r+0x56e>
    44e6:	cmp.w	sl, #0
    44ea:	bne.w	3fe6 <_dtoa_r+0x436>
    44ee:	ubfx	r3, fp, #0, #20
    44f2:	cmp	r3, #0
    44f4:	bne.w	472e <_dtoa_r+0xb7e>
    44f8:	bic.w	r3, fp, #2147483648	; 0x80000000
    44fc:	lsrs	r3, r3, #20
    44fe:	lsls	r3, r3, #20
    4500:	cmp	r3, #0
    4502:	beq.w	47ae <_dtoa_r+0xbfe>
    4506:	ldr	r3, [sp, #24]
    4508:	adds	r3, #1
    450a:	str	r3, [sp, #24]
    450c:	movs	r3, #1
    450e:	add.w	r9, r9, #1
    4512:	str	r3, [sp, #28]
    4514:	ldr	r3, [sp, #44]	; 0x2c
    4516:	movs	r0, #1
    4518:	cmp	r3, #0
    451a:	beq.w	3ffc <_dtoa_r+0x44c>
    451e:	b.n	3fea <_dtoa_r+0x43a>
    4520:	vmov	s15, r1
    4524:	vcvt.f64.s32	d6, s15
    4528:	vmov.f64	d7, #28	; 0x40e00000  7.0
    452c:	vfma.f64	d7, d4, d6
    4530:	vmov	r2, r3, d7
    4534:	sub.w	r3, r3, #54525952	; 0x3400000
    4538:	vmov	d6, r2, r3
    453c:	vmov.f64	d7, #20	; 0x40a00000  5.0
    4540:	vsub.f64	d7, d4, d7
    4544:	vcmpe.f64	d7, d6
    4548:	vmrs	APSR_nzcv, fpscr
    454c:	bgt.w	470a <_dtoa_r+0xb5a>
    4550:	vneg.f64	d6, d6
    4554:	vcmpe.f64	d7, d6
    4558:	vmrs	APSR_nzcv, fpscr
    455c:	bpl.n	45ec <_dtoa_r+0xa3c>
    455e:	movs	r3, #0
    4560:	str	r3, [sp, #20]
    4562:	mov	r6, r3
    4564:	b.n	42f6 <_dtoa_r+0x746>
    4566:	ldr	r0, [sp, #32]
    4568:	b.w	3c1e <_dtoa_r+0x6e>
    456c:	ldr	r3, [sp, #20]
    456e:	ldr	r1, [sp, #44]	; 0x2c
    4570:	str	r2, [sp, #20]
    4572:	subs	r3, r2, r3
    4574:	add	r1, r3
    4576:	movs	r3, #0
    4578:	str	r1, [sp, #44]	; 0x2c
    457a:	str	r3, [sp, #56]	; 0x38
    457c:	b.n	3ec2 <_dtoa_r+0x312>
    457e:	vldr	d5, [sp, #56]	; 0x38
    4582:	movs	r1, #2
    4584:	b.n	419c <_dtoa_r+0x5ec>
    4586:	mov	r5, r7
    4588:	movs	r1, #0
    458a:	str	r1, [r4, #68]	; 0x44
    458c:	b.n	414e <_dtoa_r+0x59e>
    458e:	movs	r5, #1
    4590:	str	r5, [sp, #52]	; 0x34
    4592:	mov	r7, r5
    4594:	mov	r8, r5
    4596:	b.n	4588 <_dtoa_r+0x9d8>
    4598:	cmp	r3, #0
    459a:	mov	r9, r2
    459c:	ble.n	45c2 <_dtoa_r+0xa12>
    459e:	mov	r1, r5
    45a0:	movs	r2, #1
    45a2:	mov	r0, r4
    45a4:	bl	3700 <__lshift>
    45a8:	ldr	r1, [sp, #20]
    45aa:	mov	r5, r0
    45ac:	bl	37b0 <__mcmp>
    45b0:	cmp	r0, #0
    45b2:	ble.w	47ce <_dtoa_r+0xc1e>
    45b6:	cmp.w	r9, #57	; 0x39
    45ba:	beq.w	4778 <_dtoa_r+0xbc8>
    45be:	add.w	r9, sl, #49	; 0x31
    45c2:	mov	sl, r6
    45c4:	strb.w	r9, [r7]
    45c8:	add.w	fp, r7, #1
    45cc:	mov	r6, r8
    45ce:	str	r5, [sp, #28]
    45d0:	b.n	40dc <_dtoa_r+0x52c>
    45d2:	bne.n	45de <_dtoa_r+0xa2e>
    45d4:	tst.w	r9, #1
    45d8:	beq.n	45de <_dtoa_r+0xa2e>
    45da:	b.n	40ba <_dtoa_r+0x50a>
    45dc:	mov	fp, r2
    45de:	ldrb.w	r3, [fp, #-1]
    45e2:	cmp	r3, #48	; 0x30
    45e4:	add.w	r2, fp, #4294967295
    45e8:	beq.n	45dc <_dtoa_r+0xa2c>
    45ea:	b.n	40dc <_dtoa_r+0x52c>
    45ec:	ldrd	sl, fp, [sp, #56]	; 0x38
    45f0:	b.w	3daa <_dtoa_r+0x1fa>
    45f4:	ldr	r3, [sp, #8]
    45f6:	negs	r3, r3
    45f8:	cmp	r3, #0
    45fa:	beq.w	4734 <_dtoa_r+0xb84>
    45fe:	ldr	r2, [pc, #556]	; (482c <_dtoa_r+0xc7c>)
    4600:	and.w	r1, r3, #15
    4604:	add.w	r2, r2, r1, lsl #3
    4608:	vldr	d7, [r2]
    460c:	vldr	d6, [sp, #56]	; 0x38
    4610:	asrs	r3, r3, #4
    4612:	vmul.f64	d4, d6, d7
    4616:	beq.w	47e6 <_dtoa_r+0xc36>
    461a:	ldr	r2, [pc, #532]	; (4830 <_dtoa_r+0xc80>)
    461c:	movs	r1, #2
    461e:	lsls	r0, r3, #31
    4620:	bpl.n	462c <_dtoa_r+0xa7c>
    4622:	vldr	d7, [r2]
    4626:	adds	r1, #1
    4628:	vmul.f64	d4, d4, d7
    462c:	asrs	r3, r3, #1
    462e:	add.w	r2, r2, #8
    4632:	bne.n	461e <_dtoa_r+0xa6e>
    4634:	b.n	41ba <_dtoa_r+0x60a>
    4636:	ldr	r1, [sp, #32]
    4638:	movs	r2, #48	; 0x30
    463a:	strb	r2, [r1, #0]
    463c:	ldr	r2, [sp, #8]
    463e:	ldrb.w	r0, [fp, #-1]
    4642:	adds	r2, #1
    4644:	str	r2, [sp, #8]
    4646:	b.n	3e78 <_dtoa_r+0x2c8>
    4648:	ldr	r1, [r6, #4]
    464a:	mov	r0, r4
    464c:	bl	33a0 <_Balloc>
    4650:	ldr	r3, [r6, #16]
    4652:	adds	r2, r3, #2
    4654:	mov	r8, r0
    4656:	lsls	r2, r2, #2
    4658:	add.w	r1, r6, #12
    465c:	adds	r0, #12
    465e:	bl	1d44 <memcpy>
    4662:	mov	r1, r8
    4664:	movs	r2, #1
    4666:	mov	r0, r4
    4668:	bl	3700 <__lshift>
    466c:	mov	r8, r0
    466e:	b.n	436e <_dtoa_r+0x7be>
    4670:	cmp	r2, #57	; 0x39
    4672:	beq.w	4778 <_dtoa_r+0xbc8>
    4676:	add.w	r9, r2, #1
    467a:	mov	sl, r6
    467c:	strb.w	r9, [r7]
    4680:	add.w	fp, r7, #1
    4684:	mov	r6, r8
    4686:	str	r5, [sp, #28]
    4688:	b.n	40dc <_dtoa_r+0x52c>
    468a:	mov	sl, r6
    468c:	mov	r9, r2
    468e:	mov	r6, r8
    4690:	b.n	40a2 <_dtoa_r+0x4f2>
    4692:	ldr	r0, [pc, #408]	; (482c <_dtoa_r+0xc7c>)
    4694:	vcvt.s32.f64	s12, d4
    4698:	subs	r5, r1, #1
    469a:	add.w	r0, r0, r5, lsl #3
    469e:	vmov	d7, r2, r3
    46a2:	vldr	d3, [r0]
    46a6:	vmov	r3, s12
    46aa:	vmul.f64	d3, d3, d7
    46ae:	ldr	r0, [sp, #32]
    46b0:	adds	r3, #48	; 0x30
    46b2:	cmp	r1, #1
    46b4:	vcvt.f64.s32	d6, s12
    46b8:	strb	r3, [r0, #0]
    46ba:	add.w	fp, r0, #1
    46be:	vsub.f64	d7, d4, d6
    46c2:	beq.n	46ee <_dtoa_r+0xb3e>
    46c4:	vmov.f64	d5, #36	; 0x41200000  10.0
    46c8:	ldr	r3, [sp, #32]
    46ca:	add	r1, r3
    46cc:	mov	r3, fp
    46ce:	vmul.f64	d7, d7, d5
    46d2:	vcvt.s32.f64	s12, d7
    46d6:	vmov	r2, s12
    46da:	adds	r2, #48	; 0x30
    46dc:	strb.w	r2, [r3], #1
    46e0:	cmp	r1, r3
    46e2:	vcvt.f64.s32	d6, s12
    46e6:	vsub.f64	d7, d7, d6
    46ea:	bne.n	46ce <_dtoa_r+0xb1e>
    46ec:	add	fp, r5
    46ee:	vmov.f64	d6, #96	; 0x3f000000  0.5
    46f2:	vadd.f64	d5, d3, d6
    46f6:	vcmpe.f64	d5, d7
    46fa:	vmrs	APSR_nzcv, fpscr
    46fe:	bpl.n	4788 <_dtoa_r+0xbd8>
    4700:	str	r6, [sp, #8]
    4702:	ldrb.w	r0, [fp, #-1]
    4706:	b.w	3e5e <_dtoa_r+0x2ae>
    470a:	movs	r3, #0
    470c:	str	r3, [sp, #20]
    470e:	mov	r6, r3
    4710:	b.n	44c0 <_dtoa_r+0x910>
    4712:	subs	r3, r3, r7
    4714:	str	r3, [sp, #40]	; 0x28
    4716:	movs	r3, #0
    4718:	b.w	3ece <_dtoa_r+0x31e>
    471c:	ldr	r2, [sp, #20]
    471e:	ldr	r3, [sp, #64]	; 0x40
    4720:	str	r2, [sp, #56]	; 0x38
    4722:	ldr	r2, [sp, #24]
    4724:	str	r2, [sp, #40]	; 0x28
    4726:	rsb	r3, r3, #54	; 0x36
    472a:	b.w	3ece <_dtoa_r+0x31e>
    472e:	movs	r3, #0
    4730:	str	r3, [sp, #28]
    4732:	b.n	4514 <_dtoa_r+0x964>
    4734:	vldr	d4, [sp, #56]	; 0x38
    4738:	movs	r1, #2
    473a:	b.n	41ba <_dtoa_r+0x60a>
    473c:	cmp	r7, #0
    473e:	beq.w	4520 <_dtoa_r+0x970>
    4742:	ldr	r0, [sp, #52]	; 0x34
    4744:	cmp	r0, #0
    4746:	ble.w	45ec <_dtoa_r+0xa3c>
    474a:	vmov.f64	d5, #36	; 0x41200000  10.0
    474e:	vmov.f64	d7, #28	; 0x40e00000  7.0
    4752:	adds	r1, #1
    4754:	vmov	s13, r1
    4758:	vmul.f64	d4, d4, d5
    475c:	ldr	r3, [sp, #8]
    475e:	vcvt.f64.s32	d6, s13
    4762:	subs	r6, r3, #1
    4764:	vfma.f64	d7, d4, d6
    4768:	vmov	r2, r3, d7
    476c:	mov	r1, r0
    476e:	sub.w	r3, r3, #54525952	; 0x3400000
    4772:	b.n	41f0 <_dtoa_r+0x640>
    4774:	str	r5, [sp, #28]
    4776:	b.n	42f6 <_dtoa_r+0x746>
    4778:	movs	r2, #57	; 0x39
    477a:	mov	sl, r6
    477c:	str	r5, [sp, #28]
    477e:	mov	r6, r8
    4780:	strb	r2, [r7, #0]
    4782:	add.w	fp, r7, #1
    4786:	b.n	40be <_dtoa_r+0x50e>
    4788:	vsub.f64	d6, d6, d3
    478c:	vcmpe.f64	d6, d7
    4790:	vmrs	APSR_nzcv, fpscr
    4794:	bgt.n	479a <_dtoa_r+0xbea>
    4796:	b.n	45ec <_dtoa_r+0xa3c>
    4798:	mov	fp, r2
    479a:	ldrb.w	r3, [fp, #-1]
    479e:	cmp	r3, #48	; 0x30
    47a0:	add.w	r2, fp, #4294967295
    47a4:	beq.n	4798 <_dtoa_r+0xbe8>
    47a6:	b.n	429e <_dtoa_r+0x6ee>
    47a8:	str	r6, [sp, #8]
    47aa:	b.w	3e5e <_dtoa_r+0x2ae>
    47ae:	str	r3, [sp, #28]
    47b0:	b.n	4514 <_dtoa_r+0x964>
    47b2:	cmp.w	sl, #0
    47b6:	bne.w	4332 <_dtoa_r+0x782>
    47ba:	b.n	44ee <_dtoa_r+0x93e>
    47bc:	cmp	r2, #57	; 0x39
    47be:	mov	fp, r9
    47c0:	mov	r9, r2
    47c2:	beq.n	4778 <_dtoa_r+0xbc8>
    47c4:	cmp.w	fp, #0
    47c8:	bgt.w	45be <_dtoa_r+0xa0e>
    47cc:	b.n	45c2 <_dtoa_r+0xa12>
    47ce:	bne.w	45c2 <_dtoa_r+0xa12>
    47d2:	tst.w	r9, #1
    47d6:	beq.w	45c2 <_dtoa_r+0xa12>
    47da:	b.n	45b6 <_dtoa_r+0xa06>
    47dc:	ldr	r3, [sp, #4]
    47de:	cmp	r3, #2
    47e0:	bgt.n	47f4 <_dtoa_r+0xc44>
    47e2:	ldr	r7, [sp, #52]	; 0x34
    47e4:	b.n	405c <_dtoa_r+0x4ac>
    47e6:	movs	r1, #2
    47e8:	b.n	41ba <_dtoa_r+0x60a>
    47ea:	ldr	r3, [sp, #4]
    47ec:	cmp	r3, #2
    47ee:	bgt.n	47f4 <_dtoa_r+0xc44>
    47f0:	ldr	r7, [sp, #52]	; 0x34
    47f2:	b.n	4352 <_dtoa_r+0x7a2>
    47f4:	ldr	r7, [sp, #52]	; 0x34
    47f6:	b.n	449c <_dtoa_r+0x8ec>
    47f8:	movs	r3, #1
    47fa:	str	r3, [sp, #56]	; 0x38
    47fc:	b.w	3d42 <_dtoa_r+0x192>
    4800:	beq.w	4022 <_dtoa_r+0x472>
    4804:	rsb	r0, r0, #60	; 0x3c
    4808:	b.n	4014 <_dtoa_r+0x464>
    480a:	movs	r5, #0
    480c:	str	r5, [r4, #68]	; 0x44
    480e:	mov	r1, r5
    4810:	mov	r0, r4
    4812:	bl	33a0 <_Balloc>
    4816:	mov.w	r7, #4294967295
    481a:	movs	r3, #1
    481c:	str	r0, [sp, #32]
    481e:	mov	r8, r5
    4820:	str	r0, [r4, #64]	; 0x40
    4822:	str	r7, [sp, #52]	; 0x34
    4824:	str	r3, [sp, #36]	; 0x24
    4826:	b.w	3daa <_dtoa_r+0x1fa>
    482a:	nop
    482c:	.word	0x200004a8
    4830:	.word	0x20000570
    4834:	.word	0x00000000

00004838 <_svfprintf_r>:
    4838:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    483c:	vpush	{d8-d10}
    4840:	sub	sp, #228	; 0xe4
    4842:	mov	r4, r1
    4844:	str	r1, [sp, #12]
    4846:	mov	sl, r2
    4848:	str	r3, [sp, #36]	; 0x24
    484a:	str	r0, [sp, #20]
    484c:	bl	32d8 <_localeconv_r>
    4850:	ldr	r3, [r0, #0]
    4852:	str	r3, [sp, #64]	; 0x40
    4854:	mov	r0, r3
    4856:	bl	2e40 <strlen>
    485a:	ldrh	r3, [r4, #12]
    485c:	str	r0, [sp, #60]	; 0x3c
    485e:	lsls	r1, r3, #24
    4860:	bpl.n	486a <_svfprintf_r+0x32>
    4862:	ldr	r3, [r4, #16]
    4864:	cmp	r3, #0
    4866:	beq.w	5964 <_svfprintf_r+0x112c>
    486a:	movs	r3, #0
    486c:	vldr	d8, [pc, #656]	; 4b00 <_svfprintf_r+0x2c8>
    4870:	vldr	d9, [pc, #660]	; 4b08 <_svfprintf_r+0x2d0>
    4874:	str	r3, [sp, #52]	; 0x34
    4876:	str	r3, [sp, #116]	; 0x74
    4878:	str	r3, [sp, #112]	; 0x70
    487a:	str	r3, [sp, #68]	; 0x44
    487c:	str	r3, [sp, #24]
    487e:	add	r3, sp, #160	; 0xa0
    4880:	str	r3, [sp, #108]	; 0x6c
    4882:	mov	r9, r3
    4884:	ldrb.w	r3, [sl]
    4888:	mov	r4, sl
    488a:	cbz	r3, 48c8 <_svfprintf_r+0x90>
    488c:	cmp	r3, #37	; 0x25
    488e:	bne.n	4896 <_svfprintf_r+0x5e>
    4890:	b.n	48c8 <_svfprintf_r+0x90>
    4892:	cmp	r3, #37	; 0x25
    4894:	beq.n	489e <_svfprintf_r+0x66>
    4896:	ldrb.w	r3, [r4, #1]!
    489a:	cmp	r3, #0
    489c:	bne.n	4892 <_svfprintf_r+0x5a>
    489e:	rsb	r5, sl, r4
    48a2:	cbz	r5, 48c8 <_svfprintf_r+0x90>
    48a4:	ldr	r3, [sp, #112]	; 0x70
    48a6:	ldr	r2, [sp, #116]	; 0x74
    48a8:	str.w	sl, [r9]
    48ac:	adds	r3, #1
    48ae:	add	r2, r5
    48b0:	cmp	r3, #7
    48b2:	str.w	r5, [r9, #4]
    48b6:	str	r2, [sp, #116]	; 0x74
    48b8:	str	r3, [sp, #112]	; 0x70
    48ba:	bgt.w	4a04 <_svfprintf_r+0x1cc>
    48be:	add.w	r9, r9, #8
    48c2:	ldr	r3, [sp, #24]
    48c4:	add	r3, r5
    48c6:	str	r3, [sp, #24]
    48c8:	ldrb	r3, [r4, #0]
    48ca:	cmp	r3, #0
    48cc:	beq.w	4a16 <_svfprintf_r+0x1de>
    48d0:	movs	r3, #0
    48d2:	mov	r2, r3
    48d4:	strb.w	r3, [sp, #79]	; 0x4f
    48d8:	mov	r1, r3
    48da:	str	r3, [sp, #28]
    48dc:	mov	fp, r3
    48de:	mov.w	r8, #4294967295
    48e2:	ldrb	r3, [r4, #1]
    48e4:	add.w	sl, r4, #1
    48e8:	mov	r5, r8
    48ea:	add.w	sl, sl, #1
    48ee:	sub.w	r0, r3, #32
    48f2:	cmp	r0, #88	; 0x58
    48f4:	bhi.w	50e8 <_svfprintf_r+0x8b0>
    48f8:	tbh	[pc, r0, lsl #1]
    48fc:	.word	0x03f60363
    4900:	.word	0x036b03f6
    4904:	.word	0x03f603f6
    4908:	.word	0x03f603f6
    490c:	.word	0x03f603f6
    4910:	.word	0x037e0370
    4914:	.word	0x005d03f6
    4918:	.word	0x03f600df
    491c:	.word	0x010c00fb
    4920:	.word	0x010c010c
    4924:	.word	0x010c010c
    4928:	.word	0x010c010c
    492c:	.word	0x010c010c
    4930:	.word	0x03f603f6
    4934:	.word	0x03f603f6
    4938:	.word	0x03f603f6
    493c:	.word	0x03f603f6
    4940:	.word	0x03f603f6
    4944:	.word	0x015e011c
    4948:	.word	0x015e03f6
    494c:	.word	0x03f603f6
    4950:	.word	0x03f603f6
    4954:	.word	0x03f602a1
    4958:	.word	0x02a603f6
    495c:	.word	0x03f603f6
    4960:	.word	0x03f603f6
    4964:	.word	0x02d803f6
    4968:	.word	0x03f603f6
    496c:	.word	0x03f60305
    4970:	.word	0x03f603f6
    4974:	.word	0x03f603f6
    4978:	.word	0x03f603f6
    497c:	.word	0x03f603f6
    4980:	.word	0x034303f6
    4984:	.word	0x015e0356
    4988:	.word	0x015e015e
    498c:	.word	0x0356035e
    4990:	.word	0x03f603f6
    4994:	.word	0x03f603a4
    4998:	.word	0x00a203b1
    499c:	.word	0x03c30062
    49a0:	.word	0x03c803f6
    49a4:	.word	0x038303f6
    49a8:	.word	0x03f603f6
    49ac:	.short	0x038b
    49ae:	ldr	r0, [sp, #28]
    49b0:	str	r3, [sp, #36]	; 0x24
    49b2:	negs	r0, r0
    49b4:	str	r0, [sp, #28]
    49b6:	orr.w	fp, fp, #4
    49ba:	ldrb.w	r3, [sl]
    49be:	b.n	48ea <_svfprintf_r+0xb2>
    49c0:	mov	r8, r5
    49c2:	ldr	r0, [sp, #36]	; 0x24
    49c4:	movs	r1, #0
    49c6:	movs	r3, #48	; 0x30
    49c8:	movs	r2, #120	; 0x78
    49ca:	cmp	r8, r1
    49cc:	strb.w	r3, [sp, #80]	; 0x50
    49d0:	ldr	r4, [r0, #0]
    49d2:	strb.w	r2, [sp, #81]	; 0x51
    49d6:	add.w	r7, r0, #4
    49da:	mov.w	r5, #0
    49de:	strb.w	r1, [sp, #79]	; 0x4f
    49e2:	orr.w	r3, fp, #2
    49e6:	blt.w	5122 <_svfprintf_r+0x8ea>
    49ea:	bic.w	r3, fp, #128	; 0x80
    49ee:	orr.w	fp, r3, #2
    49f2:	orrs.w	r3, r4, r5
    49f6:	str	r7, [sp, #36]	; 0x24
    49f8:	beq.w	50ce <_svfprintf_r+0x896>
    49fc:	mov	r7, r1
    49fe:	str	r2, [sp, #48]	; 0x30
    4a00:	ldr	r0, [pc, #268]	; (4b10 <_svfprintf_r+0x2d8>)
    4a02:	b.n	4f62 <_svfprintf_r+0x72a>
    4a04:	add	r2, sp, #108	; 0x6c
    4a06:	ldr	r1, [sp, #12]
    4a08:	ldr	r0, [sp, #20]
    4a0a:	bl	5da8 <__ssprint_r>
    4a0e:	cbnz	r0, 4a24 <_svfprintf_r+0x1ec>
    4a10:	add.w	r9, sp, #160	; 0xa0
    4a14:	b.n	48c2 <_svfprintf_r+0x8a>
    4a16:	ldr	r3, [sp, #116]	; 0x74
    4a18:	cbz	r3, 4a24 <_svfprintf_r+0x1ec>
    4a1a:	ldr	r0, [sp, #20]
    4a1c:	ldr	r1, [sp, #12]
    4a1e:	add	r2, sp, #108	; 0x6c
    4a20:	bl	5da8 <__ssprint_r>
    4a24:	ldr	r3, [sp, #12]
    4a26:	ldrh	r3, [r3, #12]
    4a28:	tst.w	r3, #64	; 0x40
    4a2c:	ldr	r3, [sp, #24]
    4a2e:	it	ne
    4a30:	movne.w	r3, #4294967295
    4a34:	mov	r0, r3
    4a36:	add	sp, #228	; 0xe4
    4a38:	vpop	{d8-d10}
    4a3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a40:	str	r3, [sp, #48]	; 0x30
    4a42:	mov	r8, r5
    4a44:	cmp	r2, #0
    4a46:	bne.w	5d7e <_svfprintf_r+0x1546>
    4a4a:	ands.w	r3, fp, #32
    4a4e:	beq.w	4e5e <_svfprintf_r+0x626>
    4a52:	ldr	r7, [sp, #36]	; 0x24
    4a54:	adds	r7, #7
    4a56:	bic.w	r3, r7, #7
    4a5a:	movs	r7, #0
    4a5c:	add.w	r2, r3, #8
    4a60:	cmp	r8, r7
    4a62:	str	r2, [sp, #36]	; 0x24
    4a64:	ldrd	r4, r5, [r3]
    4a68:	strb.w	r7, [sp, #79]	; 0x4f
    4a6c:	blt.w	572c <_svfprintf_r+0xef4>
    4a70:	orrs.w	r3, r4, r5
    4a74:	bic.w	fp, fp, #128	; 0x80
    4a78:	beq.w	5112 <_svfprintf_r+0x8da>
    4a7c:	add	r6, sp, #160	; 0xa0
    4a7e:	lsrs	r2, r4, #3
    4a80:	orr.w	r2, r2, r5, lsl #29
    4a84:	lsrs	r1, r5, #3
    4a86:	and.w	r3, r4, #7
    4a8a:	mov	r5, r1
    4a8c:	mov	r4, r2
    4a8e:	adds	r3, #48	; 0x30
    4a90:	orrs.w	r2, r4, r5
    4a94:	strb.w	r3, [r6, #-1]!
    4a98:	bne.n	4a7e <_svfprintf_r+0x246>
    4a9a:	tst.w	fp, #1
    4a9e:	beq.w	4ef0 <_svfprintf_r+0x6b8>
    4aa2:	cmp	r3, #48	; 0x30
    4aa4:	beq.w	4ef0 <_svfprintf_r+0x6b8>
    4aa8:	movs	r2, #48	; 0x30
    4aaa:	subs	r3, r6, #1
    4aac:	strb.w	r2, [r6, #-1]
    4ab0:	add	r2, sp, #160	; 0xa0
    4ab2:	subs	r2, r2, r3
    4ab4:	str	r2, [sp, #32]
    4ab6:	mov	r6, r3
    4ab8:	b.n	4ef6 <_svfprintf_r+0x6be>
    4aba:	ldrb.w	r3, [sl]
    4abe:	cmp	r3, #42	; 0x2a
    4ac0:	add.w	r4, sl, #1
    4ac4:	beq.w	5d26 <_svfprintf_r+0x14ee>
    4ac8:	sub.w	r0, r3, #48	; 0x30
    4acc:	cmp	r0, #9
    4ace:	it	ls
    4ad0:	movls	r5, #0
    4ad2:	bhi.w	5c80 <_svfprintf_r+0x1448>
    4ad6:	ldrb.w	r3, [r4], #1
    4ada:	add.w	r5, r5, r5, lsl #2
    4ade:	add.w	r5, r0, r5, lsl #1
    4ae2:	sub.w	r0, r3, #48	; 0x30
    4ae6:	cmp	r0, #9
    4ae8:	bls.n	4ad6 <_svfprintf_r+0x29e>
    4aea:	orr.w	r5, r5, r5, asr #31
    4aee:	mov	sl, r4
    4af0:	b.n	48ee <_svfprintf_r+0xb6>
    4af2:	orr.w	fp, fp, #128	; 0x80
    4af6:	ldrb.w	r3, [sl]
    4afa:	b.n	48ea <_svfprintf_r+0xb2>
    4afc:	nop.w
	...
    4b08:	.word	0xffffffff
    4b0c:	.word	0x7fefffff
    4b10:	.word	0x200005ec
    4b14:	sub.w	r0, r3, #48	; 0x30
    4b18:	movs	r3, #0
    4b1a:	mov	r4, r3
    4b1c:	ldrb.w	r3, [sl], #1
    4b20:	add.w	r4, r4, r4, lsl #2
    4b24:	add.w	r4, r0, r4, lsl #1
    4b28:	sub.w	r0, r3, #48	; 0x30
    4b2c:	cmp	r0, #9
    4b2e:	bls.n	4b1c <_svfprintf_r+0x2e4>
    4b30:	str	r4, [sp, #28]
    4b32:	b.n	48ee <_svfprintf_r+0xb6>
    4b34:	str	r3, [sp, #48]	; 0x30
    4b36:	mov	r8, r5
    4b38:	cmp	r2, #0
    4b3a:	bne.w	5d96 <_svfprintf_r+0x155e>
    4b3e:	orr.w	fp, fp, #16
    4b42:	tst.w	fp, #32
    4b46:	beq.w	5550 <_svfprintf_r+0xd18>
    4b4a:	ldr	r7, [sp, #36]	; 0x24
    4b4c:	adds	r7, #7
    4b4e:	bic.w	r7, r7, #7
    4b52:	ldrd	r2, r3, [r7]
    4b56:	add.w	r1, r7, #8
    4b5a:	str	r1, [sp, #36]	; 0x24
    4b5c:	mov	r4, r2
    4b5e:	mov	r5, r3
    4b60:	cmp	r2, #0
    4b62:	sbcs.w	r3, r3, #0
    4b66:	blt.w	55d8 <_svfprintf_r+0xda0>
    4b6a:	cmp.w	r8, #0
    4b6e:	ldrb.w	r7, [sp, #79]	; 0x4f
    4b72:	blt.w	4ee0 <_svfprintf_r+0x6a8>
    4b76:	orrs.w	r3, r4, r5
    4b7a:	bic.w	fp, fp, #128	; 0x80
    4b7e:	beq.w	536e <_svfprintf_r+0xb36>
    4b82:	cmp	r5, #0
    4b84:	it	eq
    4b86:	cmpeq	r4, #10
    4b88:	bcc.w	4ee8 <_svfprintf_r+0x6b0>
    4b8c:	add	r6, sp, #160	; 0xa0
    4b8e:	mov	r0, r4
    4b90:	mov	r1, r5
    4b92:	movs	r2, #10
    4b94:	movs	r3, #0
    4b96:	bl	5ea8 <__aeabi_uldivmod>
    4b9a:	adds	r2, #48	; 0x30
    4b9c:	strb.w	r2, [r6, #-1]!
    4ba0:	mov	r0, r4
    4ba2:	mov	r1, r5
    4ba4:	movs	r3, #0
    4ba6:	movs	r2, #10
    4ba8:	bl	5ea8 <__aeabi_uldivmod>
    4bac:	mov	r4, r0
    4bae:	mov	r5, r1
    4bb0:	orrs.w	r3, r4, r5
    4bb4:	bne.n	4b8e <_svfprintf_r+0x356>
    4bb6:	b.n	4ef0 <_svfprintf_r+0x6b8>
    4bb8:	str	r3, [sp, #48]	; 0x30
    4bba:	mov	r8, r5
    4bbc:	cmp	r2, #0
    4bbe:	bne.w	5d8e <_svfprintf_r+0x1556>
    4bc2:	ldr	r7, [sp, #36]	; 0x24
    4bc4:	tst.w	fp, #8
    4bc8:	add.w	r7, r7, #7
    4bcc:	beq.w	5850 <_svfprintf_r+0x1018>
    4bd0:	bic.w	r3, r7, #7
    4bd4:	vldr	d8, [r3]
    4bd8:	add.w	r2, r3, #8
    4bdc:	str	r2, [sp, #36]	; 0x24
    4bde:	vabs.f64	d7, d8
    4be2:	vcmp.f64	d7, d9
    4be6:	vmrs	APSR_nzcv, fpscr
    4bea:	ble.w	5766 <_svfprintf_r+0xf2e>
    4bee:	vcmpe.f64	d8, #0.0
    4bf2:	vmrs	APSR_nzcv, fpscr
    4bf6:	bmi.w	5b8e <_svfprintf_r+0x1356>
    4bfa:	ldrb.w	r7, [sp, #79]	; 0x4f
    4bfe:	ldr	r6, [pc, #668]	; (4e9c <_svfprintf_r+0x664>)
    4c00:	ldr	r3, [pc, #668]	; (4ea0 <_svfprintf_r+0x668>)
    4c02:	ldr	r1, [sp, #48]	; 0x30
    4c04:	movs	r2, #3
    4c06:	mov.w	r8, #0
    4c0a:	str	r2, [sp, #16]
    4c0c:	bic.w	fp, fp, #128	; 0x80
    4c10:	cmp	r1, #71	; 0x47
    4c12:	it	le
    4c14:	movle	r6, r3
    4c16:	str	r2, [sp, #32]
    4c18:	str.w	r8, [sp, #56]	; 0x38
    4c1c:	cbz	r7, 4c24 <_svfprintf_r+0x3ec>
    4c1e:	ldr	r3, [sp, #16]
    4c20:	adds	r3, #1
    4c22:	str	r3, [sp, #16]
    4c24:	ands.w	r3, fp, #2
    4c28:	str	r3, [sp, #40]	; 0x28
    4c2a:	beq.n	4c32 <_svfprintf_r+0x3fa>
    4c2c:	ldr	r3, [sp, #16]
    4c2e:	adds	r3, #2
    4c30:	str	r3, [sp, #16]
    4c32:	ands.w	r3, fp, #132	; 0x84
    4c36:	str	r3, [sp, #44]	; 0x2c
    4c38:	bne.w	513c <_svfprintf_r+0x904>
    4c3c:	ldr	r3, [sp, #28]
    4c3e:	ldr	r2, [sp, #16]
    4c40:	subs	r4, r3, r2
    4c42:	cmp	r4, #0
    4c44:	ble.w	513c <_svfprintf_r+0x904>
    4c48:	cmp	r4, #16
    4c4a:	ldr	r1, [sp, #116]	; 0x74
    4c4c:	ldr	r2, [sp, #112]	; 0x70
    4c4e:	ldr	r7, [pc, #596]	; (4ea4 <_svfprintf_r+0x66c>)
    4c50:	ble.n	4c9a <_svfprintf_r+0x462>
    4c52:	mov	r0, r9
    4c54:	movs	r5, #16
    4c56:	mov	r9, r8
    4c58:	mov	r8, r6
    4c5a:	ldr	r6, [sp, #20]
    4c5c:	b.n	4c68 <_svfprintf_r+0x430>
    4c5e:	subs	r4, #16
    4c60:	cmp	r4, #16
    4c62:	add.w	r0, r0, #8
    4c66:	ble.n	4c94 <_svfprintf_r+0x45c>
    4c68:	adds	r2, #1
    4c6a:	adds	r1, #16
    4c6c:	cmp	r2, #7
    4c6e:	str	r1, [sp, #116]	; 0x74
    4c70:	str	r2, [sp, #112]	; 0x70
    4c72:	str	r7, [r0, #0]
    4c74:	str	r5, [r0, #4]
    4c76:	ble.n	4c5e <_svfprintf_r+0x426>
    4c78:	add	r2, sp, #108	; 0x6c
    4c7a:	ldr	r1, [sp, #12]
    4c7c:	mov	r0, r6
    4c7e:	bl	5da8 <__ssprint_r>
    4c82:	cmp	r0, #0
    4c84:	bne.w	4a24 <_svfprintf_r+0x1ec>
    4c88:	subs	r4, #16
    4c8a:	cmp	r4, #16
    4c8c:	ldr	r1, [sp, #116]	; 0x74
    4c8e:	ldr	r2, [sp, #112]	; 0x70
    4c90:	add	r0, sp, #160	; 0xa0
    4c92:	bgt.n	4c68 <_svfprintf_r+0x430>
    4c94:	mov	r6, r8
    4c96:	mov	r8, r9
    4c98:	mov	r9, r0
    4c9a:	adds	r2, #1
    4c9c:	adds	r3, r4, r1
    4c9e:	cmp	r2, #7
    4ca0:	str	r3, [sp, #116]	; 0x74
    4ca2:	str	r2, [sp, #112]	; 0x70
    4ca4:	str.w	r7, [r9]
    4ca8:	str.w	r4, [r9, #4]
    4cac:	bgt.w	5474 <_svfprintf_r+0xc3c>
    4cb0:	ldrb.w	r7, [sp, #79]	; 0x4f
    4cb4:	add.w	r9, r9, #8
    4cb8:	cbz	r7, 4cd8 <_svfprintf_r+0x4a0>
    4cba:	ldr	r2, [sp, #112]	; 0x70
    4cbc:	adds	r2, #1
    4cbe:	adds	r3, #1
    4cc0:	add.w	r0, sp, #79	; 0x4f
    4cc4:	movs	r1, #1
    4cc6:	cmp	r2, #7
    4cc8:	str	r3, [sp, #116]	; 0x74
    4cca:	str	r2, [sp, #112]	; 0x70
    4ccc:	stmia.w	r9, {r0, r1}
    4cd0:	bgt.w	5392 <_svfprintf_r+0xb5a>
    4cd4:	add.w	r9, r9, #8
    4cd8:	ldr	r2, [sp, #40]	; 0x28
    4cda:	cbz	r2, 4cf8 <_svfprintf_r+0x4c0>
    4cdc:	ldr	r2, [sp, #112]	; 0x70
    4cde:	adds	r2, #1
    4ce0:	adds	r3, #2
    4ce2:	add	r0, sp, #80	; 0x50
    4ce4:	movs	r1, #2
    4ce6:	cmp	r2, #7
    4ce8:	str	r3, [sp, #116]	; 0x74
    4cea:	str	r2, [sp, #112]	; 0x70
    4cec:	stmia.w	r9, {r0, r1}
    4cf0:	bgt.w	53aa <_svfprintf_r+0xb72>
    4cf4:	add.w	r9, r9, #8
    4cf8:	ldr	r2, [sp, #44]	; 0x2c
    4cfa:	cmp	r2, #128	; 0x80
    4cfc:	beq.w	51fc <_svfprintf_r+0x9c4>
    4d00:	ldr	r2, [sp, #32]
    4d02:	rsb	r4, r2, r8
    4d06:	cmp	r4, #0
    4d08:	ble.n	4d74 <_svfprintf_r+0x53c>
    4d0a:	cmp	r4, #16
    4d0c:	ldr	r2, [sp, #112]	; 0x70
    4d0e:	ldr	r7, [pc, #408]	; (4ea8 <_svfprintf_r+0x670>)
    4d10:	ble.n	4d5a <_svfprintf_r+0x522>
    4d12:	mov	r1, r9
    4d14:	mov.w	r8, #16
    4d18:	mov	r9, r6
    4d1a:	ldr	r5, [sp, #20]
    4d1c:	ldr	r6, [sp, #12]
    4d1e:	b.n	4d2a <_svfprintf_r+0x4f2>
    4d20:	subs	r4, #16
    4d22:	cmp	r4, #16
    4d24:	add.w	r1, r1, #8
    4d28:	ble.n	4d56 <_svfprintf_r+0x51e>
    4d2a:	adds	r2, #1
    4d2c:	adds	r3, #16
    4d2e:	cmp	r2, #7
    4d30:	str	r3, [sp, #116]	; 0x74
    4d32:	str	r2, [sp, #112]	; 0x70
    4d34:	stmia.w	r1, {r7, r8}
    4d38:	ble.n	4d20 <_svfprintf_r+0x4e8>
    4d3a:	add	r2, sp, #108	; 0x6c
    4d3c:	mov	r1, r6
    4d3e:	mov	r0, r5
    4d40:	bl	5da8 <__ssprint_r>
    4d44:	cmp	r0, #0
    4d46:	bne.w	4a24 <_svfprintf_r+0x1ec>
    4d4a:	subs	r4, #16
    4d4c:	cmp	r4, #16
    4d4e:	ldr	r3, [sp, #116]	; 0x74
    4d50:	ldr	r2, [sp, #112]	; 0x70
    4d52:	add	r1, sp, #160	; 0xa0
    4d54:	bgt.n	4d2a <_svfprintf_r+0x4f2>
    4d56:	mov	r6, r9
    4d58:	mov	r9, r1
    4d5a:	adds	r2, #1
    4d5c:	add	r3, r4
    4d5e:	cmp	r2, #7
    4d60:	str	r3, [sp, #116]	; 0x74
    4d62:	str	r2, [sp, #112]	; 0x70
    4d64:	str.w	r7, [r9]
    4d68:	str.w	r4, [r9, #4]
    4d6c:	bgt.w	537a <_svfprintf_r+0xb42>
    4d70:	add.w	r9, r9, #8
    4d74:	tst.w	fp, #256	; 0x100
    4d78:	bne.w	5140 <_svfprintf_r+0x908>
    4d7c:	ldr	r2, [sp, #112]	; 0x70
    4d7e:	ldr	r0, [sp, #32]
    4d80:	str.w	r6, [r9]
    4d84:	adds	r2, #1
    4d86:	add	r3, r0
    4d88:	cmp	r2, #7
    4d8a:	str	r3, [sp, #116]	; 0x74
    4d8c:	str.w	r0, [r9, #4]
    4d90:	str	r2, [sp, #112]	; 0x70
    4d92:	bgt.w	531a <_svfprintf_r+0xae2>
    4d96:	add.w	r9, r9, #8
    4d9a:	tst.w	fp, #4
    4d9e:	beq.n	4e1e <_svfprintf_r+0x5e6>
    4da0:	ldr	r2, [sp, #28]
    4da2:	ldr	r1, [sp, #16]
    4da4:	subs	r4, r2, r1
    4da6:	cmp	r4, #0
    4da8:	ble.n	4e1e <_svfprintf_r+0x5e6>
    4daa:	cmp	r4, #16
    4dac:	ldr	r2, [sp, #112]	; 0x70
    4dae:	ldr	r7, [pc, #244]	; (4ea4 <_svfprintf_r+0x66c>)
    4db0:	ble.n	4df8 <_svfprintf_r+0x5c0>
    4db2:	movs	r5, #16
    4db4:	ldr	r6, [sp, #20]
    4db6:	ldr.w	r8, [sp, #12]
    4dba:	b.n	4dc6 <_svfprintf_r+0x58e>
    4dbc:	subs	r4, #16
    4dbe:	cmp	r4, #16
    4dc0:	add.w	r9, r9, #8
    4dc4:	ble.n	4df8 <_svfprintf_r+0x5c0>
    4dc6:	adds	r2, #1
    4dc8:	adds	r3, #16
    4dca:	cmp	r2, #7
    4dcc:	str	r3, [sp, #116]	; 0x74
    4dce:	str	r2, [sp, #112]	; 0x70
    4dd0:	str.w	r7, [r9]
    4dd4:	str.w	r5, [r9, #4]
    4dd8:	ble.n	4dbc <_svfprintf_r+0x584>
    4dda:	add	r2, sp, #108	; 0x6c
    4ddc:	mov	r1, r8
    4dde:	mov	r0, r6
    4de0:	bl	5da8 <__ssprint_r>
    4de4:	cmp	r0, #0
    4de6:	bne.w	4a24 <_svfprintf_r+0x1ec>
    4dea:	subs	r4, #16
    4dec:	cmp	r4, #16
    4dee:	ldr	r3, [sp, #116]	; 0x74
    4df0:	ldr	r2, [sp, #112]	; 0x70
    4df2:	add.w	r9, sp, #160	; 0xa0
    4df6:	bgt.n	4dc6 <_svfprintf_r+0x58e>
    4df8:	adds	r2, #1
    4dfa:	add	r3, r4
    4dfc:	cmp	r2, #7
    4dfe:	str	r3, [sp, #116]	; 0x74
    4e00:	str	r2, [sp, #112]	; 0x70
    4e02:	str.w	r7, [r9]
    4e06:	str.w	r4, [r9, #4]
    4e0a:	ble.n	4e1e <_svfprintf_r+0x5e6>
    4e0c:	add	r2, sp, #108	; 0x6c
    4e0e:	ldr	r1, [sp, #12]
    4e10:	ldr	r0, [sp, #20]
    4e12:	bl	5da8 <__ssprint_r>
    4e16:	cmp	r0, #0
    4e18:	bne.w	4a24 <_svfprintf_r+0x1ec>
    4e1c:	ldr	r3, [sp, #116]	; 0x74
    4e1e:	ldr	r2, [sp, #24]
    4e20:	ldr	r1, [sp, #28]
    4e22:	ldr	r0, [sp, #16]
    4e24:	cmp	r1, r0
    4e26:	ite	ge
    4e28:	addge	r2, r2, r1
    4e2a:	addlt	r2, r2, r0
    4e2c:	str	r2, [sp, #24]
    4e2e:	cmp	r3, #0
    4e30:	bne.w	5332 <_svfprintf_r+0xafa>
    4e34:	movs	r3, #0
    4e36:	str	r3, [sp, #112]	; 0x70
    4e38:	add.w	r9, sp, #160	; 0xa0
    4e3c:	b.n	4884 <_svfprintf_r+0x4c>
    4e3e:	orr.w	fp, fp, #8
    4e42:	ldrb.w	r3, [sl]
    4e46:	b.n	48ea <_svfprintf_r+0xb2>
    4e48:	str	r3, [sp, #48]	; 0x30
    4e4a:	mov	r8, r5
    4e4c:	cmp	r2, #0
    4e4e:	bne.w	5d86 <_svfprintf_r+0x154e>
    4e52:	orr.w	fp, fp, #16
    4e56:	ands.w	r3, fp, #32
    4e5a:	bne.w	4a52 <_svfprintf_r+0x21a>
    4e5e:	ands.w	r2, fp, #16
    4e62:	bne.w	5588 <_svfprintf_r+0xd50>
    4e66:	ands.w	r3, fp, #64	; 0x40
    4e6a:	beq.w	5588 <_svfprintf_r+0xd50>
    4e6e:	ldr	r1, [sp, #36]	; 0x24
    4e70:	strb.w	r2, [sp, #79]	; 0x4f
    4e74:	mov	r3, r1
    4e76:	cmp.w	r8, #0
    4e7a:	add.w	r3, r3, #4
    4e7e:	ldrh	r4, [r1, #0]
    4e80:	mov.w	r5, #0
    4e84:	blt.w	59de <_svfprintf_r+0x11a6>
    4e88:	orrs.w	r1, r4, r5
    4e8c:	bic.w	fp, fp, #128	; 0x80
    4e90:	str	r3, [sp, #36]	; 0x24
    4e92:	beq.w	5112 <_svfprintf_r+0x8da>
    4e96:	mov	r7, r2
    4e98:	b.n	4a7c <_svfprintf_r+0x244>
    4e9a:	nop
    4e9c:	.word	0x200005cc
    4ea0:	.word	0x200005c8
    4ea4:	.word	0x20000608
    4ea8:	.word	0x200005b8
    4eac:	str	r3, [sp, #48]	; 0x30
    4eae:	mov	r8, r5
    4eb0:	cmp	r2, #0
    4eb2:	bne.w	5d68 <_svfprintf_r+0x1530>
    4eb6:	orr.w	fp, fp, #16
    4eba:	ands.w	r3, fp, #32
    4ebe:	beq.w	5490 <_svfprintf_r+0xc58>
    4ec2:	ldr	r7, [sp, #36]	; 0x24
    4ec4:	adds	r7, #7
    4ec6:	bic.w	r3, r7, #7
    4eca:	movs	r7, #0
    4ecc:	add.w	r2, r3, #8
    4ed0:	cmp	r8, r7
    4ed2:	str	r2, [sp, #36]	; 0x24
    4ed4:	ldrd	r4, r5, [r3]
    4ed8:	strb.w	r7, [sp, #79]	; 0x4f
    4edc:	bge.w	4b76 <_svfprintf_r+0x33e>
    4ee0:	orrs.w	r3, r4, r5
    4ee4:	bne.w	4b82 <_svfprintf_r+0x34a>
    4ee8:	add	r6, sp, #224	; 0xe0
    4eea:	adds	r4, #48	; 0x30
    4eec:	strb.w	r4, [r6, #-65]!
    4ef0:	add	r3, sp, #160	; 0xa0
    4ef2:	subs	r3, r3, r6
    4ef4:	str	r3, [sp, #32]
    4ef6:	ldr	r3, [sp, #32]
    4ef8:	cmp	r3, r8
    4efa:	it	lt
    4efc:	movlt	r3, r8
    4efe:	str	r3, [sp, #16]
    4f00:	movs	r3, #0
    4f02:	str	r3, [sp, #56]	; 0x38
    4f04:	b.n	4c1c <_svfprintf_r+0x3e4>
    4f06:	str	r3, [sp, #48]	; 0x30
    4f08:	mov	r8, r5
    4f0a:	cmp	r2, #0
    4f0c:	bne.w	5d60 <_svfprintf_r+0x1528>
    4f10:	tst.w	fp, #32
    4f14:	ldr	r0, [pc, #776]	; (5220 <_svfprintf_r+0x9e8>)
    4f16:	beq.w	5026 <_svfprintf_r+0x7ee>
    4f1a:	ldr	r7, [sp, #36]	; 0x24
    4f1c:	adds	r7, #7
    4f1e:	bic.w	r3, r7, #7
    4f22:	ldrd	r4, r5, [r3]
    4f26:	add.w	r2, r3, #8
    4f2a:	str	r2, [sp, #36]	; 0x24
    4f2c:	ands.w	r7, fp, #1
    4f30:	beq.w	53c2 <_svfprintf_r+0xb8a>
    4f34:	orrs.w	r3, r4, r5
    4f38:	beq.w	5882 <_svfprintf_r+0x104a>
    4f3c:	movs	r7, #0
    4f3e:	movs	r3, #48	; 0x30
    4f40:	ldrb.w	r2, [sp, #48]	; 0x30
    4f44:	strb.w	r3, [sp, #80]	; 0x50
    4f48:	cmp	r8, r7
    4f4a:	strb.w	r2, [sp, #81]	; 0x51
    4f4e:	strb.w	r7, [sp, #79]	; 0x4f
    4f52:	orr.w	r3, fp, #2
    4f56:	blt.w	5b88 <_svfprintf_r+0x1350>
    4f5a:	bic.w	r3, fp, #128	; 0x80
    4f5e:	orr.w	fp, r3, #2
    4f62:	add	r6, sp, #160	; 0xa0
    4f64:	lsrs	r3, r4, #4
    4f66:	and.w	r1, r4, #15
    4f6a:	orr.w	r3, r3, r5, lsl #28
    4f6e:	lsrs	r2, r5, #4
    4f70:	mov	r4, r3
    4f72:	mov	r5, r2
    4f74:	ldrb	r3, [r0, r1]
    4f76:	strb.w	r3, [r6, #-1]!
    4f7a:	orrs.w	r3, r4, r5
    4f7e:	bne.n	4f64 <_svfprintf_r+0x72c>
    4f80:	b.n	4ef0 <_svfprintf_r+0x6b8>
    4f82:	ldr	r1, [sp, #36]	; 0x24
    4f84:	str	r3, [sp, #48]	; 0x30
    4f86:	ldr	r2, [r1, #0]
    4f88:	strb.w	r2, [sp, #120]	; 0x78
    4f8c:	movs	r3, #0
    4f8e:	mov	r2, r1
    4f90:	mov	r7, r3
    4f92:	strb.w	r3, [sp, #79]	; 0x4f
    4f96:	adds	r2, #4
    4f98:	movs	r3, #1
    4f9a:	str	r3, [sp, #16]
    4f9c:	mov	r8, r7
    4f9e:	str	r7, [sp, #56]	; 0x38
    4fa0:	str	r2, [sp, #36]	; 0x24
    4fa2:	str	r3, [sp, #32]
    4fa4:	add	r6, sp, #120	; 0x78
    4fa6:	b.n	4c24 <_svfprintf_r+0x3ec>
    4fa8:	str	r3, [sp, #48]	; 0x30
    4faa:	mov	r8, r5
    4fac:	cmp	r2, #0
    4fae:	beq.w	4b42 <_svfprintf_r+0x30a>
    4fb2:	strb.w	r1, [sp, #79]	; 0x4f
    4fb6:	b.n	4b42 <_svfprintf_r+0x30a>
    4fb8:	orr.w	fp, fp, #64	; 0x40
    4fbc:	ldrb.w	r3, [sl]
    4fc0:	b.n	48ea <_svfprintf_r+0xb2>
    4fc2:	ldrb.w	r3, [sl]
    4fc6:	cmp	r1, #0
    4fc8:	bne.w	48ea <_svfprintf_r+0xb2>
    4fcc:	movs	r2, #1
    4fce:	movs	r1, #32
    4fd0:	b.n	48ea <_svfprintf_r+0xb2>
    4fd2:	orr.w	fp, fp, #1
    4fd6:	ldrb.w	r3, [sl]
    4fda:	b.n	48ea <_svfprintf_r+0xb2>
    4fdc:	ldr	r4, [sp, #36]	; 0x24
    4fde:	ldr	r3, [r4, #0]
    4fe0:	str	r3, [sp, #28]
    4fe2:	mov	r0, r3
    4fe4:	cmp	r0, #0
    4fe6:	mov	r3, r4
    4fe8:	add.w	r3, r3, #4
    4fec:	blt.w	49ae <_svfprintf_r+0x176>
    4ff0:	str	r3, [sp, #36]	; 0x24
    4ff2:	ldrb.w	r3, [sl]
    4ff6:	b.n	48ea <_svfprintf_r+0xb2>
    4ff8:	ldrb.w	r3, [sl]
    4ffc:	movs	r2, #1
    4ffe:	movs	r1, #43	; 0x2b
    5000:	b.n	48ea <_svfprintf_r+0xb2>
    5002:	str	r3, [sp, #48]	; 0x30
    5004:	mov	r8, r5
    5006:	cmp	r2, #0
    5008:	beq.w	4eba <_svfprintf_r+0x682>
    500c:	strb.w	r1, [sp, #79]	; 0x4f
    5010:	b.n	4eba <_svfprintf_r+0x682>
    5012:	str	r3, [sp, #48]	; 0x30
    5014:	mov	r8, r5
    5016:	cmp	r2, #0
    5018:	bne.w	5d70 <_svfprintf_r+0x1538>
    501c:	tst.w	fp, #32
    5020:	ldr	r0, [pc, #512]	; (5224 <_svfprintf_r+0x9ec>)
    5022:	bne.w	4f1a <_svfprintf_r+0x6e2>
    5026:	ldr	r2, [sp, #36]	; 0x24
    5028:	tst.w	fp, #16
    502c:	mov	r3, r2
    502e:	bne.w	55b4 <_svfprintf_r+0xd7c>
    5032:	tst.w	fp, #64	; 0x40
    5036:	beq.w	55b4 <_svfprintf_r+0xd7c>
    503a:	adds	r3, #4
    503c:	ldrh	r4, [r2, #0]
    503e:	str	r3, [sp, #36]	; 0x24
    5040:	movs	r5, #0
    5042:	b.n	4f2c <_svfprintf_r+0x6f4>
    5044:	ldrb.w	r3, [sl]
    5048:	cmp	r3, #108	; 0x6c
    504a:	ittte	eq
    504c:	ldrbeq.w	r3, [sl, #1]
    5050:	orreq.w	fp, fp, #32
    5054:	addeq.w	sl, sl, #1
    5058:	orrne.w	fp, fp, #16
    505c:	b.n	48ea <_svfprintf_r+0xb2>
    505e:	cmp	r2, #0
    5060:	bne.w	5d42 <_svfprintf_r+0x150a>
    5064:	tst.w	fp, #32
    5068:	beq.w	5738 <_svfprintf_r+0xf00>
    506c:	ldr	r2, [sp, #36]	; 0x24
    506e:	ldr	r1, [sp, #24]
    5070:	ldr	r3, [r2, #0]
    5072:	asrs	r5, r1, #31
    5074:	mov	r0, r1
    5076:	adds	r2, #4
    5078:	mov	r1, r5
    507a:	str	r2, [sp, #36]	; 0x24
    507c:	strd	r0, r1, [r3]
    5080:	b.n	4884 <_svfprintf_r+0x4c>
    5082:	orr.w	fp, fp, #32
    5086:	ldrb.w	r3, [sl]
    508a:	b.n	48ea <_svfprintf_r+0xb2>
    508c:	ldr	r2, [sp, #36]	; 0x24
    508e:	str	r3, [sp, #48]	; 0x30
    5090:	ldr	r6, [r2, #0]
    5092:	movs	r4, #0
    5094:	strb.w	r4, [sp, #79]	; 0x4f
    5098:	adds	r7, r2, #4
    509a:	cmp	r6, #0
    509c:	beq.w	5b6a <_svfprintf_r+0x1332>
    50a0:	cmp	r5, #0
    50a2:	blt.w	59ea <_svfprintf_r+0x11b2>
    50a6:	mov	r2, r5
    50a8:	mov	r1, r4
    50aa:	mov	r0, r6
    50ac:	bl	3300 <memchr>
    50b0:	cmp	r0, #0
    50b2:	beq.w	5c4e <_svfprintf_r+0x1416>
    50b6:	subs	r3, r0, r6
    50b8:	str	r3, [sp, #32]
    50ba:	mov	r8, r4
    50bc:	bic.w	r3, r3, r3, asr #31
    50c0:	str	r7, [sp, #36]	; 0x24
    50c2:	str	r3, [sp, #16]
    50c4:	str.w	r8, [sp, #56]	; 0x38
    50c8:	ldrb.w	r7, [sp, #79]	; 0x4f
    50cc:	b.n	4c1c <_svfprintf_r+0x3e4>
    50ce:	ldr	r0, [pc, #340]	; (5224 <_svfprintf_r+0x9ec>)
    50d0:	str	r2, [sp, #48]	; 0x30
    50d2:	cmp.w	r8, #0
    50d6:	bne.w	53e2 <_svfprintf_r+0xbaa>
    50da:	mov	r7, r8
    50dc:	mov.w	r8, #0
    50e0:	str.w	r8, [sp, #32]
    50e4:	add	r6, sp, #160	; 0xa0
    50e6:	b.n	4ef6 <_svfprintf_r+0x6be>
    50e8:	str	r3, [sp, #48]	; 0x30
    50ea:	cmp	r2, #0
    50ec:	bne.w	5d4a <_svfprintf_r+0x1512>
    50f0:	ldr	r2, [sp, #48]	; 0x30
    50f2:	cmp	r2, #0
    50f4:	beq.w	4a16 <_svfprintf_r+0x1de>
    50f8:	movs	r3, #0
    50fa:	movs	r1, #1
    50fc:	mov	r7, r3
    50fe:	str	r1, [sp, #16]
    5100:	strb.w	r2, [sp, #120]	; 0x78
    5104:	strb.w	r3, [sp, #79]	; 0x4f
    5108:	mov	r8, r3
    510a:	str	r3, [sp, #56]	; 0x38
    510c:	str	r1, [sp, #32]
    510e:	add	r6, sp, #120	; 0x78
    5110:	b.n	4c24 <_svfprintf_r+0x3ec>
    5112:	cmp.w	r8, #0
    5116:	beq.w	5c30 <_svfprintf_r+0x13f8>
    511a:	movs	r7, #0
    511c:	movs	r4, #0
    511e:	movs	r5, #0
    5120:	b.n	4a7c <_svfprintf_r+0x244>
    5122:	ldr	r0, [pc, #256]	; (5224 <_svfprintf_r+0x9ec>)
    5124:	str	r2, [sp, #48]	; 0x30
    5126:	mov	fp, r3
    5128:	orrs.w	r3, r4, r5
    512c:	str	r7, [sp, #36]	; 0x24
    512e:	mov.w	r7, #0
    5132:	bne.w	4f62 <_svfprintf_r+0x72a>
    5136:	movs	r4, #0
    5138:	movs	r5, #0
    513a:	b.n	4f62 <_svfprintf_r+0x72a>
    513c:	ldr	r3, [sp, #116]	; 0x74
    513e:	b.n	4cb8 <_svfprintf_r+0x480>
    5140:	ldr	r2, [sp, #48]	; 0x30
    5142:	cmp	r2, #101	; 0x65
    5144:	ble.w	528a <_svfprintf_r+0xa52>
    5148:	vcmp.f64	d8, #0.0
    514c:	vmrs	APSR_nzcv, fpscr
    5150:	bne.w	53e6 <_svfprintf_r+0xbae>
    5154:	ldr	r2, [sp, #112]	; 0x70
    5156:	ldr	r1, [pc, #208]	; (5228 <_svfprintf_r+0x9f0>)
    5158:	str.w	r1, [r9]
    515c:	adds	r2, #1
    515e:	adds	r3, #1
    5160:	movs	r1, #1
    5162:	cmp	r2, #7
    5164:	str	r3, [sp, #116]	; 0x74
    5166:	str	r2, [sp, #112]	; 0x70
    5168:	str.w	r1, [r9, #4]
    516c:	bgt.w	5894 <_svfprintf_r+0x105c>
    5170:	add.w	r9, r9, #8
    5174:	ldr	r2, [sp, #84]	; 0x54
    5176:	ldr	r1, [sp, #52]	; 0x34
    5178:	cmp	r2, r1
    517a:	blt.n	5184 <_svfprintf_r+0x94c>
    517c:	tst.w	fp, #1
    5180:	beq.w	4d9a <_svfprintf_r+0x562>
    5184:	ldr	r2, [sp, #112]	; 0x70
    5186:	ldr	r0, [sp, #60]	; 0x3c
    5188:	ldr	r1, [sp, #64]	; 0x40
    518a:	str.w	r1, [r9]
    518e:	adds	r2, #1
    5190:	add	r3, r0
    5192:	cmp	r2, #7
    5194:	str	r3, [sp, #116]	; 0x74
    5196:	str.w	r0, [r9, #4]
    519a:	str	r2, [sp, #112]	; 0x70
    519c:	bgt.w	594c <_svfprintf_r+0x1114>
    51a0:	add.w	r9, r9, #8
    51a4:	ldr	r2, [sp, #52]	; 0x34
    51a6:	subs	r4, r2, #1
    51a8:	cmp	r4, #0
    51aa:	ble.w	4d9a <_svfprintf_r+0x562>
    51ae:	cmp	r4, #16
    51b0:	ldr	r2, [sp, #112]	; 0x70
    51b2:	ldr	r7, [pc, #120]	; (522c <_svfprintf_r+0x9f4>)
    51b4:	ble.w	5570 <_svfprintf_r+0xd38>
    51b8:	movs	r5, #16
    51ba:	ldr	r6, [sp, #20]
    51bc:	ldr.w	r8, [sp, #12]
    51c0:	b.n	51ce <_svfprintf_r+0x996>
    51c2:	add.w	r9, r9, #8
    51c6:	subs	r4, #16
    51c8:	cmp	r4, #16
    51ca:	ble.w	5570 <_svfprintf_r+0xd38>
    51ce:	adds	r2, #1
    51d0:	adds	r3, #16
    51d2:	cmp	r2, #7
    51d4:	str	r3, [sp, #116]	; 0x74
    51d6:	str	r2, [sp, #112]	; 0x70
    51d8:	str.w	r7, [r9]
    51dc:	str.w	r5, [r9, #4]
    51e0:	ble.n	51c2 <_svfprintf_r+0x98a>
    51e2:	add	r2, sp, #108	; 0x6c
    51e4:	mov	r1, r8
    51e6:	mov	r0, r6
    51e8:	bl	5da8 <__ssprint_r>
    51ec:	cmp	r0, #0
    51ee:	bne.w	4a24 <_svfprintf_r+0x1ec>
    51f2:	ldr	r3, [sp, #116]	; 0x74
    51f4:	ldr	r2, [sp, #112]	; 0x70
    51f6:	add.w	r9, sp, #160	; 0xa0
    51fa:	b.n	51c6 <_svfprintf_r+0x98e>
    51fc:	ldr	r2, [sp, #28]
    51fe:	ldr	r1, [sp, #16]
    5200:	subs	r4, r2, r1
    5202:	cmp	r4, #0
    5204:	ble.w	4d00 <_svfprintf_r+0x4c8>
    5208:	cmp	r4, #16
    520a:	ldr	r2, [sp, #112]	; 0x70
    520c:	ldr	r7, [pc, #28]	; (522c <_svfprintf_r+0x9f4>)
    520e:	ble.n	526e <_svfprintf_r+0xa36>
    5210:	mov	r1, r9
    5212:	movs	r5, #16
    5214:	mov	r9, r8
    5216:	mov	r0, r3
    5218:	mov	r8, r6
    521a:	ldr	r6, [sp, #20]
    521c:	b.n	523a <_svfprintf_r+0xa02>
    521e:	nop
    5220:	.word	0x200005d8
    5224:	.word	0x200005ec
    5228:	.word	0x200005b4
    522c:	.word	0x200005b8
    5230:	subs	r4, #16
    5232:	cmp	r4, #16
    5234:	add.w	r1, r1, #8
    5238:	ble.n	5266 <_svfprintf_r+0xa2e>
    523a:	adds	r2, #1
    523c:	adds	r0, #16
    523e:	cmp	r2, #7
    5240:	str	r0, [sp, #116]	; 0x74
    5242:	str	r2, [sp, #112]	; 0x70
    5244:	str	r7, [r1, #0]
    5246:	str	r5, [r1, #4]
    5248:	ble.n	5230 <_svfprintf_r+0x9f8>
    524a:	add	r2, sp, #108	; 0x6c
    524c:	ldr	r1, [sp, #12]
    524e:	mov	r0, r6
    5250:	bl	5da8 <__ssprint_r>
    5254:	cmp	r0, #0
    5256:	bne.w	4a24 <_svfprintf_r+0x1ec>
    525a:	subs	r4, #16
    525c:	cmp	r4, #16
    525e:	ldr	r0, [sp, #116]	; 0x74
    5260:	ldr	r2, [sp, #112]	; 0x70
    5262:	add	r1, sp, #160	; 0xa0
    5264:	bgt.n	523a <_svfprintf_r+0xa02>
    5266:	mov	r6, r8
    5268:	mov	r3, r0
    526a:	mov	r8, r9
    526c:	mov	r9, r1
    526e:	adds	r2, #1
    5270:	add	r3, r4
    5272:	cmp	r2, #7
    5274:	str	r3, [sp, #116]	; 0x74
    5276:	str	r2, [sp, #112]	; 0x70
    5278:	str.w	r7, [r9]
    527c:	str.w	r4, [r9, #4]
    5280:	bgt.w	5710 <_svfprintf_r+0xed8>
    5284:	add.w	r9, r9, #8
    5288:	b.n	4d00 <_svfprintf_r+0x4c8>
    528a:	ldr	r2, [sp, #52]	; 0x34
    528c:	str.w	r6, [r9]
    5290:	cmp	r2, #1
    5292:	ldr	r2, [sp, #112]	; 0x70
    5294:	add.w	r3, r3, #1
    5298:	add.w	r2, r2, #1
    529c:	mov.w	r1, #1
    52a0:	str	r3, [sp, #116]	; 0x74
    52a2:	str	r2, [sp, #112]	; 0x70
    52a4:	str.w	r1, [r9, #4]
    52a8:	ble.w	56cc <_svfprintf_r+0xe94>
    52ac:	cmp	r2, #7
    52ae:	bgt.w	56dc <_svfprintf_r+0xea4>
    52b2:	add.w	r9, r9, #8
    52b6:	ldr	r0, [sp, #60]	; 0x3c
    52b8:	ldr	r1, [sp, #64]	; 0x40
    52ba:	str.w	r1, [r9]
    52be:	adds	r2, #1
    52c0:	add	r3, r0
    52c2:	cmp	r2, #7
    52c4:	str	r3, [sp, #116]	; 0x74
    52c6:	str	r2, [sp, #112]	; 0x70
    52c8:	str.w	r0, [r9, #4]
    52cc:	bgt.w	56f6 <_svfprintf_r+0xebe>
    52d0:	add.w	r9, r9, #8
    52d4:	vcmp.f64	d8, #0.0
    52d8:	vmrs	APSR_nzcv, fpscr
    52dc:	ldr	r1, [sp, #52]	; 0x34
    52de:	beq.w	54cc <_svfprintf_r+0xc94>
    52e2:	subs	r1, #1
    52e4:	adds	r2, #1
    52e6:	adds	r6, #1
    52e8:	add	r3, r1
    52ea:	cmp	r2, #7
    52ec:	str.w	r6, [r9]
    52f0:	str	r2, [sp, #112]	; 0x70
    52f2:	str	r3, [sp, #116]	; 0x74
    52f4:	str.w	r1, [r9, #4]
    52f8:	bgt.w	5536 <_svfprintf_r+0xcfe>
    52fc:	add.w	r9, r9, #8
    5300:	ldr	r0, [sp, #68]	; 0x44
    5302:	str.w	r0, [r9, #4]
    5306:	adds	r2, #1
    5308:	add	r3, r0
    530a:	add	r1, sp, #92	; 0x5c
    530c:	cmp	r2, #7
    530e:	str	r3, [sp, #116]	; 0x74
    5310:	str	r2, [sp, #112]	; 0x70
    5312:	str.w	r1, [r9]
    5316:	ble.w	4d96 <_svfprintf_r+0x55e>
    531a:	add	r2, sp, #108	; 0x6c
    531c:	ldr	r1, [sp, #12]
    531e:	ldr	r0, [sp, #20]
    5320:	bl	5da8 <__ssprint_r>
    5324:	cmp	r0, #0
    5326:	bne.w	4a24 <_svfprintf_r+0x1ec>
    532a:	ldr	r3, [sp, #116]	; 0x74
    532c:	add.w	r9, sp, #160	; 0xa0
    5330:	b.n	4d9a <_svfprintf_r+0x562>
    5332:	add	r2, sp, #108	; 0x6c
    5334:	ldr	r1, [sp, #12]
    5336:	ldr	r0, [sp, #20]
    5338:	bl	5da8 <__ssprint_r>
    533c:	cmp	r0, #0
    533e:	beq.w	4e34 <_svfprintf_r+0x5fc>
    5342:	b.w	4a24 <_svfprintf_r+0x1ec>
    5346:	ldr	r1, [sp, #36]	; 0x24
    5348:	cmp.w	r8, #0
    534c:	ldr	r4, [r1, #0]
    534e:	strb.w	r3, [sp, #79]	; 0x4f
    5352:	add.w	r7, r1, #4
    5356:	mov.w	r5, #0
    535a:	blt.w	5a40 <_svfprintf_r+0x1208>
    535e:	orrs.w	r2, r4, r5
    5362:	str	r7, [sp, #36]	; 0x24
    5364:	bic.w	fp, fp, #128	; 0x80
    5368:	mov	r7, r3
    536a:	bne.w	4b82 <_svfprintf_r+0x34a>
    536e:	cmp.w	r8, #0
    5372:	beq.w	50dc <_svfprintf_r+0x8a4>
    5376:	movs	r4, #0
    5378:	b.n	4ee8 <_svfprintf_r+0x6b0>
    537a:	add	r2, sp, #108	; 0x6c
    537c:	ldr	r1, [sp, #12]
    537e:	ldr	r0, [sp, #20]
    5380:	bl	5da8 <__ssprint_r>
    5384:	cmp	r0, #0
    5386:	bne.w	4a24 <_svfprintf_r+0x1ec>
    538a:	ldr	r3, [sp, #116]	; 0x74
    538c:	add.w	r9, sp, #160	; 0xa0
    5390:	b.n	4d74 <_svfprintf_r+0x53c>
    5392:	add	r2, sp, #108	; 0x6c
    5394:	ldr	r1, [sp, #12]
    5396:	ldr	r0, [sp, #20]
    5398:	bl	5da8 <__ssprint_r>
    539c:	cmp	r0, #0
    539e:	bne.w	4a24 <_svfprintf_r+0x1ec>
    53a2:	ldr	r3, [sp, #116]	; 0x74
    53a4:	add.w	r9, sp, #160	; 0xa0
    53a8:	b.n	4cd8 <_svfprintf_r+0x4a0>
    53aa:	add	r2, sp, #108	; 0x6c
    53ac:	ldr	r1, [sp, #12]
    53ae:	ldr	r0, [sp, #20]
    53b0:	bl	5da8 <__ssprint_r>
    53b4:	cmp	r0, #0
    53b6:	bne.w	4a24 <_svfprintf_r+0x1ec>
    53ba:	ldr	r3, [sp, #116]	; 0x74
    53bc:	add.w	r9, sp, #160	; 0xa0
    53c0:	b.n	4cf8 <_svfprintf_r+0x4c0>
    53c2:	cmp.w	r8, #0
    53c6:	strb.w	r7, [sp, #79]	; 0x4f
    53ca:	blt.w	58ac <_svfprintf_r+0x1074>
    53ce:	orrs.w	r3, r4, r5
    53d2:	bic.w	fp, fp, #128	; 0x80
    53d6:	bne.w	4f62 <_svfprintf_r+0x72a>
    53da:	cmp.w	r8, #0
    53de:	beq.w	50da <_svfprintf_r+0x8a2>
    53e2:	movs	r7, #0
    53e4:	b.n	5136 <_svfprintf_r+0x8fe>
    53e6:	ldr	r4, [sp, #84]	; 0x54
    53e8:	cmp	r4, #0
    53ea:	ble.w	58b0 <_svfprintf_r+0x1078>
    53ee:	ldr	r2, [sp, #56]	; 0x38
    53f0:	ldr	r1, [sp, #52]	; 0x34
    53f2:	cmp	r2, r1
    53f4:	it	ge
    53f6:	movge	r2, r1
    53f8:	cmp	r2, #0
    53fa:	mov	r4, r2
    53fc:	ble.n	541a <_svfprintf_r+0xbe2>
    53fe:	ldr	r2, [sp, #112]	; 0x70
    5400:	str.w	r6, [r9]
    5404:	adds	r2, #1
    5406:	add	r3, r4
    5408:	cmp	r2, #7
    540a:	str	r3, [sp, #116]	; 0x74
    540c:	str.w	r4, [r9, #4]
    5410:	str	r2, [sp, #112]	; 0x70
    5412:	bgt.w	5afa <_svfprintf_r+0x12c2>
    5416:	add.w	r9, r9, #8
    541a:	ldr	r2, [sp, #56]	; 0x38
    541c:	cmp	r4, #0
    541e:	it	ge
    5420:	subge	r2, r2, r4
    5422:	cmp	r2, #0
    5424:	mov	r4, r2
    5426:	ble.w	560c <_svfprintf_r+0xdd4>
    542a:	cmp	r4, #16
    542c:	ldr	r2, [sp, #112]	; 0x70
    542e:	ldr	r7, [pc, #772]	; (5734 <_svfprintf_r+0xefc>)
    5430:	ble.w	5866 <_svfprintf_r+0x102e>
    5434:	mov	r1, r9
    5436:	movs	r5, #16
    5438:	mov	r9, r6
    543a:	ldr.w	r8, [sp, #20]
    543e:	ldr	r6, [sp, #12]
    5440:	b.n	544c <_svfprintf_r+0xc14>
    5442:	adds	r1, #8
    5444:	subs	r4, #16
    5446:	cmp	r4, #16
    5448:	ble.w	5862 <_svfprintf_r+0x102a>
    544c:	adds	r2, #1
    544e:	adds	r3, #16
    5450:	cmp	r2, #7
    5452:	str	r3, [sp, #116]	; 0x74
    5454:	str	r2, [sp, #112]	; 0x70
    5456:	str	r7, [r1, #0]
    5458:	str	r5, [r1, #4]
    545a:	ble.n	5442 <_svfprintf_r+0xc0a>
    545c:	add	r2, sp, #108	; 0x6c
    545e:	mov	r1, r6
    5460:	mov	r0, r8
    5462:	bl	5da8 <__ssprint_r>
    5466:	cmp	r0, #0
    5468:	bne.w	4a24 <_svfprintf_r+0x1ec>
    546c:	ldr	r3, [sp, #116]	; 0x74
    546e:	ldr	r2, [sp, #112]	; 0x70
    5470:	add	r1, sp, #160	; 0xa0
    5472:	b.n	5444 <_svfprintf_r+0xc0c>
    5474:	add	r2, sp, #108	; 0x6c
    5476:	ldr	r1, [sp, #12]
    5478:	ldr	r0, [sp, #20]
    547a:	bl	5da8 <__ssprint_r>
    547e:	cmp	r0, #0
    5480:	bne.w	4a24 <_svfprintf_r+0x1ec>
    5484:	ldrb.w	r7, [sp, #79]	; 0x4f
    5488:	ldr	r3, [sp, #116]	; 0x74
    548a:	add.w	r9, sp, #160	; 0xa0
    548e:	b.n	4cb8 <_svfprintf_r+0x480>
    5490:	ands.w	r2, fp, #16
    5494:	bne.w	5346 <_svfprintf_r+0xb0e>
    5498:	ands.w	r3, fp, #64	; 0x40
    549c:	beq.w	5346 <_svfprintf_r+0xb0e>
    54a0:	ldr	r1, [sp, #36]	; 0x24
    54a2:	strb.w	r2, [sp, #79]	; 0x4f
    54a6:	mov	r3, r1
    54a8:	cmp.w	r8, #0
    54ac:	add.w	r3, r3, #4
    54b0:	ldrh	r4, [r1, #0]
    54b2:	mov.w	r5, #0
    54b6:	blt.w	59e2 <_svfprintf_r+0x11aa>
    54ba:	orrs.w	r1, r4, r5
    54be:	bic.w	fp, fp, #128	; 0x80
    54c2:	str	r3, [sp, #36]	; 0x24
    54c4:	mov	r7, r2
    54c6:	bne.w	4b82 <_svfprintf_r+0x34a>
    54ca:	b.n	536e <_svfprintf_r+0xb36>
    54cc:	subs	r4, r1, #1
    54ce:	cmp	r4, #0
    54d0:	ble.w	5300 <_svfprintf_r+0xac8>
    54d4:	cmp	r4, #16
    54d6:	ldr	r7, [pc, #604]	; (5734 <_svfprintf_r+0xefc>)
    54d8:	ble.n	5520 <_svfprintf_r+0xce8>
    54da:	movs	r5, #16
    54dc:	ldr	r6, [sp, #20]
    54de:	ldr.w	r8, [sp, #12]
    54e2:	b.n	54ee <_svfprintf_r+0xcb6>
    54e4:	subs	r4, #16
    54e6:	cmp	r4, #16
    54e8:	add.w	r9, r9, #8
    54ec:	ble.n	5520 <_svfprintf_r+0xce8>
    54ee:	adds	r2, #1
    54f0:	adds	r3, #16
    54f2:	cmp	r2, #7
    54f4:	str	r3, [sp, #116]	; 0x74
    54f6:	str	r2, [sp, #112]	; 0x70
    54f8:	str.w	r7, [r9]
    54fc:	str.w	r5, [r9, #4]
    5500:	ble.n	54e4 <_svfprintf_r+0xcac>
    5502:	add	r2, sp, #108	; 0x6c
    5504:	mov	r1, r8
    5506:	mov	r0, r6
    5508:	bl	5da8 <__ssprint_r>
    550c:	cmp	r0, #0
    550e:	bne.w	4a24 <_svfprintf_r+0x1ec>
    5512:	subs	r4, #16
    5514:	cmp	r4, #16
    5516:	ldr	r3, [sp, #116]	; 0x74
    5518:	ldr	r2, [sp, #112]	; 0x70
    551a:	add.w	r9, sp, #160	; 0xa0
    551e:	bgt.n	54ee <_svfprintf_r+0xcb6>
    5520:	adds	r2, #1
    5522:	add	r3, r4
    5524:	cmp	r2, #7
    5526:	str	r3, [sp, #116]	; 0x74
    5528:	str	r2, [sp, #112]	; 0x70
    552a:	str.w	r7, [r9]
    552e:	str.w	r4, [r9, #4]
    5532:	ble.w	52fc <_svfprintf_r+0xac4>
    5536:	add	r2, sp, #108	; 0x6c
    5538:	ldr	r1, [sp, #12]
    553a:	ldr	r0, [sp, #20]
    553c:	bl	5da8 <__ssprint_r>
    5540:	cmp	r0, #0
    5542:	bne.w	4a24 <_svfprintf_r+0x1ec>
    5546:	ldr	r3, [sp, #116]	; 0x74
    5548:	ldr	r2, [sp, #112]	; 0x70
    554a:	add.w	r9, sp, #160	; 0xa0
    554e:	b.n	5300 <_svfprintf_r+0xac8>
    5550:	tst.w	fp, #16
    5554:	bne.n	55be <_svfprintf_r+0xd86>
    5556:	tst.w	fp, #64	; 0x40
    555a:	beq.n	55be <_svfprintf_r+0xd86>
    555c:	ldr	r1, [sp, #36]	; 0x24
    555e:	ldrsh.w	r4, [r1]
    5562:	adds	r1, #4
    5564:	asrs	r5, r4, #31
    5566:	mov	r2, r4
    5568:	mov	r3, r5
    556a:	str	r1, [sp, #36]	; 0x24
    556c:	b.w	4b60 <_svfprintf_r+0x328>
    5570:	adds	r2, #1
    5572:	add	r3, r4
    5574:	cmp	r2, #7
    5576:	str	r3, [sp, #116]	; 0x74
    5578:	str	r2, [sp, #112]	; 0x70
    557a:	str.w	r7, [r9]
    557e:	str.w	r4, [r9, #4]
    5582:	ble.w	4d96 <_svfprintf_r+0x55e>
    5586:	b.n	531a <_svfprintf_r+0xae2>
    5588:	ldr	r1, [sp, #36]	; 0x24
    558a:	cmp.w	r8, #0
    558e:	ldr	r4, [r1, #0]
    5590:	strb.w	r3, [sp, #79]	; 0x4f
    5594:	add.w	r7, r1, #4
    5598:	mov.w	r5, #0
    559c:	blt.w	572a <_svfprintf_r+0xef2>
    55a0:	orrs.w	r2, r4, r5
    55a4:	bic.w	fp, fp, #128	; 0x80
    55a8:	str	r7, [sp, #36]	; 0x24
    55aa:	beq.w	5112 <_svfprintf_r+0x8da>
    55ae:	mov	r7, r3
    55b0:	b.w	4a7c <_svfprintf_r+0x244>
    55b4:	ldr	r4, [r3, #0]
    55b6:	adds	r3, #4
    55b8:	str	r3, [sp, #36]	; 0x24
    55ba:	movs	r5, #0
    55bc:	b.n	4f2c <_svfprintf_r+0x6f4>
    55be:	ldr	r2, [sp, #36]	; 0x24
    55c0:	ldr	r4, [r2, #0]
    55c2:	mov	r3, r2
    55c4:	adds	r3, #4
    55c6:	asrs	r5, r4, #31
    55c8:	mov	r2, r4
    55ca:	str	r3, [sp, #36]	; 0x24
    55cc:	cmp	r2, #0
    55ce:	mov	r3, r5
    55d0:	sbcs.w	r3, r3, #0
    55d4:	bge.w	4b6a <_svfprintf_r+0x332>
    55d8:	negs	r4, r4
    55da:	mov.w	r7, #45	; 0x2d
    55de:	sbc.w	r5, r5, r5, lsl #1
    55e2:	cmp.w	r8, #0
    55e6:	strb.w	r7, [sp, #79]	; 0x4f
    55ea:	blt.w	4b82 <_svfprintf_r+0x34a>
    55ee:	bic.w	fp, fp, #128	; 0x80
    55f2:	b.w	4b82 <_svfprintf_r+0x34a>
    55f6:	add	r2, sp, #108	; 0x6c
    55f8:	ldr	r1, [sp, #12]
    55fa:	ldr	r0, [sp, #20]
    55fc:	bl	5da8 <__ssprint_r>
    5600:	cmp	r0, #0
    5602:	bne.w	4a24 <_svfprintf_r+0x1ec>
    5606:	ldr	r3, [sp, #116]	; 0x74
    5608:	add.w	r9, sp, #160	; 0xa0
    560c:	ldr	r1, [sp, #56]	; 0x38
    560e:	ldr	r2, [sp, #84]	; 0x54
    5610:	add	r1, r6
    5612:	mov	r5, r1
    5614:	ldr	r1, [sp, #52]	; 0x34
    5616:	cmp	r2, r1
    5618:	blt.n	56aa <_svfprintf_r+0xe72>
    561a:	tst.w	fp, #1
    561e:	bne.n	56aa <_svfprintf_r+0xe72>
    5620:	ldr	r0, [sp, #52]	; 0x34
    5622:	add	r6, r0
    5624:	subs	r4, r6, r5
    5626:	subs	r2, r0, r2
    5628:	cmp	r4, r2
    562a:	it	ge
    562c:	movge	r4, r2
    562e:	cmp	r4, #0
    5630:	mov	r6, r4
    5632:	ble.n	5650 <_svfprintf_r+0xe18>
    5634:	ldr	r1, [sp, #112]	; 0x70
    5636:	str.w	r5, [r9]
    563a:	adds	r1, #1
    563c:	add	r3, r4
    563e:	cmp	r1, #7
    5640:	str	r3, [sp, #116]	; 0x74
    5642:	str.w	r4, [r9, #4]
    5646:	str	r1, [sp, #112]	; 0x70
    5648:	bgt.w	5b4c <_svfprintf_r+0x1314>
    564c:	add.w	r9, r9, #8
    5650:	cmp	r6, #0
    5652:	ite	ge
    5654:	subge	r4, r2, r6
    5656:	movlt	r4, r2
    5658:	cmp	r4, #0
    565a:	ble.w	4d9a <_svfprintf_r+0x562>
    565e:	cmp	r4, #16
    5660:	ldr	r2, [sp, #112]	; 0x70
    5662:	ldr	r7, [pc, #208]	; (5734 <_svfprintf_r+0xefc>)
    5664:	ble.n	5570 <_svfprintf_r+0xd38>
    5666:	movs	r5, #16
    5668:	ldr	r6, [sp, #20]
    566a:	ldr.w	r8, [sp, #12]
    566e:	b.n	567c <_svfprintf_r+0xe44>
    5670:	add.w	r9, r9, #8
    5674:	subs	r4, #16
    5676:	cmp	r4, #16
    5678:	ble.w	5570 <_svfprintf_r+0xd38>
    567c:	adds	r2, #1
    567e:	adds	r3, #16
    5680:	cmp	r2, #7
    5682:	str	r3, [sp, #116]	; 0x74
    5684:	str	r2, [sp, #112]	; 0x70
    5686:	str.w	r7, [r9]
    568a:	str.w	r5, [r9, #4]
    568e:	ble.n	5670 <_svfprintf_r+0xe38>
    5690:	add	r2, sp, #108	; 0x6c
    5692:	mov	r1, r8
    5694:	mov	r0, r6
    5696:	bl	5da8 <__ssprint_r>
    569a:	cmp	r0, #0
    569c:	bne.w	4a24 <_svfprintf_r+0x1ec>
    56a0:	ldr	r3, [sp, #116]	; 0x74
    56a2:	ldr	r2, [sp, #112]	; 0x70
    56a4:	add.w	r9, sp, #160	; 0xa0
    56a8:	b.n	5674 <_svfprintf_r+0xe3c>
    56aa:	ldr	r1, [sp, #112]	; 0x70
    56ac:	ldr	r4, [sp, #60]	; 0x3c
    56ae:	ldr	r0, [sp, #64]	; 0x40
    56b0:	str.w	r0, [r9]
    56b4:	adds	r1, #1
    56b6:	add	r3, r4
    56b8:	cmp	r1, #7
    56ba:	str	r3, [sp, #116]	; 0x74
    56bc:	str.w	r4, [r9, #4]
    56c0:	str	r1, [sp, #112]	; 0x70
    56c2:	bgt.w	5b12 <_svfprintf_r+0x12da>
    56c6:	add.w	r9, r9, #8
    56ca:	b.n	5620 <_svfprintf_r+0xde8>
    56cc:	tst.w	fp, #1
    56d0:	bne.w	52ac <_svfprintf_r+0xa74>
    56d4:	cmp	r2, #7
    56d6:	ble.w	52fc <_svfprintf_r+0xac4>
    56da:	b.n	5536 <_svfprintf_r+0xcfe>
    56dc:	add	r2, sp, #108	; 0x6c
    56de:	ldr	r1, [sp, #12]
    56e0:	ldr	r0, [sp, #20]
    56e2:	bl	5da8 <__ssprint_r>
    56e6:	cmp	r0, #0
    56e8:	bne.w	4a24 <_svfprintf_r+0x1ec>
    56ec:	ldr	r3, [sp, #116]	; 0x74
    56ee:	ldr	r2, [sp, #112]	; 0x70
    56f0:	add.w	r9, sp, #160	; 0xa0
    56f4:	b.n	52b6 <_svfprintf_r+0xa7e>
    56f6:	add	r2, sp, #108	; 0x6c
    56f8:	ldr	r1, [sp, #12]
    56fa:	ldr	r0, [sp, #20]
    56fc:	bl	5da8 <__ssprint_r>
    5700:	cmp	r0, #0
    5702:	bne.w	4a24 <_svfprintf_r+0x1ec>
    5706:	ldr	r3, [sp, #116]	; 0x74
    5708:	ldr	r2, [sp, #112]	; 0x70
    570a:	add.w	r9, sp, #160	; 0xa0
    570e:	b.n	52d4 <_svfprintf_r+0xa9c>
    5710:	add	r2, sp, #108	; 0x6c
    5712:	ldr	r1, [sp, #12]
    5714:	ldr	r0, [sp, #20]
    5716:	bl	5da8 <__ssprint_r>
    571a:	cmp	r0, #0
    571c:	bne.w	4a24 <_svfprintf_r+0x1ec>
    5720:	ldr	r3, [sp, #116]	; 0x74
    5722:	add.w	r9, sp, #160	; 0xa0
    5726:	b.w	4d00 <_svfprintf_r+0x4c8>
    572a:	str	r7, [sp, #36]	; 0x24
    572c:	movs	r7, #0
    572e:	b.w	4a7c <_svfprintf_r+0x244>
    5732:	nop
    5734:	.word	0x200005b8
    5738:	tst.w	fp, #16
    573c:	bne.n	5756 <_svfprintf_r+0xf1e>
    573e:	tst.w	fp, #64	; 0x40
    5742:	beq.n	5756 <_svfprintf_r+0xf1e>
    5744:	ldr	r2, [sp, #36]	; 0x24
    5746:	ldr	r3, [r2, #0]
    5748:	adds	r2, #4
    574a:	str	r2, [sp, #36]	; 0x24
    574c:	ldrh.w	r2, [sp, #24]
    5750:	strh	r2, [r3, #0]
    5752:	b.w	4884 <_svfprintf_r+0x4c>
    5756:	ldr	r2, [sp, #36]	; 0x24
    5758:	ldr	r3, [r2, #0]
    575a:	adds	r2, #4
    575c:	str	r2, [sp, #36]	; 0x24
    575e:	ldr	r2, [sp, #24]
    5760:	str	r2, [r3, #0]
    5762:	b.w	4884 <_svfprintf_r+0x4c>
    5766:	vcmp.f64	d8, d8
    576a:	vmrs	APSR_nzcv, fpscr
    576e:	bvs.w	5cae <_svfprintf_r+0x1476>
    5772:	ldr	r3, [sp, #48]	; 0x30
    5774:	cmp.w	r8, #4294967295
    5778:	bic.w	r5, r3, #32
    577c:	beq.w	5bca <_svfprintf_r+0x1392>
    5780:	cmp	r5, #71	; 0x47
    5782:	beq.w	59d2 <_svfprintf_r+0x119a>
    5786:	orr.w	r3, fp, #256	; 0x100
    578a:	str	r3, [sp, #40]	; 0x28
    578c:	vmov	r3, s17
    5790:	cmp	r3, #0
    5792:	blt.w	5bd0 <_svfprintf_r+0x1398>
    5796:	vmov.f64	d10, d8
    579a:	movs	r7, #0
    579c:	ldr	r3, [sp, #48]	; 0x30
    579e:	cmp	r3, #102	; 0x66
    57a0:	beq.w	5ba8 <_svfprintf_r+0x1370>
    57a4:	cmp	r3, #70	; 0x46
    57a6:	beq.w	5982 <_svfprintf_r+0x114a>
    57aa:	vmov.f64	d0, d10
    57ae:	cmp	r5, #69	; 0x45
    57b0:	ite	eq
    57b2:	addeq.w	r4, r8, #1
    57b6:	movne	r4, r8
    57b8:	add	r2, sp, #100	; 0x64
    57ba:	add	r3, sp, #88	; 0x58
    57bc:	str	r2, [sp, #4]
    57be:	str	r3, [sp, #0]
    57c0:	mov	r2, r4
    57c2:	add	r3, sp, #84	; 0x54
    57c4:	movs	r1, #2
    57c6:	ldr	r0, [sp, #20]
    57c8:	bl	3bb0 <_dtoa_r>
    57cc:	ldr	r3, [sp, #48]	; 0x30
    57ce:	cmp	r3, #103	; 0x67
    57d0:	mov	r6, r0
    57d2:	bne.w	5bf2 <_svfprintf_r+0x13ba>
    57d6:	tst.w	fp, #1
    57da:	beq.w	5caa <_svfprintf_r+0x1472>
    57de:	adds	r1, r6, r4
    57e0:	vcmp.f64	d10, #0.0
    57e4:	vmrs	APSR_nzcv, fpscr
    57e8:	beq.w	5af6 <_svfprintf_r+0x12be>
    57ec:	ldr	r3, [sp, #100]	; 0x64
    57ee:	cmp	r1, r3
    57f0:	bls.n	5800 <_svfprintf_r+0xfc8>
    57f2:	movs	r0, #48	; 0x30
    57f4:	adds	r2, r3, #1
    57f6:	str	r2, [sp, #100]	; 0x64
    57f8:	strb	r0, [r3, #0]
    57fa:	ldr	r3, [sp, #100]	; 0x64
    57fc:	cmp	r1, r3
    57fe:	bhi.n	57f4 <_svfprintf_r+0xfbc>
    5800:	subs	r3, r3, r6
    5802:	cmp	r5, #71	; 0x47
    5804:	str	r3, [sp, #52]	; 0x34
    5806:	beq.w	5a48 <_svfprintf_r+0x1210>
    580a:	ldr	r3, [sp, #48]	; 0x30
    580c:	cmp	r3, #101	; 0x65
    580e:	ble.w	5c10 <_svfprintf_r+0x13d8>
    5812:	ldr	r3, [sp, #48]	; 0x30
    5814:	cmp	r3, #102	; 0x66
    5816:	ldr	r3, [sp, #84]	; 0x54
    5818:	beq.w	5c14 <_svfprintf_r+0x13dc>
    581c:	str	r3, [sp, #56]	; 0x38
    581e:	ldr	r2, [sp, #56]	; 0x38
    5820:	ldr	r1, [sp, #52]	; 0x34
    5822:	cmp	r2, r1
    5824:	blt.w	5bd8 <_svfprintf_r+0x13a0>
    5828:	tst.w	fp, #1
    582c:	bne.w	5c98 <_svfprintf_r+0x1460>
    5830:	bic.w	r3, r2, r2, asr #31
    5834:	str	r2, [sp, #32]
    5836:	movs	r2, #103	; 0x67
    5838:	str	r2, [sp, #48]	; 0x30
    583a:	cmp	r7, #0
    583c:	bne.w	5a2c <_svfprintf_r+0x11f4>
    5840:	mov	r8, r7
    5842:	str	r3, [sp, #16]
    5844:	ldr.w	fp, [sp, #40]	; 0x28
    5848:	ldrb.w	r7, [sp, #79]	; 0x4f
    584c:	b.w	4c1c <_svfprintf_r+0x3e4>
    5850:	bic.w	r7, r7, #7
    5854:	add.w	r3, r7, #8
    5858:	vldr	d8, [r7]
    585c:	str	r3, [sp, #36]	; 0x24
    585e:	b.w	4bde <_svfprintf_r+0x3a6>
    5862:	mov	r6, r9
    5864:	mov	r9, r1
    5866:	adds	r2, #1
    5868:	add	r3, r4
    586a:	cmp	r2, #7
    586c:	str	r3, [sp, #116]	; 0x74
    586e:	str	r2, [sp, #112]	; 0x70
    5870:	str.w	r7, [r9]
    5874:	str.w	r4, [r9, #4]
    5878:	bgt.w	55f6 <_svfprintf_r+0xdbe>
    587c:	add.w	r9, r9, #8
    5880:	b.n	560c <_svfprintf_r+0xdd4>
    5882:	movs	r7, #0
    5884:	cmp	r8, r7
    5886:	strb.w	r7, [sp, #79]	; 0x4f
    588a:	blt.w	5136 <_svfprintf_r+0x8fe>
    588e:	bic.w	fp, fp, #128	; 0x80
    5892:	b.n	50d2 <_svfprintf_r+0x89a>
    5894:	add	r2, sp, #108	; 0x6c
    5896:	ldr	r1, [sp, #12]
    5898:	ldr	r0, [sp, #20]
    589a:	bl	5da8 <__ssprint_r>
    589e:	cmp	r0, #0
    58a0:	bne.w	4a24 <_svfprintf_r+0x1ec>
    58a4:	ldr	r3, [sp, #116]	; 0x74
    58a6:	add.w	r9, sp, #160	; 0xa0
    58aa:	b.n	5174 <_svfprintf_r+0x93c>
    58ac:	ldr	r7, [sp, #36]	; 0x24
    58ae:	b.n	5128 <_svfprintf_r+0x8f0>
    58b0:	ldr	r2, [sp, #112]	; 0x70
    58b2:	ldr	r1, [pc, #740]	; (5b98 <_svfprintf_r+0x1360>)
    58b4:	str.w	r1, [r9]
    58b8:	adds	r2, #1
    58ba:	adds	r3, #1
    58bc:	movs	r1, #1
    58be:	cmp	r2, #7
    58c0:	str	r3, [sp, #116]	; 0x74
    58c2:	str	r2, [sp, #112]	; 0x70
    58c4:	str.w	r1, [r9, #4]
    58c8:	bgt.n	59b8 <_svfprintf_r+0x1180>
    58ca:	add.w	r9, r9, #8
    58ce:	cbnz	r4, 58dc <_svfprintf_r+0x10a4>
    58d0:	ldr	r2, [sp, #52]	; 0x34
    58d2:	cbnz	r2, 58dc <_svfprintf_r+0x10a4>
    58d4:	tst.w	fp, #1
    58d8:	beq.w	4d9a <_svfprintf_r+0x562>
    58dc:	ldr	r2, [sp, #112]	; 0x70
    58de:	ldr	r0, [sp, #60]	; 0x3c
    58e0:	ldr	r1, [sp, #64]	; 0x40
    58e2:	str.w	r1, [r9]
    58e6:	adds	r2, #1
    58e8:	add	r3, r0
    58ea:	cmp	r2, #7
    58ec:	str	r3, [sp, #116]	; 0x74
    58ee:	str.w	r0, [r9, #4]
    58f2:	str	r2, [sp, #112]	; 0x70
    58f4:	bgt.w	5c64 <_svfprintf_r+0x142c>
    58f8:	add.w	r9, r9, #8
    58fc:	negs	r4, r4
    58fe:	cmp	r4, #0
    5900:	ble.w	5a12 <_svfprintf_r+0x11da>
    5904:	cmp	r4, #16
    5906:	ldr	r7, [pc, #660]	; (5b9c <_svfprintf_r+0x1364>)
    5908:	ble.w	5b30 <_svfprintf_r+0x12f8>
    590c:	mov	r1, r9
    590e:	movs	r5, #16
    5910:	mov	r9, r6
    5912:	ldr.w	r8, [sp, #20]
    5916:	ldr	r6, [sp, #12]
    5918:	b.n	5924 <_svfprintf_r+0x10ec>
    591a:	adds	r1, #8
    591c:	subs	r4, #16
    591e:	cmp	r4, #16
    5920:	ble.w	5b2c <_svfprintf_r+0x12f4>
    5924:	adds	r2, #1
    5926:	adds	r3, #16
    5928:	cmp	r2, #7
    592a:	str	r3, [sp, #116]	; 0x74
    592c:	str	r2, [sp, #112]	; 0x70
    592e:	str	r7, [r1, #0]
    5930:	str	r5, [r1, #4]
    5932:	ble.n	591a <_svfprintf_r+0x10e2>
    5934:	add	r2, sp, #108	; 0x6c
    5936:	mov	r1, r6
    5938:	mov	r0, r8
    593a:	bl	5da8 <__ssprint_r>
    593e:	cmp	r0, #0
    5940:	bne.w	4a24 <_svfprintf_r+0x1ec>
    5944:	ldr	r3, [sp, #116]	; 0x74
    5946:	ldr	r2, [sp, #112]	; 0x70
    5948:	add	r1, sp, #160	; 0xa0
    594a:	b.n	591c <_svfprintf_r+0x10e4>
    594c:	add	r2, sp, #108	; 0x6c
    594e:	ldr	r1, [sp, #12]
    5950:	ldr	r0, [sp, #20]
    5952:	bl	5da8 <__ssprint_r>
    5956:	cmp	r0, #0
    5958:	bne.w	4a24 <_svfprintf_r+0x1ec>
    595c:	ldr	r3, [sp, #116]	; 0x74
    595e:	add.w	r9, sp, #160	; 0xa0
    5962:	b.n	51a4 <_svfprintf_r+0x96c>
    5964:	movs	r1, #64	; 0x40
    5966:	ldr	r0, [sp, #20]
    5968:	bl	2318 <_malloc_r>
    596c:	ldr	r2, [sp, #12]
    596e:	str	r0, [r2, #0]
    5970:	str	r0, [r2, #16]
    5972:	cmp	r0, #0
    5974:	beq.w	5d52 <_svfprintf_r+0x151a>
    5978:	ldr	r2, [sp, #12]
    597a:	movs	r3, #64	; 0x40
    597c:	str	r3, [r2, #20]
    597e:	b.w	486a <_svfprintf_r+0x32>
    5982:	add	r2, sp, #100	; 0x64
    5984:	add	r3, sp, #88	; 0x58
    5986:	str	r2, [sp, #4]
    5988:	str	r3, [sp, #0]
    598a:	mov	r2, r8
    598c:	add	r3, sp, #84	; 0x54
    598e:	movs	r1, #3
    5990:	vmov.f64	d0, d10
    5994:	ldr	r0, [sp, #20]
    5996:	bl	3bb0 <_dtoa_r>
    599a:	mov	r4, r8
    599c:	mov	r6, r0
    599e:	ldr	r3, [sp, #48]	; 0x30
    59a0:	cmp	r3, #70	; 0x46
    59a2:	add.w	r1, r6, r4
    59a6:	bne.w	57e0 <_svfprintf_r+0xfa8>
    59aa:	ldrb	r3, [r6, #0]
    59ac:	cmp	r3, #48	; 0x30
    59ae:	beq.w	5ccc <_svfprintf_r+0x1494>
    59b2:	ldr	r4, [sp, #84]	; 0x54
    59b4:	add	r1, r4
    59b6:	b.n	57e0 <_svfprintf_r+0xfa8>
    59b8:	add	r2, sp, #108	; 0x6c
    59ba:	ldr	r1, [sp, #12]
    59bc:	ldr	r0, [sp, #20]
    59be:	bl	5da8 <__ssprint_r>
    59c2:	cmp	r0, #0
    59c4:	bne.w	4a24 <_svfprintf_r+0x1ec>
    59c8:	ldr	r4, [sp, #84]	; 0x54
    59ca:	ldr	r3, [sp, #116]	; 0x74
    59cc:	add.w	r9, sp, #160	; 0xa0
    59d0:	b.n	58ce <_svfprintf_r+0x1096>
    59d2:	cmp.w	r8, #0
    59d6:	it	eq
    59d8:	moveq.w	r8, #1
    59dc:	b.n	5786 <_svfprintf_r+0xf4e>
    59de:	str	r3, [sp, #36]	; 0x24
    59e0:	b.n	572c <_svfprintf_r+0xef4>
    59e2:	str	r3, [sp, #36]	; 0x24
    59e4:	mov	r7, r2
    59e6:	b.w	4ee0 <_svfprintf_r+0x6a8>
    59ea:	mov	r0, r6
    59ec:	bl	2e40 <strlen>
    59f0:	mov	r8, r4
    59f2:	mov	r3, r0
    59f4:	str	r0, [sp, #32]
    59f6:	b.w	50bc <_svfprintf_r+0x884>
    59fa:	add	r2, sp, #108	; 0x6c
    59fc:	ldr	r1, [sp, #12]
    59fe:	ldr	r0, [sp, #20]
    5a00:	bl	5da8 <__ssprint_r>
    5a04:	cmp	r0, #0
    5a06:	bne.w	4a24 <_svfprintf_r+0x1ec>
    5a0a:	ldr	r3, [sp, #116]	; 0x74
    5a0c:	ldr	r2, [sp, #112]	; 0x70
    5a0e:	add.w	r9, sp, #160	; 0xa0
    5a12:	ldr	r0, [sp, #52]	; 0x34
    5a14:	str.w	r6, [r9]
    5a18:	adds	r2, #1
    5a1a:	add	r3, r0
    5a1c:	cmp	r2, #7
    5a1e:	str	r3, [sp, #116]	; 0x74
    5a20:	str	r2, [sp, #112]	; 0x70
    5a22:	str.w	r0, [r9, #4]
    5a26:	ble.w	4d96 <_svfprintf_r+0x55e>
    5a2a:	b.n	531a <_svfprintf_r+0xae2>
    5a2c:	movs	r7, #45	; 0x2d
    5a2e:	str	r3, [sp, #16]
    5a30:	ldr.w	fp, [sp, #40]	; 0x28
    5a34:	strb.w	r7, [sp, #79]	; 0x4f
    5a38:	mov.w	r8, #0
    5a3c:	b.w	4c1e <_svfprintf_r+0x3e6>
    5a40:	str	r7, [sp, #36]	; 0x24
    5a42:	mov	r7, r3
    5a44:	b.w	4ee0 <_svfprintf_r+0x6a8>
    5a48:	ldr	r3, [sp, #84]	; 0x54
    5a4a:	adds	r2, r3, #3
    5a4c:	blt.n	5a54 <_svfprintf_r+0x121c>
    5a4e:	cmp	r8, r3
    5a50:	bge.w	581c <_svfprintf_r+0xfe4>
    5a54:	ldr	r2, [sp, #48]	; 0x30
    5a56:	subs	r2, #2
    5a58:	str	r2, [sp, #48]	; 0x30
    5a5a:	subs	r3, #1
    5a5c:	cmp	r3, #0
    5a5e:	ldrb.w	r2, [sp, #48]	; 0x30
    5a62:	str	r3, [sp, #84]	; 0x54
    5a64:	it	lt
    5a66:	neglt	r3, r3
    5a68:	strb.w	r2, [sp, #92]	; 0x5c
    5a6c:	ite	lt
    5a6e:	movlt	r2, #45	; 0x2d
    5a70:	movge	r2, #43	; 0x2b
    5a72:	cmp	r3, #9
    5a74:	strb.w	r2, [sp, #93]	; 0x5d
    5a78:	ble.w	5c88 <_svfprintf_r+0x1450>
    5a7c:	add.w	r0, sp, #107	; 0x6b
    5a80:	mov	r4, r0
    5a82:	ldr	r2, [pc, #284]	; (5ba0 <_svfprintf_r+0x1368>)
    5a84:	smull	r2, r1, r2, r3
    5a88:	asrs	r2, r3, #31
    5a8a:	rsb	r2, r2, r1, asr #2
    5a8e:	add.w	r1, r2, r2, lsl #2
    5a92:	sub.w	r3, r3, r1, lsl #1
    5a96:	add.w	r1, r3, #48	; 0x30
    5a9a:	cmp	r2, #9
    5a9c:	mov	r3, r2
    5a9e:	strb.w	r1, [r4, #-1]!
    5aa2:	bgt.n	5a82 <_svfprintf_r+0x124a>
    5aa4:	mov	r1, r4
    5aa6:	adds	r3, #48	; 0x30
    5aa8:	uxtb	r2, r3
    5aaa:	strb.w	r2, [r1, #-1]!
    5aae:	cmp	r0, r1
    5ab0:	bls.w	5d78 <_svfprintf_r+0x1540>
    5ab4:	add.w	r1, sp, #94	; 0x5e
    5ab8:	mov	r3, r4
    5aba:	b.n	5ac0 <_svfprintf_r+0x1288>
    5abc:	ldrb.w	r2, [r3], #1
    5ac0:	strb.w	r2, [r1], #1
    5ac4:	cmp	r0, r3
    5ac6:	bne.n	5abc <_svfprintf_r+0x1284>
    5ac8:	adds	r3, r0, #1
    5aca:	subs	r3, r3, r4
    5acc:	add.w	r2, sp, #94	; 0x5e
    5ad0:	add	r3, r2
    5ad2:	add	r2, sp, #92	; 0x5c
    5ad4:	subs	r3, r3, r2
    5ad6:	ldr	r2, [sp, #52]	; 0x34
    5ad8:	str	r3, [sp, #68]	; 0x44
    5ada:	cmp	r2, #1
    5adc:	add	r3, r2
    5ade:	str	r3, [sp, #32]
    5ae0:	ble.w	5ce2 <_svfprintf_r+0x14aa>
    5ae4:	ldr	r3, [sp, #32]
    5ae6:	ldr	r2, [sp, #60]	; 0x3c
    5ae8:	add	r3, r2
    5aea:	movs	r2, #0
    5aec:	str	r3, [sp, #32]
    5aee:	str	r2, [sp, #56]	; 0x38
    5af0:	bic.w	r3, r3, r3, asr #31
    5af4:	b.n	583a <_svfprintf_r+0x1002>
    5af6:	mov	r3, r1
    5af8:	b.n	5800 <_svfprintf_r+0xfc8>
    5afa:	add	r2, sp, #108	; 0x6c
    5afc:	ldr	r1, [sp, #12]
    5afe:	ldr	r0, [sp, #20]
    5b00:	bl	5da8 <__ssprint_r>
    5b04:	cmp	r0, #0
    5b06:	bne.w	4a24 <_svfprintf_r+0x1ec>
    5b0a:	ldr	r3, [sp, #116]	; 0x74
    5b0c:	add.w	r9, sp, #160	; 0xa0
    5b10:	b.n	541a <_svfprintf_r+0xbe2>
    5b12:	add	r2, sp, #108	; 0x6c
    5b14:	ldr	r1, [sp, #12]
    5b16:	ldr	r0, [sp, #20]
    5b18:	bl	5da8 <__ssprint_r>
    5b1c:	cmp	r0, #0
    5b1e:	bne.w	4a24 <_svfprintf_r+0x1ec>
    5b22:	ldr	r2, [sp, #84]	; 0x54
    5b24:	ldr	r3, [sp, #116]	; 0x74
    5b26:	add.w	r9, sp, #160	; 0xa0
    5b2a:	b.n	5620 <_svfprintf_r+0xde8>
    5b2c:	mov	r6, r9
    5b2e:	mov	r9, r1
    5b30:	adds	r2, #1
    5b32:	add	r3, r4
    5b34:	cmp	r2, #7
    5b36:	str	r3, [sp, #116]	; 0x74
    5b38:	str	r2, [sp, #112]	; 0x70
    5b3a:	str.w	r7, [r9]
    5b3e:	str.w	r4, [r9, #4]
    5b42:	bgt.w	59fa <_svfprintf_r+0x11c2>
    5b46:	add.w	r9, r9, #8
    5b4a:	b.n	5a12 <_svfprintf_r+0x11da>
    5b4c:	add	r2, sp, #108	; 0x6c
    5b4e:	ldr	r1, [sp, #12]
    5b50:	ldr	r0, [sp, #20]
    5b52:	bl	5da8 <__ssprint_r>
    5b56:	cmp	r0, #0
    5b58:	bne.w	4a24 <_svfprintf_r+0x1ec>
    5b5c:	ldr	r2, [sp, #84]	; 0x54
    5b5e:	ldr	r1, [sp, #52]	; 0x34
    5b60:	ldr	r3, [sp, #116]	; 0x74
    5b62:	subs	r2, r1, r2
    5b64:	add.w	r9, sp, #160	; 0xa0
    5b68:	b.n	5650 <_svfprintf_r+0xe18>
    5b6a:	cmp	r5, #6
    5b6c:	mov	r3, r5
    5b6e:	it	cs
    5b70:	movcs	r3, #6
    5b72:	str	r3, [sp, #32]
    5b74:	bic.w	r3, r3, r3, asr #31
    5b78:	mov	r8, r6
    5b7a:	str	r7, [sp, #36]	; 0x24
    5b7c:	str	r6, [sp, #56]	; 0x38
    5b7e:	mov	r7, r6
    5b80:	str	r3, [sp, #16]
    5b82:	ldr	r6, [pc, #32]	; (5ba4 <_svfprintf_r+0x136c>)
    5b84:	b.w	4c1c <_svfprintf_r+0x3e4>
    5b88:	mov	fp, r3
    5b8a:	b.w	4f62 <_svfprintf_r+0x72a>
    5b8e:	movs	r7, #45	; 0x2d
    5b90:	strb.w	r7, [sp, #79]	; 0x4f
    5b94:	b.w	4bfe <_svfprintf_r+0x3c6>
    5b98:	.word	0x200005b4
    5b9c:	.word	0x200005b8
    5ba0:	.word	0x66666667
    5ba4:	.word	0x20000600
    5ba8:	add	r2, sp, #100	; 0x64
    5baa:	add	r3, sp, #88	; 0x58
    5bac:	str	r2, [sp, #4]
    5bae:	str	r3, [sp, #0]
    5bb0:	movs	r1, #3
    5bb2:	add	r3, sp, #84	; 0x54
    5bb4:	mov	r2, r8
    5bb6:	vmov.f64	d0, d10
    5bba:	ldr	r0, [sp, #20]
    5bbc:	bl	3bb0 <_dtoa_r>
    5bc0:	mov	r4, r8
    5bc2:	mov	r6, r0
    5bc4:	add.w	r1, r0, r8
    5bc8:	b.n	59aa <_svfprintf_r+0x1172>
    5bca:	mov.w	r8, #6
    5bce:	b.n	5786 <_svfprintf_r+0xf4e>
    5bd0:	vneg.f64	d10, d8
    5bd4:	movs	r7, #45	; 0x2d
    5bd6:	b.n	579c <_svfprintf_r+0xf64>
    5bd8:	ldr	r2, [sp, #60]	; 0x3c
    5bda:	ldr	r3, [sp, #52]	; 0x34
    5bdc:	add	r3, r2
    5bde:	ldr	r2, [sp, #56]	; 0x38
    5be0:	str	r3, [sp, #32]
    5be2:	cmp	r2, #0
    5be4:	ble.w	5cf4 <_svfprintf_r+0x14bc>
    5be8:	movs	r2, #103	; 0x67
    5bea:	bic.w	r3, r3, r3, asr #31
    5bee:	str	r2, [sp, #48]	; 0x30
    5bf0:	b.n	583a <_svfprintf_r+0x1002>
    5bf2:	ldr	r3, [sp, #48]	; 0x30
    5bf4:	cmp	r3, #71	; 0x47
    5bf6:	bne.w	57de <_svfprintf_r+0xfa6>
    5bfa:	tst.w	fp, #1
    5bfe:	bne.w	599e <_svfprintf_r+0x1166>
    5c02:	ldr	r3, [sp, #100]	; 0x64
    5c04:	cmp	r5, #71	; 0x47
    5c06:	sub.w	r3, r3, r6
    5c0a:	str	r3, [sp, #52]	; 0x34
    5c0c:	beq.w	5a48 <_svfprintf_r+0x1210>
    5c10:	ldr	r3, [sp, #84]	; 0x54
    5c12:	b.n	5a5a <_svfprintf_r+0x1222>
    5c14:	cmp	r3, #0
    5c16:	mov	r2, r3
    5c18:	str	r3, [sp, #56]	; 0x38
    5c1a:	ble.n	5d04 <_svfprintf_r+0x14cc>
    5c1c:	cmp.w	r8, #0
    5c20:	bne.n	5cba <_svfprintf_r+0x1482>
    5c22:	tst.w	fp, #1
    5c26:	bne.n	5cba <_svfprintf_r+0x1482>
    5c28:	bic.w	r3, r3, r3, asr #31
    5c2c:	str	r2, [sp, #32]
    5c2e:	b.n	583a <_svfprintf_r+0x1002>
    5c30:	tst.w	fp, #1
    5c34:	mov	r7, r8
    5c36:	beq.n	5c44 <_svfprintf_r+0x140c>
    5c38:	add	r6, sp, #224	; 0xe0
    5c3a:	movs	r3, #48	; 0x30
    5c3c:	strb.w	r3, [r6, #-65]!
    5c40:	b.w	4ef0 <_svfprintf_r+0x6b8>
    5c44:	str.w	r8, [sp, #32]
    5c48:	add	r6, sp, #160	; 0xa0
    5c4a:	b.w	4ef6 <_svfprintf_r+0x6be>
    5c4e:	bic.w	r3, r5, r5, asr #31
    5c52:	str	r7, [sp, #36]	; 0x24
    5c54:	str	r3, [sp, #16]
    5c56:	str	r5, [sp, #32]
    5c58:	mov	r8, r0
    5c5a:	str	r0, [sp, #56]	; 0x38
    5c5c:	ldrb.w	r7, [sp, #79]	; 0x4f
    5c60:	b.w	4c1c <_svfprintf_r+0x3e4>
    5c64:	add	r2, sp, #108	; 0x6c
    5c66:	ldr	r1, [sp, #12]
    5c68:	ldr	r0, [sp, #20]
    5c6a:	bl	5da8 <__ssprint_r>
    5c6e:	cmp	r0, #0
    5c70:	bne.w	4a24 <_svfprintf_r+0x1ec>
    5c74:	ldr	r4, [sp, #84]	; 0x54
    5c76:	ldr	r3, [sp, #116]	; 0x74
    5c78:	ldr	r2, [sp, #112]	; 0x70
    5c7a:	add.w	r9, sp, #160	; 0xa0
    5c7e:	b.n	58fc <_svfprintf_r+0x10c4>
    5c80:	mov	sl, r4
    5c82:	movs	r5, #0
    5c84:	b.w	48ee <_svfprintf_r+0xb6>
    5c88:	adds	r3, #48	; 0x30
    5c8a:	movs	r2, #48	; 0x30
    5c8c:	strb.w	r3, [sp, #95]	; 0x5f
    5c90:	strb.w	r2, [sp, #94]	; 0x5e
    5c94:	add	r3, sp, #96	; 0x60
    5c96:	b.n	5ad2 <_svfprintf_r+0x129a>
    5c98:	ldr	r2, [sp, #60]	; 0x3c
    5c9a:	ldr	r3, [sp, #56]	; 0x38
    5c9c:	add	r3, r2
    5c9e:	movs	r2, #103	; 0x67
    5ca0:	str	r3, [sp, #32]
    5ca2:	str	r2, [sp, #48]	; 0x30
    5ca4:	bic.w	r3, r3, r3, asr #31
    5ca8:	b.n	583a <_svfprintf_r+0x1002>
    5caa:	ldr	r3, [sp, #100]	; 0x64
    5cac:	b.n	5800 <_svfprintf_r+0xfc8>
    5cae:	ldr	r6, [pc, #240]	; (5da0 <_svfprintf_r+0x1568>)
    5cb0:	ldr	r3, [pc, #240]	; (5da4 <_svfprintf_r+0x156c>)
    5cb2:	ldrb.w	r7, [sp, #79]	; 0x4f
    5cb6:	b.w	4c02 <_svfprintf_r+0x3ca>
    5cba:	ldr	r3, [sp, #56]	; 0x38
    5cbc:	ldr	r2, [sp, #60]	; 0x3c
    5cbe:	adds	r5, r3, r2
    5cc0:	add.w	r3, r5, r8
    5cc4:	str	r3, [sp, #32]
    5cc6:	bic.w	r3, r3, r3, asr #31
    5cca:	b.n	583a <_svfprintf_r+0x1002>
    5ccc:	vcmp.f64	d10, #0.0
    5cd0:	vmrs	APSR_nzcv, fpscr
    5cd4:	beq.w	59b2 <_svfprintf_r+0x117a>
    5cd8:	rsb	r4, r4, #1
    5cdc:	str	r4, [sp, #84]	; 0x54
    5cde:	add	r1, r4
    5ce0:	b.n	57e0 <_svfprintf_r+0xfa8>
    5ce2:	ands.w	r3, fp, #1
    5ce6:	bne.w	5ae4 <_svfprintf_r+0x12ac>
    5cea:	str	r3, [sp, #56]	; 0x38
    5cec:	ldr	r3, [sp, #32]
    5cee:	bic.w	r3, r3, r3, asr #31
    5cf2:	b.n	583a <_svfprintf_r+0x1002>
    5cf4:	ldr	r3, [sp, #56]	; 0x38
    5cf6:	ldr	r2, [sp, #32]
    5cf8:	rsb	r3, r3, #1
    5cfc:	add	r2, r3
    5cfe:	mov	r3, r2
    5d00:	str	r2, [sp, #32]
    5d02:	b.n	5be8 <_svfprintf_r+0x13b0>
    5d04:	cmp.w	r8, #0
    5d08:	bne.n	5d10 <_svfprintf_r+0x14d8>
    5d0a:	tst.w	fp, #1
    5d0e:	beq.n	5d20 <_svfprintf_r+0x14e8>
    5d10:	ldr	r3, [sp, #60]	; 0x3c
    5d12:	adds	r5, r3, #1
    5d14:	add.w	r3, r5, r8
    5d18:	str	r3, [sp, #32]
    5d1a:	bic.w	r3, r3, r3, asr #31
    5d1e:	b.n	583a <_svfprintf_r+0x1002>
    5d20:	movs	r3, #1
    5d22:	str	r3, [sp, #32]
    5d24:	b.n	583a <_svfprintf_r+0x1002>
    5d26:	ldr	r0, [sp, #36]	; 0x24
    5d28:	ldrb.w	r3, [sl, #1]
    5d2c:	ldr	r5, [r0, #0]
    5d2e:	adds	r0, #4
    5d30:	cmp	r5, #0
    5d32:	str	r0, [sp, #36]	; 0x24
    5d34:	mov	sl, r4
    5d36:	bge.w	48ea <_svfprintf_r+0xb2>
    5d3a:	mov.w	r5, #4294967295
    5d3e:	b.w	48ea <_svfprintf_r+0xb2>
    5d42:	strb.w	r1, [sp, #79]	; 0x4f
    5d46:	b.w	5064 <_svfprintf_r+0x82c>
    5d4a:	strb.w	r1, [sp, #79]	; 0x4f
    5d4e:	b.w	50f0 <_svfprintf_r+0x8b8>
    5d52:	ldr	r2, [sp, #20]
    5d54:	movs	r3, #12
    5d56:	str	r3, [r2, #0]
    5d58:	mov.w	r0, #4294967295
    5d5c:	b.w	4a36 <_svfprintf_r+0x1fe>
    5d60:	strb.w	r1, [sp, #79]	; 0x4f
    5d64:	b.w	4f10 <_svfprintf_r+0x6d8>
    5d68:	strb.w	r1, [sp, #79]	; 0x4f
    5d6c:	b.w	4eb6 <_svfprintf_r+0x67e>
    5d70:	strb.w	r1, [sp, #79]	; 0x4f
    5d74:	b.w	501c <_svfprintf_r+0x7e4>
    5d78:	add.w	r3, sp, #94	; 0x5e
    5d7c:	b.n	5ad2 <_svfprintf_r+0x129a>
    5d7e:	strb.w	r1, [sp, #79]	; 0x4f
    5d82:	b.w	4a4a <_svfprintf_r+0x212>
    5d86:	strb.w	r1, [sp, #79]	; 0x4f
    5d8a:	b.w	4e52 <_svfprintf_r+0x61a>
    5d8e:	strb.w	r1, [sp, #79]	; 0x4f
    5d92:	b.w	4bc2 <_svfprintf_r+0x38a>
    5d96:	strb.w	r1, [sp, #79]	; 0x4f
    5d9a:	b.w	4b3e <_svfprintf_r+0x306>
    5d9e:	nop
    5da0:	.word	0x200005d4
    5da4:	.word	0x200005d0

00005da8 <__ssprint_r>:
    5da8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dac:	ldr	r3, [r2, #8]
    5dae:	sub	sp, #12
    5db0:	mov	r8, r2
    5db2:	cmp	r3, #0
    5db4:	beq.n	5e9c <__ssprint_r+0xf4>
    5db6:	mov	fp, r0
    5db8:	mov.w	r9, #0
    5dbc:	ldr	r6, [r2, #0]
    5dbe:	ldr	r0, [r1, #0]
    5dc0:	ldr	r3, [r1, #8]
    5dc2:	mov	r5, r1
    5dc4:	mov	r4, r9
    5dc6:	cmp	r4, #0
    5dc8:	beq.n	5e56 <__ssprint_r+0xae>
    5dca:	cmp	r4, r3
    5dcc:	mov	r7, r3
    5dce:	mov	sl, r3
    5dd0:	bcc.n	5e60 <__ssprint_r+0xb8>
    5dd2:	ldrh	r3, [r5, #12]
    5dd4:	tst.w	r3, #1152	; 0x480
    5dd8:	beq.n	5e36 <__ssprint_r+0x8e>
    5dda:	ldr	r7, [r5, #20]
    5ddc:	ldr	r1, [r5, #16]
    5dde:	add.w	r7, r7, r7, lsl #1
    5de2:	rsb	sl, r1, r0
    5de6:	add.w	r7, r7, r7, lsr #31
    5dea:	adds	r0, r4, #1
    5dec:	asrs	r7, r7, #1
    5dee:	add	r0, sl
    5df0:	cmp	r0, r7
    5df2:	mov	r2, r7
    5df4:	itt	hi
    5df6:	movhi	r7, r0
    5df8:	movhi	r2, r7
    5dfa:	lsls	r3, r3, #21
    5dfc:	bpl.n	5e66 <__ssprint_r+0xbe>
    5dfe:	mov	r1, r2
    5e00:	mov	r0, fp
    5e02:	bl	2318 <_malloc_r>
    5e06:	cmp	r0, #0
    5e08:	beq.n	5e7a <__ssprint_r+0xd2>
    5e0a:	mov	r2, sl
    5e0c:	ldr	r1, [r5, #16]
    5e0e:	str	r0, [sp, #4]
    5e10:	bl	1d44 <memcpy>
    5e14:	ldrh	r2, [r5, #12]
    5e16:	ldr	r3, [sp, #4]
    5e18:	bic.w	r2, r2, #1152	; 0x480
    5e1c:	orr.w	r2, r2, #128	; 0x80
    5e20:	strh	r2, [r5, #12]
    5e22:	rsb	r2, sl, r7
    5e26:	add.w	r0, r3, sl
    5e2a:	str	r7, [r5, #20]
    5e2c:	str	r3, [r5, #16]
    5e2e:	str	r0, [r5, #0]
    5e30:	str	r2, [r5, #8]
    5e32:	mov	r7, r4
    5e34:	mov	sl, r4
    5e36:	mov	r2, sl
    5e38:	mov	r1, r9
    5e3a:	bl	28b4 <memmove>
    5e3e:	ldr.w	r2, [r8, #8]
    5e42:	ldr	r3, [r5, #8]
    5e44:	ldr	r0, [r5, #0]
    5e46:	subs	r3, r3, r7
    5e48:	add	r0, sl
    5e4a:	subs	r4, r2, r4
    5e4c:	str	r3, [r5, #8]
    5e4e:	str	r0, [r5, #0]
    5e50:	str.w	r4, [r8, #8]
    5e54:	cbz	r4, 5e9c <__ssprint_r+0xf4>
    5e56:	ldr.w	r9, [r6]
    5e5a:	ldr	r4, [r6, #4]
    5e5c:	adds	r6, #8
    5e5e:	b.n	5dc6 <__ssprint_r+0x1e>
    5e60:	mov	r7, r4
    5e62:	mov	sl, r4
    5e64:	b.n	5e36 <__ssprint_r+0x8e>
    5e66:	mov	r0, fp
    5e68:	bl	2a20 <_realloc_r>
    5e6c:	mov	r3, r0
    5e6e:	cmp	r0, #0
    5e70:	bne.n	5e22 <__ssprint_r+0x7a>
    5e72:	ldr	r1, [r5, #16]
    5e74:	mov	r0, fp
    5e76:	bl	3108 <_free_r>
    5e7a:	movs	r3, #12
    5e7c:	str.w	r3, [fp]
    5e80:	ldrh	r3, [r5, #12]
    5e82:	movs	r2, #0
    5e84:	orr.w	r3, r3, #64	; 0x40
    5e88:	mov.w	r0, #4294967295
    5e8c:	strh	r3, [r5, #12]
    5e8e:	str.w	r2, [r8, #8]
    5e92:	str.w	r2, [r8, #4]
    5e96:	add	sp, #12
    5e98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e9c:	movs	r0, #0
    5e9e:	str.w	r0, [r8, #4]
    5ea2:	add	sp, #12
    5ea4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005ea8 <__aeabi_uldivmod>:
    5ea8:	cbnz	r3, 5ec0 <__aeabi_uldivmod+0x18>
    5eaa:	cbnz	r2, 5ec0 <__aeabi_uldivmod+0x18>
    5eac:	cmp	r1, #0
    5eae:	it	eq
    5eb0:	cmpeq	r0, #0
    5eb2:	itt	ne
    5eb4:	movne.w	r1, #4294967295
    5eb8:	movne.w	r0, #4294967295
    5ebc:	b.w	61bc <__aeabi_idiv0>
    5ec0:	sub.w	ip, sp, #8
    5ec4:	strd	ip, lr, [sp, #-16]!
    5ec8:	bl	5ed8 <__udivmoddi4>
    5ecc:	ldr.w	lr, [sp, #4]
    5ed0:	ldrd	r2, r3, [sp, #8]
    5ed4:	add	sp, #16
    5ed6:	bx	lr

00005ed8 <__udivmoddi4>:
    5ed8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5edc:	mov	ip, r1
    5ede:	mov	r6, r1
    5ee0:	mov	r4, r0
    5ee2:	ldr	r5, [sp, #32]
    5ee4:	cmp	r3, #0
    5ee6:	bne.n	5f8a <__udivmoddi4+0xb2>
    5ee8:	cmp	r2, r1
    5eea:	mov	r7, r2
    5eec:	bls.n	5fc8 <__udivmoddi4+0xf0>
    5eee:	clz	lr, r2
    5ef2:	cmp.w	lr, #0
    5ef6:	beq.n	5f10 <__udivmoddi4+0x38>
    5ef8:	rsb	r4, lr, #32
    5efc:	lsr.w	r4, r0, r4
    5f00:	lsl.w	r6, r1, lr
    5f04:	orr.w	ip, r4, r6
    5f08:	lsl.w	r7, r2, lr
    5f0c:	lsl.w	r4, r0, lr
    5f10:	mov.w	r9, r7, lsr #16
    5f14:	lsrs	r2, r4, #16
    5f16:	udiv	r0, ip, r9
    5f1a:	uxth.w	r8, r7
    5f1e:	mls	r6, r9, r0, ip
    5f22:	orr.w	r6, r2, r6, lsl #16
    5f26:	mul.w	r3, r0, r8
    5f2a:	cmp	r3, r6
    5f2c:	bls.n	5f42 <__udivmoddi4+0x6a>
    5f2e:	adds	r6, r6, r7
    5f30:	add.w	r2, r0, #4294967295
    5f34:	bcs.w	617c <__udivmoddi4+0x2a4>
    5f38:	cmp	r3, r6
    5f3a:	bls.w	617c <__udivmoddi4+0x2a4>
    5f3e:	subs	r0, #2
    5f40:	add	r6, r7
    5f42:	subs	r6, r6, r3
    5f44:	uxth	r2, r4
    5f46:	udiv	r3, r6, r9
    5f4a:	mls	r6, r9, r3, r6
    5f4e:	orr.w	r4, r2, r6, lsl #16
    5f52:	mul.w	r8, r3, r8
    5f56:	cmp	r8, r4
    5f58:	bls.n	5f6e <__udivmoddi4+0x96>
    5f5a:	adds	r4, r4, r7
    5f5c:	add.w	r2, r3, #4294967295
    5f60:	bcs.w	6178 <__udivmoddi4+0x2a0>
    5f64:	cmp	r8, r4
    5f66:	bls.w	6178 <__udivmoddi4+0x2a0>
    5f6a:	subs	r3, #2
    5f6c:	add	r4, r7
    5f6e:	rsb	r4, r8, r4
    5f72:	orr.w	r0, r3, r0, lsl #16
    5f76:	movs	r1, #0
    5f78:	cmp	r5, #0
    5f7a:	beq.n	6042 <__udivmoddi4+0x16a>
    5f7c:	lsr.w	r4, r4, lr
    5f80:	movs	r3, #0
    5f82:	str	r4, [r5, #0]
    5f84:	str	r3, [r5, #4]
    5f86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f8a:	cmp	r3, r1
    5f8c:	bls.n	5f9e <__udivmoddi4+0xc6>
    5f8e:	cmp	r5, #0
    5f90:	beq.n	603e <__udivmoddi4+0x166>
    5f92:	movs	r1, #0
    5f94:	stmia.w	r5, {r0, r6}
    5f98:	mov	r0, r1
    5f9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f9e:	clz	r1, r3
    5fa2:	cmp	r1, #0
    5fa4:	bne.w	60c8 <__udivmoddi4+0x1f0>
    5fa8:	cmp	r3, r6
    5faa:	bcc.n	5fb2 <__udivmoddi4+0xda>
    5fac:	cmp	r2, r0
    5fae:	bhi.w	61a2 <__udivmoddi4+0x2ca>
    5fb2:	subs	r4, r0, r2
    5fb4:	sbc.w	r6, r6, r3
    5fb8:	movs	r0, #1
    5fba:	mov	ip, r6
    5fbc:	cmp	r5, #0
    5fbe:	beq.n	6042 <__udivmoddi4+0x16a>
    5fc0:	stmia.w	r5, {r4, ip}
    5fc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fc8:	cbnz	r2, 5fd0 <__udivmoddi4+0xf8>
    5fca:	movs	r7, #1
    5fcc:	udiv	r7, r7, r2
    5fd0:	clz	lr, r7
    5fd4:	cmp.w	lr, #0
    5fd8:	bne.n	6046 <__udivmoddi4+0x16e>
    5fda:	subs	r3, r6, r7
    5fdc:	mov.w	r8, r7, lsr #16
    5fe0:	uxth.w	ip, r7
    5fe4:	movs	r1, #1
    5fe6:	udiv	r0, r3, r8
    5fea:	lsrs	r2, r4, #16
    5fec:	mls	r6, r8, r0, r3
    5ff0:	orr.w	r6, r2, r6, lsl #16
    5ff4:	mul.w	r3, ip, r0
    5ff8:	cmp	r3, r6
    5ffa:	bls.n	600c <__udivmoddi4+0x134>
    5ffc:	adds	r6, r6, r7
    5ffe:	add.w	r2, r0, #4294967295
    6002:	bcs.n	600a <__udivmoddi4+0x132>
    6004:	cmp	r3, r6
    6006:	bhi.w	61a6 <__udivmoddi4+0x2ce>
    600a:	mov	r0, r2
    600c:	subs	r6, r6, r3
    600e:	uxth	r2, r4
    6010:	udiv	r3, r6, r8
    6014:	mls	r6, r8, r3, r6
    6018:	orr.w	r4, r2, r6, lsl #16
    601c:	mul.w	ip, ip, r3
    6020:	cmp	ip, r4
    6022:	bls.n	6034 <__udivmoddi4+0x15c>
    6024:	adds	r4, r4, r7
    6026:	add.w	r2, r3, #4294967295
    602a:	bcs.n	6032 <__udivmoddi4+0x15a>
    602c:	cmp	ip, r4
    602e:	bhi.w	619c <__udivmoddi4+0x2c4>
    6032:	mov	r3, r2
    6034:	rsb	r4, ip, r4
    6038:	orr.w	r0, r3, r0, lsl #16
    603c:	b.n	5f78 <__udivmoddi4+0xa0>
    603e:	mov	r1, r5
    6040:	mov	r0, r5
    6042:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6046:	rsb	r1, lr, #32
    604a:	lsl.w	r3, r6, lr
    604e:	lsl.w	r7, r7, lr
    6052:	lsr.w	r9, r0, r1
    6056:	mov.w	r8, r7, lsr #16
    605a:	lsrs	r6, r1
    605c:	orr.w	r9, r9, r3
    6060:	udiv	sl, r6, r8
    6064:	mov.w	r4, r9, lsr #16
    6068:	mls	r6, r8, sl, r6
    606c:	uxth.w	ip, r7
    6070:	orr.w	r3, r4, r6, lsl #16
    6074:	mul.w	r2, sl, ip
    6078:	cmp	r2, r3
    607a:	lsl.w	r4, r0, lr
    607e:	bls.n	6096 <__udivmoddi4+0x1be>
    6080:	adds	r3, r3, r7
    6082:	add.w	r1, sl, #4294967295
    6086:	bcs.w	6198 <__udivmoddi4+0x2c0>
    608a:	cmp	r2, r3
    608c:	bls.w	6198 <__udivmoddi4+0x2c0>
    6090:	sub.w	sl, sl, #2
    6094:	add	r3, r7
    6096:	subs	r3, r3, r2
    6098:	uxth.w	r9, r9
    609c:	udiv	r1, r3, r8
    60a0:	mls	r3, r8, r1, r3
    60a4:	orr.w	r3, r9, r3, lsl #16
    60a8:	mul.w	r6, r1, ip
    60ac:	cmp	r6, r3
    60ae:	bls.n	60c0 <__udivmoddi4+0x1e8>
    60b0:	adds	r3, r3, r7
    60b2:	add.w	r2, r1, #4294967295
    60b6:	bcs.n	6190 <__udivmoddi4+0x2b8>
    60b8:	cmp	r6, r3
    60ba:	bls.n	6190 <__udivmoddi4+0x2b8>
    60bc:	subs	r1, #2
    60be:	add	r3, r7
    60c0:	subs	r3, r3, r6
    60c2:	orr.w	r1, r1, sl, lsl #16
    60c6:	b.n	5fe6 <__udivmoddi4+0x10e>
    60c8:	rsb	lr, r1, #32
    60cc:	lsr.w	r4, r2, lr
    60d0:	lsls	r3, r1
    60d2:	orrs	r3, r4
    60d4:	lsr.w	r7, r0, lr
    60d8:	lsl.w	r4, r6, r1
    60dc:	mov.w	ip, r3, lsr #16
    60e0:	lsr.w	r6, r6, lr
    60e4:	orrs	r4, r7
    60e6:	udiv	r9, r6, ip
    60ea:	lsrs	r7, r4, #16
    60ec:	mls	r6, ip, r9, r6
    60f0:	uxth.w	r8, r3
    60f4:	orr.w	r6, r7, r6, lsl #16
    60f8:	mul.w	r7, r9, r8
    60fc:	cmp	r7, r6
    60fe:	lsl.w	r2, r2, r1
    6102:	lsl.w	sl, r0, r1
    6106:	bls.n	611a <__udivmoddi4+0x242>
    6108:	adds	r6, r6, r3
    610a:	add.w	r0, r9, #4294967295
    610e:	bcs.n	6194 <__udivmoddi4+0x2bc>
    6110:	cmp	r7, r6
    6112:	bls.n	6194 <__udivmoddi4+0x2bc>
    6114:	sub.w	r9, r9, #2
    6118:	add	r6, r3
    611a:	subs	r6, r6, r7
    611c:	uxth	r0, r4
    611e:	udiv	r4, r6, ip
    6122:	mls	r6, ip, r4, r6
    6126:	orr.w	r7, r0, r6, lsl #16
    612a:	mul.w	r8, r4, r8
    612e:	cmp	r8, r7
    6130:	bls.n	6142 <__udivmoddi4+0x26a>
    6132:	adds	r7, r7, r3
    6134:	add.w	r0, r4, #4294967295
    6138:	bcs.n	618c <__udivmoddi4+0x2b4>
    613a:	cmp	r8, r7
    613c:	bls.n	618c <__udivmoddi4+0x2b4>
    613e:	subs	r4, #2
    6140:	add	r7, r3
    6142:	orr.w	r0, r4, r9, lsl #16
    6146:	rsb	r7, r8, r7
    614a:	umull	r8, r9, r0, r2
    614e:	cmp	r7, r9
    6150:	mov	r4, r8
    6152:	mov	r6, r9
    6154:	bcc.n	6180 <__udivmoddi4+0x2a8>
    6156:	beq.n	61ac <__udivmoddi4+0x2d4>
    6158:	cbz	r5, 61b4 <__udivmoddi4+0x2dc>
    615a:	subs.w	r3, sl, r4
    615e:	sbc.w	r7, r7, r6
    6162:	lsl.w	lr, r7, lr
    6166:	lsrs	r3, r1
    6168:	lsrs	r7, r1
    616a:	orr.w	r3, lr, r3
    616e:	stmia.w	r5, {r3, r7}
    6172:	movs	r1, #0
    6174:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6178:	mov	r3, r2
    617a:	b.n	5f6e <__udivmoddi4+0x96>
    617c:	mov	r0, r2
    617e:	b.n	5f42 <__udivmoddi4+0x6a>
    6180:	subs.w	r4, r8, r2
    6184:	sbc.w	r6, r9, r3
    6188:	subs	r0, #1
    618a:	b.n	6158 <__udivmoddi4+0x280>
    618c:	mov	r4, r0
    618e:	b.n	6142 <__udivmoddi4+0x26a>
    6190:	mov	r1, r2
    6192:	b.n	60c0 <__udivmoddi4+0x1e8>
    6194:	mov	r9, r0
    6196:	b.n	611a <__udivmoddi4+0x242>
    6198:	mov	sl, r1
    619a:	b.n	6096 <__udivmoddi4+0x1be>
    619c:	subs	r3, #2
    619e:	add	r4, r7
    61a0:	b.n	6034 <__udivmoddi4+0x15c>
    61a2:	mov	r0, r1
    61a4:	b.n	5fbc <__udivmoddi4+0xe4>
    61a6:	subs	r0, #2
    61a8:	add	r6, r7
    61aa:	b.n	600c <__udivmoddi4+0x134>
    61ac:	cmp	sl, r8
    61ae:	bcc.n	6180 <__udivmoddi4+0x2a8>
    61b0:	mov	r6, r7
    61b2:	b.n	6158 <__udivmoddi4+0x280>
    61b4:	mov	r1, r5
    61b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61ba:	nop

000061bc <__aeabi_idiv0>:
    61bc:	bx	lr
    61be:	nop

000061c0 <___init_veneer>:
    61c0:	ldr.w	pc, [pc]	; 61c4 <___init_veneer+0x4>
    61c4:	.word	0x600016a5
	...

Disassembly of section .fini:

000061d0 <_fini>:
    61d0:	push	{r3, r4, r5, r6, r7, lr}
    61d2:	nop
